<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sanstyle</title>
  <subtitle>功有所不全 才有所不任 力有所不足</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sanstylemc.cn/"/>
  <updated>2018-06-16T09:26:22.095Z</updated>
  <id>http://www.sanstylemc.cn/</id>
  
  <author>
    <name>MC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>员工部门表综合查询</title>
    <link href="http://www.sanstylemc.cn/2018/06/16/%E5%91%98%E5%B7%A5%E9%83%A8%E9%97%A8%E8%A1%A8%E7%BB%BC%E5%90%88%E6%9F%A5%E8%AF%A2/"/>
    <id>http://www.sanstylemc.cn/2018/06/16/员工部门表综合查询/</id>
    <published>2018-06-16T09:25:46.000Z</published>
    <updated>2018-06-16T09:26:22.095Z</updated>
    
    <content type="html"><![CDATA[<p>员工部门表综合查询<br><a id="more"></a></p>
<h2 id="创建员工部门表"><a href="#创建员工部门表" class="headerlink" title="创建员工部门表"></a>创建员工部门表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> oa;</div><div class="line"><span class="keyword">USE</span> oa;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept(</div><div class="line">deptno <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</div><div class="line">dname <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</div><div class="line">loc <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> emp</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</div><div class="line">empno <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</div><div class="line">ename <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">job <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">CHECK</span> (job <span class="keyword">IN</span> (<span class="string">'CLERK'</span>,<span class="string">'SALESMAN'</span>,<span class="string">'MANAGER'</span>,<span class="string">'SALESMAN'</span>,<span class="string">'ANALYST'</span>)),</div><div class="line">mgp <span class="built_in">INT</span> ,</div><div class="line">hiredate DATETIME ,</div><div class="line">sal <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</div><div class="line">comm <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</div><div class="line">DEPTNO <span class="built_in">INT</span> FOREIGN <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> dept(deptno)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept <span class="keyword">VALUES</span> (<span class="number">10</span>,<span class="string">'ACCOUNTING'</span>,<span class="string">'NEWTORK'</span>)</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept <span class="keyword">VALUES</span> (<span class="number">20</span>,<span class="string">'RESEARCH'</span>,<span class="string">'DALLAS'</span>)</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept <span class="keyword">VALUES</span> (<span class="number">30</span>,<span class="string">'SALES'</span>,<span class="string">'CHICAGO'</span>)</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept <span class="keyword">VALUES</span> (<span class="number">40</span>,<span class="string">'OPERATIONS'</span>,<span class="string">'BOSTON'</span>)</div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7369</span>,<span class="string">'SMITH'</span>,<span class="string">'CLERK'</span>,<span class="number">7902</span>,<span class="string">'1980-12-17'</span>,<span class="number">1640</span>,<span class="literal">NULL</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7499</span>,<span class="string">'ALLEN'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="string">'1981-2-20'</span>,<span class="number">11400</span>,<span class="number">300</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7521</span>,<span class="string">'WARD'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="string">'1981-2-22'</span>,<span class="number">5200</span>,<span class="number">500</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7566</span>,<span class="string">'JOENS'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="string">'1981-4-2'</span>,<span class="number">7015</span>,<span class="literal">NULL</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7654</span>,<span class="string">'MARTIN'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="string">'1981-9-28'</span>,<span class="number">5200</span>,<span class="number">1400</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7698</span>,<span class="string">'BLAKE'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="string">'1981-5-1'</span>,<span class="number">5900</span>,<span class="literal">NULL</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7782</span>,<span class="string">'CLARK'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="string">'1981-6-9'</span>,<span class="number">2470</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7788</span>,<span class="string">'SCOTT'</span>,<span class="string">'ANALYST'</span>,<span class="number">7566</span>,<span class="string">'1987-4-19'</span>,<span class="number">3040</span>,<span class="literal">NULL</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7844</span>,<span class="string">'TURNER'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="string">'1980-12-17'</span>,<span class="number">6200</span>,<span class="number">0</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7876</span>,<span class="string">'ADAMS'</span>,<span class="string">'CLERK'</span>,<span class="number">7788</span>,<span class="string">'1981-9-8'</span>,<span class="number">2240</span>,<span class="literal">NULL</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7900</span>,<span class="string">'JAMES'</span>,<span class="string">'CLERK'</span>,<span class="number">7698</span>,<span class="string">'1987-5-23'</span>,<span class="number">4000</span>,<span class="literal">NULL</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7902</span>,<span class="string">'FORD'</span>,<span class="string">'ANALYST'</span>,<span class="number">7566</span>,<span class="string">'1981-12-3'</span>,<span class="number">3040</span>,<span class="literal">NULL</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7934</span>,<span class="string">'MILLER'</span>,<span class="string">'CLERK'</span>,<span class="number">7782</span>,<span class="string">'1982-12-3'</span>,<span class="number">2620</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</div></pre></td></tr></table></figure>
<h2 id="查询20部门的所有员工信息。"><a href="#查询20部门的所有员工信息。" class="headerlink" title="查询20部门的所有员工信息。"></a>查询20部门的所有员工信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">20</span>;</div></pre></td></tr></table></figure>
<h2 id="查询所有工种为CLERK的员工的员工号、员工名和部门号。"><a href="#查询所有工种为CLERK的员工的员工号、员工名和部门号。" class="headerlink" title="查询所有工种为CLERK的员工的员工号、员工名和部门号。"></a>查询所有工种为CLERK的员工的员工号、员工名和部门号。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> empno,ename,deptno <span class="keyword">from</span> emp <span class="keyword">where</span> job=<span class="string">'CLERK'</span>;</div></pre></td></tr></table></figure>
<h2 id="查询奖金（COMM）高于工资（SAL）的员工信息。"><a href="#查询奖金（COMM）高于工资（SAL）的员工信息。" class="headerlink" title="查询奖金（COMM）高于工资（SAL）的员工信息。"></a>查询奖金（COMM）高于工资（SAL）的员工信息。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">isnull</span>(comm,<span class="number">0</span>)&gt;sal</div></pre></td></tr></table></figure>
<h2 id="查询奖金高于工资的20-的员工信息。"><a href="#查询奖金高于工资的20-的员工信息。" class="headerlink" title="查询奖金高于工资的20%的员工信息。"></a>查询奖金高于工资的20%的员工信息。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">isnull</span>(comm,<span class="number">0</span>)&gt;sal*<span class="number">0.2</span></div></pre></td></tr></table></figure>
<h2 id="查询所有工种不是MANAGER和CLERK，且工资大于或等于2000的员工的详细信息。"><a href="#查询所有工种不是MANAGER和CLERK，且工资大于或等于2000的员工的详细信息。" class="headerlink" title="查询所有工种不是MANAGER和CLERK，且工资大于或等于2000的员工的详细信息。"></a>查询所有工种不是MANAGER和CLERK，且工资大于或等于2000的员工的详细信息。</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> job <span class="keyword">not</span> <span class="keyword">in</span>(<span class="string">'MANAGER'</span>,<span class="string">'CLERK'</span>) </div><div class="line"><span class="keyword">and</span> sal&gt;=<span class="number">2000</span></div></pre></td></tr></table></figure>
<h2 id="查询有奖金的员工的不同工种。"><a href="#查询有奖金的员工的不同工种。" class="headerlink" title="查询有奖金的员工的不同工种。"></a>查询有奖金的员工的不同工种。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> job <span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> comm <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></div></pre></td></tr></table></figure>
<h2 id="查询没有奖金或奖金低于100的员工信息。"><a href="#查询没有奖金或奖金低于100的员工信息。" class="headerlink" title="查询没有奖金或奖金低于100的员工信息。"></a>查询没有奖金或奖金低于100的员工信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * </div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> comm <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">or</span> comm&lt;<span class="number">100</span></div></pre></td></tr></table></figure>
<h2 id="查询各月倒数第3天-倒数第2天-入职的员工信息。"><a href="#查询各月倒数第3天-倒数第2天-入职的员工信息。" class="headerlink" title="查询各月倒数第3天(倒数第2天)入职的员工信息。"></a>查询各月倒数第3天(倒数第2天)入职的员工信息。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> <span class="keyword">DATENAME</span>(<span class="keyword">day</span>,hiredate+<span class="number">3</span>)=<span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="查询工龄大于或等于25年的员工信息。"><a href="#查询工龄大于或等于25年的员工信息。" class="headerlink" title="查询工龄大于或等于25年的员工信息。"></a>查询工龄大于或等于25年的员工信息。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename 姓名,hiredate 雇用日期,<span class="keyword">datediff</span>(<span class="keyword">year</span>,hiredate,<span class="keyword">getdate</span>()) 工资</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> <span class="keyword">datediff</span>(<span class="keyword">year</span>,hiredate,<span class="keyword">getdate</span>())&gt;=<span class="number">25</span></div></pre></td></tr></table></figure>
<h2 id="查询员工信息，要求以首字母大写的方式显示所有员工的姓名。"><a href="#查询员工信息，要求以首字母大写的方式显示所有员工的姓名。" class="headerlink" title="查询员工信息，要求以首字母大写的方式显示所有员工的姓名。"></a>查询员工信息，要求以首字母大写的方式显示所有员工的姓名。</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select upper(<span class="name">SUBSTRING</span>(<span class="name">ename</span>,<span class="number">1</span>,<span class="number">1</span>))+lower(<span class="name">substring</span>(<span class="name">ename</span>,<span class="number">2</span>,(<span class="name">len</span>(<span class="name">ename</span>)<span class="number">-1</span>)))</div><div class="line">from emp</div></pre></td></tr></table></figure>
<h2 id="查询员工名正好为6个字符的员工的信息。"><a href="#查询员工名正好为6个字符的员工的信息。" class="headerlink" title="查询员工名正好为6个字符的员工的信息。"></a>查询员工名正好为6个字符的员工的信息。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="title">len</span>(<span class="params">ename</span>)</span>=<span class="number">6</span></div></pre></td></tr></table></figure>
<h2 id="查询员工名字中不包含字母“S”的员工。"><a href="#查询员工名字中不包含字母“S”的员工。" class="headerlink" title="查询员工名字中不包含字母“Ｓ”的员工。"></a>查询员工名字中不包含字母“Ｓ”的员工。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">'%Ｓ%'</span></div></pre></td></tr></table></figure>
<h2 id="查询员工姓名的第二字母为“M”的员工信息。"><a href="#查询员工姓名的第二字母为“M”的员工信息。" class="headerlink" title="查询员工姓名的第二字母为“M”的员工信息。"></a>查询员工姓名的第二字母为“M”的员工信息。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'_M%'</span></div></pre></td></tr></table></figure>
<h2 id="查询所有员工姓名的前三个字符。"><a href="#查询所有员工姓名的前三个字符。" class="headerlink" title="查询所有员工姓名的前三个字符。"></a>查询所有员工姓名的前三个字符。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename 员工姓名,<span class="keyword">substring</span>(ename,<span class="number">1</span>,<span class="number">3</span>) 员工姓名的前三个字符</div><div class="line"><span class="keyword">from</span> emp</div></pre></td></tr></table></figure>
<h2 id="查询员工的姓名和入职日期，并按入职日期从先到后进行排序。"><a href="#查询员工的姓名和入职日期，并按入职日期从先到后进行排序。" class="headerlink" title="查询员工的姓名和入职日期，并按入职日期从先到后进行排序。"></a>查询员工的姓名和入职日期，并按入职日期从先到后进行排序。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename,hiredate</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> hiredate</div></pre></td></tr></table></figure>
<h2 id="显示所有员工的姓名、工种、工资和奖金，按工种降序排序，若工种相同则按工资升序排序。"><a href="#显示所有员工的姓名、工种、工资和奖金，按工种降序排序，若工种相同则按工资升序排序。" class="headerlink" title="显示所有员工的姓名、工种、工资和奖金，按工种降序排序，若工种相同则按工资升序排序。"></a>显示所有员工的姓名、工种、工资和奖金，按工种降序排序，若工种相同则按工资升序排序。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename,job,sal,comm</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> job <span class="keyword">desc</span></div></pre></td></tr></table></figure>
<h2 id="查询在2月份入职的所有员工信息。"><a href="#查询在2月份入职的所有员工信息。" class="headerlink" title="查询在2月份入职的所有员工信息。"></a>查询在2月份入职的所有员工信息。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp</div><div class="line"><span class="function"><span class="keyword">where</span> <span class="title">datename</span>(<span class="params">mm,hiredate</span>)</span>=<span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="查询至少有一个员工的部门信息。"><a href="#查询至少有一个员工的部门信息。" class="headerlink" title="查询至少有一个员工的部门信息。"></a>查询至少有一个员工的部门信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> d.dname,<span class="built_in">count</span>(empno) 部门人数</div><div class="line"><span class="keyword">from</span> emp <span class="built_in">e</span></div><div class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> d.deptno=<span class="built_in">e</span>.deptno</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.dname,<span class="built_in">e</span>.deptno</div><div class="line"><span class="keyword">having</span> <span class="built_in">count</span>(empno)&gt;=<span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="查询至少有两个员工的部门信息。"><a href="#查询至少有两个员工的部门信息。" class="headerlink" title="查询至少有两个员工的部门信息。"></a>查询至少有两个员工的部门信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> d.dname,<span class="built_in">count</span>(empno) 部门人数</div><div class="line"><span class="keyword">from</span> emp <span class="built_in">e</span></div><div class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> d.deptno=<span class="built_in">e</span>.deptno</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.dname,<span class="built_in">e</span>.deptno</div><div class="line"><span class="keyword">having</span> <span class="built_in">count</span>(empno)&gt;<span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="查询工资比SMITH员工工资高的所有员工信息。"><a href="#查询工资比SMITH员工工资高的所有员工信息。" class="headerlink" title="查询工资比SMITH员工工资高的所有员工信息。"></a>查询工资比SMITH员工工资高的所有员工信息。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> sal&gt;(</div><div class="line"><span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">'SMITH'</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询所有员工的姓名及其直接上级的姓名。"><a href="#查询所有员工的姓名及其直接上级的姓名。" class="headerlink" title="查询所有员工的姓名及其直接上级的姓名。"></a>查询所有员工的姓名及其直接上级的姓名。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename 员工的姓名,(</div><div class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.empno=e1.mgp</div><div class="line">) 直接上级</div><div class="line"><span class="keyword">from</span> emp e1</div></pre></td></tr></table></figure>
<h2 id="查询入职日期早于其直接上级领导的所有员工信息。"><a href="#查询入职日期早于其直接上级领导的所有员工信息。" class="headerlink" title="查询入职日期早于其直接上级领导的所有员工信息。"></a>查询入职日期早于其直接上级领导的所有员工信息。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename 员工的姓名,hiredate 入职日期,(</div><div class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.empno=e1.mgp</div><div class="line">) 直接上级,(</div><div class="line"><span class="keyword">select</span> hiredate <span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.empno=e1.mgp</div><div class="line">) 直接上级入职日期</div><div class="line"><span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">where</span> e1.hiredate&lt;(<span class="keyword">select</span> hiredate </div><div class="line"><span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.empno=e1.mgp</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询所有部门及其员工信息，包括那些没有员工的部门。"><a href="#查询所有部门及其员工信息，包括那些没有员工的部门。" class="headerlink" title="查询所有部门及其员工信息，包括那些没有员工的部门。"></a>查询所有部门及其员工信息，包括那些没有员工的部门。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> dept.dname,emp.ename </div><div class="line"><span class="keyword">from</span> dept</div><div class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp <span class="keyword">on</span> emp.deptno=dept.deptno</div></pre></td></tr></table></figure>
<h2 id="查询所有员工及其部门信息，包括那些还不属于任何部门的员工。"><a href="#查询所有员工及其部门信息，包括那些还不属于任何部门的员工。" class="headerlink" title="查询所有员工及其部门信息，包括那些还不属于任何部门的员工。"></a>查询所有员工及其部门信息，包括那些还不属于任何部门的员工。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> dept.dname,emp.ename </div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.deptno=dept.deptno</div></pre></td></tr></table></figure>
<h2 id="查询所有工种为CLERK的员工的姓名及其部门名称。"><a href="#查询所有工种为CLERK的员工的姓名及其部门名称。" class="headerlink" title="查询所有工种为CLERK的员工的姓名及其部门名称。"></a>查询所有工种为CLERK的员工的姓名及其部门名称。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> dept.dname,emp.ename,emp.job </div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.deptno=dept.deptno</div><div class="line"><span class="keyword">where</span> job=<span class="string">'CLERK'</span></div></pre></td></tr></table></figure>
<h2 id="查询最低工资大于2500的各种工作。"><a href="#查询最低工资大于2500的各种工作。" class="headerlink" title="查询最低工资大于2500的各种工作。"></a>查询最低工资大于2500的各种工作。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> job,sal </div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> sal&gt;<span class="number">2500</span></div></pre></td></tr></table></figure>
<h2 id="查询平均工资低于2000的部门及其员工信息。"><a href="#查询平均工资低于2000的部门及其员工信息。" class="headerlink" title="查询平均工资低于2000的部门及其员工信息。"></a>查询平均工资低于2000的部门及其员工信息。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select *</div><div class="line"><span class="keyword">from</span> dept left outer join emp on dept.<span class="attribute">deptno</span>=emp.deptno</div><div class="line">where dept.deptno <span class="keyword">in</span> (</div><div class="line">select deptno <span class="keyword">from</span> emp</div><div class="line">group by deptno</div><div class="line">having avg(sal)&lt;2000)</div></pre></td></tr></table></figure>
<h2 id="查询在SALES部门工作的员工的姓名信息。"><a href="#查询在SALES部门工作的员工的姓名信息。" class="headerlink" title="查询在SALES部门工作的员工的姓名信息。"></a>查询在SALES部门工作的员工的姓名信息。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">表连接</div><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> dept <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp <span class="keyword">on</span> dept.deptno=emp.deptno</div><div class="line"><span class="keyword">where</span> dept.dname=<span class="string">'SALES'</span></div><div class="line">子查询</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp </div><div class="line"><span class="keyword">where</span> emp.deptno=(</div><div class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> dept <span class="keyword">where</span> dname=<span class="string">'SALES'</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询工资高于公司平均工资的所有员工信息。"><a href="#查询工资高于公司平均工资的所有员工信息。" class="headerlink" title="查询工资高于公司平均工资的所有员工信息。"></a>查询工资高于公司平均工资的所有员工信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> sal&gt;(</div><div class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(sal)</div><div class="line"><span class="keyword">from</span> emp)</div></pre></td></tr></table></figure>
<h2 id="查询出与SMITH员工从事相同工作的所有员工信息。"><a href="#查询出与SMITH员工从事相同工作的所有员工信息。" class="headerlink" title="查询出与SMITH员工从事相同工作的所有员工信息。"></a>查询出与SMITH员工从事相同工作的所有员工信息。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> job = (</div><div class="line"><span class="keyword">select</span> job </div><div class="line"><span class="keyword">from</span> emp </div><div class="line"><span class="keyword">where</span> ename=<span class="string">'SMITH'</span>)</div></pre></td></tr></table></figure>
<h2 id="列出工资等于30部门中某个员工的工资的所有员工的姓名和工资。"><a href="#列出工资等于30部门中某个员工的工资的所有员工的姓名和工资。" class="headerlink" title="列出工资等于30部门中某个员工的工资的所有员工的姓名和工资。"></a>列出工资等于30部门中某个员工的工资的所有员工的姓名和工资。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> sal <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> sal</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> deptno=<span class="number">30</span>) <span class="keyword">and</span> deptno!=<span class="number">30</span></div></pre></td></tr></table></figure>
<h2 id="查询工资高于30部门工作的所有员工的工资的员工姓名和工资。"><a href="#查询工资高于30部门工作的所有员工的工资的员工姓名和工资。" class="headerlink" title="查询工资高于30部门工作的所有员工的工资的员工姓名和工资。"></a>查询工资高于30部门工作的所有员工的工资的员工姓名和工资。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> sal &gt; <span class="keyword">all</span>(</div><div class="line"><span class="keyword">select</span> sal</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> deptno=<span class="number">30</span>)</div></pre></td></tr></table></figure>
<h2 id="查询每个部门中的员工数量、平均工资和平均工作年限。"><a href="#查询每个部门中的员工数量、平均工资和平均工作年限。" class="headerlink" title="查询每个部门中的员工数量、平均工资和平均工作年限。"></a>查询每个部门中的员工数量、平均工资和平均工作年限。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> dname 部门,<span class="keyword">count</span>(ename) 员工数量,<span class="keyword">isnull</span>(<span class="keyword">avg</span>(sal),<span class="number">0</span>) 平均工资,</div><div class="line"><span class="keyword">isnull</span>(<span class="keyword">avg</span>(<span class="keyword">datediff</span>(yy,hiredate,<span class="keyword">getdate</span>())),<span class="number">0</span>) 平均工作年限</div><div class="line"><span class="keyword">from</span> dept d </div><div class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> d.deptno=e.deptno</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.dname</div></pre></td></tr></table></figure>
<h2 id="查询从事同一种工作但不属于同一部门的员工信息。"><a href="#查询从事同一种工作但不属于同一部门的员工信息。" class="headerlink" title="查询从事同一种工作但不属于同一部门的员工信息。"></a>查询从事同一种工作但不属于同一部门的员工信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">where</span> e1.job <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> e2.job</div><div class="line"><span class="keyword">from</span> emp e2</div><div class="line"><span class="keyword">where</span> e2.deptno != e1.deptno </div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询各个部门的详细信息以及部门人数、部门平均工资。"><a href="#查询各个部门的详细信息以及部门人数、部门平均工资。" class="headerlink" title="查询各个部门的详细信息以及部门人数、部门平均工资。"></a>查询各个部门的详细信息以及部门人数、部门平均工资。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> d.dname 部门名称,d.deptno 部门编号,<span class="built_in">count</span>(<span class="built_in">e</span>.empno) 人数,<span class="built_in">avg</span>(<span class="built_in">e</span>.sal) 平均工资 </div><div class="line"><span class="keyword">from</span> dept d </div><div class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp <span class="built_in">e</span> <span class="keyword">on</span> d.deptno=<span class="built_in">e</span>.deptno</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.deptno,d.dname</div></pre></td></tr></table></figure>
<h2 id="查询各种工作的最低工资。"><a href="#查询各种工作的最低工资。" class="headerlink" title="查询各种工作的最低工资。"></a>查询各种工作的最低工资。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select job 工种,min(sal) 最低工资</div><div class="line"><span class="keyword">from</span> emp</div><div class="line">group by job</div></pre></td></tr></table></figure>
<h2 id="查询各个部门中不同工种的最高工资。"><a href="#查询各个部门中不同工种的最高工资。" class="headerlink" title="查询各个部门中不同工种的最高工资。"></a>查询各个部门中不同工种的最高工资。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select dname 部门名称,job 工种,max(isnull(sal,0)) 最高工资</div><div class="line"><span class="keyword">from</span> dept d left join emp e on d.<span class="attribute">deptno</span>=e.deptno</div><div class="line">group by job,dname</div></pre></td></tr></table></figure>
<h2 id="查询10号部门员工及其领导的信息。"><a href="#查询10号部门员工及其领导的信息。" class="headerlink" title="查询10号部门员工及其领导的信息。"></a>查询10号部门员工及其领导的信息。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> deptno 部门,ename 姓名 ,(<span class="keyword">select</span> e2.ename <span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.mgp=e1.empno) 上级领导</div><div class="line"><span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">where</span> deptno=<span class="number">10</span></div></pre></td></tr></table></figure>
<h2 id="查询各个部门的人数及平均工资。"><a href="#查询各个部门的人数及平均工资。" class="headerlink" title="查询各个部门的人数及平均工资。"></a>查询各个部门的人数及平均工资。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select dname 部门名称,count(ename) 部门人数,avg(isnull(sal,0)) 平均工资</div><div class="line"><span class="keyword">from</span> dept d left outer join emp e on d.<span class="attribute">deptno</span>=e.deptno</div><div class="line">group by d.dname</div></pre></td></tr></table></figure>
<h2 id="查询工资为某个部门平均工资的员工的信息。"><a href="#查询工资为某个部门平均工资的员工的信息。" class="headerlink" title="查询工资为某个部门平均工资的员工的信息。"></a>查询工资为某个部门平均工资的员工的信息。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select * <span class="keyword">from</span> emp</div><div class="line">where sal <span class="keyword">in</span>(</div><div class="line">select avg(sal)</div><div class="line"><span class="keyword">from</span> emp<span class="built_in"> group </span>by deptno</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询工资高于本部门平均工资的员工的信息。"><a href="#查询工资高于本部门平均工资的员工的信息。" class="headerlink" title="查询工资高于本部门平均工资的员工的信息。"></a>查询工资高于本部门平均工资的员工的信息。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">where</span> sal&gt;(</div><div class="line"><span class="function"><span class="keyword">select</span> <span class="title">avg</span>(<span class="params">sal</span>)</span></div><div class="line"><span class="function"><span class="keyword">from</span> emp e2</span></div><div class="line"><span class="function"><span class="keyword">where</span> e2.deptno</span>=e1.deptno</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询工资高于本部门平均工资的员工的信息及其部门的平均工资。"><a href="#查询工资高于本部门平均工资的员工的信息及其部门的平均工资。" class="headerlink" title="查询工资高于本部门平均工资的员工的信息及其部门的平均工资。"></a>查询工资高于本部门平均工资的员工的信息及其部门的平均工资。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *,(<span class="function"><span class="keyword">select</span> <span class="title">avg</span>(<span class="params">sal</span>) <span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.deptno</span>=e1.deptno) 部门平均工资</div><div class="line"><span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">where</span> sal&gt;(</div><div class="line"><span class="function"><span class="keyword">select</span> <span class="title">avg</span>(<span class="params">sal</span>) <span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.deptno</span>=e1.deptno</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询工资高于20号部门某个员工工资的员工的信息。"><a href="#查询工资高于20号部门某个员工工资的员工的信息。" class="headerlink" title="查询工资高于20号部门某个员工工资的员工的信息。"></a>查询工资高于20号部门某个员工工资的员工的信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">where</span> sal&gt; <span class="keyword">any</span>(</div><div class="line"><span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="built_in">e</span> <span class="keyword">where</span> deptno=<span class="number">20</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="统计各个工种的员工人数与平均工资。"><a href="#统计各个工种的员工人数与平均工资。" class="headerlink" title="统计各个工种的员工人数与平均工资。"></a>统计各个工种的员工人数与平均工资。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select job 工种,count(empno) 员工人数,avg(sal) 平均工资</div><div class="line"><span class="keyword">from</span> emp</div><div class="line">group by job</div></pre></td></tr></table></figure>
<h2 id="统计每个部门中各工种的人数与平均工资。"><a href="#统计每个部门中各工种的人数与平均工资。" class="headerlink" title="统计每个部门中各工种的人数与平均工资。"></a>统计每个部门中各工种的人数与平均工资。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select dname 部门,job 工种,count(empno) 人数,avg(isnull(sal,0)) 平均工资</div><div class="line"><span class="keyword">from</span> dept d left outer join emp e on d.<span class="attribute">deptno</span>=e.deptno</div><div class="line">group by job,dname</div></pre></td></tr></table></figure>
<h2 id="查询其他部门中工资、奖金与30号部门某员工工资、奖金都相同的员工的信息。没有查询结果"><a href="#查询其他部门中工资、奖金与30号部门某员工工资、奖金都相同的员工的信息。没有查询结果" class="headerlink" title="查询其他部门中工资、奖金与30号部门某员工工资、奖金都相同的员工的信息。没有查询结果"></a>查询其他部门中工资、奖金与30号部门某员工工资、奖金都相同的员工的信息。没有查询结果</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp <span class="built_in">e</span></div><div class="line"><span class="keyword">where</span> isnull(sal,<span class="number">0</span>)+isnull(comm,<span class="number">0</span>) <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> isnull(sal,<span class="number">0</span>)+isnull(comm,<span class="number">0</span>)</div><div class="line"><span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">where</span> e1.deptno=<span class="number">30</span> <span class="keyword">and</span> <span class="built_in">e</span>.sal=e1.sal <span class="keyword">and</span> <span class="built_in">e</span>.comm=e1.comm <span class="keyword">and</span> <span class="built_in">e</span>.deptno!=<span class="number">30</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询部门人数大于5的部门的员工信息。"><a href="#查询部门人数大于5的部门的员工信息。" class="headerlink" title="查询部门人数大于5的部门的员工信息。"></a>查询部门人数大于5的部门的员工信息。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select * <span class="keyword">from</span> emp </div><div class="line">where deptno <span class="keyword">in</span>(</div><div class="line">select deptno</div><div class="line"><span class="keyword">from</span> emp</div><div class="line">group by deptno</div><div class="line">having count(empno)&gt;5)</div></pre></td></tr></table></figure>
<h2 id="查询所有员工工资都大于1000的部门的信息。"><a href="#查询所有员工工资都大于1000的部门的信息。" class="headerlink" title="查询所有员工工资都大于1000的部门的信息。"></a>查询所有员工工资都大于1000的部门的信息。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">select *</div><div class="line"><span class="keyword">from</span> dept d</div><div class="line">where deptno <span class="keyword">in</span> (</div><div class="line">select deptno <span class="keyword">from</span> emp e</div><div class="line">group by deptno</div><div class="line">having min(sal)&gt;1000</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询所有员工工资都大于1000的部门的信息及其员工信息。"><a href="#查询所有员工工资都大于1000的部门的信息及其员工信息。" class="headerlink" title="查询所有员工工资都大于1000的部门的信息及其员工信息。"></a>查询所有员工工资都大于1000的部门的信息及其员工信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> dept d <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp <span class="built_in">e</span> <span class="keyword">on</span> d.deptno=<span class="built_in">e</span>.deptno</div><div class="line"><span class="keyword">where</span> <span class="built_in">e</span>.deptno <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno</div><div class="line"><span class="keyword">having</span> <span class="built_in">min</span>(sal)&gt;<span class="number">1000</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询所有员工工资都在900～3000之间的部门的信息。"><a href="#查询所有员工工资都在900～3000之间的部门的信息。" class="headerlink" title="查询所有员工工资都在900～3000之间的部门的信息。"></a>查询所有员工工资都在900～3000之间的部门的信息。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select * <span class="keyword">from</span> dept</div><div class="line">where deptno <span class="keyword">in</span>(</div><div class="line">select deptno <span class="keyword">from</span> emp </div><div class="line">group by deptno </div><div class="line">having min(sal)&gt;900 <span class="keyword">and</span> max(sal)&lt;3000</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询有工资在900～3000之间的员工所在部门的员工信息。"><a href="#查询有工资在900～3000之间的员工所在部门的员工信息。" class="headerlink" title="查询有工资在900～3000之间的员工所在部门的员工信息。"></a>查询有工资在900～3000之间的员工所在部门的员工信息。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select * <span class="keyword">from</span> emp</div><div class="line">where deptno <span class="keyword">in</span>(</div><div class="line">select deptno <span class="keyword">from</span> emp </div><div class="line">group by deptno </div><div class="line">having min(sal)&gt;900 <span class="keyword">and</span> max(sal)&lt;3000</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询每个员工的领导所在部门的信息。"><a href="#查询每个员工的领导所在部门的信息。" class="headerlink" title="查询每个员工的领导所在部门的信息。"></a>查询每个员工的领导所在部门的信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename 员工,(</div><div class="line"><span class="keyword">select</span> e1.ename <span class="keyword">from</span> emp e1 <span class="keyword">where</span> emp.mgp=e1.empno</div><div class="line">) 领导,(</div><div class="line"><span class="keyword">select</span> d.dname</div><div class="line"><span class="keyword">from</span> emp <span class="built_in">e</span> <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> <span class="built_in">e</span>.deptno=d.deptno</div><div class="line"><span class="keyword">where</span> emp.mgp=<span class="built_in">e</span>.empno </div><div class="line">) 领导所在部门</div><div class="line"><span class="keyword">from</span> emp</div></pre></td></tr></table></figure>
<h2 id="查询人数最多的部门信息。"><a href="#查询人数最多的部门信息。" class="headerlink" title="查询人数最多的部门信息。"></a>查询人数最多的部门信息。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select * <span class="keyword">from</span> dept</div><div class="line">where deptno =(</div><div class="line">select top 1 deptno</div><div class="line"><span class="keyword">from</span> emp</div><div class="line">group by deptno</div><div class="line">order by -count(empno))</div></pre></td></tr></table></figure>
<h2 id="查询30号部门中工资排序前3名的员工信息。"><a href="#查询30号部门中工资排序前3名的员工信息。" class="headerlink" title="查询30号部门中工资排序前3名的员工信息。"></a>查询30号部门中工资排序前3名的员工信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> top <span class="number">3</span> *</div><div class="line"><span class="keyword">from</span> emp </div><div class="line"><span class="keyword">where</span> deptno=<span class="number">30</span> </div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> -sal</div></pre></td></tr></table></figure>
<h2 id="查询所有员工中工资排序在5到10名之间的员工信息。"><a href="#查询所有员工中工资排序在5到10名之间的员工信息。" class="headerlink" title="查询所有员工中工资排序在5到10名之间的员工信息。"></a>查询所有员工中工资排序在5到10名之间的员工信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> top <span class="number">5</span> *</div><div class="line"><span class="keyword">from</span> (</div><div class="line"><span class="keyword">select</span> top <span class="number">10</span> *</div><div class="line"><span class="keyword">from</span> emp </div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> -sal) <span class="built_in">e</span></div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal</div></pre></td></tr></table></figure>
<h2 id="查询指定年份之间入职的员工信息。-1980-1985"><a href="#查询指定年份之间入职的员工信息。-1980-1985" class="headerlink" title="查询指定年份之间入职的员工信息。(1980-1985)"></a>查询指定年份之间入职的员工信息。(1980-1985)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> <span class="keyword">datename</span>(<span class="keyword">year</span>,hiredate) <span class="keyword">between</span> <span class="number">1980</span> <span class="keyword">and</span> <span class="number">1985</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;员工部门表综合查询&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL选择题</title>
    <link href="http://www.sanstylemc.cn/2018/06/06/MySQL%E9%80%89%E6%8B%A9%E9%A2%98/"/>
    <id>http://www.sanstylemc.cn/2018/06/06/MySQL选择题/</id>
    <published>2018-06-06T13:53:21.000Z</published>
    <updated>2018-06-07T02:37:17.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="向数据表中插入一条记录用以下哪一项-B"><a href="#向数据表中插入一条记录用以下哪一项-B" class="headerlink" title="向数据表中插入一条记录用以下哪一项(B)"></a>向数据表中插入一条记录用以下哪一项(<strong>B</strong>)</h2><p>A、CREATE<br>B、INSERT<br>C、SAVE<br>D、UPDATE<br><a id="more"></a></p>
<h2 id="如果只需要返回匹配的列，则应当使用哪种连接-A"><a href="#如果只需要返回匹配的列，则应当使用哪种连接-A" class="headerlink" title="如果只需要返回匹配的列，则应当使用哪种连接(A)"></a>如果只需要返回匹配的列，则应当使用哪种连接(<strong>A</strong>)</h2><p>A、内连接<br>B、交叉连接<br>C、左连接<br>D、全连接</p>
<h2 id="下聚合函数求数据总和的是-B"><a href="#下聚合函数求数据总和的是-B" class="headerlink" title="下聚合函数求数据总和的是(B)"></a>下聚合函数求数据总和的是(<strong>B</strong>)</h2><p>A、MAX<br>B、SUM<br>C、COUNT<br>D、AVG</p>
<h2 id="SQL语句中的条件用以下哪一项来表达-C"><a href="#SQL语句中的条件用以下哪一项来表达-C" class="headerlink" title="SQL语句中的条件用以下哪一项来表达(C)"></a>SQL语句中的条件用以下哪一项来表达(<strong>C</strong>)</h2><p>A、THEN<br>B、WHILE<br>C、WHERE<br>D、IF</p>
<h2 id="修改数据库表结构用以下哪一项-D"><a href="#修改数据库表结构用以下哪一项-D" class="headerlink" title="修改数据库表结构用以下哪一项(D)"></a>修改数据库表结构用以下哪一项(<strong>D</strong>)</h2><p>A、UPDATE<br>B、CREATE<br>C、UPDATED<br>D、ALTER</p>
<h2 id="SELECT语句的完整语法较复杂，但至少包括的部分是-B"><a href="#SELECT语句的完整语法较复杂，但至少包括的部分是-B" class="headerlink" title="SELECT语句的完整语法较复杂，但至少包括的部分是(B)"></a>SELECT语句的完整语法较复杂，但至少包括的部分是(<strong>B</strong>)</h2><p>A、仅SELECT<br>B、SELECT， FROM<br>C、SELECT， GROUP<br>D、SELECT，INTO</p>
<h2 id="以下语句错误的是-C"><a href="#以下语句错误的是-C" class="headerlink" title="以下语句错误的是(C)"></a>以下语句错误的是(<strong>C</strong>)</h2><p>A、select sal+1 from emp;<br>B、select sal<em>10, sal</em>deptno from emp;<br>C、不能使用运算符号<br>D、select sal<em>10, deptno</em>10 from emp;</p>
<h2 id="若想限定某列在表中不允许出现重复的数据且不能为空值，应当使用-B-约束完成。"><a href="#若想限定某列在表中不允许出现重复的数据且不能为空值，应当使用-B-约束完成。" class="headerlink" title="若想限定某列在表中不允许出现重复的数据且不能为空值，应当使用(B)约束完成。"></a>若想限定某列在表中不允许出现重复的数据且不能为空值，应当使用(<strong>B</strong>)约束完成。</h2><p>A、CHECK<br>B、PRIMARY KEY<br>C、FOREIGN KEY<br>D、UNIQUE</p>
<h2 id="查找条件为-姓名不是null的记录-C"><a href="#查找条件为-姓名不是null的记录-C" class="headerlink" title="查找条件为: 姓名不是null的记录(C)"></a>查找条件为: 姓名不是null的记录(<strong>C</strong>)</h2><p>A、WHERE NAME ! NULL<br>B、WHERE NAME NOT NULL<br>C、WHERE NAME IS NOT NULL<br>D、WHERE NAME!=NULL</p>
<h2 id="使用SQL语句进行分组检索时，为了去掉不满足条件的分组，应当-B"><a href="#使用SQL语句进行分组检索时，为了去掉不满足条件的分组，应当-B" class="headerlink" title="使用SQL语句进行分组检索时，为了去掉不满足条件的分组，应当(B)"></a>使用SQL语句进行分组检索时，为了去掉不满足条件的分组，应当(<strong>B</strong>)</h2><p>A、使用WHERE子句<br>B、在GROUP BY后面使用HAVING子句<br>C、先使用WHERE子句，再使用HAVING子句<br>D、先使用HAVING子句，再使用WHERE子句</p>
<h2 id="假设有scores表的设计如下"><a href="#假设有scores表的设计如下" class="headerlink" title="假设有scores表的设计如下:"></a>假设有scores表的设计如下:</h2><p>ID (编号，主键)<br>StudentID (学生编号)<br>CourseID (课程编号)<br>Score (分数)<br>现在要查询参加过至少两门课程考试的学生各门课程的平均成绩。以下SQL语句正确的是(<strong>A</strong>)<br>A、select StudentID,avg(score) from scores group by StudentID having count(studentID)&gt;1<br>B、select StudentID,avg(score) from scores group by StudentID where count(studentID)&gt;1<br>C、select StudentID,avg(score) from scores group by StudentID where count(studentID)&gt;1 group by StudentID<br>D、select StudentID,avg(score) from scores having count(studentID)&gt;1</p>
<h2 id="下列哪种操作能够实现实体完整性-D"><a href="#下列哪种操作能够实现实体完整性-D" class="headerlink" title="下列哪种操作能够实现实体完整性(D)"></a>下列哪种操作能够实现实体完整性(<strong>D</strong>)</h2><p>A、设置非空约束<br>B、设置外键<br>C、减少数据冗余<br>D、设置主键</p>
<h2 id="为了去除结果集中重复的行，可在SELECT语句中使用下列哪个关键字-B"><a href="#为了去除结果集中重复的行，可在SELECT语句中使用下列哪个关键字-B" class="headerlink" title="为了去除结果集中重复的行，可在SELECT语句中使用下列哪个关键字(B)"></a>为了去除结果集中重复的行，可在SELECT语句中使用下列哪个关键字(<strong>B</strong>)</h2><p>A、ALL<br>B、DISTINCT<br>C、UPDATE<br>D、MERGE</p>
<h2 id="下列-C-不属于连接种类"><a href="#下列-C-不属于连接种类" class="headerlink" title="下列(C)不属于连接种类"></a>下列(<strong>C</strong>)不属于连接种类</h2><p>A、左外连接<br>B、内连接<br>C、中间连接<br>D、交叉连接</p>
<h2 id="SQL语言中允许使用通配符进行字符串匹配的操作，其中’-’可以表示-D"><a href="#SQL语言中允许使用通配符进行字符串匹配的操作，其中’-’可以表示-D" class="headerlink" title="SQL语言中允许使用通配符进行字符串匹配的操作，其中’%’可以表示(D)"></a>SQL语言中允许使用通配符进行字符串匹配的操作，其中’%’可以表示(<strong>D</strong>)</h2><p>A、零个字符<br>B、1个字符<br>C、多个字符<br>D、以上都是</p>
<h2 id="若要查询成绩score为60-80分之间-包括60分，不包括80分-的学生信息，成绩字段查询准则应该设置为-B"><a href="#若要查询成绩score为60-80分之间-包括60分，不包括80分-的学生信息，成绩字段查询准则应该设置为-B" class="headerlink" title="若要查询成绩score为60-80分之间(包括60分，不包括80分)的学生信息，成绩字段查询准则应该设置为(B)"></a>若要查询成绩score为60-80分之间(包括60分，不包括80分)的学生信息，成绩字段查询准则应该设置为(<strong>B</strong>)</h2><p>A、score&gt;= 60 and &lt; 80<br>B、score&gt;= 60 and score&lt; 80<br>C、score between 60 and 80<br>D、score IN(60, 80)</p>
<h2 id="GROUP-BY-子句的作用是什么-A"><a href="#GROUP-BY-子句的作用是什么-A" class="headerlink" title="GROUP BY 子句的作用是什么(A)"></a>GROUP BY 子句的作用是什么(<strong>A</strong>)</h2><p>A、查询结果的分组条件<br>B、组的筛选条件<br>C、限定返回的行的判断条件<br>D、对结果集进行排序</p>
<h2 id="唯一约束与主键约束的一个区别是-D"><a href="#唯一约束与主键约束的一个区别是-D" class="headerlink" title="唯一约束与主键约束的一个区别是(D)"></a>唯一约束与主键约束的一个区别是(<strong>D</strong>)</h2><p>A、唯一约束的列的值不可以有重复值<br>B、唯一约束的列的值可以不是唯一的<br>C、唯一约束的列不可以为空值<br>D、唯一约束的列可以为空值</p>
<h2 id="在SQL语句中，子查询是-D"><a href="#在SQL语句中，子查询是-D" class="headerlink" title="在SQL语句中，子查询是(D)"></a>在SQL语句中，子查询是(<strong>D</strong>)</h2><p>A、选区单表中字段子集的查询语句<br>B、选取多表中字段子集的查询语句<br>C、返回单表中数据子集的查询语言<br>D、嵌入到另一个查询语句之中的查询语句</p>
<h2 id="查询员工工资信息时，结果按工资降序排列，正确的是-B"><a href="#查询员工工资信息时，结果按工资降序排列，正确的是-B" class="headerlink" title="查询员工工资信息时，结果按工资降序排列，正确的是(B)"></a>查询员工工资信息时，结果按工资降序排列，正确的是(<strong>B</strong>)</h2><p>A、ORDER BY 工资<br>B、ORDER BY 工资 desc<br>C、ORDER BY 工资 asc<br>D、ORDER BY 工资 dictinct</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;向数据表中插入一条记录用以下哪一项-B&quot;&gt;&lt;a href=&quot;#向数据表中插入一条记录用以下哪一项-B&quot; class=&quot;headerlink&quot; title=&quot;向数据表中插入一条记录用以下哪一项(B)&quot;&gt;&lt;/a&gt;向数据表中插入一条记录用以下哪一项(&lt;strong&gt;B&lt;/strong&gt;)&lt;/h2&gt;&lt;p&gt;A、CREATE&lt;br&gt;B、INSERT&lt;br&gt;C、SAVE&lt;br&gt;D、UPDATE&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>UML试题</title>
    <link href="http://www.sanstylemc.cn/2018/06/02/UML%E8%AF%95%E9%A2%98/"/>
    <id>http://www.sanstylemc.cn/2018/06/02/UML试题/</id>
    <published>2018-06-02T09:20:52.000Z</published>
    <updated>2018-06-02T09:21:28.036Z</updated>
    
    <content type="html"><![CDATA[<p>1、UML的全称是(<strong>B</strong>)<br>A、Unify Modeling Language<br>B、Unified Modeling Language<br>C、Unified Modem Language<br>D、Unified Making Language<br><a id="more"></a><br>2、执行者(Actor)与用例之间的关系是(<strong>C</strong>)<br>A、包含关系<br>B、泛化关系<br>C、关联关系<br>D、扩展关系</p>
<p>3、在类图中，”#”表示的可见性是(<strong>B</strong>)<br>A、Public<br>B、Protected<br>C、Private<br>D、Package</p>
<p>4、生命线是UML视图中哪个图形的组成部分(<strong>D</strong>)<br>A、类图<br>B、状态图<br>C、活动图<br>D、顺序图(序列图/时序图)</p>
<p>5、在类图中，哪种关系表达总体与局部的关系(<strong>D</strong>)<br>A、泛化<br>B、实现<br>C、依赖<br>D、聚合</p>
<p>6、哪个UML视图是描述一个对象的声明周期的(<strong>B</strong>)<br>A、类图<br>B、状态图<br>C、协作图<br>D、顺序图</p>
<p>7、下面哪个视图属于UML语言的交互图(<strong>D</strong>)<br>A、行为图<br>B、状态图<br>C、实现图<br>D、顺序图(序列图/时序图)</p>
<p>8、在UML协作图中，有多少种关联角色的构造型(<strong>C</strong>)<br>A、1<br>B、3<br>C、5<br>D、7</p>
<p>9、下面哪些图形可以清楚地表达并发行为(<strong>CD</strong>)<br>A、类图<br>B、状态体<br>C、活动图<br>D、顺序图</p>
<p>10、下面哪些元素构成了组件图形(<strong>ACD</strong>)<br>A、组件<br>B、转换<br>C、关系<br>D、接口</p>
<p>11、部署图中的节点具有以下哪些方面的内容(<strong>ABC</strong>)<br>A、计算能力<br>B、基本内存<br>C、位置<br>D、接口</p>
<p>12、顺序图的用途包括(<strong>ABCD</strong>)<br>A、显示并发进程和激活<br>B、当不同的类之间存在多个简短的方法时，描述控制流的整体序列<br>C、显示在协作图中难于描述的事件序列<br>D、显示涉及类交互而与对象无关的一般形式</p>
<p>13、常见的UML工具有哪些?(<strong>ABCD</strong>)<br>A、Rational Rose<br>B、Power Designer<br>C、Visio<br>D、Visual UML</p>
<p>14、UML提供了一系列的图支持面向对象的分析与设计，其中<code>类图</code>给出系统的静态设计视图；<code>用例图</code>对系统的行为进行组织和建模是非常重要的；<code>序列图</code>和<code>协作图</code>都是描述系统动态视图的交互图，其中<code>序列图</code>描述了以时间顺序组织的对象之间的交互活动，<code>协作图</code>强调收发消息的对象的组织结构。</p>
<p>15、UML提供了4种结构图用于对系统的静态方面进行可视化、详述、构造和文档化。其中<code>类图</code>是面向对象系统规模中最常用的图，用于说明系统的静态设计视图；当需要说明系统的静态实现视图时，应该选择<code>组件图</code>；当需要说明体系结构的静态实施视图时，应该选择<code>部署图</code>。</p>
<p>16、UML语言包含几大类图形(<strong>B</strong>)<br>A、3<br>B、5<br>C、7<br>D、9</p>
<p>17、OMT方法是由下面哪位科学家提出的(<strong>B</strong>)<br>A、Booch<br>B、Rumbaugh<br>C、Coad<br>D、Jacobson</p>
<p>18、什么概念被认为是第二代面向对象技术的标志(<strong>A</strong>)<br>A、用例<br>B、UML语言<br>C、活动图<br>D、组件图</p>
<p>19、在UML的顺序图中，通常由左向右分层排列各个对象，正确的排列方法是(<strong>A</strong>)<br>A、执行者角色、控制类、用户接口、业务层、后台数据库<br>B、执行者角色、用户接口、控制类、业务层、后台数据库<br>C、执行者角色、控制类、用户接口、后台数据库、业务层<br>D、执行者角色、用户接口、业务层、控制类、后台数据库</p>
<p>20、多对象是UML哪个视图中的概念(<strong>C</strong>)<br>A、类图<br>B、状态图<br>C、协作图<br>D、组件图</p>
<p>21、在UML中，接口有几种表达方式(<strong>A</strong>)<br>A、2<br>B、4<br>C、6<br>D、8</p>
<p>22、顺序图由类角色，生命线，激活期和(<strong>B</strong>)组成。<br>A、关系<br>B、消息<br>C、用例<br>D、实体</p>
<p>23、UML中关联的多重度是指(<strong>B</strong>)<br>A、一个类有多个方法被另一个类调用<br>B、一个类的实类能够与另一个类的多个实类相关联<br>C、一个类的某个方法被另一个类调用的次数<br>D、两个类所具有的相同的方法和属性</p>
<p>24、具有多重属性值的UML图形包括(<strong>AE</strong>)<br>A、类图<br>B、对象图<br>C、状态图<br>D、活动图<br>E、部署图</p>
<p>25、在UML的状态图中，转换通常由以下哪些部分构成(<strong>ABCDE</strong>)<br>A、动作<br>B、触发事件<br>C、源状态<br>D、目标状态<br>E、监护条件</p>
<p>26、软件工程的三要素是(<strong>ABD</strong>)<br>A、方法<br>B、工具<br>C、模型<br>D、过程<br>E、语言</p>
<p>27、可能具有状态机的对象包括(<strong>ABCDE</strong>)<br>A、类<br>B、子系统<br>C、用例<br>D、接口<br>E、协议</p>
<p>28、UML中，类的主要版型有(<strong>CDE</strong>)<br>A、角色类<br>B、业务类<br>C、边界类<br>D、控制类<br>E、实体类</p>
<p>29、UML的类图包含哪些抽象的层次(<strong>ABC</strong>)<br>A、概念层<br>B、说明层<br>C、实现层<br>D、业务层<br>E、控制层</p>
<p>30、下面哪一项不是包图中的关系(<strong>D</strong>)<br>A、《use》<br>B、《access》<br>C、《trace》<br>D、《stub》</p>
<p>31、RUP中有(<strong>C</strong>)个核心过程工作流。<br>A、1<br>B、3<br>C、6<br>D、9</p>
<p>32、部署图的组成不包括(<strong>C</strong>)<br>A、处理器<br>B、设备<br>C、构件<br>D、连接</p>
<p>33、顺序图由对象，生命线，控制焦点和(<strong>B</strong>)组成。<br>A、关系<br>B、消息<br>C、用例<br>D、实体</p>
<p>34、组成UML有三种基本的建筑块是: (<strong>A</strong>)、事物和图。<br>A、关系<br>B、类<br>C、用例<br>D、实体</p>
<p>35、UML体系包括三个部分：UML基本构造块、(<strong>A</strong>)和UML公共机制。<br>A、UML规则<br>B、UML命名<br>C、UML模型<br>D、UML约束</p>
<p>36、(<strong>A</strong>)模型的缺点是缺乏灵活性，特别是无法解决软件需求不明确或不准确的问题。<br>A、瀑布模型<br>B、原型模型<br>C、增量模型<br>D、螺旋模型</p>
<p>37、下面哪个不是UML中的静态视图(<strong>A</strong>)<br>A、状态图<br>B、用例图<br>C、对象图<br>D、类图</p>
<p>38、对反应型对象建模一般使用(<strong>A</strong>)图。<br>A、状态图<br>B、顺序图<br>C、活动图<br>D、类图</p>
<p>39、类图应该画在Rose的哪种(<strong>B</strong>)视图中。<br>A、Use CaseView<br>B、Logic View<br>C、ComponentView<br>D、Deployment View</p>
<p>40、(<strong>D</strong>)是可复用的，提供明确接口完成特定功能的程序代码块。<br>A、模块<br>B、函数<br>C、用例<br>D、软件构件</p>
<p>41、(<strong>A</strong>)是用于把元素组织成组的通用机制。<br>A、包<br>B、类<br>C、接口<br>D、组件</p>
<p>42、(<strong>B</strong>)是被节点执行的事物体。<br>A、包<br>B、组件<br>C、接口<br>D、节点</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、UML的全称是(&lt;strong&gt;B&lt;/strong&gt;)&lt;br&gt;A、Unify Modeling Language&lt;br&gt;B、Unified Modeling Language&lt;br&gt;C、Unified Modem Language&lt;br&gt;D、Unified Making Language&lt;br&gt;
    
    </summary>
    
    
      <category term="UML" scheme="http://www.sanstylemc.cn/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>tmall_ssm后台</title>
    <link href="http://www.sanstylemc.cn/2018/05/30/tmall-ssm%E5%90%8E%E5%8F%B0/"/>
    <id>http://www.sanstylemc.cn/2018/05/30/tmall-ssm后台/</id>
    <published>2018-05-30T03:05:28.000Z</published>
    <updated>2018-05-30T23:42:06.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>Category.java<br>CategoryMapper.java<br>CategoryService.java<br>CategoryServiceImpl.java<br>CategoryController.java<br>CategoryMapper.xml<br>log4j.properties<br>jdbc.properties<br>applicationContext.xml<br>springMVC.xml<br>web.xml<br>listCategory.jsp<br><a id="more"></a></p>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>Page.java<br>CategoryMapper.xml<br>CategoryMapper.java<br>CategoryService.java<br>CategoryServiceImpl.java<br>CategoryController.java<br>listCategory.jsp<br>adminPage.jsp</p>
<h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><p>adminHeader.jsp<br>CategoryMapper.xml<br>CategoryMapper.java<br>CategoryService.java<br>CategoryServiceImpl.java<br>UploadedImageFile.java<br>ImageUtil.java<br>CategoryController.java<br>web.xml  中文问题</p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>adminHeader.jsp  确认删除<br>CategoryMapper.xml<br>CategoryMapper.java<br>CategoryService.java<br>CategoryServiceImpl.java<br>CategoryController.java</p>
<h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><p>listCategory.jsp<br>CategoryMapper.xml<br>CategoryMapper.java<br>CategoryService.java<br>CategoryServiceImpl.java<br>CategoryController.java<br>editCategory.jsp</p>
<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>editCategory.jsp<br>CategoryMapper.xml<br>CategoryMapper.java<br>CategoryService.java<br>CategoryServiceImpl.java<br>CategoryController.java</p>
<h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>CategoryController.java  分页插件, list获取分页数据,total获总数<br>applicationContext.xml   插件部分</p>
<p>OverlsMergeablePlugin.java<br>generatorConfig.xml<br>MybatisGenerator.java</p>
<h2 id="属性管理"><a href="#属性管理" class="headerlink" title="属性管理"></a>属性管理</h2><p>Property.java  新增Category<br>PropertyService.java  CRUD  在业务上需要查询某个分类下的属性，list带对应分类id。<br>PropertyServiceImpl.java  实现对应方法<br>PropertyController.java<br>listProperty.jsp<br>editProperty.jsp</p>
<h2 id="产品管理"><a href="#产品管理" class="headerlink" title="产品管理"></a>产品管理</h2><p>Product.java  新增Category<br>ProductService.java  CRUD<br>ProductServiceImpl.java<br>ProductController.java<br>listProduct.jsp<br>editProduct.jsp</p>
<h2 id="产品图片管理"><a href="#产品图片管理" class="headerlink" title="产品图片管理"></a>产品图片管理</h2><p>ProductImage.java<br>ProductImageService.java CRUD<br>ProductImageServiceImpl.java<br>ProductImageController.java<br>listProductImage.jsp<br>以下调整为了在产品管理显示图片<br>Product.java  新增firstProductImage<br>ProductService.java  新增setFirstProductImage(Product p)<br>ProductServiceImpl.java  新增setFirstProductImage(Product p)和setFirstProductImage(List<product> ps)<br>listProduct.jsp</product></p>
<h2 id="产品属性值设置"><a href="#产品属性值设置" class="headerlink" title="产品属性值设置"></a>产品属性值设置</h2><p>PropertyValue.jsp  新增Property, getter, setter<br>PropertyValueService.java<br>PropertyValueServiceImpl.java<br>PropertyValueController.java<br>editPropertyValue.jsp</p>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>User.java<br>UserService.java  CRUD<br>UserServiceImpl.java<br>UserController.java<br>listUser.jsp</p>
<h2 id="订单管理"><a href="#订单管理" class="headerlink" title="订单管理"></a>订单管理</h2><p>OrderItem.java  新增product, 要在订单管理页面需要看到订单下面的订单项里的产品图片<br>Order.java  新增orderItems, user, total, totalNumber<br>OrderItemService.java  CRUD<br>OrderItemServiceImpl.java  新增fill(Order order)和fill(List<order> orders)进行二次开发<br>OrderService.java  提供CRUD, 订单状态常量值<br>OrderServiceImpl.java  实现CRUD<br>OrderController.java  list和delievery(发货)<br>listOrder.jsp</order></p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><p><a href="http://sanstylemc.cn/2018/05/10/tmall-ssm%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/" target="_blank" rel="external">tmall_ssm之数据库</a></p>
<h3 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h3><table>
<thead>
<tr>
<th style="text-align:center">一</th>
<th style="text-align:center">多</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Category-分类</td>
<td style="text-align:center">Product-产品</td>
</tr>
<tr>
<td style="text-align:center">Category-分类</td>
<td style="text-align:center">Property-属性</td>
</tr>
<tr>
<td style="text-align:center">Property-属性</td>
<td style="text-align:center">PropertyValue-属性值</td>
</tr>
<tr>
<td style="text-align:center">Product-产品</td>
<td style="text-align:center">PropertyValue-属性值</td>
</tr>
<tr>
<td style="text-align:center">Product-产品</td>
<td style="text-align:center">ProductImage-产品图片</td>
</tr>
<tr>
<td style="text-align:center">Product-产品</td>
<td style="text-align:center">Review-评价</td>
</tr>
<tr>
<td style="text-align:center">User-用户</td>
<td style="text-align:center">Order-订单</td>
</tr>
<tr>
<td style="text-align:center">Product-产品</td>
<td style="text-align:center">OrderItem-订单项</td>
</tr>
<tr>
<td style="text-align:center">User-用户</td>
<td style="text-align:center">OrderItem-订单项</td>
</tr>
<tr>
<td style="text-align:center">Order-订单</td>
<td style="text-align:center">OrderItem-订单项</td>
</tr>
<tr>
<td style="text-align:center">User-用户</td>
<td style="text-align:center">Review-评价</td>
</tr>
</tbody>
</table>
<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="控制反转-IOC"><a href="#控制反转-IOC" class="headerlink" title="控制反转(IOC)"></a>控制反转(IOC)</h3><p>控制反转也叫依赖注入，利用工厂模式将对象交给容器管理，只需在spring配置文件中配置相应的bean,以及设置相关的属性，让spring容器来生成类的实例对象以及管理对象。简单地说就是拿到的对象的属性，已经被注入好相关值了，直接使用即可。</p>
<h3 id="面向切面-AOP"><a href="#面向切面-AOP" class="headerlink" title="面向切面(AOP)"></a>面向切面(AOP)</h3><p>AOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。<br>在面向切面的思想里面，把功能分为核心业务功能和周边功能。<br>所谓的核心业务，比如登陆，增加数据，删除数据都是核心业务。<br>所谓的周边业务，比如性能统计，日志，事务管理等。</p>
<h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><p>分离了控制器、模型对象、分派器以及处理程序对象的角色。</p>
<h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><p>使用简单的XML或注解用于配置和原始映射，将接口和Java的普通对象映射成数据库中的记录。<br>使用Mybatis后，只需要自己提供SQL语句，其他工作，诸如建立连接，Statement，JDBC相关异常处理等等都交给Mybatis，我们只需关注在增删改查等操作层面上，而把技术细节都封装在了我们看不见的地方。</p>
<h2 id="CategoryMapper-xml"><a href="#CategoryMapper-xml" class="headerlink" title="CategoryMapper.xml"></a>CategoryMapper.xml</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE mapper</span></span></div><div class="line"><span class="xml">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></div><div class="line"><span class="xml">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.how2java.tmall.mapper.CategoryMapper"</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">resultType</span>=<span class="string">"Category"</span>&gt;</span></span></div><div class="line"><span class="xml">        select * from   category         order by id desc</span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"start!=null and count!=null"</span>&gt;</span></span></div><div class="line"><span class="xml">            limit #</span><span class="template-variable">&#123;start&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;count&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"total"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span></div><div class="line"><span class="xml">        select count(*) from category</span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span>  <span class="attr">keyProperty</span>=<span class="string">"id"</span>  <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">parameterType</span>=<span class="string">"Category"</span> &gt;</span></span></div><div class="line"><span class="xml">        insert into category ( name ) values (#</span><span class="template-variable">&#123;name&#125;</span><span class="xml">)</span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span>&gt;</span></span></div><div class="line"><span class="xml">        delete from category where id= #</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"get"</span> <span class="attr">resultType</span>=<span class="string">"Category"</span>&gt;</span></span></div><div class="line"><span class="xml">        select * from category  where id= #</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"Category"</span> &gt;</span></span></div><div class="line"><span class="xml">        update category set name=#</span><span class="template-variable">&#123;name&#125;</span><span class="xml"> where id=#</span><span class="template-variable">&#123;id&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查询&quot;&gt;&lt;a href=&quot;#查询&quot; class=&quot;headerlink&quot; title=&quot;查询&quot;&gt;&lt;/a&gt;查询&lt;/h2&gt;&lt;p&gt;Category.java&lt;br&gt;CategoryMapper.java&lt;br&gt;CategoryService.java&lt;br&gt;CategoryServiceImpl.java&lt;br&gt;CategoryController.java&lt;br&gt;CategoryMapper.xml&lt;br&gt;log4j.properties&lt;br&gt;jdbc.properties&lt;br&gt;applicationContext.xml&lt;br&gt;springMVC.xml&lt;br&gt;web.xml&lt;br&gt;listCategory.jsp&lt;br&gt;
    
    </summary>
    
    
      <category term="tmall_ssm" scheme="http://www.sanstylemc.cn/tags/tmall-ssm/"/>
    
  </entry>
  
  <entry>
    <title>tmall_ssm项目结构</title>
    <link href="http://www.sanstylemc.cn/2018/05/30/tmall-ssm%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://www.sanstylemc.cn/2018/05/30/tmall-ssm项目结构/</id>
    <published>2018-05-30T02:10:25.000Z</published>
    <updated>2018-05-30T03:01:46.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h3 id="项目名称"><a href="#项目名称" class="headerlink" title="项目名称"></a>项目名称</h3><p><code>tmall_ssm</code></p>
<h3 id="java源代码包结构"><a href="#java源代码包结构" class="headerlink" title="java源代码包结构"></a>java源代码包结构</h3><p><code>pojo</code> 实体类<br><code>mapper</code> Mapper类<br><code>interceptor</code> 拦截器<br><code>controller</code> 控制层<br><code>service</code> Service层<br><code>test</code> 测试类<br><code>util</code> 工具类<br><code>comparator</code> 比较类<br><a id="more"></a></p>
<h3 id="web目录"><a href="#web目录" class="headerlink" title="web目录"></a>web目录</h3><p><code>css</code> css文件<br><code>img</code> 图片资源<br><code>js</code> js文件<br><code>admin</code> 后台管理用到的jsp文件<br><code>fore</code> 前台展示用到的jsp文件<br><code>include</code> 被包含的jsp文件</p>
<h2 id="典型场景"><a href="#典型场景" class="headerlink" title="典型场景"></a>典型场景</h2><h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><h4 id="立即购买"><a href="#立即购买" class="headerlink" title="立即购买"></a>立即购买</h4><h5 id="购买流程"><a href="#购买流程" class="headerlink" title="购买流程"></a>购买流程</h5><p>点击购买，会在OrderItem表中插入一条数据，这条数据会表示:<br>1、<code>pid</code> 购买的商品id<br>2、<code>oid</code> 这个订单项还没有生成对应的订单，即还在购物车中<br>3、<code>uid</code> 用户uid<br>4、<code>number</code> 购买了几件产品</p>
<p>如果未登录，点击购买之前会弹出模态登录窗口。<br>登录之后，点击立即购买，会访问<code>tmall_ssm/forebuyone?pid=&amp;num=</code>，并带上了产品id和购买数量。</p>
<p>为<code>OrderItemService</code>新增方法<code>listByUser</code>。<br>为<code>OrderItemServiceImpl</code>新增方法<code>listByUser</code>的实现。<br>通过上个步骤访问地址<code>forebuyone</code>，调用<code>ForeController.buyone()</code>。<br>获取参数pid、num，根据pid获取产品对象p，从session中获取用户对象user。<br>接下来就是新增订单项<code>OrderItem</code>，新增订单项要考虑两个情况。<br>1、如果已经存在这个产品对应的OrderItem,并且还没有生成订单，即还在购物车中。那么就应该在对应的OrderItem基础上，调整数量。</p>
<blockquote>
<p>1) 基于用户对象user，查询没有生成订单的订单项集合。<br>2) 遍历这个集合。<br>3) 如果产品是一样的话，就进行数量追加<br>4）获取这个订单项的id</p>
</blockquote>
<p>2、如果不存在对应的OrderItem，那么就新增一个订单项OrderItem</p>
<blockquote>
<p>1) 生成新的订单项<br>2）设置数量，用户和产品<br>3）插入到数据库<br>4）获取这个订单项的id</p>
</blockquote>
<p>最后，基于这个订单项id，客户端跳转到<code>结算页面/forebuy</code>。</p>
<h5 id="模态登录窗口"><a href="#模态登录窗口" class="headerlink" title="模态登录窗口"></a>模态登录窗口</h5><p>立即购买和加入购物车这两个按钮的监听是放在imgAngInfo.jsp页面中。<br>这两个按钮都会通过JQuery的<code>.get</code>方法，用异步Ajax的方式访问<code>forecheckLogin</code>，获取当前是否登录状态，如果返回的不是<code>success</code>即表明是未登录状态，那么就会打开登录的模态窗口: <code>$(&quot;#loginModal&quot;).modal(&#39;show&#39;);</code></p>
<p>在上一步的Ajax访问路径<code>/forecheckLogin</code>会导致<code>ForeController.checkLogin()</code>方法被调用。获取session中的<code>user</code>对象，如果不为空，即表示已经登录，返回字符串<code>success</code>；如果为空，即表示未登录，返回字符串<code>fail</code>。</p>
<p><code>modal.jsp</code>页面被<code>footer.jsp</code>所包含，所以每个页面都是加载了的。通过<code>imgAndInfo.jsp</code>页面中的购买按钮或者加入购物车按钮显示出来。点击登录按钮时，使用<code>imgAndInfo.jsp</code>页面中的Ajax代码进行登录验证。</p>
<p>在上一步<code>modal.jsp</code>中，点击了登录按钮之后，访问路径<code>/foreloginAjax</code>，导致<code>ForeController.loginAjax()</code>方法被调用。获取账号密码，通过账号密码获取User对象，如果User对象为空，那么就返回<code>fail</code>字符串，如果User对象不为空，那么就把User对象放在session中，并返回<code>success</code>字符串。</p>
<h4 id="结算页面"><a href="#结算页面" class="headerlink" title="结算页面"></a>结算页面</h4><h5 id="结算流程"><a href="#结算流程" class="headerlink" title="结算流程"></a>结算流程</h5><p>在购买页面中，客户端跳转到路径<code>/forebuy?oiid=</code>，导致<code>ForeController.buy</code>方法被调用。<br>1、通过字符串数组获取参数oiid。<br>为社么为什么这里要用字符串数组试图获取多个oiid，而不是int类型仅仅获取一个oiid? 因为根据购物流程环节与表关系，结算页面还需要显示在购物车中选中的多条OrderItem数据，所以为了兼容从购物车页面跳转过来的需求，要用字符串数组获取多个oiid。<br>2、准备一个泛型是OrderItem的集合ois<br>3、根据前面步骤获取的oiids，从数据库中取出OrderItem对象，并放入ois集合中<br>4、累计这些ois的价格总数，赋值在total上<br>5、把订单项集合放在session的属性 “ois” 上<br>6、把总价格放在 model的属性 “total” 上<br>7、服务端跳转到buy.jsp<br><img src="https://github.com/sunstady/hexo/blob/master/%E6%B5%81%E7%A8%8B/1.png?raw=true" alt="1"></p>
<p>在<code>buyPage.jsp</code>中，遍历出订单项集合<code>ois</code>中的订单项数据，显示总金额。</p>
<h4 id="加入购物车"><a href="#加入购物车" class="headerlink" title="加入购物车"></a>加入购物车</h4><h5 id="加入购物车流程"><a href="#加入购物车流程" class="headerlink" title="加入购物车流程"></a>加入购物车流程</h5><p>在产品页面点击加入购物车时，在<code>OrderItem</code>表中插入一条数据，把界面上的<code>加入购物车</code>按钮变成灰色并且不可点击。</p>
<p>如果未登录，那么点击加入购物车会弹出<code>模态登陆窗口</code>，登录之后，点击加入购物车，会使用Ajax一步访问地址<code>/foreaddCart?pid=&amp;num=</code>，并带上了产品id和购买数量num。</p>
<p>上一步访问地址<code>/foreaddCart</code>调用<code>ForeController.addCart()</code>。<code>addCart()</code>方法和立即购买中的<code>ForeController.buyone()</code>步骤做的事情是一样的，区别在于返回不一样。<br>1、获取参数pid,num。<br>2、根据pid获取产品对象p<br>3、从session中获取用户对象user</p>
<p>接下来就是新增订单项OrderItem, 新增订单项要考虑两个情况:<br>1、如果已经存在这个产品对应的OrderItem,并且还没有生成订单，即还在购物车中。那么就应该在对应的OrderItem基础上，调整数量。</p>
<blockquote>
<p>1) 基于用户对象user，查询没有生成订单的订单项集合。<br>2) 遍历这个集合。<br>3) 如果产品是一样的话，就进行数量追加<br>4）获取这个订单项的id</p>
</blockquote>
<p>2、如果不存在对应的OrderItem，那么就新增一个订单项OrderItem</p>
<blockquote>
<p>1) 生成新的订单项<br>2）设置数量，用户和产品<br>3）插入到数据库<br>4）获取这个订单项的id</p>
</blockquote>
<p>与<code>ForeController.buyone()</code>客户端跳转到<code>结算页面</code>不同的是，最后返回字符串”success”, 表示添加成功。</p>
<h4 id="查看购物车页面"><a href="#查看购物车页面" class="headerlink" title="查看购物车页面"></a>查看购物车页面</h4><p>访问地址<code>/forecart</code>调用<code>ForeController.cart()</code>方法。<br>1、通过session获取当前用户， 所以一定要登录才能访问，否则拿不到用户对象，会报错。<br>2、获取为这个用户关联的订单集合ois<br>3、把ois放在model中<br>4、服务端跳转到<code>cart.jsp</code></p>
<p>与<code>register.jsp相仿</code>， <code>cart.jsp</code>也包含了<code>header.jsp</code>, <code>top.jsp</code>, <code>simpleSearch.jsp</code>, <code>footer.jsp</code>等公共页面。中间是产品业务页面<code>cartPage.jsp</code></p>
<p>在<code>cartPage.jsp</code>中遍历订单项集合<code>ois</code>，即可。</p>
<h4 id="购物车页面操作"><a href="#购物车页面操作" class="headerlink" title="购物车页面操作"></a>购物车页面操作</h4><p>购物车页面和服务端的交互主要是三个<br>1、增加、减少某种产品的数量<br>2、删除某种产品<br>3、选中产品后，提交到结算页面</p>
<h5 id="调整订单数量"><a href="#调整订单数量" class="headerlink" title="调整订单数量"></a>调整订单数量</h5><p>点击增加或者减少按钮后，根据<code>cartPage.jsp</code> 中的js代码，会通过Ajax访问<code>/forechangeOrderItem</code>路径，导致<code>ForeController.changeOrderItem()</code>方法被调用<br>1、判断用户是否登录<br>2、获取pid和number<br>3、遍历出用户当前所有的未生成订单的OrderItem<br>4、根据pid找到匹配的OrderItem，并修改数量后更新到数据库<br>5、返回字符串”success”</p>
<h5 id="删除订单项"><a href="#删除订单项" class="headerlink" title="删除订单项"></a>删除订单项</h5><p>点击删除按钮后，根据 cartPage.jsp 中的js代码，会通过Ajax访问/foredeleteOrderItem路径，导致ForeController.deleteOrderItem方法被调用<br>1、判断用户是否登录<br>2、获取oiid<br>3、删除oiid对应的OrderItem数据<br>4、返回字符串”success”</p>
<h5 id="提交到结算页面"><a href="#提交到结算页面" class="headerlink" title="提交到结算页面"></a>提交到结算页面</h5><p>在选中了购物车中的任意商品之后，结算按钮呈现可点击状态。<br>点击之后，提交到结算页面，并带上(多个)被选中的OrderItem对象的id<code>/forebuy?oiid=&amp;oiid=</code><br>之后的流程就进入了前面的<code>结算页面</code>。</p>
<h3 id="订单状态流转"><a href="#订单状态流转" class="headerlink" title="订单状态流转"></a>订单状态流转</h3><h4 id="生成订单"><a href="#生成订单" class="headerlink" title="生成订单"></a>生成订单</h4><p>通过<code>立即购买</code>或者<code>购物车的提交到结算页面</code>进入<code>结算页面</code>，然后点击提交订单。<br>提交订单后，在数据库中生成一条Order记录。不仅如此，订单项的oid字段也会被设置为这条Order记录的id。</p>
<p>在applicationContext.xml最后增加事务管理配置。<br>因为增加订单行为需要同时修改两个表<br>1、为Order表新增数据<br>2、修改OrderItem表<br>所以需要进行事务管理，否则当新增了Order表的数据，还没来得及修改OrderItem的时候出问题，比如突然断电，那么OrderItem的数据就会是脏数据了。</p>
<p>在OrderService中新增方法add(Order c, List<orderitem> ois)<br>在OrderServiceImpl中实现add(Order o, List<orderitem> ois)方法，该方法通过注解进行事务管理。<code>@Transactional(propagation= Propagation.REQUIRED,rollbackForClassName=&quot;Exception&quot;)</code></orderitem></orderitem></p>
<p>提交订单访问路径<code>/forecreateOrder</code>, 在<code>ForeController</code>中调用<code>createOrder</code><br>1、从session中获取user对象<br>2、通过参数Order接受地址，邮编，收货人，用户留言等信息<br>3、根据当前时间加上一个4位随机数生成订单号<br>4、根据上述参数，创建订单对象<br>5、把订单状态设置为等待支付<br>6、从session中获取订单项集合 ( 在结算功能的ForeController.buy() 13行，订单项集合被放到了session中 )<br>7、把订单加入到数据库，并且遍历订单项集合，设置每个订单项的order，更新到数据库<br>8、统计本次订单的总金额<br>9、客户端跳转到确认支付页forealipay，并带上订单id和总金额</p>
<h4 id="确认支付"><a href="#确认支付" class="headerlink" title="确认支付"></a>确认支付</h4><p>1、在上一步客户端跳转到路径<code>/forealipay</code>方法，导致<code>PageController.alipay()</code>方法被调用。 <code>alipay()</code>没做什么事情，就是服务端跳转到了<code>alipay.jsp</code>页面。<br>2、<code>alipay.jsp</code> :<br>与 <code>register.jsp</code> 相仿，<code>alipay.jsp</code>也包含了<code>header.jsp</code>, <code>top.jsp</code>， <code>footer.jsp</code> 等公共页面。<br>中间是确认支付业务页面 <code>alipayPage.jsp</code><br>3、<code>alipayPage.jsp</code>:<br>显示总金额，并且让确认支付按钮跳转到页面 <code>/forepayed</code>页面，并带上oid和金额</p>
<h4 id="支付成功页"><a href="#支付成功页" class="headerlink" title="支付成功页"></a>支付成功页</h4><p>1、在上一步确认访问按钮提交数据到<code>/forepayed</code>,导致<code>ForeController.payed</code>方法被调用<br>1.1 获取参数<code>oid</code><br>1.2 根据<code>oid</code>获取到订单对象<code>order</code><br>1.3 修改订单对象的状态和支付时间<br>1.4 更新这个订单对象到数据库<br>1.5 把这个订单对象放在model的属性”o”上<br>1.6 服务端跳转到<code>payed.jsp</code><br>2、<code>payed.jsp</code><br>与 <code>register.jsp</code> 相仿，<code>payed.jsp</code>也包含了<code>header.jsp</code>, <code>top.jsp</code>, <code>simpleSearch.jsp</code>， <code>footer.jsp</code> 等公共页面。<br>中间是支付成功业务页面 <code>payedPage.jsp</code><br>3、<code>payedPage.jsp</code><br>显示订单中的地址，邮编，收货人，手机号码等等</p>
<h4 id="后台发货"><a href="#后台发货" class="headerlink" title="后台发货"></a>后台发货</h4><p>当订单状态是waitDelivery的时候，就会出现发货按钮<br>1、发货按钮链接跳转到<code>admin_order_delivery</code><br>2、<code>OrderController.delivery()</code>方法被调用<br>2.1 注入订单对象<br>2.2 修改发货时间，设置发货状态<br>2.3 更新到数据库<br>2.4 客户端跳转到<code>admin_order_list</code>页面</p>
<h4 id="确认收货"><a href="#确认收货" class="headerlink" title="确认收货"></a>确认收货</h4><p>1、点击确认收货后，访问地址<code>/foreconfirmPay</code><br>2、<code>ForeController.confirmPay()</code>方法被调用<br>2.1 获取参数oid<br>2.2 通过oid获取订单对象o<br>2.3 为订单对象填充订单项<br>2.4 把订单对象放在<code>request</code>的属性”o”上<br>2.5 服务端跳转到 <code>confirmPay.jsp</code></p>
<p>3、<code>confirmPay.jsp</code><br>与 <code>register.jsp</code> 相仿，<code>confirmPay.jsp</code>也包含了<code>header.jsp</code>, <code>top.jsp</code>, <code>simpleSearch.jsp</code>，<code>footer.jsp</code> 等公共页面。<br>中间是订单确认业务页面 <code>confirmPayPage.jsp</code><br>4、<code>confirmPayPage.jsp</code><br>显示订单的创建时间，付款时间和发货时间，以及订单号，收款人信息等<br>遍历订单项集合，显示其中的产品图片，产品标题，价格，数量，小计，总结信息<br>最后提供确认支付按钮，提交到<code>/foreorderconfirmed</code>路径</p>
<h4 id="确认收货成功"><a href="#确认收货成功" class="headerlink" title="确认收货成功"></a>确认收货成功</h4><p>通过上一步最后的确认支付按钮，提交到路径<code>/foreorderConfirmed</code>，导致<code>ForeController.orderConfirmed()</code>方法被调用<br>1、<code>ForeController.orderConfirmed()</code> 方法<br>1.1 获取参数oid<br>1.2 根据参数oid获取Order对象o<br>1.3 修改对象o的状态为等待评价，修改其确认支付时间<br>1.4 更新到数据库<br>1.5 服务端跳转到<code>orderConfirmed.jsp</code>页面<br>2、<code>orderConfirmed.jsp</code><br>与 <code>register.jsp</code> 相仿，<code>orderConfirmed.jsp</code>也包含了<code>header.jsp</code>, <code>top.jsp</code>, <code>simpleSearch.jsp</code>， <code>footer.jsp</code> 等公共页面。<br>中间是确认收货成功业务页面 <code>orderConfirmedPage.jsp</code><br>3、<code>orderConfirmedPage.jsp</code><br>显示”交易已经成功，卖家将收到您的货款。”</p>
<h4 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h4><h5 id="评价产品页面"><a href="#评价产品页面" class="headerlink" title="评价产品页面"></a>评价产品页面</h5><p>通过点击评价按钮，来到路径<code>/forereview</code>，导致<code>ForeController.review()</code>方法被调用<br>1、<code>ForeController.review()</code><br>1.1 获取参数oid<br>1.2 根据oid获取订单对象o<br>1.3 为订单对象填充订单项<br>1.4 获取第一个订单项对应的产品,因为在评价页面需要显示一个产品图片，那么就使用这第一个产品的图片了<br>1.5 获取这个产品的评价集合<br>1.6 为产品设置评价数量和销量<br>1.7 把产品，订单和评价集合放在request上<br>1.8 服务端跳转到 <code>review.jsp</code><br>2、<code>review.jsp</code><br>与 <code>register.jsp</code> 相仿，<code>review.jsp</code>也包含了<code>header.jsp</code>, <code>top.jsp</code>, <code>simpleSearch.jsp</code>，<br><code>footer.jsp</code> 等公共页面。<br>中间是产品业务页面 <code>reviewPage.jsp</code><br>3、<code>reviewPage.jsp</code><br>在<code>reviewPage.jsp</code>中显示产品图片，产品标题，价格，产品销量，产品评价数量，以及订单信息等。<br>同时还显示出了该产品所有的评价，但是默认是隐藏的</p>
<h5 id="提交评价"><a href="#提交评价" class="headerlink" title="提交评价"></a>提交评价</h5><p>在评价产品页面点击提交评价，就把数据提交到了<code>/foredoreview</code>路径，导致<code>ForeController.doreview</code>方法被调用<br>1、<code>ForeController.doreview()</code><br>1.1 获取参数oid<br>1.2 根据oid获取订单对象o<br>1.3 修改订单对象状态<br>1.4 更新订单对象到数据库<br>1.5 获取参数pid<br>1.6 根据pid获取产品对象<br>1.7 获取参数content (评价信息)<br>1.8 对评价信息进行转义，道理同注册<code>ForeController.register()</code><br>1.9 从session中获取当前用户<br>1.10 创建评价对象review<br>1.11 为评价对象review设置 评价信息，产品，时间，用户<br>1.12 增加到数据库<br>1.13.客户端跳转到<code>/forereview</code>： 评价产品页面，并带上参数<code>showonly=true</code><br>2、<code>reviewPage.jsp</code><br>在<code>reviewPage.jsp</code>中，当参数<code>showonly==true</code>，那么就显示当前产品的所有评价信息</p>
<h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><h4 id="增加-create"><a href="#增加-create" class="headerlink" title="增加(create)"></a>增加(create)</h4><h4 id="读取查询-Retrieve"><a href="#读取查询-Retrieve" class="headerlink" title="读取查询(Retrieve)"></a>读取查询(Retrieve)</h4><p>1、首先浏览器上访问路径 /admin_category_list<br>2、tomcat根据web.xml上的配置信息，拦截到了/admin_category_list，并将其交由DispatcherServlet处理。<br>3、DispatcherServlet 根据springMVC的配置，将这次请求交由CategoryController类进行处理，所以需要进行这个类的实例化<br>4、在实例化CategoryController的时候，注入CategoryServiceImpl<br>5、在实例化CategoryServiceImpl的时候，又注入CategoryMapper<br>6、根据ApplicationContext.xml中的配置信息，将CategoryMapper和CategoryMapper.xml关联起来了。<br>7、这样就拿到了实例化好了的CategoryController,并调用list方法<br>8、在list方法中，访问CategoryService,并获取数据，并把数据放在”cs”上，接着服务端跳转到listCategory.jsp去<br>9、最后在listCategory.jsp 中显示数据<br><img src="https://github.com/sunstady/hexo/blob/master/%E6%B5%81%E7%A8%8B/2.png?raw=true" alt="2"></p>
<h4 id="更新-update"><a href="#更新-update" class="headerlink" title="更新(update)"></a>更新(update)</h4><h4 id="删除-delete"><a href="#删除-delete" class="headerlink" title="删除(delete)"></a>删除(delete)</h4><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>新增Page这个类专门为分页提供必要信息<br>属性：<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>int start;</code> 开始位置<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>int count;</code> 每页显示的数量<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>int total;</code> 总共有多少条数据<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>String param;</code> 参数<br>方法:<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>getTotalPage</code>根据每页显示的数量count以及总共有多少条数据total，计算出总共有多少页<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>getLast</code>计算出最后一页的数值是多少<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>isHasPreviouse</code>判断是否有前一页<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>isHasNext</code>判断是否有后一页</p>
<p>CategoryMapper.xml中，提供带分页的查询语句和获取总数的sql语句<br>CategoryMapper.java中提供一个支持分页的查询方法list(Page page)和获取总数的方法total<br>CategoryService.java中，提供一个支持分页的查询方法list(Page page)和获取总数的方法list<br>CategoryService.java中，提供一个支持分页的查询方法list(Page page)和获取总数的方法total<br>CategoryController.java中，为方法list增加参数Page用于获取浏览器传递过来的分页信息<br>1、categoryService.list(page); 获取当前页的分类集合<br>2、通过categoryService.total(); 获取分类总数<br>3、通过page.setTotal(total); 为分页对象设置总数<br>4、把分类集合放在”cs”中<br>5、把分页对象放在 “page“ 中<br>6、跳转到listCategory.jsp页面</p>
<p>在listCategory.jsp中加入adminPage.jsp</p>
<p>adminPage.jsp中，分页超链的效果，用的Bootstrap的分页效果来制作。<br>对边界进行了处理，没有上一页或下一页的时候，对应超链处于不可点击状态。hasPreviouse会导致isHasPreviouse()方法被调用。</p>
<h3 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h3><p>MybatisGenerator插件是Mybatis官方提供的，这个插件存在一个BUG，即第一次生成了CategoryMapper.xml后，再次运行会导致CategoryMapper.xml生成重复内容，而影响正常的运行。<br>在<code>resouces</code>下创建<code>generatorConfig.xml</code>文件，其目的就是为了正确使用本插件而提供必要的配置信息。<br>1、使用<code>OverlsMergeablePlugin</code>插件<code>&lt;plugin type=&quot;com.how2java.tmall.util.OverIsMergeablePlugin&quot; /&gt;</code><br>2、在生成的代码中，不提供注释。如果提供注释，生成出来的代码，看上去乱。<br>3、指定链接数据库的账号和密码，既然是逆向工程，肯定要先链接到数据库。<code>&lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost/tmall_ssm&quot; userId=&quot;root&quot; password=&quot;admin&quot;&gt;</code><br>4、指定生成的pojo, mapper, xml文件的存放位置。<br>5、生成对应表及类名。</p>
<p>在generatorConfig.xml中，加入所有的table表，运行MybatisGenerator，需要把today变量修改为今天。<br>和手动编写的区别在于id类型 从基本类型id变成了Integer。<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">id:</span> 基本类型</div><div class="line"><span class="symbol">Integer:</span> 引用类型</div></pre></td></tr></table></figure></p>
<h3 id="属性管理"><a href="#属性管理" class="headerlink" title="属性管理"></a>属性管理</h3><h4 id="属性管理流程"><a href="#属性管理流程" class="headerlink" title="属性管理流程"></a>属性管理流程</h4><p>Property.java实体类已经和其他所有的实体类一起，在逆向工程这个环节就一起自动生成好了。不过仅仅有自动生成的实体类代码，还不足以支撑业务需要，所以在Property基础上增加了一个Category字段。</p>
<p>PropertyService.java中，提供CRUD一套。因为在业务上需要查询某个分类下的属性，所以list方法会带上对应分类的id。</p>
<p>新增PropertyService.xml实现PropertyService对应的方法。通过调用自动生成的PropertyMapper就可以实现大部分方法。值得注意的是查询的时候用到了辅助查询类: PropertyExample。这一行表示查询cid字段<code>example.createCriteria().andCidEqualTo(cid);</code></p>
<p>控制器类PropertyController.java用于映射不同路径的访问。</p>
<p>查询页面<code>listProperty.jsp</code><br>编辑页面<code>editProperty.jsp</code></p>
<h4 id="查询功能"><a href="#查询功能" class="headerlink" title="查询功能"></a>查询功能</h4><p>查询地址<code>admin_property_list</code>映射的是<code>PropertyController</code>的list()方法。<br>1、获取分类 cid,和分页对象page<br>2、通过PageHelper设置分页参数<br>3、基于cid，获取当前分类下的属性集合<br>4、通过PageInfo获取属性总数<br>5、把总数设置给分页page对象<br>6、拼接字符串”&amp;cid=”+c.getId()，设置给page对象的Param值。 因为属性分页都是基于当前分类下的分页，所以分页的时候需要传递这个cid<br>7、把属性集合设置到 request的 “ps” 属性上<br>8、把分类对象设置到 request的 “c” 属性上。 ( 这个c有什么用呢？ 在后面步骤的 其他-面包屑导航 中会用于显示分类名称)<br>9、把分页对象设置到 request的 “page” 对象上<br>10、服务端跳转到admin/listProperty.jsp页面<br>11、在listProperty.jsp页面上使用c:forEach 遍历ps集合，并显示</p>
<h4 id="增加功能"><a href="#增加功能" class="headerlink" title="增加功能"></a>增加功能</h4><p>1、在listProperty.jsp页面提交数据的时候，除了提交属性名称，还会提交cid<br>2、在PropertyController通过参数Property 接受注入<br>3、通过propertyService保存到数据库<br>4、客户端跳转到admin_property_list,并带上参数cid</p>
<h4 id="编辑功能"><a href="#编辑功能" class="headerlink" title="编辑功能"></a>编辑功能</h4><p>1、在PropertyController的edit方法中，根据id获取Property对象<br>2、根据properoty对象的cid属性获取Category对象，并把其设置在Property对象的category属性上<br>3、把Property对象放在request的 “p” 属性中<br>3、服务端跳转到admin/editProperty.jsp<br>4、在editProperty.jsp中显示属性名称<br>5、在editProperty.jsp中隐式提供id和cid( cid 通过 p.category.id 获取)</p>
<h4 id="修改功能"><a href="#修改功能" class="headerlink" title="修改功能"></a>修改功能</h4><p>1、在PropertyController的update方法中获取Property对象<br>2、借助propertyService更新这个对象到数据库<br>3、客户端跳转到admin_property_list，并带上参数cid</p>
<h4 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h4><p>1、在PropertyController的delete方法中获取id<br>2、根据id获取Property对象<br>3、借助propertyService删除这个对象对应的数据<br>4、客户端跳转到admin_property_list，并带上参数cid</p>
<h4 id="面包屑导航"><a href="#面包屑导航" class="headerlink" title="面包屑导航"></a>面包屑导航</h4><p>在属性管理页面的页头，有一个面包屑导航<br>第一个连接跳转到<code>admin_category_list</code><br>第二个连接跳转到<code>admin_property_list?cid=</code><br>样式用的是<code>Bootstrap面包屑导航</code></p>
<h4 id="分页-1"><a href="#分页-1" class="headerlink" title="分页"></a>分页</h4><p>这里的分页比<code>分类管理</code>中的分页多了一个参数cid。<br>1、在PropertyController.list() 方法中，把&amp;cid= 参数设置到在page对象的param属性上<code>page.setParam(&quot;&amp;cid=&quot;+c.getId());</code><br>2、在adminPage.jsp页面中通过${page.param}取出这个参数</p>
<h3 id="产品管理"><a href="#产品管理" class="headerlink" title="产品管理"></a>产品管理</h3><h4 id="产品管理流程"><a href="#产品管理流程" class="headerlink" title="产品管理流程"></a>产品管理流程</h4><p>Product.java在自动生成的基础上增加category属性。<br>新增ProductService，提供CRUD一套。<br>新增ProductServiceImpl，提供CRUD一套。get和list方法都会把取出来的Product对象设置上对应的category。<br>准备ProductController.java类。<br>查询页面<code>listProduct.jsp</code><br>编辑页面<code>editProduct.jsp</code></p>
<h4 id="查询功能讲解"><a href="#查询功能讲解" class="headerlink" title="查询功能讲解"></a>查询功能讲解</h4><p>查询地址admin_product_list映射的是ProductController的list()方法<br>1、获取分类 cid,和分页对象page<br>2、通过PageHelper设置分页参数<br>3、基于cid，获取当前分类下的产品集合<br>4、通过PageInfo获取产品总数<br>5、把总数设置给分页page对象<br>6、拼接字符串”&amp;cid=”+c.getId()，设置给page对象的Param值。 因为产品分页都是基于当前分类下的分页，所以分页的时候需要传递这个cid<br>7、把产品集合设置到 request的 “ps” 产品上<br>8、把分类对象设置到 request的 “c” 产品上。 ( 这个c有什么用呢？ 在 其他-面包屑导航 中会用于显示分类名称)<br>9、把分页对象设置到 request的 “page” 对象上<br>10、服务端跳转到admin/listProduct.jsp页面<br>11、在listProduct.jsp页面上使用c:forEach 遍历ps集合，并显示</p>
<h4 id="增加功能讲解"><a href="#增加功能讲解" class="headerlink" title="增加功能讲解"></a>增加功能讲解</h4><p>1、在listProduct.jsp提交数据的时候，除了提交产品名称，小标题，原价格，优惠价格，库存外还会提交cid<br>2、在ProductController中获取Product对象，并插入到数据库<br>3、客户端跳转到admin_product_list,并带上参数cid</p>
<h4 id="编辑功能讲解"><a href="#编辑功能讲解" class="headerlink" title="编辑功能讲解"></a>编辑功能讲解</h4><p>1、在ProductController的edit方法中，根据id获取product对象<br>2、根据product对象的cid产品获取Category对象，并把其设置在product对象的category产品上<br>3、把product对象放在request的 “p” 产品中<br>3、服务端跳转到admin/editProduct.jsp<br>4、在editProduct.jsp中显示产品名称<br>5、在editProduct.jsp中隐式提供id和cid( cid 通过 p.category.id 获取)</p>
<h4 id="修改功能讲解"><a href="#修改功能讲解" class="headerlink" title="修改功能讲解"></a>修改功能讲解</h4><p>1、在ProductController的update方法中获取Product对象<br>2、借助productService更新这个对象到数据库<br>3、客户端跳转到admin_product_list，并带上参数cid</p>
<h4 id="删除功能讲解"><a href="#删除功能讲解" class="headerlink" title="删除功能讲解"></a>删除功能讲解</h4><p>1、在ProductController的delete方法中获取id<br>2、根据id获取Product对象<br>3、借助productService删除这个对象对应的数据<br>4、客户端跳转到admin_product_list，并带上参数cid</p>
<h3 id="产品图片管理"><a href="#产品图片管理" class="headerlink" title="产品图片管理"></a>产品图片管理</h3><h4 id="图片管理流程"><a href="#图片管理流程" class="headerlink" title="图片管理流程"></a>图片管理流程</h4><p>ProductImage.java直接使用自动生成的，没有变化。</p>
<p>创建ProductImageService，提供CRUD。同时提供两个常量，分别表示单个图片和详情图片:<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String type_single = <span class="string">"type_single"</span><span class="comment">;</span></div><div class="line">String type_detail = <span class="string">"type_detail"</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>除此之外，还提供了根据产品id和图片类型查询的list方法。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span> <span class="built_in">list</span>(int pid, <span class="built_in">String</span> <span class="keyword">type</span>);</div></pre></td></tr></table></figure></p>
<p>创建ProductImageServiceImpl，实现CRUD相关方法。关于list方法，使用了ProductImageExample类，这样的写法表示同时匹配pid和type。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">example</span><span class="selector-class">.createCriteria</span>()</div><div class="line">    <span class="selector-class">.andPidEqualTo</span>(<span class="selector-tag">pid</span>)</div><div class="line">    <span class="selector-class">.andTypeEqualTo</span>(<span class="selector-tag">type</span>);</div></pre></td></tr></table></figure></p>
<p>ProductImageController提供了list, add和delete方法。edit和update没有提供相关业务，所以无。</p>
<p>新增listProductImage.jsp</p>
<h4 id="查询功能-1"><a href="#查询功能-1" class="headerlink" title="查询功能"></a>查询功能</h4><p>通过产品页面的图片管理访问ProductImageController的list()方法<br>1、获取参数pid<br>2、根据pid获取Product对象<br>3、根据pid对象获取单个图片的集合pisSingle<br>4、根据pid对象获取详情图片的集合pisDetail<br>5、把product 对象，pisSingle ，pisDetail放在model上<br>6、服务端跳转到admin/listProductImage.jsp页面<br>7、在listProductImage.jsp，使用c:forEach 遍历pisSingle<br>8、在listProductImage.jsp，使用c:forEach 遍历pisDetail</p>
<h4 id="增加功能-1"><a href="#增加功能-1" class="headerlink" title="增加功能"></a>增加功能</h4><p>增加产品图片分单个和详情两种，其区别在于增加所提交的type类型不一样。<br>这里就对单个的进行讲解，详情图片的处理同理。<br>首先， 在listProductImage.jsp准备一个form，提交到admin_productImage_add。<br><code>&lt;form method=&quot;post&quot; class=&quot;addFormSingle&quot; action=&quot;admin_productImage_add&quot; enctype=&quot;multipart/form-data&quot;&gt;</code><br>接着在ProductImageController的add()方法中进行处理<br>1、通过pi对象接受type和pid的注入<br>2、借助productImageService，向数据库中插入数据。<br>3、根据session().getServletContext().getRealPath( “img/productSingle”)，定位到存放单个产品图片的目录<br>除了productSingle，还有productSingle_middle和productSingle_small。 因为每上传一张图片，都会有对应的正常，中等和小的三种大小图片，并且放在3个不同的目录下<br>4、文件命名以保存到数据库的产品图片对象的id+”.jpg”的格式命名<br>5、通过uploadedImageFile保存文件<br>6、借助ImageUtil.change2jpg()方法把格式真正转化为jpg，而不仅仅是后缀名为.jpg<br>7、再借助ImageUtil.resizeImage把正常大小的图片，改变大小之后，分别复制到productSingle_middle和productSingle_small目录下。<br>8、处理完毕之后，客户端条跳转到admin_productImage_list?pid=，并带上pid。</p>
<p>详情图片做的是一样的事情，区别在于复制到目录productDetail下，并且不需要改变大小。<br><code>ImageUtil.resizeImage</code> 使用了swing自带的修改图片大小的API，属于底层工作原理。</p>
<h4 id="删除功能-1"><a href="#删除功能-1" class="headerlink" title="删除功能"></a>删除功能</h4><p>点击删除超链，进入ProductImageController的delete方法<br>1、获取id<br>2、根据id获取ProductImage 对象pi<br>3、借助productImageService，删除数据<br>4、如果是单个图片，那么删除3张正常，中等，小号图片<br>5、如果是详情图片，那么删除一张图片<br>6、客户端跳转到admin_productImage_list地址</p>
<h4 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h4><p>回到<code>产品管理</code>，在产品列表页面，是没有图片的。因为当时还没有产品图片管理功能，现在支持了，所以需要对Product做一些调整。</p>
<p>在Product.java新增属性<code>private ProductImage firstProductImage;</code></p>
<p>在ProductService.java新增方法<code>void setFirstProductImage(Product p);</code></p>
<p>在ProductServiceImpl.java中新增方法setFirstProductImage(Product p): 根据pid和图片类型查询出所有的单个图片，然后把第一个取出来放在firstProductImage上。<br>增加方法setFirstProductImage(List<product> ps): 给多个产品设置图片。<br>在get方法中调用setFirstProductImage(Product p): 为单个产品设置图片。<br>在list方法中调用setFirstProductImage(List<product> ps): 为多个产品设置图片。</product></product></p>
<p>在listProduct.jsp中增加如下来显示图片:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;c:<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"<span class="variable">$&#123;!empty p.firstProductImage&#125;</span>"</span>&gt;</div><div class="line">    &lt;img width=<span class="string">"40px"</span> src=<span class="string">"img/productSingle/<span class="variable">$&#123;p.firstProductImage.id&#125;</span>.jpg"</span>&gt;</div><div class="line">&lt;/c:<span class="keyword">if</span>&gt;</div></pre></td></tr></table></figure></p>
<h3 id="产品展示"><a href="#产品展示" class="headerlink" title="产品展示"></a>产品展示</h3><h4 id="前台无需登录"><a href="#前台无需登录" class="headerlink" title="前台无需登录"></a>前台无需登录</h4><p>从前台模块之间的依赖性，以及开发顺序的合理性来考虑，把前台功能分为了无需登录即可使用的功能，和需要登录才能访问的功能。</p>
<h4 id="前台需要登录"><a href="#前台需要登录" class="headerlink" title="前台需要登录"></a>前台需要登录</h4><p>接着是需要登录的前台功能。这部分功能基本上都是和购物相关的。</p>
<h4 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h4><p>从首页展示需求分析上来看:<br>1、在横向导航栏上提供4个分类连接<br>2、在纵向导航栏上提供全部17个分类连接<br>3、当鼠标移动到某一个纵向分类连接的时候，显示这个分类下的推荐产品列表<br>4、按照每种分类显示5个商品的方式，显示所有17种分类 </p>
<p>在Category.java中新增两个瞬间自动products和productsByRow<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">List</span>&lt;<span class="keyword">Product</span>&gt; products;</div><div class="line"><span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;<span class="keyword">Product</span>&gt;&gt; productsByRow;</div></pre></td></tr></table></figure></p>
<p>products比较好理解，代表一个分类下有多个产品。<br>productByRow这个属性的类型是List<list<product>&gt;productByRow。即一个分类又对应多个List<product>，提供这个属性，是为了在首页竖状导航的分类名称右边显示推荐产品列表。<br>一个分类会对应多行产品，而一行产品里又有多个产品记录。<br>为了实现界面上这个功能，为Category类设计了<code>List&lt;List&lt;Product&gt;&gt;productsByRow</code>这样一个集合属性。</product></list<product></p>
<p>在ProductService中新增三个方法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(List&lt;Category&gt; categorys)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(Category category)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillByRow</span><span class="params">(List&lt;Category&gt; categorys)</span></span>;</div></pre></td></tr></table></figure></p>
<p>在ProductServiceImpl为ProductService中新增加的三个方法提供实现。<br>1、为分类填充产品集合<code>public void fill(Category cateogry)</code><br>2、为多个分类填充产品集合<code>public void fill(List&lt;Category&gt; categorys)</code><br>3、为多个分类填充推荐产品集合，即把分类下的产品集合，按照8个为一行，拆成多行，以利于后续页面上进行显示。<code>public void fillByRow(List&lt;Category&gt; categorys);</code></p>
<p>在home()方法映射首页访问路径<code>/forehome</code><br>1、查询所有分类<br>2、为这些分类填充产品集合<br>3、为这些分类填充推荐产品集合<br>4、服务端跳转到home.jsp</p>
<h4 id="home-jsp"><a href="#home-jsp" class="headerlink" title="home.jsp"></a>home.jsp</h4><p>home.jsp分成<code>header.jsp</code>, <code>top.jsp</code>, <code>search.jsp</code>, <code>homePage.jsp</code>, <code>footer.jsp</code></p>
<h5 id="header-jsp"><a href="#header-jsp" class="headerlink" title="header.jsp"></a>header.jsp</h5><p>1、声明为HTML5格式<code>&lt;!DOCTYPE html&gt;</code><br>2、让浏览器以UTF显示中文，本页面的中文文字采用UTF-8编码，启动EL表达式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@<span class="built_in"> page </span><span class="attribute">language</span>=<span class="string">"java"</span> <span class="attribute">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> <span class="attribute">pageEncoding</span>=<span class="string">"UTF-8"</span> <span class="attribute">isELIgnored</span>=<span class="string">"false"</span>%&gt;</div></pre></td></tr></table></figure></p>
<p>3、引入标准标签库<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib <span class="attribute">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attribute">prefix</span>=<span class="string">"c"</span>%&gt;</div><div class="line">&lt;%@ taglib <span class="attribute">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> <span class="attribute">prefix</span>=<span class="string">'fmt'</span> %&gt;</div><div class="line">&lt;%@ taglib <span class="attribute">prefix</span>=<span class="string">"fn"</span> <span class="attribute">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span> %&gt;</div></pre></td></tr></table></figure></p>
<p>c通常用于条件判断和遍历<br>fmt用于格式化日期和货币<br>fn用于校验长度<br>4、引入bootstrap和jquery<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery/2.0.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap/3.3.6/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap/3.3.6/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>5、自定义前端样式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link <span class="attribute">href</span>=<span class="string">"css/fore/style.css"</span> <span class="attribute">rel</span>=<span class="string">"stylesheet"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>除了轮播和图标，前端几乎没用Bootstrap中的样式，所有的自定义样式都在这个文件里。<br>6、各种自定义函数和事件监听</p>
<h5 id="top-jsp"><a href="#top-jsp" class="headerlink" title="top.jsp"></a>top.jsp</h5><p>置顶导航页面<br>这里会根据用户是否登录，决定是否显示退出按钮，或者登录注册按钮，以及购物车中的商品数量。</p>
<h5 id="serach-jsp"><a href="#serach-jsp" class="headerlink" title="serach.jsp"></a>serach.jsp</h5><p>这里会从request的属性”cs”中获取到分类集合，并取第5个到第8个，一共4个来显示。</p>
<h5 id="homePage-jsp"><a href="#homePage-jsp" class="headerlink" title="homePage.jsp"></a>homePage.jsp</h5><p>这里是首页业务页面，在homePage中要显示如下内容:<br>1、天猫超市连接右侧有4个分类数据<br>2、竖状导航栏显示17个分类数据<br>3、每个分类又再对应不同的推荐产品集合<br>4、中部会显示17个分类<br>5、每个分类又显示前5款产品<br>6、每款产品又会显示第一张图片，标题，价格等信息。</p>
<p>homePage.jsp中包含<code>categoryAndcarousel.jsp</code>分类和轮播，这个jsp包含<code>categoryMenu.jsp</code>竖状分类菜单, <code>productsAsideCategorys.jsp</code>竖状分类菜单右侧的推荐产品列表, <code>carousel.jsp</code>轮播;  <code>homepageCategoryProducts.jsp</code>总体17种分类以及每个分类对应的5个产品。</p>
<h5 id="categoryAndcarousel-jsp"><a href="#categoryAndcarousel-jsp" class="headerlink" title="categoryAndcarousel.jsp"></a>categoryAndcarousel.jsp</h5><p>categoryAndcarousel.jsp 页面利用ForeController传递过来的数据，天猫国际几个字旁边显示4个分类超链<br>另外包含了其他3个页面：<br>categoryMenu.jsp<br>productsAsideCategorys.jsp<br>carousel.jsp</p>
<h5 id="categoryMenu-jsp"><a href="#categoryMenu-jsp" class="headerlink" title="categoryMenu.jsp"></a>categoryMenu.jsp</h5><p>categoryMenu.jsp 显示左侧的竖状分类导航</p>
<h5 id="productsAsideCategorys-jsp"><a href="#productsAsideCategorys-jsp" class="headerlink" title="productsAsideCategorys.jsp"></a>productsAsideCategorys.jsp</h5><p>productsAsideCategorys.jsp 进行了三层遍历<br>1、先取出每个分类<br>2、然后取出每个分类的productsByRow集合<br>3、根据productsByRow集合，取出每个产品，把产品的subTitle信息里的第一个单词取出来显示。</p>
<h5 id="carousel-jsp"><a href="#carousel-jsp" class="headerlink" title="carousel.jsp"></a>carousel.jsp</h5><p>轮播部分，都是静态的页面，没有用到服务端数据</p>
<h5 id="homepageCategoryProducts-jsp"><a href="#homepageCategoryProducts-jsp" class="headerlink" title="homepageCategoryProducts.jsp"></a>homepageCategoryProducts.jsp</h5><p>homepageCategoryProducts.jsp 进行了2次遍历<br>1、遍历所有的分类，取出每个分类对象<br>2、遍历分类对象的products集合，取出每个产品，然后显示该产品的标题，图片，价格等信息</p>
<h4 id="产品页"><a href="#产品页" class="headerlink" title="产品页"></a>产品页</h4><h5 id="Product-java"><a href="#Product-java" class="headerlink" title="Product.java"></a>Product.java</h5><p>在Product.java中增加如下属性:<br>1、单个产品图片集合<code>private List&lt;ProductImage&gt; productSingleImages;</code><br>2、详情产品图片集合<code>private List&lt;ProductImage&gt; productDetailImages;</code><br>3、销量<code>private int saleCount;</code><br>4、累计评价<code>private int reviewCount;</code></p>
<h5 id="Review-java"><a href="#Review-java" class="headerlink" title="Review.java"></a>Review.java</h5><p>修改自动生成的评价类Review，增加User属性: <code>private User user;</code></p>
<h5 id="ReviewService-java"><a href="#ReviewService-java" class="headerlink" title="ReviewService.java"></a>ReviewService.java</h5><p>增加ReviewService，提供CURD以及通过产品获取评价方法:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function">List <span class="title">list</span><span class="params">(<span class="keyword">int</span> pid)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">(<span class="keyword">int</span> pid)</span></span>;</div></pre></td></tr></table></figure></p>
<h5 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h5><p>修改User, 增加一个getAnonymousName方法用于在显示评价者的时候进行匿名显示</p>
<h5 id="ReviewServiceImpl-java"><a href="#ReviewServiceImpl-java" class="headerlink" title="ReviewServiceImpl.java"></a>ReviewServiceImpl.java</h5><p>增加ReviewServiceImpl，实现对应方法</p>
<h5 id="OrderItemService-java"><a href="#OrderItemService-java" class="headerlink" title="OrderItemService.java"></a>OrderItemService.java</h5><p>修改OrderItemService，增加根据产品获取销售量的方法: <code>int getSaleCount(int  pid);</code></p>
<h5 id="OrderItemServiceImpl-java"><a href="#OrderItemServiceImpl-java" class="headerlink" title="OrderItemServiceImpl.java"></a>OrderItemServiceImpl.java</h5><p>修改OrderItemServiceImpl，实现getSaleCount方法</p>
<h5 id="ProductService-java"><a href="#ProductService-java" class="headerlink" title="ProductService.java"></a>ProductService.java</h5><p>修改ProductService，增加为产品设置销量和评价数量的方法:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSaleAndReviewNumber</span><span class="params">(Product p)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSaleAndReviewNumber</span><span class="params">(List&lt;Product&gt; ps)</span></span>;</div></pre></td></tr></table></figure></p>
<h5 id="ProductServiceImpl-java"><a href="#ProductServiceImpl-java" class="headerlink" title="ProductServiceImpl.java"></a>ProductServiceImpl.java</h5><p>修改ProductServiceImpl，实现为产品设置销量和评价数量的方法:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSaleAndReviewNumber</span><span class="params">(Product p)</span></span>;</div><div class="line"><span class="keyword">void</span> setSaleAndReviewNumber</div></pre></td></tr></table></figure></p>
<h5 id="ForeController-product"><a href="#ForeController-product" class="headerlink" title="ForeController.product()"></a>ForeController.product()</h5><p>访问地址/foreproduct?pid=<br>导致ForeController.product() 方法被调用<br>1、获取参数pid<br>2、根据pid获取Product 对象p<br>3、根据对象p，获取这个产品对应的单个图片集合<br>4、根据对象p，获取这个产品对应的详情图片集合<br>5、获取产品的所有属性值<br>6、获取产品对应的所有的评价<br>7、设置产品的销量和评价数量<br>8、把上述取值放在request属性上<br>9、服务端跳转到 “product.jsp” 页面</p>
<h5 id="product-jsp"><a href="#product-jsp" class="headerlink" title="product.jsp"></a>product.jsp</h5><p>与 register.jsp 相仿，product.jsp也包含了header.jsp, top.jsp, simpleSearch.jsp， footer.jsp 等公共页面。<br>中间是产品业务页面 productPage.jsp</p>
<h5 id="productPage-jsp"><a href="#productPage-jsp" class="headerlink" title="productPage.jsp"></a>productPage.jsp</h5><p>productPage.jsp 又由3个页面组成<br>1、imgAndInfo.jpg<br>单个图片和基本信息<br>2、productReview.jsp<br>评价信息<br>3、productDetail.jsp<br>详情图片</p>
<h5 id="imgAndInfo-jsp"><a href="#imgAndInfo-jsp" class="headerlink" title="imgAndInfo.jsp"></a>imgAndInfo.jsp</h5><p>1、左侧显示5张单个图片<br>1.1 默认显示第一张图片<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img <span class="attribute">src</span>=<span class="string">"img/productSingle/<span class="variable">$&#123;p.firstProductImage.id&#125;</span>.jpg"</span> <span class="attribute">class</span>=<span class="string">"bigImg"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>1.2 5张小图片<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;p.productSingleImages&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"pi"</span>&gt;</span></span></div><div class="line"><span class="xml">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/productSingle_small/$</span></span></span><span class="template-variable">&#123;pi.id&#125;</span><span class="xml"><span class="tag"><span class="string">.jpg"</span> <span class="attr">bigImageURL</span>=<span class="string">"img/productSingle/$</span></span></span><span class="template-variable">&#123;pi.id&#125;</span><span class="xml"><span class="tag"><span class="string">.jpg"</span> <span class="attr">class</span>=<span class="string">"smallImage"</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>2、右边显示基本信息<br>2.1 标题和小标题<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"productTitle"</span>&gt;</div><div class="line">	$&#123;<span class="selector-tag">p</span>.name&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"productSubTitle"</span>&gt;</div><div class="line">	$&#123;<span class="selector-tag">p</span>.subTitle&#125; </div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>2.2 原始价格和促销价<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;fmt:formatNumber <span class="attribute">type</span>=<span class="string">"number"</span> <span class="attribute">value</span>=<span class="string">"<span class="variable">$&#123;p.originalPrice&#125;</span>"</span> <span class="attribute">minFractionDigits</span>=<span class="string">"2"</span>/&gt;</div><div class="line">&lt;fmt:formatNumber <span class="attribute">type</span>=<span class="string">"number"</span> <span class="attribute">value</span>=<span class="string">"<span class="variable">$&#123;p.promotePrice&#125;</span>"</span> <span class="attribute">minFractionDigits</span>=<span class="string">"2"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>2.3 销量和累计评价<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>销量 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"redColor boldWord"</span>&gt;</span> $</span><span class="template-variable">&#123;p.saleCount &#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>累计评价 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"redColor boldWord"</span>&gt;</span> $</span><span class="template-variable">&#123;p.reviewCount&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>2.4 库存<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>库存$</span><span class="template-variable">&#123;p.stock&#125;</span><span class="xml">件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h5 id="productReview-jsp"><a href="#productReview-jsp" class="headerlink" title="productReview.jsp"></a>productReview.jsp</h5><p>借助c:forEach遍历request中的reviews</p>
<h5 id="productDetail-jsp"><a href="#productDetail-jsp" class="headerlink" title="productDetail.jsp"></a>productDetail.jsp</h5><p>如图所示，productDetail.jsp做了两件事<br>1、显示属性值<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pvs&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"pv"</span>&gt;</span></span></div><div class="line"><span class="xml">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>$</span><span class="template-variable">&#123;pv.property.name&#125;</span><span class="xml">:  $</span><span class="template-variable">&#123;fn:substring(pv.value, 0, 10)&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>2、显示详情图片<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;p.productDetailImages&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"pi"</span>&gt;</span></span></div><div class="line"><span class="xml">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/productDetail/$</span></span></span><span class="template-variable">&#123;pi.id&#125;</span><span class="xml"><span class="tag"><span class="string">.jpg"</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h3 id="搜索查询"><a href="#搜索查询" class="headerlink" title="搜索查询"></a>搜索查询</h3><p>每个页面都包含了搜索的jsp，首页和搜索结果页包含的是<code>search.jsp</code>，其他页面包含的是<code>simpleSearch.jsp</code>。<br>这两个页面都提供了一个form，提交数据keyword到foresearch这个路径。</p>
<h4 id="ForeController-search"><a href="#ForeController-search" class="headerlink" title="ForeController.search()"></a>ForeController.search()</h4><p>通过search.jsp或者simpleSearch.jsp提交数据到路径 /foresearch， 导致ForeController.search()方法被调用<br>1、获取参数keyword<br>2、根据keyword进行模糊查询，获取满足条件的前20个产品<br>3、为这些产品设置销量和评价数量<br>4、把产品结合设置在model的”ps”属性上<br>5、服务端跳转到 searchResult.jsp 页面</p>
<p>在ProductService.java中增加search方法<br>在ProductServiceImpl中实现search方法，通过关键字进行模糊查询。</p>
<p>与 register.jsp 相仿，searchResult.jsp 也包含了header.jsp, top.jsp, search.jsp， footer.jsp 等公共页面。<br>中间是搜索结果业务页面 searchResultPage.jsp。<br>在search.jsp中，又把参数keyword显示在输入框中。<code>&lt;input name=&quot;keyword&quot; type=&quot;text&quot; value=&quot;${param.keyword}&quot; placeholder=&quot;时尚男鞋  太阳镜 &quot;&gt;</code></p>
<p>searchResultPage.jsp 本身没做什么。。。。 直接包含了 productsBySearch.jsp</p>
<p>productsBySearch.jsp 显示产寻结果：<br>1、遍历ps，把每个产品的图片，价格，标题等信息显示出来<br>2、如果ps为空，则显示 “没有满足条件的产品”</p>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><h4 id="register-jsp"><a href="#register-jsp" class="headerlink" title="register.jsp"></a>register.jsp</h4><p>与首页的home.jsp相仿，register.jsp也包含了header.jsp,top.jsp,footer.jsp等公共页面。<br>不同的是，没有使用首页的search.jsp,而是用的简单一点的 simpleSearch.jsp<br>中间是注册业务页面registerPage.jsp</p>
<h4 id="PageController-java"><a href="#PageController-java" class="headerlink" title="PageController.java"></a>PageController.java</h4><p>register.jsp 是放在WEB-INF目录下的，是无法通过浏览器直接访问的。 为了访问这些放在WEB-INF下的jsp，准备一个专门的PageController类，专门做服务端跳转。 比如访问registerPage，就会服务端跳转到WEB-INF/jsp/fore/register.jsp 去，这样就解决了无法被访问的问题。<br>这个类很简单，就是单纯用来做服务端跳转用的</p>
<h4 id="simpleSearch-jsp"><a href="#simpleSearch-jsp" class="headerlink" title="simpleSearch.jsp"></a>simpleSearch.jsp</h4><p>与首页的search.jsp不太一样的是，这个搜索栏要更简单一些，并且左右分开。</p>
<h4 id="registerPage-jsp"><a href="#registerPage-jsp" class="headerlink" title="registerPage.jsp"></a>registerPage.jsp</h4><p>注册页面的主体功能，用于提交账号密码。 在提交之前会进行为空验证，以及密码是否一致验证。<br>这段代码用于当账号提交到服务端，服务端判断当前账号已经存在的情况下，显示返回的错误提示 “用户名已经被使用,不能使用”<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;c:<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"<span class="variable">$&#123;!empty msg&#125;</span>"</span>&gt;</div><div class="line">$(<span class="string">"span.errorMessage"</span>).html(<span class="string">"<span class="variable">$&#123;msg&#125;</span>"</span>);</div><div class="line">$(<span class="string">"div.registerErrorMessageDiv"</span>).css(<span class="string">"visibility"</span>,<span class="string">"visible"</span>);	</div><div class="line">&lt;/c:<span class="keyword">if</span>&gt;</div></pre></td></tr></table></figure></p>
<h4 id="UserService-java"><a href="#UserService-java" class="headerlink" title="UserService.java"></a>UserService.java</h4><p>UserService新增加isExist(String name)方法</p>
<h4 id="UserServiceImpl-java"><a href="#UserServiceImpl-java" class="headerlink" title="UserServiceImpl.java"></a>UserServiceImpl.java</h4><p>UserServiceImpl 新增isExist(String name)的实现，判断某个名称是否已经被使用过了。</p>
<h4 id="ForeController-register"><a href="#ForeController-register" class="headerlink" title="ForeController.register()"></a>ForeController.register()</h4><p>registerPage.jsp 的form提交数据到路径 foreregister,导致ForeController.register()方法被调用</p>
<p>1、通过参数User获取浏览器提交的账号密码<br>2、通过HtmlUtils.htmlEscape(name);把账号里的特殊符号进行转义<br>3、判断用户名是否存在<br>3.1 如果已经存在，就服务端跳转到reigster.jsp，并且带材错误提示信息<br>3.2 如果不存在，则加入到数据库中，并服务端跳转到registerSuccess.jsp页面</p>
<p>注为什么要用 HtmlUtils.htmlEscape？ 因为有些同学在恶意注册的时候，会使用诸如 <script>alert(‘papapa’)</script> 这样的名称，会导致网页打开就弹出一个对话框。 那么在转义之后，就没有这个问题了。<br>注： model.addAttribute(“user”, null); 这句话的用处是当用户存在，服务端跳转到register.jsp的时候不带上参数user, 否则当注册失败的时候，会在原本是“请登录”的超链位置显示刚才注册的名称。 可以试试把这一条语句注释掉观察这个现象</p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><h4 id="login-jsp"><a href="#login-jsp" class="headerlink" title="login.jsp"></a>login.jsp</h4><p>与register.jsp相仿，login.jsp也包含了header.jsp,footer.jsp等公共页面。<br>中间是登录业务页面loginPage.jsp</p>
<h4 id="UserService-java-1"><a href="#UserService-java-1" class="headerlink" title="UserService.java"></a>UserService.java</h4><p>增加get(String name, String password)方法</p>
<h4 id="UserServiceImpl-java-1"><a href="#UserServiceImpl-java-1" class="headerlink" title="UserServiceImpl.java"></a>UserServiceImpl.java</h4><p>增加User get(String name, String password) 方法</p>
<h4 id="loginPage-jsp"><a href="#loginPage-jsp" class="headerlink" title="loginPage.jsp"></a>loginPage.jsp</h4><p>登陆业务页面，用于向服务器提交账号和密码.<br>1、与registerPage.jsp类似的，用于显示登录密码错误<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;c:<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"<span class="variable">$&#123;!empty msg&#125;</span>"</span>&gt;</div><div class="line">$(<span class="string">"span.errorMessage"</span>).html(<span class="string">"<span class="variable">$&#123;msg&#125;</span>"</span>);</div><div class="line">$(<span class="string">"div.loginErrorMessageDiv"</span>).show();		</div><div class="line">&lt;/c:<span class="keyword">if</span>&gt;</div></pre></td></tr></table></figure></p>
<p>2、其他js函数是用于为空验证</p>
<h4 id="ForeController-login"><a href="#ForeController-login" class="headerlink" title="ForeController.login()"></a>ForeController.login()</h4><p>loginPage.jsp的form提交数据到路径 forelogin,导致ForeController.login()方法被调用</p>
<p>1、获取账号密码<br>2、把账号通过HtmlUtils.htmlEscape进行转义<br>3、根据账号和密码获取User对象<br>3.1 如果对象为空，则服务端跳转回login.jsp，也带上错误信息，并且使用 loginPage.jsp 中的办法显示错误信息<br>3.2 如果对象存在，则把对象保存在session中，并客户端跳转到首页”forehome”<br>注 为什么要用 HtmlUtils.htmlEscape？ 因为注册的时候，ForeController.register()，就进行了转义，所以这里也需要转义。有些同学在恶意注册的时候，会使用诸如 <script>alert(‘papapa’)</script> 这样的名称，会导致网页打开就弹出一个对话框。 那么在转义之后，就没有这个问题了。</p>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><h4 id="ForeController-logout"><a href="#ForeController-logout" class="headerlink" title="ForeController.logout()"></a>ForeController.logout()</h4><p>通过访问退出路径: <code>http://127.0.0.1:8080/tmall_ssm/forelogout</code><br>导致ForeController.logout()方法被调用<br>1、在session中去掉”user” <code>session.removeAttribute(&quot;user&quot;);</code><br>2、客户端跳转到首页: <code>return &quot;redirect:forehome&quot;;</code></p>
<h3 id="登录状态拦截器"><a href="#登录状态拦截器" class="headerlink" title="登录状态拦截器"></a>登录状态拦截器</h3><p>查看购物车页面有个问题，必须简历在已经登录的状态之上。如果没有登录，而访问地址: <code>http://127.0.0.1:8080/tmall_ssm/forecart</code>会导致异常发生。</p>
<p><code>解决思路</code>： 在查看购物车之前，应该进行登录操作，但是又不能确保用户一定会记得登录，那么怎么办呢？<br>准备一个过滤器，当访问那些需要登录才能做的页面的时候，进行是否登录的判断，如果不通过，那么就跳转到login.jsp页面去，提示用户登录。</p>
<p>哪些页面需要登录？哪些页面不需要呢？<br>a. 不需要登录也可以访问的<br>如：注册，登录，产品，首页，分类，查询等等<br>b. 需要登录才能够访问的<br>如：购买行为，加入购物车行为，查看购物车，查看我的订单等等</p>
<h4 id="LoginInterceptor-java"><a href="#LoginInterceptor-java" class="headerlink" title="LoginInterceptor.java"></a>LoginInterceptor.java</h4><p>新建一个过滤器LoginInterceptor ，根据解决思路中<br>哪些页面需要登录？哪些页面不需要呢？<br>a. 不需要登录也可以访问的<br>如：注册，登录，产品，首页，分类，查询等等<br>b. 需要登录才能够访问的<br>如：购买行为，加入购物车行为，查看购物车，查看我的订单等等<br>不需要登录也可以访问的已经确定了，但是需要登录才能够访问，截止目前为止还不能确定，所以这个过滤器就判断如果不是注册，登录，产品这些，就进行登录校验<br>1、准备字符串数组 noNeedAuthPage，存放哪些不需要登录也能访问的路径<br>2、获取uri<br>3、去掉前缀/tmall_ssm<br>4、如果访问的地址是/fore开头<br>4.1 取出fore后面的字符串，比如是forecart,那么就取出cart<br>4.2 判断cart是否是在noNeedAuthPage<br>4.2 如果不在，那么就需要进行是否登录验证<br>4.3 从session中取出”user”对象<br>4.4 如果对象不存在，就客户端跳转到login.jsp<br>4.5 否则就正常执行</p>
<h4 id="springMVC-xml"><a href="#springMVC-xml" class="headerlink" title="springMVC.xml"></a>springMVC.xml</h4><p>在springMVC.xml中新增对登陆状态拦截器的配置</p>
<h3 id="ForeController对createOrder进行事务管理"><a href="#ForeController对createOrder进行事务管理" class="headerlink" title="ForeController对createOrder进行事务管理"></a>ForeController对createOrder进行事务管理</h3><p>实现add(Order o, List<orderitem> ois)方法，该方法通过注解进行事务管理<br><code>@Transactional(propagation= Propagation.REQUIRED,rollbackForClassName=&quot;Exception&quot;)</code></orderitem></p>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>MVC设计模式贯穿于整个后台与前台功能开发始末<br>模型(Model)、视图(View)、控制器(Controller)</p>
<h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>通过发现问题，分析问题，解决问题的三部曲，进行了各种角度的重构。经历这样一个重构过程提高开发效率，降低维护成本<br>分页方式 ，分类逆向工程 ，所有逆向工程</p>
<h3 id="统一的分页查询简化开发"><a href="#统一的分页查询简化开发" class="headerlink" title="统一的分页查询简化开发"></a>统一的分页查询简化开发</h3><p>所有的后台都使用同一个分页机制，仅仅需要一份简化的adminPage.jsp即满足了各种分页功能的需求，简化了开发，提升了开发速度。</p>
<h3 id="模块化JSP设计"><a href="#模块化JSP设计" class="headerlink" title="模块化JSP设计"></a>模块化JSP设计</h3><p>从大的JSP文件中，通过JSP包含关系抽象出多个公共文件，并把业务JSP按照功能，设计为多个小的JSP文件，便于维护和理解</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h2&gt;&lt;h3 id=&quot;项目名称&quot;&gt;&lt;a href=&quot;#项目名称&quot; class=&quot;headerlink&quot; title=&quot;项目名称&quot;&gt;&lt;/a&gt;项目名称&lt;/h3&gt;&lt;p&gt;&lt;code&gt;tmall_ssm&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;java源代码包结构&quot;&gt;&lt;a href=&quot;#java源代码包结构&quot; class=&quot;headerlink&quot; title=&quot;java源代码包结构&quot;&gt;&lt;/a&gt;java源代码包结构&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pojo&lt;/code&gt; 实体类&lt;br&gt;&lt;code&gt;mapper&lt;/code&gt; Mapper类&lt;br&gt;&lt;code&gt;interceptor&lt;/code&gt; 拦截器&lt;br&gt;&lt;code&gt;controller&lt;/code&gt; 控制层&lt;br&gt;&lt;code&gt;service&lt;/code&gt; Service层&lt;br&gt;&lt;code&gt;test&lt;/code&gt; 测试类&lt;br&gt;&lt;code&gt;util&lt;/code&gt; 工具类&lt;br&gt;&lt;code&gt;comparator&lt;/code&gt; 比较类&lt;br&gt;
    
    </summary>
    
    
      <category term="tmall_ssm" scheme="http://www.sanstylemc.cn/tags/tmall-ssm/"/>
    
  </entry>
  
  <entry>
    <title>MySQL练习二</title>
    <link href="http://www.sanstylemc.cn/2018/05/18/MySQL%E7%BB%83%E4%B9%A0%E4%BA%8C/"/>
    <id>http://www.sanstylemc.cn/2018/05/18/MySQL练习二/</id>
    <published>2018-05-18T14:35:21.000Z</published>
    <updated>2018-05-18T14:35:59.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="统计各个部门对应员工涨幅的次数总和，给出部门编码dept-no、部门名称dept-name以及次数sum"><a href="#统计各个部门对应员工涨幅的次数总和，给出部门编码dept-no、部门名称dept-name以及次数sum" class="headerlink" title="统计各个部门对应员工涨幅的次数总和，给出部门编码dept_no、部门名称dept_name以及次数sum"></a>统计各个部门对应员工涨幅的次数总和，给出部门编码dept_no、部门名称dept_name以及次数sum</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`departments`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_name`</span> varchar(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">dept_no</th>
<th style="text-align:center">dept_name</th>
<th style="text-align:center">sum</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">d001</td>
<td style="text-align:center">Marketing</td>
<td style="text-align:center">24</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">d006</td>
<td style="text-align:center">Quality Management</td>
<td style="text-align:center">25</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select c<span class="selector-class">.dept_no</span>, c<span class="selector-class">.dept_name</span>, count(salary) as sum from (salaries <span class="selector-tag">a</span>, dept_emp <span class="selector-tag">b</span> on <span class="selector-tag">a</span>.emp_no= <span class="selector-tag">b</span>.emp_no), departments c on c.dept_no= <span class="selector-tag">b</span><span class="selector-class">.dept_no</span> group by c.dept_no</div></pre></td></tr></table></figure>
<h2 id="对所有员工的当前-to-date-’9999-01-01’-薪水按照salary进行按照1-N的排名，相同salary并列且按照emp-no升序排列"><a href="#对所有员工的当前-to-date-’9999-01-01’-薪水按照salary进行按照1-N的排名，相同salary并列且按照emp-no升序排列" class="headerlink" title="对所有员工的当前(to_date=’9999-01-01’)薪水按照salary进行按照1-N的排名，相同salary并列且按照emp_no升序排列"></a>对所有员工的当前(to_date=’9999-01-01’)薪水按照salary进行按照1-N的排名，相同salary并列且按照emp_no升序排列</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
<th style="text-align:center">rank</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10005</td>
<td style="text-align:center">94692</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">10009</td>
<td style="text-align:center">94409</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">10010</td>
<td style="text-align:center">94409</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">10001</td>
<td style="text-align:center">88958</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.emp_no</span>, <span class="selector-tag">a</span><span class="selector-class">.salary</span>, count(distinct <span class="selector-tag">b</span>.salary) as rank </div><div class="line">from salaries <span class="selector-tag">a</span>, salaries <span class="selector-tag">b</span> </div><div class="line">where <span class="selector-tag">a</span>.salary&lt;= <span class="selector-tag">b</span><span class="selector-class">.salary</span> and <span class="selector-tag">a</span>.to_date= <span class="string">"9999-01-01"</span> and <span class="selector-tag">b</span>.to_date= <span class="string">"9999-01-01"</span> </div><div class="line">group by <span class="selector-tag">a</span><span class="selector-class">.emp_no</span> <span class="attribute">order</span> by rank</div></pre></td></tr></table></figure>
<h2 id="获取所有非manager员工当前的薪水情况，给出dept-no、emp-no以及salary-，当前表示to-date-’9999-01-01’"><a href="#获取所有非manager员工当前的薪水情况，给出dept-no、emp-no以及salary-，当前表示to-date-’9999-01-01’" class="headerlink" title="获取所有非manager员工当前的薪水情况，给出dept_no、emp_no以及salary ，当前表示to_date=’9999-01-01’"></a>获取所有非manager员工当前的薪水情况，给出dept_no、emp_no以及salary ，当前表示to_date=’9999-01-01’</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_manager`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">dept_no</th>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">d001</td>
<td style="text-align:center">10001</td>
<td style="text-align:center">88958</td>
</tr>
<tr>
<td style="text-align:center">d004</td>
<td style="text-align:center">10003</td>
<td style="text-align:center">43311</td>
</tr>
<tr>
<td style="text-align:center">d005</td>
<td style="text-align:center">10007</td>
<td style="text-align:center">88070</td>
</tr>
<tr>
<td style="text-align:center">d006</td>
<td style="text-align:center">10009</td>
<td style="text-align:center">95409</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> d.dept_no, <span class="built_in">e</span>.emp_no, s.salary </div><div class="line"><span class="keyword">from</span> dept_emp d, (</div><div class="line">    <span class="keyword">select</span> emp_no <span class="keyword">from</span> employees <span class="keyword">where</span> emp_no <span class="keyword">not</span> <span class="keyword">in</span> (</div><div class="line">        <span class="keyword">select</span> emp_no <span class="keyword">from</span> dept_manager</div><div class="line">    )) <span class="built_in">e</span>, salaries s </div><div class="line"><span class="keyword">where</span> d.emp_no= <span class="built_in">e</span>.emp_no <span class="keyword">and</span> d.emp_no= s.emp_no <span class="keyword">and</span> d.to_date= <span class="string">"9999-01-01"</span> <span class="keyword">and</span> s.to_date= <span class="string">"9999-01-01"</span></div></pre></td></tr></table></figure>
<h2 id="获取员工其当前的薪水比其manager当前薪水还高的相关信息，当前表示to-date-’9999-01-01’"><a href="#获取员工其当前的薪水比其manager当前薪水还高的相关信息，当前表示to-date-’9999-01-01’" class="headerlink" title="获取员工其当前的薪水比其manager当前薪水还高的相关信息，当前表示to_date=’9999-01-01’"></a>获取员工其当前的薪水比其manager当前薪水还高的相关信息，当前表示to_date=’9999-01-01’</h2><p>结果第一列给出员工的emp_no，<br>第二列给出其manager的manager_no，<br>第三列给出该员工当前的薪水emp_salary,<br>第四列给该员工对应的manager当前的薪水manager_salary<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_manager`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure></p>
<h3 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">manager_no</th>
<th style="text-align:center">emp_salary</th>
<th style="text-align:center">manager_salary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10001</td>
<td style="text-align:center">10002</td>
<td style="text-align:center">88958</td>
<td style="text-align:center">72527</td>
</tr>
<tr>
<td style="text-align:center">10009</td>
<td style="text-align:center">10010</td>
<td style="text-align:center">95409</td>
<td style="text-align:center">94409</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-3"><a href="#解答-3" class="headerlink" title="解答"></a>解答</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> t1.emp_no, t2.emp_no,t1.salary <span class="keyword">as</span> s1,t2.salary <span class="keyword">as</span> s2</div><div class="line"><span class="keyword">from</span></div><div class="line">(</div><div class="line">    <span class="keyword">select</span> salary,s.emp_no,dept_no</div><div class="line">    <span class="keyword">from</span> salaries <span class="keyword">as</span> s <span class="keyword">join</span> dept_emp de <span class="keyword">on</span> s.emp_no=de.emp_no</div><div class="line">    <span class="keyword">where</span> s.to_date=<span class="string">'9999-01-01'</span> <span class="keyword">and</span> de.to_date=<span class="string">'9999-01-01'</span> <span class="keyword">and</span></div><div class="line">    s.emp_no <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> emp_no <span class="keyword">from</span> dept_manager dm)</div><div class="line">) <span class="keyword">as</span> t1,</div><div class="line">(</div><div class="line">    <span class="keyword">select</span> salary,s.emp_no,dept_no</div><div class="line">    <span class="keyword">from</span> salaries <span class="keyword">as</span> s <span class="keyword">join</span> dept_manager dm <span class="keyword">on</span> s.emp_no=dm.emp_no</div><div class="line">    <span class="keyword">where</span> s.to_date=<span class="string">'9999-01-01'</span></div><div class="line">    <span class="keyword">and</span> dm.to_date=<span class="string">'9999-01-01'</span></div><div class="line">) <span class="keyword">as</span> t2</div><div class="line"><span class="keyword">where</span> s1&gt;s2</div><div class="line"><span class="keyword">and</span> t1.dept_no = t2.dept_no</div></pre></td></tr></table></figure>
<h2 id="汇总各个部门当前员工的title类型的分配数目，结果给出部门编号dept-no、dept-name、其当前员工所有的title以及该类型title对应的数目count"><a href="#汇总各个部门当前员工的title类型的分配数目，结果给出部门编号dept-no、dept-name、其当前员工所有的title以及该类型title对应的数目count" class="headerlink" title="汇总各个部门当前员工的title类型的分配数目，结果给出部门编号dept_no、dept_name、其当前员工所有的title以及该类型title对应的数目count"></a>汇总各个部门当前员工的title类型的分配数目，结果给出部门编号dept_no、dept_name、其当前员工所有的title以及该类型title对应的数目count</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`departments`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_name`</span> varchar(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">"titles"</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`title`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date DEFAULT <span class="literal">NULL</span>);</div></pre></td></tr></table></figure>
<h3 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">dept_no</th>
<th style="text-align:center">dept_name</th>
<th style="text-align:center">title</th>
<th style="text-align:center">count</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">d001</td>
<td style="text-align:center">Marketing</td>
<td style="text-align:center">Senior Engineer</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">d001</td>
<td style="text-align:center">Marketing</td>
<td style="text-align:center">Staff</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">d002</td>
<td style="text-align:center">Finance</td>
<td style="text-align:center">Senior Engineer</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">d003</td>
<td style="text-align:center">Human Resources</td>
<td style="text-align:center">Senior Staff</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">d004</td>
<td style="text-align:center">Production</td>
<td style="text-align:center">Senior Engineer</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">d005</td>
<td style="text-align:center">Development</td>
<td style="text-align:center">Senior Staff</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-4"><a href="#解答-4" class="headerlink" title="解答"></a>解答</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">法一：</div><div class="line">select e<span class="selector-class">.dept_no</span>,d<span class="selector-class">.dept_name</span>,t<span class="selector-class">.title</span>,count(t.title)</div><div class="line">from departments d,dept_emp e,titles t</div><div class="line">where d.dept_no=e.dept_no</div><div class="line">and e.emp_no=t.emp_no</div><div class="line">and e.to_date=<span class="string">'9999-01-01'</span></div><div class="line">and t.to_date=<span class="string">'9999-01-01'</span></div><div class="line">group by e<span class="selector-class">.dept_no</span>,t.title</div><div class="line">法二：</div><div class="line">select dp<span class="selector-class">.dept_no</span>,dp<span class="selector-class">.dept_name</span>,t<span class="selector-class">.title</span>,count(*) as count</div><div class="line">from (</div><div class="line">        select ds<span class="selector-class">.dept_no</span>,ds<span class="selector-class">.dept_name</span>,de.emp_no</div><div class="line">        from departments as ds </div><div class="line">                inner join</div><div class="line">             dept_emp as de</div><div class="line">                on ds<span class="selector-class">.dept_no</span> = de.dept_no</div><div class="line">           where de<span class="selector-class">.to_date</span> = <span class="string">'9999-01-01'</span></div><div class="line">        ) as dp</div><div class="line">        inner join </div><div class="line">     titles as t</div><div class="line">        on dp<span class="selector-class">.emp_no</span> = t.emp_no</div><div class="line">    where t<span class="selector-class">.to_date</span> = <span class="string">'9999-01-01'</span></div><div class="line">    group by dp<span class="selector-class">.dept_no</span>,t.title</div></pre></td></tr></table></figure>
<blockquote>
<p>解析: 法一、先按照emp_no分组，再按照每个emp_no里的title分组。<br>法二、先将部门表和部门员工表进行关联获取到部门编号和部门名称以及员工编号，然后再关联titles表，最后使用dept_no和title进行分组即可。</p>
</blockquote>
<h2 id="给出每个员工每年薪水涨幅超过5000的员工编号emp-no、薪水变更开始日期from-date以及薪水涨幅值salary-growth，并按照salary-growth逆序排列。"><a href="#给出每个员工每年薪水涨幅超过5000的员工编号emp-no、薪水变更开始日期from-date以及薪水涨幅值salary-growth，并按照salary-growth逆序排列。" class="headerlink" title="给出每个员工每年薪水涨幅超过5000的员工编号emp_no、薪水变更开始日期from_date以及薪水涨幅值salary_growth，并按照salary_growth逆序排列。"></a>给出每个员工每年薪水涨幅超过5000的员工编号emp_no、薪水变更开始日期from_date以及薪水涨幅值salary_growth，并按照salary_growth逆序排列。</h2><p>提示：在sqlite中获取datetime时间对应的年份函数为strftime(‘%Y’, to_date)<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure></p>
<h3 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">from_date</th>
<th style="text-align:center">salary_growth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10003</td>
<td style="text-align:center">1995-12-03</td>
<td style="text-align:center">24178</td>
</tr>
<tr>
<td style="text-align:center">10008</td>
<td style="text-align:center">1998-03-11</td>
<td style="text-align:center">20843</td>
</tr>
<tr>
<td style="text-align:center">10008</td>
<td style="text-align:center">2000-03-10</td>
<td style="text-align:center">5997</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-5"><a href="#解答-5" class="headerlink" title="解答"></a>解答</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select </span><span class="built_in">s1</span>.emp_no, <span class="built_in">s1</span>.from_date, <span class="built_in">s1</span>.salary- <span class="built_in">s2</span>.salary as salary_growth</div><div class="line"><span class="symbol">from</span> salaries <span class="built_in">s1</span>, salaries <span class="built_in">s2</span> </div><div class="line"><span class="symbol">where</span> (<span class="keyword">strftime('%Y', </span><span class="built_in">s1</span>.to_date)- <span class="keyword">strftime('%Y', </span><span class="built_in">s2</span>.to_date))= <span class="number">1</span></div><div class="line"><span class="keyword">and </span><span class="built_in">s1</span>.emp_no= <span class="built_in">s2</span>.emp_no</div><div class="line"><span class="keyword">and </span>salary_growth&gt; <span class="number">5000</span></div><div class="line"><span class="symbol">order</span> <span class="keyword">by </span>salary_growth desc</div></pre></td></tr></table></figure>
<h2 id="查找描述信息中包括robot的电影对应的分类名称以及电影数目，而且还需要该分类对应电影数量-gt-5部"><a href="#查找描述信息中包括robot的电影对应的分类名称以及电影数目，而且还需要该分类对应电影数量-gt-5部" class="headerlink" title="查找描述信息中包括robot的电影对应的分类名称以及电影数目，而且还需要该分类对应电影数量&gt;=5部"></a>查找描述信息中包括robot的电影对应的分类名称以及电影数目，而且还需要该分类对应电影数量&gt;=5部</h2><table>
<thead>
<tr>
<th style="text-align:center">film</th>
<th style="text-align:center">film</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">字段</td>
<td style="text-align:center">说明</td>
</tr>
<tr>
<td style="text-align:center">file_id</td>
<td style="text-align:center">电影id</td>
</tr>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">电影名称</td>
</tr>
<tr>
<td style="text-align:center">description</td>
<td style="text-align:center">电影描述信息</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> film (</div><div class="line">film_id <span class="built_in">smallint</span>(<span class="number">5</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">title <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">description <span class="built_in">text</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (film_id));</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">category</th>
<th style="text-align:center">category</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">字段</td>
<td style="text-align:center">说明</td>
</tr>
<tr>
<td style="text-align:center">category_id</td>
<td style="text-align:center">电影分类id</td>
</tr>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">电影分类名称</td>
</tr>
<tr>
<td style="text-align:center">last_update</td>
<td style="text-align:center">电影分类最后更新时间</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">category</span>  (</div><div class="line">category_id  tinyint(<span class="number">3</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="keyword">name</span>  <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="string">`last_update`</span> <span class="keyword">timestamp</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> ( category_id ));</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">film_category</th>
<th style="text-align:center">film_category</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">字段</td>
<td style="text-align:center">说明</td>
</tr>
<tr>
<td style="text-align:center">film_id</td>
<td style="text-align:center">电影id</td>
</tr>
<tr>
<td style="text-align:center">category_id</td>
<td style="text-align:center">电影分类id</td>
</tr>
<tr>
<td style="text-align:center">last_update</td>
<td style="text-align:center">电影id和分类id对应关系的最后更新时间</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> film_category  (</div><div class="line">film_id  <span class="built_in">smallint</span>(<span class="number">5</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">category_id  tinyint(<span class="number">3</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="string">`last_update`</span> <span class="keyword">timestamp</span>);</div></pre></td></tr></table></figure>
<h3 id="输入描述-6"><a href="#输入描述-6" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-6"><a href="#输出描述-6" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="解答-6"><a href="#解答-6" class="headerlink" title="解答"></a>解答</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> c.name,<span class="keyword">count</span>(fc.film_id)</div><div class="line"><span class="keyword">from</span> (</div><div class="line">        <span class="keyword">select</span> category_id,<span class="keyword">count</span>(film_id) <span class="keyword">as</span> amount</div><div class="line">        <span class="keyword">from</span> film_category</div><div class="line">        <span class="keyword">group</span> <span class="keyword">by</span> category_id</div><div class="line">        <span class="keyword">having</span> amount&gt;=<span class="number">5</span></div><div class="line">        ) <span class="keyword">as</span> cc,</div><div class="line">        <span class="keyword">category</span> <span class="keyword">as</span> c,</div><div class="line">        film <span class="keyword">as</span> f,</div><div class="line">        film_category <span class="keyword">as</span> fc</div><div class="line"><span class="keyword">where</span> f.film_id = fc.film_id</div><div class="line">      <span class="keyword">and</span> fc.category_id = c.category_id</div><div class="line">      <span class="keyword">and</span> cc.category_id = c.category_id</div><div class="line">      <span class="keyword">and</span> f.description <span class="keyword">like</span> <span class="string">'%robot%'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>解析: 本题考查的是多表关联，本身有三个表关联，但是由于有条件说分类下的电影总数&gt;=5，所以可以先查询出film_category表内满足条件的category_id，然后与其他三表进行关联即可。</p>
</blockquote>
<h2 id="使用join查询方式找出没有分类的电影id以及名称"><a href="#使用join查询方式找出没有分类的电影id以及名称" class="headerlink" title="使用join查询方式找出没有分类的电影id以及名称"></a>使用join查询方式找出没有分类的电影id以及名称</h2><h3 id="输入描述-7"><a href="#输入描述-7" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-7"><a href="#输出描述-7" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="解答-7"><a href="#解答-7" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> cc.film_id, cc.<span class="built_in">title</span> <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> film <span class="keyword">as</span> f <span class="keyword">left</span> <span class="keyword">join</span> film_category <span class="keyword">as</span> fc <span class="keyword">on</span> f.film_id= fc.film_id) <span class="keyword">as</span> cc <span class="keyword">where</span> cc.category_id <span class="keyword">is</span> <span class="literal">null</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;统计各个部门对应员工涨幅的次数总和，给出部门编码dept-no、部门名称dept-name以及次数sum&quot;&gt;&lt;a href=&quot;#统计各个部门对应员工涨幅的次数总和，给出部门编码dept-no、部门名称dept-name以及次数sum&quot; class=&quot;headerlink&quot; title=&quot;统计各个部门对应员工涨幅的次数总和，给出部门编码dept_no、部门名称dept_name以及次数sum&quot;&gt;&lt;/a&gt;统计各个部门对应员工涨幅的次数总和，给出部门编码dept_no、部门名称dept_name以及次数sum&lt;/h2&gt;&lt;figure class=&quot;highlight n1ql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; TABLE &lt;span class=&quot;symbol&quot;&gt;`departments`&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`dept_no`&lt;/span&gt; char(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`dept_name`&lt;/span&gt; varchar(&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;symbol&quot;&gt;`dept_no`&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; TABLE &lt;span class=&quot;symbol&quot;&gt;`dept_emp`&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`emp_no`&lt;/span&gt; int(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`dept_no`&lt;/span&gt; char(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`from_date`&lt;/span&gt; date &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`to_date`&lt;/span&gt; date &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;symbol&quot;&gt;`emp_no`&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;`dept_no`&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; TABLE &lt;span class=&quot;symbol&quot;&gt;`salaries`&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`emp_no`&lt;/span&gt; int(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`salary`&lt;/span&gt; int(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`from_date`&lt;/span&gt; date &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`to_date`&lt;/span&gt; date &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;symbol&quot;&gt;`emp_no`&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;`from_date`&lt;/span&gt;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL练习一</title>
    <link href="http://www.sanstylemc.cn/2018/05/12/MySQL%E7%BB%83%E4%B9%A0%E4%B8%80/"/>
    <id>http://www.sanstylemc.cn/2018/05/12/MySQL练习一/</id>
    <published>2018-05-12T14:14:59.000Z</published>
    <updated>2018-05-12T14:15:39.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查找最晚入职员工的所有信息"><a href="#查找最晚入职员工的所有信息" class="headerlink" title="查找最晚入职员工的所有信息"></a>查找最晚入职员工的所有信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees ( </div><div class="line">emp_no <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </div><div class="line">birth_date <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>, </div><div class="line">first_name <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </div><div class="line">last_name <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </div><div class="line">gender <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </div><div class="line">hire_date <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>, </div><div class="line">PRIMARY <span class="keyword">KEY</span> (emp_no));</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">birth_date</th>
<th style="text-align:center">first_name</th>
<th style="text-align:center">last_name</th>
<th style="text-align:center">gender</th>
<th style="text-align:center">hire_date</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10008</td>
<td style="text-align:center">1958-02-19</td>
<td style="text-align:center">Saniya</td>
<td style="text-align:center">Kalloufi</td>
<td style="text-align:center">M</td>
<td style="text-align:center">1994-09-15</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="查找入职员工时间排名倒数第三的员工所有信息"><a href="#查找入职员工时间排名倒数第三的员工所有信息" class="headerlink" title="查找入职员工时间排名倒数第三的员工所有信息"></a>查找入职员工时间排名倒数第三的员工所有信息</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">birth_date</th>
<th style="text-align:center">first_name</th>
<th style="text-align:center">last_name</th>
<th style="text-align:center">gender</th>
<th style="text-align:center">hire_date</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10005</td>
<td style="text-align:center">1955-01-21</td>
<td style="text-align:center">Kyoichi</td>
<td style="text-align:center">Maliniak</td>
<td style="text-align:center">M</td>
<td style="text-align:center">1989-09-12</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">2</span>, <span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="查找各个部门当前-to-date-’9999-01-01’-领导当前薪水详情以及其对应部门编号dept-no"><a href="#查找各个部门当前-to-date-’9999-01-01’-领导当前薪水详情以及其对应部门编号dept-no" class="headerlink" title="查找各个部门当前(to_date=’9999-01-01’)领导当前薪水详情以及其对应部门编号dept_no"></a>查找各个部门当前(to_date=’9999-01-01’)领导当前薪水详情以及其对应部门编号dept_no</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_manager`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
<th style="text-align:center">from_date</th>
<th style="text-align:center">to_date</th>
<th style="text-align:center">dept_no</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10002</td>
<td style="text-align:center">72527</td>
<td style="text-align:center">2001-08-02</td>
<td style="text-align:center">9999-01-01</td>
<td style="text-align:center">d001</td>
</tr>
<tr>
<td style="text-align:center">10004</td>
<td style="text-align:center">74057</td>
<td style="text-align:center">2001-11-27</td>
<td style="text-align:center">9999-01-01</td>
<td style="text-align:center">d004</td>
</tr>
<tr>
<td style="text-align:center">10005</td>
<td style="text-align:center">94692</td>
<td style="text-align:center">2001-09-09</td>
<td style="text-align:center">9999-01-01</td>
<td style="text-align:center">d003</td>
</tr>
<tr>
<td style="text-align:center">10006</td>
<td style="text-align:center">43311</td>
<td style="text-align:center">2001-08-02</td>
<td style="text-align:center">9999-01-01</td>
<td style="text-align:center">d002</td>
</tr>
<tr>
<td style="text-align:center">10010</td>
<td style="text-align:center">94409</td>
<td style="text-align:center">2001-11-23</td>
<td style="text-align:center">9999-01-01</td>
<td style="text-align:center">d006</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> a.*, b.dept_no <span class="keyword">from</span> salaries a <span class="keyword">left</span> <span class="keyword">join</span> dept_manager b <span class="keyword">on</span> a.emp_no= b.emp_no <span class="keyword">where</span> a.to_date= <span class="string">'9999-01-01'</span> <span class="keyword">and</span> b.to_date= <span class="string">'9999-01-01'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注解:<br><code>INNER JOIN</code> 两边表同时有对应的数据，即任何一边缺失数据就不显示。<br><code>LEFT JOIN</code> 会读取左边数据表的全部数据，即便右边表无对应数据。<br><code>RIGHT JOIN</code> 会读取右边数据表的全部数据，即便左边表无对应数据。</p>
</blockquote>
<h2 id="查找所有已经分配部门的员工的last-name和first-name"><a href="#查找所有已经分配部门的员工的last-name和first-name" class="headerlink" title="查找所有已经分配部门的员工的last_name和first_name"></a>查找所有已经分配部门的员工的last_name和first_name</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">last_name</th>
<th style="text-align:center">first_name</th>
<th style="text-align:center">dept_no</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Facello</td>
<td style="text-align:center">Georgi</td>
<td style="text-align:center">d001</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">Piveteau</td>
<td style="text-align:center">Duangkaew</td>
<td style="text-align:center">d006</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-3"><a href="#解答-3" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.last_name</span>, <span class="selector-tag">a</span><span class="selector-class">.first_name</span>, <span class="selector-tag">b</span><span class="selector-class">.dept_no</span> from employees <span class="selector-tag">a</span>, dept_emp <span class="selector-tag">b</span> where <span class="selector-tag">a</span>.emp_no= <span class="selector-tag">b</span>.emp_no</div></pre></td></tr></table></figure>
<h2 id="查找所有员工的last-name和first-name以及对应部门编号dept-no，也包括展示没有分配具体部门的员工"><a href="#查找所有员工的last-name和first-name以及对应部门编号dept-no，也包括展示没有分配具体部门的员工" class="headerlink" title="查找所有员工的last_name和first_name以及对应部门编号dept_no，也包括展示没有分配具体部门的员工"></a>查找所有员工的last_name和first_name以及对应部门编号dept_no，也包括展示没有分配具体部门的员工</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">last_name</th>
<th style="text-align:center">first_name</th>
<th style="text-align:center">dept_no</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Facello</td>
<td style="text-align:center">Georgi</td>
<td style="text-align:center">d001</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">Sluis</td>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NULL(在sqlite中此处为空,MySQL为NULL)</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-4"><a href="#解答-4" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select <span class="keyword">a</span>.last_name, <span class="keyword">a</span>.first_name, b.dept_no <span class="built_in">from</span> employees <span class="keyword">a</span> left join dept_emp b <span class="keyword">on</span> <span class="title">a</span>.<span class="title">emp_no</span>= <span class="title">b</span>.<span class="title">emp_no</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注解<br>数据库在通过连接两张或多张表来返回记录时，都会生成一张中间的临时表，然后再将这张临时表返回给用户。<br>在使用left join时，on和where条件的区别如下:<br>1、on条件是在生成临时表时使用的条件，它不管on中的条件是否为真，都会返回左边表中的记录。<br>2、where条件是在临时表生成后，再对临时表进行过滤的条件。这时已经没有left join的含义(必须返回左边表的记录)了，条件不为真的就全部过滤掉。</p>
</blockquote>
<h2 id="查找所有员工入职时候的薪水情况，给出emp-no以及salary，-并按照emp-no进行逆序"><a href="#查找所有员工入职时候的薪水情况，给出emp-no以及salary，-并按照emp-no进行逆序" class="headerlink" title="查找所有员工入职时候的薪水情况，给出emp_no以及salary， 并按照emp_no进行逆序"></a>查找所有员工入职时候的薪水情况，给出emp_no以及salary， 并按照emp_no进行逆序</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10011</td>
<td style="text-align:center">25828</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">10001</td>
<td style="text-align:center">60117</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-5"><a href="#解答-5" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select <span class="keyword">a</span>.emp_no, b.salary <span class="built_in">from</span> employees <span class="keyword">a</span>, salaries b where <span class="keyword">a</span>.emp_no= b.emp_no <span class="keyword">and</span> <span class="keyword">a</span>.hire_date= b.from_date order <span class="keyword">by</span> <span class="keyword">a</span>.emp_no desc</div></pre></td></tr></table></figure>
<h2 id="查找薪水涨幅超过15次的员工号emp-no以及其对应的涨幅次数t"><a href="#查找薪水涨幅超过15次的员工号emp-no以及其对应的涨幅次数t" class="headerlink" title="查找薪水涨幅超过15次的员工号emp_no以及其对应的涨幅次数t"></a>查找薪水涨幅超过15次的员工号emp_no以及其对应的涨幅次数t</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-6"><a href="#输入描述-6" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-6"><a href="#输出描述-6" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">t</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10001</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">10004</td>
<td style="text-align:center">16</td>
</tr>
<tr>
<td style="text-align:center">10009</td>
<td style="text-align:center">18</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-6"><a href="#解答-6" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select emp_no, count(emp_no) as t <span class="keyword">from</span> salaries<span class="built_in"> group </span>by emp_no having t&gt; 15</div></pre></td></tr></table></figure>
<blockquote>
<p>注解<br><code>GROUP BY</code>语法可以根据给定数据列的每个成员对查询结果进行分组统计，最终得到一个分组汇总表。<br><code>SELECT</code>子句中的列名必须为分组列或列函数，列函数对于<code>GROUP BY</code>子句定义的每个组返回一个结果。<br><code>GROUP BY</code>子句之后使用<code>Having</code>子句，可应用限定条件进行分组，以便系统仅对满足条件的组返回结果。因此，在<code>GROUP BY</code>子句后面包含了一个<code>HAVING</code>子句。<code>HAVING</code>类似于<code>WHERE</code>(唯一的差别是<code>WHERE</code>过滤行，<code>HAVING</code>过滤组), <code>HAVING</code>支持所有的<code>WHERE</code>操作符。</p>
</blockquote>
<h2 id="找出所有员工当前-to-date-’9999-01-01’-具体的薪水salary情况，对于相同的薪水只显示一次-并按照逆序显示"><a href="#找出所有员工当前-to-date-’9999-01-01’-具体的薪水salary情况，对于相同的薪水只显示一次-并按照逆序显示" class="headerlink" title="找出所有员工当前(to_date=’9999-01-01’)具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示"></a>找出所有员工当前(to_date=’9999-01-01’)具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-7"><a href="#输入描述-7" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-7"><a href="#输出描述-7" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">salary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">94692</td>
</tr>
<tr>
<td style="text-align:center">94409</td>
</tr>
<tr>
<td style="text-align:center">88958</td>
</tr>
<tr>
<td style="text-align:center">88070</td>
</tr>
<tr>
<td style="text-align:center">74057</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-7"><a href="#解答-7" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> salary <span class="keyword">from</span> salaries <span class="keyword">where</span> <span class="keyword">to_date</span>= <span class="string">'9999-01-01'</span> <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></div></pre></td></tr></table></figure>
<h2 id="获取所有部门当前manager的当前薪水情况，给出dept-no-emp-no以及salary，当前表示to-date-’9999-01-01’"><a href="#获取所有部门当前manager的当前薪水情况，给出dept-no-emp-no以及salary，当前表示to-date-’9999-01-01’" class="headerlink" title="获取所有部门当前manager的当前薪水情况，给出dept_no, emp_no以及salary，当前表示to_date=’9999-01-01’"></a>获取所有部门当前manager的当前薪水情况，给出dept_no, emp_no以及salary，当前表示to_date=’9999-01-01’</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_manager`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-8"><a href="#输入描述-8" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-8"><a href="#输出描述-8" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">dept_no</th>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">d001</td>
<td style="text-align:center">10002</td>
<td style="text-align:center">72527</td>
</tr>
<tr>
<td style="text-align:center">d004</td>
<td style="text-align:center">10004</td>
<td style="text-align:center">74057</td>
</tr>
<tr>
<td style="text-align:center">d003</td>
<td style="text-align:center">10005</td>
<td style="text-align:center">94692</td>
</tr>
<tr>
<td style="text-align:center">d002</td>
<td style="text-align:center">10006</td>
<td style="text-align:center">43311</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-8"><a href="#解答-8" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.dept_no</span>, <span class="selector-tag">a</span><span class="selector-class">.emp_no</span>, <span class="selector-tag">b</span><span class="selector-class">.salary</span> from salaries <span class="selector-tag">b</span> inner join dept_manager <span class="selector-tag">a</span> on <span class="selector-tag">a</span>.emp_no= <span class="selector-tag">b</span><span class="selector-class">.emp_no</span> where <span class="selector-tag">a</span>.to_date= <span class="string">'9999-01-01'</span> and <span class="selector-tag">b</span>.to_date=<span class="string">'9999-01-01'</span></div></pre></td></tr></table></figure>
<h2 id="获取所有非manager的员工emp-no"><a href="#获取所有非manager的员工emp-no" class="headerlink" title="获取所有非manager的员工emp_no"></a>获取所有非manager的员工emp_no</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_manager`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-9"><a href="#输入描述-9" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-9"><a href="#输出描述-9" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10001</td>
</tr>
<tr>
<td style="text-align:center">10003</td>
</tr>
<tr>
<td style="text-align:center">10007</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-9"><a href="#解答-9" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.emp_no</span> from employees <span class="selector-tag">a</span> where <span class="selector-tag">a</span><span class="selector-class">.emp_no</span> not <span class="keyword">in</span> (select <span class="selector-tag">b</span><span class="selector-class">.emp_no</span> from dept_manager b)</div></pre></td></tr></table></figure>
<blockquote>
<p>注解<br><code>employees</code>里的<code>emp_no</code>不在<code>dept_manager</code>出现非<code>manager</code>了，关键使用<code>not in</code></p>
</blockquote>
<h2 id="获取所有员工当前的manager，如果当前的manager是自己的话结果不显示，当前表示to-date-’9999-01-01’。结果第一列给出当前员工的emp-no-第二列给出其manager对应的manager-no。"><a href="#获取所有员工当前的manager，如果当前的manager是自己的话结果不显示，当前表示to-date-’9999-01-01’。结果第一列给出当前员工的emp-no-第二列给出其manager对应的manager-no。" class="headerlink" title="获取所有员工当前的manager，如果当前的manager是自己的话结果不显示，当前表示to_date=’9999-01-01’。结果第一列给出当前员工的emp_no,第二列给出其manager对应的manager_no。"></a>获取所有员工当前的manager，如果当前的manager是自己的话结果不显示，当前表示to_date=’9999-01-01’。结果第一列给出当前员工的emp_no,第二列给出其manager对应的manager_no。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_manager`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-10"><a href="#输入描述-10" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-10"><a href="#输出描述-10" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">manager_no</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10001</td>
<td style="text-align:center">10002</td>
</tr>
<tr>
<td style="text-align:center">10003</td>
<td style="text-align:center">10004</td>
</tr>
<tr>
<td style="text-align:center">10009</td>
<td style="text-align:center">10010</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-10"><a href="#解答-10" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.emp_no</span>, <span class="selector-tag">b</span><span class="selector-class">.emp_no</span> as manager_no from dept_emp <span class="selector-tag">a</span>, dept_manager <span class="selector-tag">b</span> where <span class="selector-tag">a</span>.to_date= <span class="string">'9999-01-01'</span> and <span class="selector-tag">b</span>.to_date=<span class="string">'9999-01-01'</span> and <span class="selector-tag">a</span>.dept_no= <span class="selector-tag">b</span><span class="selector-class">.dept_no</span> and <span class="selector-tag">a</span><span class="selector-class">.emp_no</span> != <span class="selector-tag">b</span>.emp_no</div></pre></td></tr></table></figure>
<blockquote>
<p>他们的职位不一样，部门却是一样的。</p>
</blockquote>
<h2 id="获取所有部门中当前员工薪水最高的相关信息，给出dept-no-emp-no以及其对应的salary"><a href="#获取所有部门中当前员工薪水最高的相关信息，给出dept-no-emp-no以及其对应的salary" class="headerlink" title="获取所有部门中当前员工薪水最高的相关信息，给出dept_no, emp_no以及其对应的salary"></a>获取所有部门中当前员工薪水最高的相关信息，给出dept_no, emp_no以及其对应的salary</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-11"><a href="#输入描述-11" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-11"><a href="#输出描述-11" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">dept_no</th>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">d001</td>
<td style="text-align:center">10001</td>
<td style="text-align:center">88958</td>
</tr>
<tr>
<td style="text-align:center">d002</td>
<td style="text-align:center">10006</td>
<td style="text-align:center">43311</td>
</tr>
<tr>
<td style="text-align:center">d003</td>
<td style="text-align:center">10005</td>
<td style="text-align:center">94692</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-11"><a href="#解答-11" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.dept_no</span>,<span class="selector-tag">a</span><span class="selector-class">.emp_no</span>,max(s.salary) as salary</div><div class="line">from dept_emp <span class="selector-tag">a</span> <span class="attribute">left</span> join salaries s </div><div class="line">            on <span class="selector-tag">a</span>.emp_no= s.emp_no</div><div class="line">where <span class="selector-tag">a</span>.to_date=<span class="string">'9999-01-01'</span></div><div class="line">    and s.to_date=<span class="string">'9999-01-01'</span></div><div class="line">group by <span class="selector-tag">a</span>.dept_no</div></pre></td></tr></table></figure>
<h2 id="从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。"><a href="#从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。" class="headerlink" title="从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。"></a>从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">"titles"</span> (</div><div class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>);</div></pre></td></tr></table></figure>
<h3 id="输入描述-12"><a href="#输入描述-12" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-12"><a href="#输出描述-12" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">title</th>
<th style="text-align:center">t</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Assistant Engineer</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">Engineer</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">Staff</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-12"><a href="#解答-12" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select title, count(title) as t <span class="keyword">from</span> titles<span class="built_in"> group </span>by title having t&gt;= 2</div></pre></td></tr></table></figure>
<blockquote>
<p>having语句可以筛选出满足条件的聚合函数的结果。</p>
</blockquote>
<h2 id="从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。注意对于重复的emp-no进行忽略。"><a href="#从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。注意对于重复的emp-no进行忽略。" class="headerlink" title="从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。注意对于重复的emp_no进行忽略。"></a>从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。注意对于重复的emp_no进行忽略。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">"titles"</span> (</div><div class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>);</div></pre></td></tr></table></figure>
<h3 id="输入描述-13"><a href="#输入描述-13" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-13"><a href="#输出描述-13" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">title</th>
<th style="text-align:center">t</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Assistant Engineer</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">Engineer</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">Staff</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-13"><a href="#解答-13" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select title, count(distinct emp_no) as t <span class="keyword">from</span> titles<span class="built_in"> group </span>by title having t&gt;= 2</div></pre></td></tr></table></figure>
<h2 id="查找employees表所有emp-no为奇数，且last-name不为Mary的员工信息，并按照hire-date逆序排列"><a href="#查找employees表所有emp-no为奇数，且last-name不为Mary的员工信息，并按照hire-date逆序排列" class="headerlink" title="查找employees表所有emp_no为奇数，且last_name不为Mary的员工信息，并按照hire_date逆序排列"></a>查找employees表所有emp_no为奇数，且last_name不为Mary的员工信息，并按照hire_date逆序排列</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-14"><a href="#输入描述-14" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-14"><a href="#输出描述-14" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">birth_date</th>
<th style="text-align:center">first_name</th>
<th style="text-align:center">last_name</th>
<th style="text-align:center">gender</th>
<th style="text-align:center">hire_date</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10011</td>
<td style="text-align:center">1953-11-07</td>
<td style="text-align:center">Mary</td>
<td style="text-align:center">Sluis</td>
<td style="text-align:center">F</td>
<td style="text-align:center">1990-01-22</td>
</tr>
<tr>
<td style="text-align:center">10005</td>
<td style="text-align:center">1955-01-21</td>
<td style="text-align:center">Kyoichi</td>
<td style="text-align:center">Maliniak</td>
<td style="text-align:center">M</td>
<td style="text-align:center">1989-09-12</td>
</tr>
<tr>
<td style="text-align:center">10007</td>
<td style="text-align:center">1957-05-23</td>
<td style="text-align:center">Tzvetan</td>
<td style="text-align:center">Zielinski</td>
<td style="text-align:center">F</td>
<td style="text-align:center">1989-02-10</td>
</tr>
<tr>
<td style="text-align:center">10003</td>
<td style="text-align:center">1959-12-03</td>
<td style="text-align:center">Parto</td>
<td style="text-align:center">Bamford</td>
<td style="text-align:center">M</td>
<td style="text-align:center">1986-08-28</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-14"><a href="#解答-14" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> emp_no% <span class="number">2</span>!= <span class="number">0</span> <span class="keyword">and</span> last_name!= <span class="string">"Mary"</span> <span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span></div></pre></td></tr></table></figure>
<h2 id="统计出当前各个title类型对应的员工当前薪水对应的平均工资。结果给出title以及平均工资avg。"><a href="#统计出当前各个title类型对应的员工当前薪水对应的平均工资。结果给出title以及平均工资avg。" class="headerlink" title="统计出当前各个title类型对应的员工当前薪水对应的平均工资。结果给出title以及平均工资avg。"></a>统计出当前各个title类型对应的员工当前薪水对应的平均工资。结果给出title以及平均工资avg。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">"titles"</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`title`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date DEFAULT <span class="literal">NULL</span>);</div></pre></td></tr></table></figure>
<h3 id="输入描述-15"><a href="#输入描述-15" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-15"><a href="#输出描述-15" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">title</th>
<th style="text-align:center">avg</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Engineer Engineer</td>
<td style="text-align:center">94409.0</td>
</tr>
<tr>
<td style="text-align:center">Senior Engineer</td>
<td style="text-align:center">69009.2</td>
</tr>
<tr>
<td style="text-align:center">Senior Staff</td>
<td style="text-align:center">91381.0</td>
</tr>
<tr>
<td style="text-align:center">Staff</td>
<td style="text-align:center">72527.0</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-15"><a href="#解答-15" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select title, avg(salary) <span class="keyword">from</span> titles left join salaries on titles.emp_no= salaries.emp_no where titles.to_date= <span class="string">"9999-01-01"</span> <span class="keyword">and</span> salaries.to_date= <span class="string">"9999-01-01"</span><span class="built_in"> group </span>by titles.title</div></pre></td></tr></table></figure>
<h2 id="获取当前（to-date-’9999-01-01’）薪水第二多的员工的emp-no以及其对应的薪水salary"><a href="#获取当前（to-date-’9999-01-01’）薪水第二多的员工的emp-no以及其对应的薪水salary" class="headerlink" title="获取当前（to_date=’9999-01-01’）薪水第二多的员工的emp_no以及其对应的薪水salary"></a>获取当前（to_date=’9999-01-01’）薪水第二多的员工的emp_no以及其对应的薪水salary</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-16"><a href="#输入描述-16" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-16"><a href="#输出描述-16" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10009</td>
<td style="text-align:center">94409</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-16"><a href="#解答-16" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> emp_no, salary <span class="keyword">from</span> salaries <span class="keyword">where</span> <span class="keyword">to_date</span>= <span class="string">"9999-01-01"</span> <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>, <span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="查找当前薪水-to-date-’9999-01-01’-排名第二多的员工编号emp-no、薪水salary、last-name以及first-name，不准使用order-by"><a href="#查找当前薪水-to-date-’9999-01-01’-排名第二多的员工编号emp-no、薪水salary、last-name以及first-name，不准使用order-by" class="headerlink" title="查找当前薪水(to_date=’9999-01-01’)排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不准使用order by"></a>查找当前薪水(to_date=’9999-01-01’)排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不准使用order by</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-17"><a href="#输入描述-17" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-17"><a href="#输出描述-17" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
<th style="text-align:center">last_name</th>
<th style="text-align:center">first_name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10009</td>
<td style="text-align:center">94409</td>
<td style="text-align:center">Peac</td>
<td style="text-align:center">Sumant</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-17"><a href="#解答-17" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.emp_no</span>, max(<span class="selector-tag">a</span>.salary), <span class="selector-tag">b</span><span class="selector-class">.last_name</span>, <span class="selector-tag">b</span><span class="selector-class">.first_name</span> </div><div class="line">from salaries <span class="selector-tag">a</span>, employees <span class="selector-tag">b</span> where <span class="selector-tag">a</span>.emp_no= <span class="selector-tag">b</span><span class="selector-class">.emp_no</span> </div><div class="line">    and <span class="selector-tag">a</span>.to_date= <span class="string">"9999-01-01"</span> </div><div class="line">    and <span class="selector-tag">a</span><span class="selector-class">.salary</span> not <span class="keyword">in</span> (select max(salary) from salaries where to_date= <span class="string">"9999-01-01"</span>)</div></pre></td></tr></table></figure>
<h2 id="查找所有员工的last-name和first-name以及对应的dept-name，也包括暂时没有分配部门的员工"><a href="#查找所有员工的last-name和first-name以及对应的dept-name，也包括暂时没有分配部门的员工" class="headerlink" title="查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工"></a>查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`departments`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_name`</span> varchar(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-18"><a href="#输入描述-18" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-18"><a href="#输出描述-18" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">last_name</th>
<th style="text-align:center">first_name</th>
<th style="text-align:center">dept_name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Facello</td>
<td style="text-align:center">Georgi</td>
<td style="text-align:center">Marketing</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">Sluis</td>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NULL</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-18"><a href="#解答-18" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> a.last_name, a.first_name, c.dept_name <span class="keyword">from</span> employees a <span class="keyword">left</span> <span class="keyword">join</span> dept_emp b <span class="keyword">on</span> a.emp_no= b.emp_no <span class="keyword">left</span> <span class="keyword">join</span> departments c <span class="keyword">on</span> b.dept_no= c.dept_no</div></pre></td></tr></table></figure>
<h2 id="查找员工编号emp-now为10001其自入职以来的薪水salary涨幅值growth"><a href="#查找员工编号emp-now为10001其自入职以来的薪水salary涨幅值growth" class="headerlink" title="查找员工编号emp_now为10001其自入职以来的薪水salary涨幅值growth"></a>查找员工编号emp_now为10001其自入职以来的薪水salary涨幅值growth</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-19"><a href="#输入描述-19" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-19"><a href="#输出描述-19" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">growth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">28841</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-19"><a href="#解答-19" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> (</div><div class="line">    (<span class="keyword">select</span> salary <span class="keyword">from</span> salaries <span class="keyword">where</span> emp_no= <span class="string">"10001"</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">to_date</span> <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>)- </div><div class="line">    (<span class="keyword">select</span> salary <span class="keyword">from</span> salaries <span class="keyword">where</span> emp_no= <span class="string">"10001"</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">to_date</span> <span class="keyword">asc</span> <span class="keyword">limit</span> <span class="number">1</span>)</div><div class="line">) <span class="keyword">as</span> growth</div></pre></td></tr></table></figure>
<h2 id="查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp-noy以及其对应的薪水涨幅growth，并按照growth进行升序"><a href="#查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp-noy以及其对应的薪水涨幅growth，并按照growth进行升序" class="headerlink" title="查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp_noy以及其对应的薪水涨幅growth，并按照growth进行升序"></a>查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp_noy以及其对应的薪水涨幅growth，并按照growth进行升序</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-20"><a href="#输入描述-20" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-20"><a href="#输出描述-20" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">growth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10011</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">10010</td>
<td style="text-align:center">54496</td>
</tr>
<tr>
<td style="text-align:center">10004</td>
<td style="text-align:center">34003</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-20"><a href="#解答-20" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">select t1<span class="selector-class">.emp_no</span>, t1<span class="selector-class">.salary-</span> t2<span class="selector-class">.salary</span> as growth from(</div><div class="line">    (select <span class="selector-tag">a</span><span class="selector-class">.emp_no</span>, <span class="selector-tag">b</span><span class="selector-class">.salary</span> from employees <span class="selector-tag">a</span>, salaries <span class="selector-tag">b</span> where <span class="selector-tag">a</span>.emp_no= <span class="selector-tag">b</span><span class="selector-class">.emp_no</span> and <span class="selector-tag">b</span>.to_date= <span class="string">"9999-01-01"</span>) as t1, </div><div class="line">    (select <span class="selector-tag">a</span><span class="selector-class">.emp_no</span>, <span class="selector-tag">b</span><span class="selector-class">.salary</span> from employees <span class="selector-tag">a</span>, salaries <span class="selector-tag">b</span> where <span class="selector-tag">a</span>.emp_no= <span class="selector-tag">b</span><span class="selector-class">.emp_no</span> and <span class="selector-tag">b</span>.from_date= <span class="selector-tag">a</span>.hire_date) as t2</div><div class="line">) where t1.emp_no= t2<span class="selector-class">.emp_no</span> <span class="attribute">order</span> by growth</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查找最晚入职员工的所有信息&quot;&gt;&lt;a href=&quot;#查找最晚入职员工的所有信息&quot; class=&quot;headerlink&quot; title=&quot;查找最晚入职员工的所有信息&quot;&gt;&lt;/a&gt;查找最晚入职员工的所有信息&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; employees ( &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;emp_no &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;birth_date &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;first_name &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;last_name &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gender &lt;span class=&quot;built_in&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hire_date &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (emp_no));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>response用法</title>
    <link href="http://www.sanstylemc.cn/2018/05/11/response%E7%94%A8%E6%B3%95/"/>
    <id>http://www.sanstylemc.cn/2018/05/11/response用法/</id>
    <published>2018-05-11T09:20:59.000Z</published>
    <updated>2018-05-11T09:21:29.761Z</updated>
    
    <content type="html"><![CDATA[<p><code>response</code>是<code>HttpServletResponse</code>的实例，用于提供给浏览器的响应信息。<br><a id="more"></a></p>
<h2 id="设置响应内容"><a href="#设置响应内容" class="headerlink" title="设置响应内容"></a>设置响应内容</h2><p>通过<code>response</code>设置响应已经用得比较多了，<code>PrintWriter pw= response.getWriter();</code> 通过<code>response.getWriter();</code>获取一个<code>PrintWriter</code>对象。<br>可以使用<code>println()</code>，<code>append()</code>，<code>write()</code>，<code>format()</code>等等方法设置返回给浏览器的html内容。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line">     </div><div class="line">    public void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)&#123;</div><div class="line">         </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="type">PrintWriter</span> pw= response.getWriter();</div><div class="line">            pw.println(<span class="string">"&lt;h1&gt;Hello Servlet&lt;/h1&gt;"</span>);</div><div class="line">             </div><div class="line">        &#125; <span class="keyword">catch</span> (<span class="type">IOException</span> e) &#123;</div><div class="line">            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="设置响应格式"><a href="#设置响应格式" class="headerlink" title="设置响应格式"></a>设置响应格式</h2><blockquote>
<p>response.setContentType(“text/html”);</p>
</blockquote>
<p><code>&quot;text/html&quot;</code> 是即格式 ，在<code>request</code>获取头信息中对应的<code>request.getHeader(&quot;accept&quot;)</code>。<br><code>&quot;text/html&quot;</code> 是存在的，表示浏览器可以识别这种格式，如果换一个其他的格式， 比如 <code>&quot;text/lol&quot;</code> ，浏览器不能识别，那么打开此<code>servlet</code>就会弹出一个下载的对话框。<br>这样的手段也就常常用于实现下载功能。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    public void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) &#123;</div><div class="line"> </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="type">PrintWriter</span> pw = response.getWriter();</div><div class="line">            pw.println(<span class="string">"&lt;h1&gt;Hello Servlet&lt;/h1&gt;"</span>);</div><div class="line"> </div><div class="line">            response.setContentType(<span class="string">"text/lol"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (<span class="type">IOException</span> e) &#123;</div><div class="line">            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="设置响应编码"><a href="#设置响应编码" class="headerlink" title="设置响应编码"></a>设置响应编码</h2><p>设置响应编码有两种方式<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>)<span class="comment">;</span></div><div class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>这两种方式都需要在response.getWriter调用之前执行才能生效。<br>他们的区别在于:<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>不仅发送到浏览器的内容会使用UTF-8编码，而且还通知浏览器使用UTF-8编码方式进行显示。所以总能正常显示中文。<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>仅仅是发送的浏览器的内容是UTF-8编码的，至于浏览器是用哪种编码方式显示不管。 所以当浏览器的显示编码方式不是UTF-8的时候，就会看到乱码，需要手动再进行一次设置。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    public void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</div><div class="line"><span class="comment">//          response.setCharacterEncoding("UTF-8");</span></div><div class="line"> </div><div class="line">            <span class="type">PrintWriter</span> pw = response.getWriter();</div><div class="line">            pw.println(<span class="string">"&lt;h1&gt;第一次 使用 Servlet&lt;/h1&gt;"</span>);</div><div class="line"> </div><div class="line">        &#125; <span class="keyword">catch</span> (<span class="type">IOException</span> e) &#123;</div><div class="line">            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="301或者302客户端跳转"><a href="#301或者302客户端跳转" class="headerlink" title="301或者302客户端跳转"></a>301或者302客户端跳转</h2><p>客户端有两种跳转：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">301</span>表示永久性跳转</div><div class="line"><span class="selector-tag">response</span><span class="selector-class">.setStatus</span>(<span class="number">301</span>);</div><div class="line"><span class="selector-tag">response</span><span class="selector-class">.setHeader</span>(<span class="string">"Location"</span>, <span class="string">"fail.html"</span>);</div><div class="line"><span class="selector-tag">302</span>表示临时跳转   </div><div class="line"><span class="selector-tag">response</span><span class="selector-class">.sendRedirect</span>(<span class="string">"fail.html"</span>);</div></pre></td></tr></table></figure></p>
<p>用户感受不出这两种跳转的区别，但是可以借助火狐的调试工具看到响应的头信息是：<br>301 Moved Permanently。<br>301和302的区别主要在搜索引擎对页面排名的时候有影响。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> void service(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line"> </div><div class="line">        <span class="type">String</span> name = request.getParameter(<span class="string">"name"</span>);</div><div class="line">        <span class="type">String</span> password = request.getParameter(<span class="string">"password"</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password)) &#123;</div><div class="line">            request.getRequestDispatcher(<span class="string">"success.html"</span>).forward(request, response);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            response.setStatus(<span class="number">301</span>);</div><div class="line">            response.setHeader(<span class="string">"Location"</span>, <span class="string">"fail.html"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="设置不使用缓存"><a href="#设置不使用缓存" class="headerlink" title="设置不使用缓存"></a>设置不使用缓存</h2><p>使用缓存可以加快页面的加载，降低服务端的负担。但是也可能看到过时的信息，可以通过如下手段通知浏览器不要使用缓存<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">response.setDateHeader("Expires",0 );</div><div class="line">response.setHeader("<span class="keyword">Cache</span>-Control<span class="string">","</span><span class="keyword">no</span>-<span class="keyword">cache</span><span class="string">");</span></div><div class="line"><span class="string">response.setHeader("</span><span class="keyword">pragma</span><span class="string">","</span><span class="keyword">no</span>-<span class="keyword">cache</span><span class="string">");</span></div></pre></td></tr></table></figure></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.util.<span class="type">Date</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    public void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) &#123;</div><div class="line"> </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0</span>);</div><div class="line">            response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);</div><div class="line">            response.setHeader(<span class="string">"pragma"</span>, <span class="string">"no-cache"</span>);</div><div class="line">            response.getWriter().println(<span class="string">"&lt;h1&gt;Hello Servlet!&lt;/h1&gt;"</span>);</div><div class="line">            response.getWriter().println(<span class="keyword">new</span> <span class="type">Date</span>().toLocaleString());</div><div class="line">        &#125; <span class="keyword">catch</span> (<span class="type">IOException</span> e) &#123;</div><div class="line">            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;response&lt;/code&gt;是&lt;code&gt;HttpServletResponse&lt;/code&gt;的实例，用于提供给浏览器的响应信息。&lt;br&gt;
    
    </summary>
    
    
      <category term="ssm" scheme="http://www.sanstylemc.cn/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>request常见方法</title>
    <link href="http://www.sanstylemc.cn/2018/05/11/request%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"/>
    <id>http://www.sanstylemc.cn/2018/05/11/request常见方法/</id>
    <published>2018-05-11T08:53:47.000Z</published>
    <updated>2018-05-11T08:54:17.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="request常见方法"><a href="#request常见方法" class="headerlink" title="request常见方法"></a>request常见方法</h2><p><code>request.getRequestURL()</code>: 浏览器发出请求时的完整URL，包括协议 主机名 端口(如果有)” +<br><code>request.getRequestURI()</code>: 浏览器发出请求的资源名部分，去掉了协议和主机名” +<br><code>request.getQueryString()</code>: 请求行中的参数部分，只能显示以get方式发出的参数，post方式的看不到<br><code>request.getRemoteAddr()</code>: 浏览器所处于的客户机的IP地址<br><code>request.getRemoteHost()</code>: 浏览器所处于的客户机的主机名<br><code>request.getRemotePort()</code>: 浏览器所处于的客户机使用的网络端口<br><code>request.getLocalAddr()</code>: 服务器的IP地址<br><code>request.getLocalName()</code>: 服务器的主机名<br><code>request.getMethod()</code>: 得到客户机请求方式一般是GET或者POST<br><a id="more"></a><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="title">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    protected void service(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line">        <span class="type">String</span> name = request.getParameter(<span class="string">"name"</span>);</div><div class="line">        <span class="type">String</span> password = request.getParameter(<span class="string">"password"</span>);</div><div class="line"> </div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"浏览器发出请求时的完整URL，包括协议 主机名 端口(如果有): "</span> + request.getRequestURL());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"浏览器发出请求的资源名部分，去掉了协议和主机名: "</span> + request.getRequestURI());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"请求行中的参数部分: "</span> + request.getQueryString());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"浏览器所处于的客户机的IP地址: "</span> + request.getRemoteAddr());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"浏览器所处于的客户机的主机名: "</span> + request.getRemoteHost());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"浏览器所处于的客户机使用的网络端口: "</span> + request.getRemotePort());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"服务器的IP地址: "</span> + request.getLocalAddr());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"服务器的主机名: "</span> + request.getLocalName());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"得到客户机请求方式: "</span> + request.getMethod());</div><div class="line"> </div><div class="line">        <span class="type">String</span> html = null;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password))</div><div class="line">            html = <span class="string">"&lt;div style='color:green'&gt;登录成功&lt;/div&gt;"</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            html = <span class="string">"&lt;div style='color:red'&gt;登录失败&lt;/div&gt;"</span>;</div><div class="line"> </div><div class="line">        response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</div><div class="line">        <span class="type">PrintWriter</span> pw = response.getWriter();</div><div class="line">        pw.<span class="built_in">println</span>(html);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/sunstady/hexo/blob/master/request%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/1.jpg?raw=true" alt="1"></p>
<h2 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h2><p><code>request.getParameter()</code>：是常见的方法，用于获取单值的参数<br><code>request.getParameterValues()</code>：用于获取具有多值的参数，比如注册的时候提交的爱好，可以是多选的。<br><code>request.getParameterMap()</code>：用于遍历所有的参数，并返回Map类型。<br>本例准备了一个注册的例子：<br>包括一个注册页面register.html<br>服务端的RegisterServlet<br>分别演示了获取单值参数，多值参数以及遍历所有的参数。<br><img src="https://github.com/sunstady/hexo/blob/master/request%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/2.jpg?raw=true" alt="2"><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">register.html</div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"register"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">    账号 ： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    爱好 ： LOL<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobits"</span> <span class="attr">value</span>=<span class="string">"lol"</span>&gt;</span></div><div class="line">        DOTA<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobits"</span> <span class="attr">value</span>=<span class="string">"dota"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">       </div><div class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="type">RegisterServlet</span>.java</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServlet</span> <span class="title">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    protected void service(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line"> </div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"获取单值参数name:"</span> + request.getParameter(<span class="string">"name"</span>));</div><div class="line"> </div><div class="line">        <span class="type">String</span>[] hobits = request.getParameterValues(<span class="string">"hobits"</span>);</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"获取具有多值的参数hobits: "</span> + <span class="type">Arrays</span>.asList(hobits));</div><div class="line"> </div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"通过 getParameterMap 遍历所有的参数： "</span>);</div><div class="line">        <span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">String</span>[]&gt; parameters = request.getParameterMap();</div><div class="line"> </div><div class="line">        <span class="type">Set</span>&lt;<span class="type">String</span>&gt; paramNames = parameters.keySet();</div><div class="line">        <span class="keyword">for</span> (<span class="type">String</span> param : paramNames) &#123;</div><div class="line">            <span class="type">String</span>[] value = parameters.<span class="keyword">get</span>(param);</div><div class="line">            <span class="type">System</span>.out.<span class="built_in">println</span>(param + <span class="string">":"</span> + <span class="type">Arrays</span>.asList(value));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">web.xml</div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>10<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">     </div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RegisterServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>RegisterServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RegisterServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/register<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>   </div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="获取头信息"><a href="#获取头信息" class="headerlink" title="获取头信息"></a>获取头信息</h2><p><code>request.getHeader()</code>获取浏览器传递过来的头信息。比如getHeader(“user-agent”)可以获取 浏览器的基本资料，这样就能判断是firefox、IE、chrome或者是safari浏览器 。<br><code>request.getHeaderNames()</code>获取 浏览器所有的头信息名称，根据头信息名称就能遍历出所有的头信息。<br>在本例，修改HelloServlet，使其获取头信息。<br>访问HelloServlet获取如下头信息：<br><code>host</code>: 主机地址<br><code>user-agent</code>: 浏览器基本资料<br><code>accept</code>: 表示浏览器接受的数据类型<br><code>accept-language</code>: 表示浏览器接受的语言<br><code>accept-encoding</code>: 表示浏览器接受的压缩方式，是压缩方式，并非编码<br><code>connection</code>: 是否保持连接<br><code>cache-control</code>:缓存时限<br><img src="https://github.com/sunstady/hexo/blob/master/request%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/3.jpg?raw=true" alt="3"><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.IOException;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Date;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Enumeration;</span></div><div class="line"> </div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.servlet.ServletConfig;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.servlet.http.HttpServlet;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.servlet.http.HttpServletRequest;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.servlet.http.HttpServletResponse;</span></div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line">     </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> init(ServletConfig config)&#123;</div><div class="line">        System.out.println(<span class="string">"init of Hello Servlet"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> doGet(HttpServletRequest request, HttpServletResponse response)&#123;</div><div class="line">     </div><div class="line">        Enumeration&lt;String&gt; headerNames= request.getHeaderNames();</div><div class="line">        <span class="keyword">while</span>(headerNames.hasMoreElements())&#123;</div><div class="line">            String header = headerNames.nextElement();</div><div class="line">            String value = request.getHeader(header);</div><div class="line">            System.out.printf(<span class="string">"%s\t%s%n"</span>,header,value);</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            response.getWriter().println(<span class="string">"&lt;h1&gt;Hello Servlet!&lt;/h1&gt;"</span>);</div><div class="line">            response.getWriter().println(<span class="keyword">new</span> Date().toLocaleString());</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="服务器传参"><a href="#服务器传参" class="headerlink" title="服务器传参"></a>服务器传参</h2><p><code>setAttribute</code>和<code>getAttribute</code>可以用来在进行服务端跳转的时候，在不同的Servlet之间进行数据共享。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;request常见方法&quot;&gt;&lt;a href=&quot;#request常见方法&quot; class=&quot;headerlink&quot; title=&quot;request常见方法&quot;&gt;&lt;/a&gt;request常见方法&lt;/h2&gt;&lt;p&gt;&lt;code&gt;request.getRequestURL()&lt;/code&gt;: 浏览器发出请求时的完整URL，包括协议 主机名 端口(如果有)” +&lt;br&gt;&lt;code&gt;request.getRequestURI()&lt;/code&gt;: 浏览器发出请求的资源名部分，去掉了协议和主机名” +&lt;br&gt;&lt;code&gt;request.getQueryString()&lt;/code&gt;: 请求行中的参数部分，只能显示以get方式发出的参数，post方式的看不到&lt;br&gt;&lt;code&gt;request.getRemoteAddr()&lt;/code&gt;: 浏览器所处于的客户机的IP地址&lt;br&gt;&lt;code&gt;request.getRemoteHost()&lt;/code&gt;: 浏览器所处于的客户机的主机名&lt;br&gt;&lt;code&gt;request.getRemotePort()&lt;/code&gt;: 浏览器所处于的客户机使用的网络端口&lt;br&gt;&lt;code&gt;request.getLocalAddr()&lt;/code&gt;: 服务器的IP地址&lt;br&gt;&lt;code&gt;request.getLocalName()&lt;/code&gt;: 服务器的主机名&lt;br&gt;&lt;code&gt;request.getMethod()&lt;/code&gt;: 得到客户机请求方式一般是GET或者POST&lt;br&gt;
    
    </summary>
    
    
      <category term="ssm" scheme="http://www.sanstylemc.cn/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>跳转</title>
    <link href="http://www.sanstylemc.cn/2018/05/11/%E8%B7%B3%E8%BD%AC/"/>
    <id>http://www.sanstylemc.cn/2018/05/11/跳转/</id>
    <published>2018-05-11T08:06:54.000Z</published>
    <updated>2018-05-13T01:12:59.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在web目录下准备两个页面<code>success.html</code>，<code>fail.html</code>。<br>分别用于显示登录成功或者登录失败。<br>如果登录成功了，就服务端跳转到<code>success.html</code>；如果登录失败了，就客户端跳转到<code>fail.html</code>。<br><a id="more"></a><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">success.html</div><div class="line">&lt;<span class="selector-tag">div</span> style=<span class="string">"color:green"</span>&gt;login success&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fail.html</div><div class="line">&lt;<span class="selector-tag">div</span> style=<span class="string">"color:red"</span>&gt;login fail&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="type">HelloServlet</span>.java</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.util.<span class="type">Date</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line"></div><div class="line">	public void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			response.getWriter().println(<span class="string">"&lt;h1&gt;Hello Servlet!&lt;/h1&gt;"</span>);</div><div class="line">			response.getWriter().println(<span class="keyword">new</span> <span class="type">Date</span>().toLocaleString());</div><div class="line">		&#125; <span class="keyword">catch</span> (<span class="type">IOException</span> e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="服务端跳转"><a href="#服务端跳转" class="headerlink" title="服务端跳转"></a>服务端跳转</h2><p>在Servlet中进行服务端跳转的方式:<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">request</span>.getRequestDispatcher(<span class="string">"success.html"</span>).forward(<span class="built_in">request</span>, <span class="built_in">response</span>);</div></pre></td></tr></table></figure></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="type">LoginServlet</span>.java</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> void service(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line"> </div><div class="line">        <span class="type">String</span> name = request.getParameter(<span class="string">"name"</span>);</div><div class="line">        <span class="type">String</span> password = request.getParameter(<span class="string">"password"</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password)) &#123;</div><div class="line">            request.getRequestDispatcher(<span class="string">"success.html"</span>).forward(request, response);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="客户端跳转"><a href="#客户端跳转" class="headerlink" title="客户端跳转"></a>客户端跳转</h2><p>在Servlet中进行 客户端跳转的方式：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.sendRedirect(<span class="string">"fail.html"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="type">LoginServlet</span>.java</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> void service(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line"> </div><div class="line">        <span class="type">String</span> name = request.getParameter(<span class="string">"name"</span>);</div><div class="line">        <span class="type">String</span> password = request.getParameter(<span class="string">"password"</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password)) &#123;</div><div class="line">            request.getRequestDispatcher(<span class="string">"success.html"</span>).forward(request, response);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            response.sendRedirect(<span class="string">"fail.html"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="服务端跳转和客户端跳转图示"><a href="#服务端跳转和客户端跳转图示" class="headerlink" title="服务端跳转和客户端跳转图示"></a>服务端跳转和客户端跳转图示</h2><p><img src="https://github.com/sunstady/hexo/blob/master/%E8%B7%B3%E8%BD%AC/1.png?raw=true" alt="1"></p>
<blockquote>
<p>客户端的跳转：跳转之后地址栏的信息是会变的，变为跳转之后的地址信息 。<br>服务器端的跳转：跳转之后的地址栏的信息不会 发生任何的改变。<br>(1) 在使用request属性范围时，只有服务器端跳转才能将request范围的属性保存到跳转页面；而如果是客户端的跳转，则无法进行request属性的传递<br>(2) 另外，如果是服务器端的跳转，则执行跳转语句时立刻进行跳转；如果使用的是客户端跳转，则是整个页面执行完之后才执行跳转的。<br>(3) 在Servlet中如果想要进行客户端的跳转，直接使用HttpServletResponse接口的SendRedirect()即可，但是需要注意的是，此跳转只能传递session以及application范围的属性，而无法传递request范围的属性。</p>
</blockquote>
<h2 id="响应代码"><a href="#响应代码" class="headerlink" title="响应代码"></a>响应代码</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">200</span>: 表示响应成功了，比如打开页面，就会看到200响应码。</div><div class="line"><span class="attribute">301</span>: 表示客户端跳转，永久性的跳转。为了实现301跳转，在Servlet中应该使用如下代码: response.setStatus(301); response.setHeader("Location", "fail.html");</div><div class="line"><span class="attribute">302</span>: 表示客户端跳转，临时性的跳转。在Servlet的代码 实现要比301简单点，直接使用: response.sendRedirect("/listHero");</div><div class="line"><span class="attribute">304</span>: 表示资源未被修改。当不是第一次访问一个静态页面或者图片的时候，就会得到这么一个提示。这是服务端提示浏览器，这个资源没有发生变化，你直接使用上一次下载的就行了，不需要重新下载。这样就节约了带宽，并且浏览器的加载速度也更快。</div><div class="line"><span class="attribute">404</span>: 表示访问的页面不存在。</div><div class="line"><span class="attribute">500</span>: 表示服务端的错误。</div></pre></td></tr></table></figure>
<p>更多代码预览:<br><img src="https://github.com/sunstady/hexo/blob/master/%E8%B7%B3%E8%BD%AC/2.png?raw=true" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;在web目录下准备两个页面&lt;code&gt;success.html&lt;/code&gt;，&lt;code&gt;fail.html&lt;/code&gt;。&lt;br&gt;分别用于显示登录成功或者登录失败。&lt;br&gt;如果登录成功了，就服务端跳转到&lt;code&gt;success.html&lt;/code&gt;；如果登录失败了，就客户端跳转到&lt;code&gt;fail.html&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="ssm" scheme="http://www.sanstylemc.cn/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>Service()</title>
    <link href="http://www.sanstylemc.cn/2018/05/11/Service/"/>
    <id>http://www.sanstylemc.cn/2018/05/11/Service/</id>
    <published>2018-05-10T23:57:20.000Z</published>
    <updated>2018-05-10T23:57:46.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="doGet"><a href="#doGet" class="headerlink" title="doGet"></a>doGet</h2><p>当浏览器使用<code>get</code>方式提交数据的时候，<code>servlet</code>需要提供<code>doGet()</code>方法。<br>哪些是<code>get</code>方式呢？</p>
<ul>
<li><code>form</code>默认的提交方式</li>
<li>如果通过一个超链访问某个地址</li>
<li>如果在地址栏直接输入某个地址</li>
<li><code>ajax</code>指定使用<code>get</code>方式的时候<a id="more"></a>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="doPost"><a href="#doPost" class="headerlink" title="doPost()"></a>doPost()</h2><p>当浏览器使用<code>post</code>方式提交数据的时候，<code>servlet</code>需要提供<code>doPost()</code>方法。<br>哪些是<code>post</code>方式呢？</p>
<ul>
<li>在form上显示设置<code>method=&quot;post&quot;的时候</code></li>
<li><code>ajax</code>指定<code>post</code>方式的时候</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="service"><a href="#service" class="headerlink" title="service()"></a>service()</h2><p><code>LoginServlet</code>继承了<code>HttpServlet</code>，同时也继承了一个方法。</p>
<blockquote>
<p>service(HttpServletRequest , HttpServletResponse )</p>
</blockquote>
<p>实际上，在执行<code>doGet()</code>或者<code>doPost()</code>之前，都会先执行<code>service()</code>。<br>由<code>service()</code>方法进行判断，到底该调用<code>doGet()</code>还是<code>doPost()</code><br>可以发现，<code>service()</code>, <code>doGet()</code>, <code>doPost()</code>三种方式的参数列表都是一样的。<br>所以，有时候也会<code>直接重写service()</code>方法，在其中提供相应的服务，就不用区分到底是<code>get</code>还是<code>post</code>了。<br>比如把前面的登录的<code>LoginServlet</code>，改为提供<code>service</code>方法，也可以达到相同的效果。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">原：</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line">  </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="comment">/*Tomcat定位到了LoginServlet后，发现并没有LoginServlet的实例存在，</span></div><div class="line"><span class="comment">	 * 于是就调用LoginServlet的public无参构造方法LoginServlet()实例化一个LoginServlet对象以备后续使用*/</span></div><div class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line">        <span class="type">String</span> name = request.getParameter(<span class="string">"name"</span>);</div><div class="line">        <span class="type">String</span> password = request.getParameter(<span class="string">"password"</span>);</div><div class="line">  </div><div class="line">        <span class="type">String</span> html = <span class="literal">null</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password))</div><div class="line">            html = <span class="string">"&lt;div style='color:green'&gt;success&lt;/div&gt;"</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            html = <span class="string">"&lt;div style='color:red'&gt;fail&lt;/div&gt;"</span>;</div><div class="line">  </div><div class="line">        <span class="type">PrintWriter</span> pw = response.getWriter();</div><div class="line">        <span class="comment">/*获取 response的输出流，这个流是字符流用来向jsp界面输出字符串的*/</span></div><div class="line">        pw.println(html);</div><div class="line">        <span class="comment">/*在Servlet完成工作后，tomcat拿到被Servlet修改过的response，根据这个response生成html字符串，</span></div><div class="line"><span class="comment">         * 然后通过HTTP协议，这个html字符串，回发给浏览器，浏览器再根据HTTP协议获取这个html字符串，</span></div><div class="line"><span class="comment">         * 并渲染在界面上。这样在效果上，浏览器就可以看到Servlet中生成的字符串了*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">改：</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> void service(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line"> </div><div class="line">        <span class="type">String</span> name = request.getParameter(<span class="string">"name"</span>);</div><div class="line">        <span class="type">String</span> password = request.getParameter(<span class="string">"password"</span>);</div><div class="line"> </div><div class="line">        <span class="type">String</span> html = <span class="literal">null</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password))</div><div class="line">            html = <span class="string">"&lt;div style='color:green'&gt;success&lt;/div&gt;"</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            html = <span class="string">"&lt;div style='color:red'&gt;fail&lt;/div&gt;"</span>;</div><div class="line"> </div><div class="line">        <span class="type">PrintWriter</span> pw = response.getWriter();</div><div class="line">        pw.println(html);</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;doGet&quot;&gt;&lt;a href=&quot;#doGet&quot; class=&quot;headerlink&quot; title=&quot;doGet&quot;&gt;&lt;/a&gt;doGet&lt;/h2&gt;&lt;p&gt;当浏览器使用&lt;code&gt;get&lt;/code&gt;方式提交数据的时候，&lt;code&gt;servlet&lt;/code&gt;需要提供&lt;code&gt;doGet()&lt;/code&gt;方法。&lt;br&gt;哪些是&lt;code&gt;get&lt;/code&gt;方式呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;form&lt;/code&gt;默认的提交方式&lt;/li&gt;
&lt;li&gt;如果通过一个超链访问某个地址&lt;/li&gt;
&lt;li&gt;如果在地址栏直接输入某个地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ajax&lt;/code&gt;指定使用&lt;code&gt;get&lt;/code&gt;方式的时候
    
    </summary>
    
    
      <category term="ssm" scheme="http://www.sanstylemc.cn/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>tmall_ssm之数据库</title>
    <link href="http://www.sanstylemc.cn/2018/05/10/tmall-ssm%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://www.sanstylemc.cn/2018/05/10/tmall-ssm之数据库/</id>
    <published>2018-05-10T02:23:41.000Z</published>
    <updated>2018-05-10T02:25:08.168Z</updated>
    
    <content type="html"><![CDATA[<p>在需求分析结束之后，接下来要做的不是马上开发功能，而是进行表结构的设计。只有把表结构设计正确了，才能支撑软件后续的功能开发，这一步是非常重要的。<br><a id="more"></a></p>
<h2 id="数据库的创建"><a href="#数据库的创建" class="headerlink" title="数据库的创建"></a>数据库的创建</h2><p>创建数据库<code>tmall_ssm</code>。<br>并将数据库的编码格式设置为<code>utf8</code>，便于存放中文。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tmall_ssm;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> tmall_ssm DEFUALT <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/sunstady/hexo/blob/master/tmall_ssm%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1.jpg?raw=true" alt="1"></p>
<h2 id="表关系图"><a href="#表关系图" class="headerlink" title="表关系图"></a>表关系图</h2><p>在这张表关系图上，列出了模仿天猫整站一共需要用到的9张表，以及表之间的关系。<br><img src="https://github.com/sunstady/hexo/blob/master/tmall_ssm%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/2.jpg?raw=true" alt="2"></p>
<h3 id="表介绍"><a href="#表介绍" class="headerlink" title="表介绍"></a>表介绍</h3><table>
<thead>
<tr>
<th style="text-align:center">表名</th>
<th style="text-align:center">中文含义</th>
<th style="text-align:center">介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Category</td>
<td style="text-align:center">分类表</td>
<td style="text-align:center">存放分类信息，如女装，平板电视，沙发等</td>
</tr>
<tr>
<td style="text-align:center">Property</td>
<td style="text-align:center">属性表</td>
<td style="text-align:center">存放属性信息，如颜色，重量，品牌，厂商，型号等</td>
</tr>
<tr>
<td style="text-align:center">Product</td>
<td style="text-align:center">产品表</td>
<td style="text-align:center">存放产品信息，如LED40EC平板电视机，海尔EC6005热水器</td>
</tr>
<tr>
<td style="text-align:center">PropertyValue</td>
<td style="text-align:center">属性值表</td>
<td style="text-align:center">存放属性值信息，如重量是900g,颜色是粉红色</td>
</tr>
<tr>
<td style="text-align:center">ProductImage</td>
<td style="text-align:center">产品图片表</td>
<td style="text-align:center">存放产品图片信息，如产品页显示的5个图片</td>
</tr>
<tr>
<td style="text-align:center">Review</td>
<td style="text-align:center">评论表</td>
<td style="text-align:center">存放评论信息，如买回来的蜡烛很好用，么么哒</td>
</tr>
<tr>
<td style="text-align:center">User</td>
<td style="text-align:center">用户表</td>
<td style="text-align:center">存放用户信息，如斩手狗，千手小粉红</td>
</tr>
<tr>
<td style="text-align:center">Order</td>
<td style="text-align:center">订单表</td>
<td style="text-align:center">存放订单信息，包括邮寄地址，电话号码等信息</td>
</tr>
<tr>
<td style="text-align:center">OrderItem</td>
<td style="text-align:center">订单项表</td>
<td style="text-align:center">存放订单项信息，包括购买产品种类，数量等</td>
</tr>
</tbody>
</table>
<h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>在建表过程中，会设置外键约束，所以表和表之间有依赖关系。因此会先建立被外键指向的表，比如<code>User</code>，<code>Category</code>，然后再是其他表。</p>
<h3 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE user(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">password varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY (id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<h3 id="分类表"><a href="#分类表" class="headerlink" title="分类表"></a>分类表</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE category(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY (id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<h3 id="属性表"><a href="#属性表" class="headerlink" title="属性表"></a>属性表</h3><p>从这个表开始，就有外键约束了。<br>本表的外<code>cid</code>，指向分类表的id字段。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE property(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">cid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY (id),</div><div class="line">CONSTRAINT fk_property_category FOREIGN KEY (cid) REFERENCES category (id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<h3 id="产品表"><a href="#产品表" class="headerlink" title="产品表"></a>产品表</h3><p>产品表字段稍多，介绍下。<br><code>name</code>: 产品名称<br><code>subTitle</code>: 小标题<br><code>originalPrice</code>: 原始价格<br><code>promotePrice</code>: 优惠价格<br><code>stock</code>: 库存<br><code>createDate</code>: 创建日期<br>本表的外键<code>cid</code>，指向分类表的<code>id</code>字段。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE product(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">subTitle varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">originalPrice float<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">promotePrice float<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">stock int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">cid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">createDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY(id),</div><div class="line">CONSTRAINT fk_product_category FOREIGN KEY (cid) REFERENCES category(id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<h3 id="属性值表"><a href="#属性值表" class="headerlink" title="属性值表"></a>属性值表</h3><p>本表有两个外键。<br>外键<code>ptid</code>，指向属性表的<code>id</code>字段。<br>外键<code>pid</code>，指向产品表的<code>id</code>字段。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE propertyvalue(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">ptid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">value varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY(id),</div><div class="line">CONSTRAINT fk_propertyvalue_property FOREIGN KEY(ptid) REFERENCES property(id),</div><div class="line">CONSTRAINT fk_propertyvalue_product FOREIGN KEY(pid) REFERENCES product(id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<h3 id="产品图片表"><a href="#产品图片表" class="headerlink" title="产品图片表"></a>产品图片表</h3><p><code>type</code>表示类型，产品图片分<code>单个</code>图片和<code>详情</code>图片两种。<br>本表的外键<code>pid</code>，指向产品表的<code>id</code>字段。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE productimage(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">type varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY(id),</div><div class="line">CONSTRATINT fk_productimage_product FOREIGN KEY(pid) REFERENCES product (id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<h3 id="评价表"><a href="#评价表" class="headerlink" title="评价表"></a>评价表</h3><p>外键<code>pid</code>，指向产品表的<code>id</code>字段。<br>外键<code>uid</code>，指向用户表的<code>id</code>字段。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE review(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">content varchar(4000)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">uid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">createDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY(id),</div><div class="line">CONSTRAINT fk_review_product FOREIGN KEY(pid) REFERENCES product(id),</div><div class="line">CONSTRAINT fk_review_user FOREIGN KEY(uid) REFERENCES user(id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<h3 id="订单表"><a href="#订单表" class="headerlink" title="订单表"></a>订单表</h3><p>订单表的字段也比较多，说明一下。<br><code>orderCode</code>: 订单号<br><code>address</code>: 收货地址<br><code>post</code>: 邮编<br><code>receiver</code>: 收货人信息<br><code>mobile</code>: 手机号码<br><code>userMessage</code>: 用户备注信息<br><code>createDate</code>: 订单创建日期<br><code>payDate</code>: 支付日期<br><code>deliveryDate</code>: 发货日期<br><code>confirmDate</code>: 确认收货日期<br><code>status</code>: 订单状态<br>外键<code>uid</code>，指向用户表<code>id</code>字段<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE order_(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">orderCode varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">address varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">post varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">receiver varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">mobile varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">userMessage varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">createDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">payDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">deliveryDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">confirmDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">uid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">status varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY(id),</div><div class="line">CONSTRAINT fk_order_user FOREIGN KEY(uid) REFERENCES user(id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<h3 id="订单项表"><a href="#订单项表" class="headerlink" title="订单项表"></a>订单项表</h3><p>这个表是外键最多的一个表。<br>外键<code>pid</code>，指向产品表<code>id</code>字段。<br>外键<code>oid</code>，指向订单表<code>id</code>字段。<br>外键<code>uid</code>，指向用户表<code>id</code>字段。<br><code>number</code>字段表示购买数量。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE orderitem(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">oid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">uid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">number int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY(id),</div><div class="line">CONSTRAINT fk_orderitem_user FOREIGN KEY(uid) REFERENCES user(id),</div><div class="line">CONSTRAINT fk_orderitem_product FOREIGN KEY(pid) REFERENCES product(id),</div><div class="line">CONSTRAINT fk_orderitem_order FOREIGN KEY(oid) REFERENCES order_(id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<h2 id="整理表"><a href="#整理表" class="headerlink" title="整理表"></a>整理表</h2><p>一般来说，对于一个新项目，建表的时候，会把sql语句都准备好，一次性执行。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">DROP DATABASE <span class="keyword">IF</span> EXISTS tmall_ssm;</div><div class="line">CREATE DATABASE tmall_ssm<span class="built_in"> DEFAULT </span>CHARACTER <span class="builtin-name">SET</span> utf8;</div><div class="line">USE tmall_ssm;</div><div class="line"> </div><div class="line">CREATE TABLE<span class="built_in"> user </span>(</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  password varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE category (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE property (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  cid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id),</div><div class="line">  CONSTRAINT fk_property_category FOREIGN KEY (cid) REFERENCES category (id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE product (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  subTitle varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  originalPrice float<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  promotePrice float<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  stock int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  cid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  createDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id),</div><div class="line">  CONSTRAINT fk_product_category FOREIGN KEY (cid) REFERENCES category (id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE propertyvalue (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  ptid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  value varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id),</div><div class="line">  CONSTRAINT fk_propertyvalue_property FOREIGN KEY (ptid) REFERENCES property (id),</div><div class="line">  CONSTRAINT fk_propertyvalue_product FOREIGN KEY (pid) REFERENCES product (id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE productimage (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line"> <span class="built_in"> type </span>varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id),</div><div class="line">  CONSTRAINT fk_productimage_product FOREIGN KEY (pid) REFERENCES product (id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE review (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  content varchar(4000)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  uid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  createDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id),</div><div class="line">  CONSTRAINT fk_review_product FOREIGN KEY (pid) REFERENCES product (id),</div><div class="line">    CONSTRAINT fk_review_user FOREIGN KEY (uid) REFERENCES<span class="built_in"> user </span>(id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE order_ (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  orderCode varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line"> <span class="built_in"> address </span>varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  post varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  receiver varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  mobile varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  userMessage varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  createDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  payDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  deliveryDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  confirmDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  uid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  status varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id),</div><div class="line">  CONSTRAINT fk_order_user FOREIGN KEY (uid) REFERENCES<span class="built_in"> user </span>(id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE orderitem (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  oid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  uid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  number int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id),</div><div class="line">  CONSTRAINT fk_orderitem_user FOREIGN KEY (uid) REFERENCES<span class="built_in"> user </span>(id),</div><div class="line">  CONSTRAINT fk_orderitem_product FOREIGN KEY (pid) REFERENCES product (id),</div><div class="line">  CONSTRAINT fk_orderitem_order FOREIGN KEY (oid) REFERENCES order_ (id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在需求分析结束之后，接下来要做的不是马上开发功能，而是进行表结构的设计。只有把表结构设计正确了，才能支撑软件后续的功能开发，这一步是非常重要的。&lt;br&gt;
    
    </summary>
    
    
      <category term="ssm" scheme="http://www.sanstylemc.cn/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>抽象类和接口的区别</title>
    <link href="http://www.sanstylemc.cn/2018/05/10/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.sanstylemc.cn/2018/05/10/抽象类和接口的区别/</id>
    <published>2018-05-10T01:47:15.000Z</published>
    <updated>2018-05-10T01:48:06.026Z</updated>
    
    <content type="html"><![CDATA[<p>区别一：</p>
<ul>
<li>子类只能继承一个抽象类，不能继承多个</li>
<li>子类可以实现多个接口</li>
</ul>
<p>区别二：</p>
<ul>
<li>抽象类可以定义<code>public</code>、<code>protected</code>、<code>package</code>、<code>private</code>。<br><code>静态</code>、<code>非静态</code><br><code>final</code>、<code>非final属性</code></li>
<li>但是接口中声明的属性，只能是<code>public</code>、<code>静态</code>、<code>final</code></li>
</ul>
<blockquote>
<p>抽象类和接口都可以有实体方法。接口中的实体方法，叫做默认方法。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AP</span> </span>&#123;</div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> resistPhysic = <span class="number">100</span>;</div><div class="line">     </div><div class="line">    <span class="comment">//resistMagic即便没有显式的声明为 public static final</span></div><div class="line">    <span class="comment">//但依然默认为public static final</span></div><div class="line">    <span class="keyword">int</span> resistMagic = <span class="number">0</span>;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;区别一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子类只能继承一个抽象类，不能继承多个&lt;/li&gt;
&lt;li&gt;子类可以实现多个接口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;区别二：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象类可以定义&lt;code&gt;public&lt;/code&gt;、&lt;code&gt;protected&lt;/code&gt;、&lt;code&gt;package&lt;/code&gt;、&lt;code&gt;private&lt;/code&gt;。&lt;br&gt;&lt;code&gt;静态&lt;/code&gt;、&lt;code&gt;非静态&lt;/code&gt;&lt;br&gt;&lt;code&gt;final&lt;/code&gt;、&lt;code&gt;非final属性&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;但是接口中声明的属性，只能是&lt;code&gt;public&lt;/code&gt;、&lt;code&gt;静态&lt;/code&gt;、&lt;code&gt;final&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;抽象类和接口都可以有实体方法。接口中的实体方法，叫做默认方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="Skill" scheme="http://www.sanstylemc.cn/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>将jdk9版本写的项目转换成jdk1.8</title>
    <link href="http://www.sanstylemc.cn/2018/05/05/%E5%B0%86jdk9%E7%89%88%E6%9C%AC%E5%86%99%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90jdk1-8/"/>
    <id>http://www.sanstylemc.cn/2018/05/05/将jdk9版本写的项目转换成jdk1-8/</id>
    <published>2018-05-05T01:43:58.000Z</published>
    <updated>2018-05-05T01:44:52.115Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;将jdk9版本写的项目转换成jdk1.8:<br><code>右键项目名</code>–&gt;<code>Properties</code>–&gt;<code>Project Facets</code>–&gt;<code>Java</code><br>选择右边的1.8就OK了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;将jdk1.8设为默认:<br><code>Window</code>–&gt;<code>Preferences</code>–&gt;<code>Java</code>–&gt;<code>Installed JREs</code>–&gt;<code>add选择需要添加的jdk1.8版本位置</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;将jdk9版本写的项目转换成jdk1.8:&lt;br&gt;&lt;code&gt;右键项目名&lt;/code&gt;–&amp;gt;&lt;code&gt;Properties&lt;/code&gt;–&amp;gt;&lt;code&gt;Project Facets&lt;/code&gt;–&amp;gt;&lt;code
    
    </summary>
    
    
      <category term="Skill" scheme="http://www.sanstylemc.cn/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>拦截器</title>
    <link href="http://www.sanstylemc.cn/2018/05/05/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://www.sanstylemc.cn/2018/05/05/拦截器/</id>
    <published>2018-05-05T00:18:42.000Z</published>
    <updated>2018-05-05T00:19:16.793Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;SpringMVC的所有请求都要通过<code>Dispatherservlet</code>来接收，然后通过<code>Handlermapping</code>来决定使用哪个控制器，再根据<code>ViewResolver</code>来决定返回哪个视图，从流程来看，<code>Handlermapping</code>就是我们可以实现拦截器的第一种方法，另外还有一种是实现<code>WebRequestInterceptor</code>接口，或者继承其子类。<br><a id="more"></a></p>
<h2 id="实现HandlerInterceptor接口"><a href="#实现HandlerInterceptor接口" class="headerlink" title="实现HandlerInterceptor接口"></a>实现HandlerInterceptor接口</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;实现<code>HandlerInterceptor</code>接口或者继承<code>HandlerInterceptor</code>的子类，比如<code>Spring</code>已经提供的实现了<code>HandlerInterceptor</code>接口的抽象类<code>HandlerInterceptorAdapter</code>，下面讲实现其接口的写法。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.<span class="keyword">handler</span>.HandlerInterceptorAdapter;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;  </div><div class="line"></div><div class="line">	 <span class="comment">/**  </span></div><div class="line"><span class="comment">     * preHandler方法是进行处理器拦截用的，在业务处理器处理请求之前被调用  </span></div><div class="line"><span class="comment">     * SpringMVC中的Interceptor拦截器是链式的，可以同时存在</span></div><div class="line"><span class="comment">     * 如果返回false  </span></div><div class="line"><span class="comment">     *     从当前的拦截器往回执行所有拦截器的afterCompletion(),再退出拦截器链</span></div><div class="line"><span class="comment">     * 如果返回true  </span></div><div class="line"><span class="comment">     *    执行下一个拦截器,直到所有的拦截器都执行完毕  </span></div><div class="line"><span class="comment">     *    再执行被拦截的Controller  </span></div><div class="line"><span class="comment">     *    然后进入拦截器链,  </span></div><div class="line"><span class="comment">     *    从最后一个拦截器往回执行所有的postHandle()  </span></div><div class="line"><span class="comment">     *    接着再从最后一个拦截器往回执行所有的afterCompletion()  </span></div><div class="line"><span class="comment">     */</span>    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> preHandle(HttpServletRequest request,    </div><div class="line">            HttpServletResponse response, Object <span class="keyword">handler</span>) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        System.out.println(<span class="string">"preHandle(), 在访问Controller之前被调用"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="comment">/** 这个方法只会在当前这个Interceptor的preHandle方法返回值为true的时候才会执行。</span></div><div class="line"><span class="comment">     * 在业务处理器处理请求执行完成后,生成视图之前执行的动作 </span></div><div class="line"><span class="comment">     * 它会在DispatcherServlet进行视图的渲染之前执行，也就是说在这个方法中你可以对ModelAndView进行操作。</span></div><div class="line"><span class="comment">     * 这个方法的链式结构跟正常访问的方向是相反的，也就是说先声明的Interceptor拦截器该方法反而会后调用。</span></div><div class="line"><span class="comment">     * 可在modelAndView中加入数据，比如当前时间 </span></div><div class="line"><span class="comment">     */</span>  </div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> postHandle(HttpServletRequest request,    </div><div class="line">            HttpServletResponse response, Object <span class="keyword">handler</span>,    </div><div class="line">            ModelAndView modelAndView) <span class="keyword">throws</span> Exception &#123;  </div><div class="line">    	System.out.println(<span class="string">"postHandle(), 在访问Controller之后，访问视图之前被调用,这里可以注入一个时间到modelAndView中，用于后续视图显示"</span>);</div><div class="line">    	modelAndView.addObject(<span class="string">"date"</span>,<span class="string">"由拦截器生成的时间:"</span> + <span class="keyword">new</span> Date());</div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="comment">/**  该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行。</span></div><div class="line"><span class="comment">     * 该方法将在整个请求完成之后，也就是DispatcherServlet渲染了视图执行。</span></div><div class="line"><span class="comment">     * 在DispatcherServlet完全处理完请求后被调用,可用于清理资源等 </span></div><div class="line"><span class="comment">     * 当有拦截器抛出异常时,会从当前拦截器往回执行所有的拦截器的afterCompletion()  </span></div><div class="line"><span class="comment">     */</span> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> afterCompletion(HttpServletRequest request,    </div><div class="line">            HttpServletResponse response, Object <span class="keyword">handler</span>, Exception ex)  </div><div class="line">    <span class="keyword">throws</span> Exception &#123;  </div><div class="line">        System.out.println(<span class="string">"afterCompletion(), 在访问视图之后被调用"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="实现WebRequestInterceptor接口"><a href="#实现WebRequestInterceptor接口" class="headerlink" title="实现WebRequestInterceptor接口"></a>实现WebRequestInterceptor接口</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>WebRequestInterceptor</code>中定义了三个方法，我们也是通过这三个方法来实现拦截的。这三个方法都传递了同一个参数<code>WebRequest</code>，那么这个<code>WebRequest</code>是什么呢？这个<code>WebRequest</code>是<code>Spring</code>定义的一个接口，它里面的方法定义都基本跟<code>HttpServletRequest</code>一样，在<code>WebRequestInterceptor</code>中对<code>WebRequest</code>进行的所有操作都同步到<code>HttpServletRequest</code>中，然后在当前请求中一直传递。</p>
<ul>
<li>方法<code>preHandle</code>: 方法将在请求处理之前进行调用，也就是说会在<code>Controller</code>方法调用之前被调用。这个方法跟<code>HandlerInterceptor</code>中的<code>preHandle</code>是不同的，主要区别在于该方法的返回值是<code>void</code>，也就是没有返回值，所以我们一般主要用它来进行资源的准备工作，比如我们在使用<code>Hibernate</code>的时候可以在这个方法中准备一个<code>Hibernate</code>的<code>Session</code>对象，然后利用<code>WebRequest</code>的<code>setAttribute(name, value, scope)</code>把它放到<code>WebRequest</code>的属性中。这里可以说说这个<code>setAttribute方法的第三个参数</code>scope<code>，该参数是一个</code>Integer<code>类型的。在</code>WebRequest<code>的父层接口</code>RequestAttributes<code>中对它定义了三个常量:</code>SCOPE_REQUEST<code>: 它的值是0，代表只有在</code>request<code>中可以访问。</code>SCOPE_SESSION<code>: 它的值是1，如果环境允许的话它代表的是一个局部的隔离的</code>session<code>，否则就代表普通的</code>session<code>，并且在该</code>session<code>范围内可以访问。</code>SCOPE_GLOBAL_SESSION<code>: 它的值是2，如果环境允许的话，它代表的是一个全局共享的</code>session<code>，否则就代表普通的</code>session<code>，并且在该</code>session`范围内可以访问。</li>
<li>方法<code>postHandle</code>: 该方法将在请求处理之后，也就是在<code>Controller</code>方法调用之后被调用，但是会在视图返回被渲染之前被调用，所以可以在这个方法里面通过改变数据模型<code>ModelMap</code>来改变数据的展示。该方法有两个参数，<code>WebRequest</code>对象是用于传递整个请求数据的，比如在<code>preHandle</code>中准备的数据都可以通过<code>WebRequest</code>来传递和访问；<code>ModelMap</code>就是<code>Controller</code>处理之后返回的<code>Model</code>对象，我们可以通过改变它的属性来改变返回的<code>Model</code>模型。</li>
<li>方法<code>afterCompletion</code>: 该方法会在整个请求处理完成，也就是在视图返回并被渲染之后执行。所以在该方法中可以进行资源的释放操作。而<code>WebRequest</code>参数就可以把我们在<code>preHandle</code>中准备的资源传递到这里进行释放。<code>Exception</code>参数表示的是当前请求的异常对象，如果在<code>Controller</code>中抛出的异常已经被<code>Spring</code>的异常处理器给处理了的话，那么这个异常对象就是是<code>null</code>。</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.WebRequest;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.WebRequestInterceptor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class AllInterceptor implements WebRequestInterceptor &#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 在请求处理之前执行，该方法主要是用于准备资源数据的，然后可以把它们当做请求属性放到WebRequest中</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> preHandle(WebRequest request) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"AllInterceptor..............................."</span>);</div><div class="line">        request.setAttribute(<span class="string">"request"</span>, <span class="string">"request"</span>, WebRequest.SCOPE_REQUEST);<span class="comment">//这个是放到request范围内的，所以只能在当前请求中的request中获取到</span></div><div class="line">        request.setAttribute(<span class="string">"session"</span>, <span class="string">"session"</span>, WebRequest.SCOPE_SESSION);<span class="comment">//这个是放到session范围内的，如果环境允许的话它只能在局部的隔离的会话中访问，否则就是在普通的当前会话中可以访问</span></div><div class="line">        request.setAttribute(<span class="string">"globalSession"</span>, <span class="string">"globalSession"</span>, WebRequest.SCOPE_GLOBAL_SESSION);<span class="comment">//如果环境允许的话，它能在全局共享的会话中访问，否则就是在普通的当前会话中访问</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 该方法将在Controller执行之后，返回视图之前执行，ModelMap表示请求Controller处理之后返回的Model对象，所以可以在</span></div><div class="line"><span class="comment">     * 这个方法中修改ModelMap的属性，从而达到改变返回的模型的效果。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> postHandle(WebRequest request, ModelMap <span class="built_in">map</span>) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">String</span> <span class="built_in">key</span>:<span class="built_in">map</span>.keySet())</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="built_in">key</span> + <span class="string">"-------------------------"</span>);;</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"name3"</span>, <span class="string">"value3"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"name1"</span>, <span class="string">"name1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 该方法将在整个请求完成之后，也就是说在视图渲染之后进行调用，主要用于进行一些资源的释放</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> afterCompletion(WebRequest request, Exception exception)</div><div class="line">    <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        System.out.<span class="built_in">println</span>(exception + <span class="string">"-=-=--=--=-=-=-=-=-=-=-=-==-=--=-=-=-="</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="拦截器的配置"><a href="#拦截器的配置" class="headerlink" title="拦截器的配置"></a>拦截器的配置</h2><p><code>mvc:interceptors标签来声明需要加入到SpringMVC拦截器链中的拦截器</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.host.app.web.interceptor.AllInterceptor"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/test/number.do"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.host.app.web.interceptor.LoginInterceptor"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;由上面的示例可以看出可以利用<code>mvc:interceptors</code>标签声明一系列的拦截器，然后它们就可以形成一个拦截器链，拦截器的执行顺序是按声明的先后顺序执行的，先声明的拦截器中的<code>preHandle</code>方法会先执行，然而它的<code>postHandle</code>方法和<code>afterCompletion</code>方法却会后执行。<br>&nbsp;&nbsp;&nbsp;&nbsp;在<code>mvc:interceptors</code>标签下声明<code>interceptor</code>主要有两种方式：<br>1) 直接定义一个<code>Interceptor</code>实现类的bean对象。使用这种方式声明的<code>Interceptor</code>拦截器将会对所有的请求进行拦截。<br>2) 使用<code>mvc:interceptor</code>标签进行声明。使用这种方式进行声明的<code>Interceptor</code>可以通过<code>mvc:mapping</code>子标签来定义需要进行拦截的请求路径。<br>&nbsp;&nbsp;&nbsp;&nbsp;经过上述两步之后，定义的拦截器就会发生作用对特定的请求进行拦截了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SpringMVC的所有请求都要通过&lt;code&gt;Dispatherservlet&lt;/code&gt;来接收，然后通过&lt;code&gt;Handlermapping&lt;/code&gt;来决定使用哪个控制器，再根据&lt;code&gt;ViewResolver&lt;/code&gt;来决定返回哪个视图，从流程来看，&lt;code&gt;Handlermapping&lt;/code&gt;就是我们可以实现拦截器的第一种方法，另外还有一种是实现&lt;code&gt;WebRequestInterceptor&lt;/code&gt;接口，或者继承其子类。&lt;br&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://www.sanstylemc.cn/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>log4j总结</title>
    <link href="http://www.sanstylemc.cn/2018/05/03/log4j%E6%80%BB%E7%BB%93/"/>
    <id>http://www.sanstylemc.cn/2018/05/03/log4j总结/</id>
    <published>2018-05-03T00:52:32.000Z</published>
    <updated>2018-05-24T02:39:03.188Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;Log4j是apache的一个开源项目，用来操作程序日志信息的框架。因便于管理，在工程中用来代替System.out打印语句。通过配置Log4j中的log4j.properties，可以指定日志信息的级别，输出地点，输出格式。<br><a id="more"></a></p>
<h2 id="LOG4J组成"><a href="#LOG4J组成" class="headerlink" title="LOG4J组成"></a>LOG4J组成</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Log4j有3大主要组件: </p>
<ul>
<li>Logger: 记录器，决定什么日志信息应该被输出、什么日志信息应该被忽略。</li>
<li>Appender: 存放器，指定日志信息应该输出到什么地方，可以是控制台、文件、网络设备。</li>
<li>Layout: 布局格式，指定日志信息的输出格式。</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;一个logger可以用多个appender，也就是说日志信息可以同时输出到多个设备上，每个appender对应一种layout。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以，记录器用来整合日志信息，一个日志信息调整好以后，交给记录器的所有存放器，每一个存放器根据自己的格式输出日志信息。</p>
<h2 id="记录器组件Logger"><a href="#记录器组件Logger" class="headerlink" title="记录器组件Logger"></a>记录器组件Logger</h2><p>1、<code>根记录器： rootLogger</code><br>配置语法: log4j.rootLogger=[日志级别], 存放器名1, 存放器名2, … , 存放器名N。<br>日志级别: 级别由高到低依次是: fatal、error、warn、info、debug。<br>项目中的代码: log4j.rootLogger=INFO, stdout, logfile<br>根记录器的日志级别是info，所以info, warn, error, fatal均会被执行。stdout, logfile是存放器。<br>2、<code>在配置文件中配置Logger组件</code><br>可在Log4J配置文件中配置自己的Logger组件<br>项目中代码:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">log4j<span class="selector-class">.logger</span><span class="selector-class">.Application</span>=INFO,Application</div><div class="line">log4j<span class="selector-class">.logger</span><span class="selector-class">.Service</span>=DEBUG,Service</div><div class="line">log4j<span class="selector-class">.logger</span><span class="selector-class">.jdbc</span>=INFO,jdbc</div><div class="line">log4j<span class="selector-class">.logger</span><span class="selector-class">.Action</span>=INFO,Action</div></pre></td></tr></table></figure></p>
<p>定义了application, service, jdbc, action四个自己的logger组件，并分别配置了级别和存放器。</p>
<h2 id="存放器组件Appender"><a href="#存放器组件Appender" class="headerlink" title="存放器组件Appender"></a>存放器组件Appender</h2><p>配置语法:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">log4j<span class="selector-class">.appender</span>.存放器名=存放类</div><div class="line">log4j<span class="selector-class">.appender</span>.存放器名.option1=value1</div></pre></td></tr></table></figure></p>
<p>存放类:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.ConsoleAppender</span></div><div class="line">控制台输出</div><div class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.FileAppender</span>          </div><div class="line">文件</div><div class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.DailyRollingFileAppender</span> 每天产生一个日志文件</div><div class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.RollingFileAppender</span>  文件大小到达指定尺寸的时候产生一个新的文件</div><div class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.WriterAppender</span>   将日志信息以流格式发送到任意指定的地方</div></pre></td></tr></table></figure></p>
<p>项目中代码:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Application记录器: </div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Application</span>=org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.RollingFileAppender</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Application</span><span class="selector-class">.encoding</span>=UTF-<span class="number">8</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Application</span><span class="selector-class">.File</span>=/imagesys/logs/ImageCreditServer/ApplicationLog.log</div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Service</span><span class="selector-class">.MaxFileSize</span>=<span class="number">10240</span>KB</div></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Service记录器: </div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Service</span>=org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.RollingFileAppender</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Service</span><span class="selector-class">.encoding</span>=UTF-<span class="number">8</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Service</span><span class="selector-class">.File</span>=/imagesys/logs/ImageCreditServer/ServiceLog.log</div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Service</span><span class="selector-class">.MaxFileSize</span>=<span class="number">10240</span>KB</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jdbc记录器: </div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.jdbc</span>=org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.RollingFileAppender</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.jdbc</span><span class="selector-class">.encoding</span>=UTF-<span class="number">8</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.jdbc</span><span class="selector-class">.File</span>=/imagesys/logs/ImageCreditServer/jdbcLog<span class="selector-class">.log</span> </div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.jdbc</span><span class="selector-class">.MaxFileSize</span>=<span class="number">1024</span>KB</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">action记录器: </div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Action</span>=org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.RollingFileAppender</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Action</span><span class="selector-class">.encoding</span>=UTF-<span class="number">8</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Action</span><span class="selector-class">.File</span>=/imagesys/logs/ImageCreditServer/ActionLog.log</div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Action</span><span class="selector-class">.MaxFileSize</span>=<span class="number">10240</span>KB</div></pre></td></tr></table></figure>
<p>分别制定了输出文件的存放类、编码方式、文件路径、文件大小。</p>
<h2 id="格式化组件Layout"><a href="#格式化组件Layout" class="headerlink" title="格式化组件Layout"></a>格式化组件Layout</h2><p>配置语法:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">log4j<span class="selector-class">.appender</span>.存放器名<span class="selector-class">.layout</span> = 格式类</div><div class="line">log4j<span class="selector-class">.appender</span>.存放器名<span class="selector-class">.layout</span><span class="selector-class">.option1</span> = value1</div><div class="line">… …</div><div class="line">log4j<span class="selector-class">.appender</span>.存放器名<span class="selector-class">.layout</span><span class="selector-class">.optionN</span> = valueN</div></pre></td></tr></table></figure></p>
<p>输出格式类型:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">. <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.HTMLLayout</span>(以<span class="selector-tag">HTML</span>表格形式布局);</div><div class="line">. <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.PatternLayout</span>(可以灵活地指定布局模式);</div><div class="line">. <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.SimpleLayout</span>(包含日志信息的级别和信息字符串);</div><div class="line">. <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.TTCCLayout</span>(包含日志产生的时间、线程和类别等信息);</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>%r</code></td>
<td style="text-align:center">自程序开始后消耗的毫秒数</td>
</tr>
<tr>
<td style="text-align:center"><code>%t</code></td>
<td style="text-align:center">表示日志记录请求生成的线程</td>
</tr>
<tr>
<td style="text-align:center"><code>%p</code></td>
<td style="text-align:center">表示日志语句的优先级</td>
</tr>
<tr>
<td style="text-align:center"><code>%r</code></td>
<td style="text-align:center">与日志请求相关的类别名称</td>
</tr>
<tr>
<td style="text-align:center"><code>%c</code></td>
<td style="text-align:center">日志信息所在的类名</td>
</tr>
<tr>
<td style="text-align:center"><code>%m%n</code></td>
<td style="text-align:center">表示日志信息的内容</td>
</tr>
</tbody>
</table>
<p>项目中代码:<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">log4j.appender.Application.<span class="keyword">layout</span>=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.Application.<span class="keyword">layout</span>.ConversionPattern=%d %p [%c] - %m%n</div></pre></td></tr></table></figure></p>
<p>以自定义的格式输出日志信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Log4j是apache的一个开源项目，用来操作程序日志信息的框架。因便于管理，在工程中用来代替System.out打印语句。通过配置Log4j中的log4j.properties，可以指定日志信息的级别，输出地点，输出格式。&lt;br&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://www.sanstylemc.cn/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis配置文件基本结构</title>
    <link href="http://www.sanstylemc.cn/2018/04/25/MyBatis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/"/>
    <id>http://www.sanstylemc.cn/2018/04/25/MyBatis配置文件基本结构/</id>
    <published>2018-04-25T13:16:28.000Z</published>
    <updated>2018-04-25T13:46:34.910Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;在使用mybatis框架时，首先导入其对应的jar包，并进行相应的配置，所以得对配置文件的每个参数都得了解。一个完全的mybatis配置文件结构如下:<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> <span class="meta">?&gt;</span></span></div><div class="line"><span class="comment">&lt;!-- xml的版本：1.0 和编码：utf8 --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" </span></div><div class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>   <span class="comment">&lt;!-- 配置文件的根元素 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span>   <span class="comment">&lt;!-- 属性：定义配置外在化 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">settings</span>&gt;</span>   <span class="comment">&lt;!-- 设置：定义mybatis的一些全局性设置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>= <span class="string">""</span> <span class="attr">value</span>= <span class="string">""</span> /&gt;</span>   <span class="comment">&lt;!-- 具体的参数名和参数值 --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span>   <span class="comment">&lt;!-- 类型名称：为一些类定义别名 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span>   <span class="comment">&lt;!-- 类型处理器：定义Java类型与数据库中的数据类型之间的转换关系 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">objectFactory</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">objectFactory</span>&gt;</span>   <span class="comment">&lt;!-- 对象工厂 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span>   <span class="comment">&lt;!-- 插件，mybatis的插件，插件可以修改mybatis的内部运行规则 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>   </div><div class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">""</span>&gt;</span>   <span class="comment">&lt;!-- 环境变量：可以配置多个环境变量，比如使用多数据源时，就需要配置多个环境变量 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- default指现在默认使用什么环境，default的值必须是id对应的值 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span>   </div><div class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span>   <span class="comment">&lt;!-- 事务管理器  --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>   <span class="comment">&lt;!-- 数据源 --&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span>   <span class="comment">&lt;!-- 数据库厂商标识 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>   <span class="comment">&lt;!-- 映射器: 指定映射文件或者映射类 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在使用mybatis框架时，首先导入其对应的jar包，并进行相应的配置，所以得对配置文件的每个参数都得了解。一个完全的mybatis配置文件结构如下:&lt;br&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://www.sanstylemc.cn/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Edraw激活</title>
    <link href="http://www.sanstylemc.cn/2018/04/21/Edraw%E6%BF%80%E6%B4%BB/"/>
    <id>http://www.sanstylemc.cn/2018/04/21/Edraw激活/</id>
    <published>2018-04-20T23:24:19.000Z</published>
    <updated>2018-04-20T23:24:43.574Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>请在<code>断网</code>的情况下激活，选择<code>手动激活</code>。</p>
</blockquote>
<p>用户名:<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GUA<span class="symbol">NTAO2008</span></div></pre></td></tr></table></figure></p>
<p>产品密钥:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">0711</span><span class="number">-8621</span><span class="number">-3000</span><span class="number">-8217</span><span class="number">-5433</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;请在&lt;code&gt;断网&lt;/code&gt;的情况下激活，选择&lt;code&gt;手动激活&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用户名:&lt;br&gt;&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
    
      <category term="软件" scheme="http://www.sanstylemc.cn/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>导包错误</title>
    <link href="http://www.sanstylemc.cn/2018/04/19/%E5%AF%BC%E5%8C%85%E9%94%99%E8%AF%AF/"/>
    <id>http://www.sanstylemc.cn/2018/04/19/导包错误/</id>
    <published>2018-04-19T01:27:27.000Z</published>
    <updated>2018-04-19T01:28:05.773Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The package javax.servlet is accessible from more than one <span class="class"><span class="keyword">module</span>: &lt;unnamed&gt;, <span class="title">jstl</span>, <span class="title">servlet</span>.<span class="title">api</span></span></div></pre></td></tr></table></figure>
<p>今天导入包的时候出现这个错误，后来发现是导入位置错误。<br><a id="more"></a><br><img src="https://github.com/sunstady/hexo/blob/master/JavaWeb%E9%94%99%E8%AF%AF/1.jpg?raw=true" alt="1"><br><code>解决方法:</code></p>
<blockquote>
<p>1、Remove the external jars from the node “modulepath”.<br>2、Select the node “Classpath” then add the external jars.<br>3、Review that all the jars are under the node “Classpath”.<br><img src="https://github.com/sunstady/hexo/blob/master/JavaWeb%E9%94%99%E8%AF%AF/2.jpg?raw=true" alt="2"></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;The package javax.servlet is accessible from more than one &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;: &amp;lt;unnamed&amp;gt;, &lt;span class=&quot;title&quot;&gt;jstl&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;servlet&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;api&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;今天导入包的时候出现这个错误，后来发现是导入位置错误。&lt;br&gt;
    
    </summary>
    
    
      <category term="失误锦集" scheme="http://www.sanstylemc.cn/tags/%E5%A4%B1%E8%AF%AF%E9%94%A6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>FIRST、FOLLOW、SELECT</title>
    <link href="http://www.sanstylemc.cn/2018/04/18/FIRST%E3%80%81FOLLOW%E3%80%81SELECT/"/>
    <id>http://www.sanstylemc.cn/2018/04/18/FIRST、FOLLOW、SELECT/</id>
    <published>2018-04-18T08:23:53.000Z</published>
    <updated>2018-06-13T00:08:13.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h2><blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;遍历所有表达式，取具有相同左部的表达式的select集合，将这些具有相同左部表达式的select集合取交集。<br>&nbsp;&nbsp;&nbsp;&nbsp;只要有一组相同左部表达式交集不为空，则该文法非LL1文法。<br>&nbsp;&nbsp;&nbsp;&nbsp;只有所有相同左部表达式交集都不为空，则为LL1文法。<br><a id="more"></a></p>
</blockquote>
<h2 id="FIRST"><a href="#FIRST" class="headerlink" title="FIRST"></a>FIRST</h2><p>S-&gt;AB|bC<br>A-&gt;ε|b<br>B-&gt;ε|aD<br>C-&gt;AD|b<br>D-&gt;aS|c</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml">FIRST(S)= (FIRST(A)-</span><span class="template-variable">&#123;ε&#125;</span><span class="xml">)∪(FIRST(B)- </span><span class="template-variable">&#123;ε&#125;</span><span class="xml">)∪</span><span class="template-variable">&#123;ε&#125;</span><span class="xml">∪</span><span class="template-variable">&#123;b&#125;</span><span class="xml">=</span><span class="template-variable">&#123;a,b,ε&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">因为A的first有ε，B的first有ε，S-&gt;AB，所以是(FIRST(A)-</span><span class="template-variable">&#123;ε&#125;</span><span class="xml">)∪(FIRST(B)- </span><span class="template-variable">&#123;ε&#125;</span><span class="xml">)，然后S-&gt;bC，所以再加一个b，就是(FIRST(A)-</span><span class="template-variable">&#123;ε&#125;</span><span class="xml">)∪(FIRST(B)- </span><span class="template-variable">&#123;ε&#125;</span><span class="xml">)∪</span><span class="template-variable">&#123;b&#125;</span><span class="xml">。</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">First</span><span class="params">(A)</span></span>= &#123;<span class="selector-tag">b</span>, ε&#125;</div><div class="line">没什么好解释的</div></pre></td></tr></table></figure>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">First(B)=&#123;a</span><span class="string">,</span><span class="comment">ε&#125;</span></div><div class="line"><span class="comment">ε不用解释，就是B</span><span class="literal">-</span>&gt;<span class="comment">ε，所以有它，a就是因为B</span><span class="literal">-</span>&gt;<span class="comment">aD，第一个非终结符是a所以有a，那要不要加上D的first呢，就是a和c，答案是不用，就只要aD里面的a就可以。</span></div></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">First</span>(<span class="keyword">C</span>)=&#123;a,b,c&#125;</div><div class="line"><span class="keyword">C</span>-&gt;AD这一句，AD都是非终结符，所以要找A和<span class="keyword">D</span>的first集。<span class="keyword">D</span>的是a，c。A的是b，ε。因为不是AD同时都能推出ε，所以<span class="keyword">C</span>的first是A和<span class="keyword">D</span>的first的并集减去ε，还要加上b，因为有<span class="keyword">C</span>-&gt;b这一句。</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">First</span><span class="params">(D)</span></span>=&#123;<span class="selector-tag">a</span>,c&#125;</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">First</span><span class="params">(AB)</span></span>=&#123;<span class="selector-tag">a</span>,<span class="selector-tag">b</span>,ε&#125;</div><div class="line">AB同时能够推出ε，所以First(AB)就是A和B的First的并集减去ε再并上ε。</div></pre></td></tr></table></figure>
<blockquote>
<p>两个非终结符的要看是不是他们两个同时能推出ε，能就有ε；要是有一个不能推出ε，那First集就没有ε。</p>
</blockquote>
<h2 id="FOLLOW"><a href="#FOLLOW" class="headerlink" title="FOLLOW"></a>FOLLOW</h2><p>从开始符号S开始推导，开始符号的follow里面一定要有#。<br>所以开始符号的S的follow集要有#。<br>follow是找-&gt;后面的。<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">比如找S的<span class="function"><span class="title">follow</span>，就要看谁的-&gt;</span>后面有S。</div><div class="line">D-&gt;<span class="function"><span class="title">aS</span>里面有S，然后再看D-&gt;</span><span class="function"><span class="title">aS</span>的S后面有没有别的符号，没有就加上D的follow集。如果有，就加上后面那个字母的first集里面除了ε以外的符号，再看这个字母能不能推出ε，如果能，就再加上-&gt;</span>左边的那个字母的follow。</div><div class="line">F<span class="function"><span class="title">ollow</span>(S)-&gt;</span>Follow(D)=&#123;#&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">Follow</span><span class="params">(A)</span></span>=&#123;<span class="selector-tag">a</span>,c,#&#125;</div><div class="line">看A的follow，首先找所有-&gt;后面有A的，找到了S-&gt;AB，C-&gt;AD。先看S-&gt;AB，A后面有B，所以要加上B的first集里面除了ε的其他符号，再看B能不能在有限的步骤里推出ε，有B-&gt;ε这句，所以能，就要再加上-&gt;左边的S的follow集，所以目前的A的follow集里面有<span class="selector-tag">a</span>,和follow(S)，再看C-&gt;AD这一句，A后面有D，所以要加上D的first集里面除了ε的其他的，再看D能不能在有限的步骤里推出ε，D不能，所以不用加-&gt;左边的C的follow，所以A的follow就是<span class="selector-tag">a</span>,Follow(S),<span class="selector-tag">a</span>,c，但是如果有重复的，就只要一个，所以最终就是<span class="selector-tag">a</span>,c,follow(S)，这个follow(S)到后面还有算出来，不能就这么写。</div></pre></td></tr></table></figure>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Follow(B)=&#123;#&#125;</div><div class="line">看B的follow，找所有-&gt;后面有B的，找到了S-&gt;AB，看B后面有字母吗？没有，就加上-&gt;左边的S的follow，所以Follow(B)=Follow(S)</div></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Follow(<span class="keyword">C</span>)=&#123;#&#125;</div><div class="line">看<span class="keyword">C</span>的follow，找所有-&gt;后面有<span class="keyword">C</span>的，找到了S-&gt;bC，看<span class="keyword">C</span>后面有字母吗？没有，就加上-&gt;左边的S的follow集，所以Follow(<span class="keyword">C</span>)=Follow(S)</div></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Follow(<span class="keyword">D</span>)=&#123;#&#125;</div><div class="line">看<span class="keyword">D</span>的follow，找所有-&gt;后面有<span class="keyword">D</span>的，找到了B-&gt;aD，<span class="keyword">C</span>-&gt;AD，这两句<span class="keyword">D</span>后面都没有字母，所以加上-&gt;左边的B和<span class="keyword">C</span>的follow，所以Follow(<span class="keyword">D</span>)=Follow(B)∪Flollow(<span class="keyword">C</span>)</div></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Follow(S)=&#123;#&#125;∪Follow(<span class="keyword">D</span>)，Follow(<span class="keyword">D</span>)=Follow(B)+ Follow(<span class="keyword">C</span>)，所以Follow(S)=&#123;#&#125;∪Follow(B)∪Follow(<span class="keyword">C</span>)，Follow(B)= Follow(S)，Follow(<span class="keyword">C</span>)= Follow(S)，所以Follow(S)=&#123;#&#125;，Follow(B)=&#123;#&#125;，Follow(<span class="keyword">C</span>)=&#123;#&#125;，Follow(<span class="keyword">D</span>)=&#123;#&#125;，Follow(A)=&#123;a,c,#&#125;。</div></pre></td></tr></table></figure>
<h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">SELECT</span><span class="params">(S-&gt;AB)</span></span>，AB都能推出ε，所以SELECT(S-&gt;AB)=First(AB)-ε+Follow(S)，所以SELECT(S-&gt;AB)=&#123;<span class="selector-tag">a</span>,<span class="selector-tag">b</span>,#&#125;</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">SELECT</span><span class="params">(S-&gt;bC)</span></span>，bC不能推出ε，所以是First(bC)，结果是&#123;b&#125;</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">SELECT</span><span class="params">(A-&gt;ε)</span></span>，A能推出ε所以是First(ε)-ε+Follow(A)，结果是&#123;<span class="selector-tag">a</span>,c,#&#125;</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">SELECT</span><span class="params">(A-&gt;b)</span></span>，这里的A是推出ｂ，不是ε所以是first(b)，结果是&#123;b&#125;</div></pre></td></tr></table></figure>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT<span class="comment">(B-&gt;ε)</span>，B能推出ε，所以是First<span class="comment">(ε)</span>-ε+Follow<span class="comment">(B)</span>，结果是&#123;<span class="attr">#&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">SELECT</span><span class="params">(B-&gt;aD)</span></span>，这里B不能推出ε，所以是First(aD)，结果是&#123;a&#125;</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">SELECT</span><span class="params">(C-&gt;AD)</span></span>，这里D不能推出ε，所以算AD不能推出ε，就是First(AD)，结果是&#123;<span class="selector-tag">a</span>,<span class="selector-tag">b</span>,c&#125;</div></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT(<span class="keyword">C</span>-&gt;b)，<span class="keyword">C</span>推不出ε，所以是<span class="keyword">First</span>(b)，结果是&#123;b&#125;</div></pre></td></tr></table></figure>
<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span>(D-&gt;<span class="keyword">aS</span>)，这里不能推出ε，所以是<span class="keyword">First</span>(<span class="keyword">aS</span>)，结果是&#123;a&#125;</div></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT(<span class="keyword">D</span>-&gt;c)，这里<span class="keyword">D</span>不能推出ε，所以是<span class="keyword">First</span>(c)，结果是&#123;c&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LL-1-文法&quot;&gt;&lt;a href=&quot;#LL-1-文法&quot; class=&quot;headerlink&quot; title=&quot;LL(1)文法&quot;&gt;&lt;/a&gt;LL(1)文法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;遍历所有表达式，取具有相同左部的表达式的select集合，将这些具有相同左部表达式的select集合取交集。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;只要有一组相同左部表达式交集不为空，则该文法非LL1文法。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;只有所有相同左部表达式交集都不为空，则为LL1文法。&lt;br&gt;
    
    </summary>
    
    
      <category term="编译原理" scheme="http://www.sanstylemc.cn/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
