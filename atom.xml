<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sanstyle</title>
  <subtitle>功有所不全 才有所不任 力有所不足</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sanstylemc.cn/"/>
  <updated>2018-04-12T10:21:40.550Z</updated>
  <id>http://www.sanstylemc.cn/</id>
  
  <author>
    <name>MC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分析Ajax爬取头条街拍美图</title>
    <link href="http://www.sanstylemc.cn/2018/04/11/%E5%88%86%E6%9E%90Ajax%E7%88%AC%E5%8F%96%E5%A4%B4%E6%9D%A1%E8%A1%97%E6%8B%8D%E7%BE%8E%E5%9B%BE/"/>
    <id>http://www.sanstylemc.cn/2018/04/11/分析Ajax爬取头条街拍美图/</id>
    <published>2018-04-11T10:36:52.000Z</published>
    <updated>2018-04-12T10:21:40.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="抓取分析"><a href="#抓取分析" class="headerlink" title="抓取分析"></a>抓取分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在抓取之前，首先要分析抓取的逻辑。打开<a href="https://www.toutiao.com/" target="_blank" rel="external">今日头条</a>的首页。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/1.png?raw=true" alt="1"><br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;在右上角的搜索入口处输入”街拍”二字搜索一下。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/2.png?raw=true" alt="2"><br>&nbsp;&nbsp;&nbsp;&nbsp;这时打开开发者工具，查看所有的网络请求。首先，打开第一个网络请求，这个请求的URL就是当前的<a href="https://www.toutiao.com/search/?keyword=%E8%A1%97%E6%8B%8D" target="_blank" rel="external">街拍</a>链接。打开<code>Preview</code>选项卡查看<code>Response Body</code>。如果页面中的内容是根据第一个请求得到的结果渲染出来的，那么第一个请求的源代码中必然会包含页面结果中的文字。为了验证，我们可以尝试搜索一下搜索结果的标题，比如”路人”二字，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/3.png?raw=true" alt="3"><br>&nbsp;&nbsp;&nbsp;&nbsp;我们发现，网页源代码中并没有包含这两个字，搜索匹配结果数目为0。因此，可以初步判断这些内容是由<code>Ajax</code>加载，然后用<code>Javascript</code>渲染出来的。接下来，我们可以切换到<code>XHR</code>过滤选项卡，查看一下有没有<code>Ajax</code>请求。<br>&nbsp;&nbsp;&nbsp;&nbsp;不出所料，此处出现了一个比较常规的<code>Ajax</code>请求，看看它的结果是否包含了页面中的相关数据。<br>&nbsp;&nbsp;&nbsp;&nbsp;点击<code>data</code>字段展开，发现这里有许多条数据。点击第一条展开，可以发现有一个<code>title</code>字段，它的值正好就是页面中第一条数据的标题。再检查一下其他数据，也正好是一一对应的，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/4.png?raw=true" alt="4"><br>&nbsp;&nbsp;&nbsp;&nbsp;这就确定了这些数据确实是由<code>Ajax</code>加载的。<br>&nbsp;&nbsp;&nbsp;&nbsp;我们的目的是要抓取其中的美图，这里一组图就对应前面<code>data</code>字段中的一条数据。每条数据还有一个<code>image_detail</code>字段，它是列表形式，这其中就包含了组图的所有图片列表，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/5.png?raw=true" alt="5"><br>&nbsp;&nbsp;&nbsp;&nbsp;因此，我们只需要将列表中的<code>url</code>字段提取出来并下载下来就好了。每一组图都建立一个文件夹，文件夹的名称就为组图的标题。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，就可以直接用<code>Python</code>来模拟这个<code>Ajax</code>请求，然后提取出相关美图链接并下载。但是在这之前，我们还需要分析一下<code>URL</code>的规律。<br>&nbsp;&nbsp;&nbsp;&nbsp;切换回<code>Headers</code>选项卡，观察一下它的请求<code>URL</code>和<code>Headers</code>信息，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/6.png?raw=true" alt="6"><br>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，这是一个GET请求，请求URL的参数有<code>offset</code>、<code>format</code>、<code>keyword</code>、<code>autoload</code>、<code>count</code>和<code>cur_tab</code>。我们需要找出这些参数的规律，因为这样才可以方便地用程序构造出来。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，可以滑动页面，多加载一些新结果。在加载的同时可以发现，<code>Network</code>中又出现了许多<code>Ajax</code>请求，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/7.png?raw=true" alt="7"><br>&nbsp;&nbsp;&nbsp;&nbsp;这里观察一下后续链接的参数，发现变化的参数只有<code>offset</code>，其他参数都没有变化，而且第二次请求的<code>offset</code>值为20，第三次为40，第四次为60，所以可以发现规律，这个<code>offset</code>值就是偏移量，进而可以推断出<code>count</code>参数就是一次性获取的数据条数。因此，我们可以用<code>offset</code>参数来控制数据分页。这样一来，我们就可以通过接口批量获取数据了，然后将数据解析，将图片下载下来即可。</p>
<h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，实现方法<code>get_page()</code>来加载单个<code>Ajax</code>请求的结果。其中唯一变化的参数就是<code>offset</code>，所以我们将它当作参数传递，实现如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(offset)</span>:</span></div><div class="line">    params = &#123;</div><div class="line">        <span class="string">'offset'</span>: offset,</div><div class="line">        <span class="string">'format'</span>: <span class="string">'json'</span>,</div><div class="line">        <span class="string">'keyword'</span>: <span class="string">'街拍'</span>,</div><div class="line">        <span class="string">'autoload'</span>: <span class="string">'true'</span>,</div><div class="line">        <span class="string">'count'</span>: <span class="string">'20'</span>,</div><div class="line">        <span class="string">'cur_tab'</span>: <span class="string">'1'</span>,</div><div class="line">    &#125;</div><div class="line">    url = <span class="string">'http://www.toutiao.com/search_content/?'</span> + urlencode(params)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        response = requests.get(url)</div><div class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</div><div class="line">            <span class="keyword">return</span> response.json()</div><div class="line">    <span class="keyword">except</span> requests.ConnectionError:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们用<code>urlencode()</code>方法构造请求的GET参数，然后用<code>requests</code>请求这个链接，如果返回状态码为200，则调用<code>response</code>的<code>json()</code>方法将结果转为<code>JSON</code>格式，然后返回。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，再实现一个解析方法：提取每条数据的<code>image_detail</code>字段中的每一张图片链接，将图片链接和图片所属的标题一并返回，此时可以构造一个生成器。实现代码如下:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">def get_images(json):</div><div class="line">    <span class="built_in">if</span> json.<span class="built_in">get</span>(<span class="string">'data'</span>):</div><div class="line">        <span class="built_in">for</span> item in json.<span class="built_in">get</span>(<span class="string">'data'</span>):</div><div class="line">            title = item.<span class="built_in">get</span>(<span class="string">'title'</span>)</div><div class="line">            images = item.<span class="built_in">get</span>(<span class="string">'image_detail'</span>)</div><div class="line">            <span class="built_in">for</span> <span class="built_in">image</span> in images:</div><div class="line">                <span class="built_in">yield</span> &#123;</div><div class="line">                    <span class="string">'image'</span>: <span class="built_in">image</span>.<span class="built_in">get</span>(<span class="string">'url'</span>),</div><div class="line">                    <span class="string">'title'</span>: title</div><div class="line">                &#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;接下来，实现一个保存图片的方法<code>save_image()</code>，其中<code>item</code>就是前面<code>get_images()</code>方法返回的一个字典。在该方法中，首先根据<code>item</code>的<code>title</code>来创建文件夹，然后请求这个图片链接，获取图片的二进制数据，以二进制的形式写入文件。图片的名称可以使用其内容的MD5值，这样可以去除重复。相关代码如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line"><span class="built_in">from</span> hashlib import md5</div><div class="line"> </div><div class="line">def save_image(<span class="keyword">item</span>):</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="keyword">item</span>.<span class="built_in">get</span>(<span class="string">'title'</span>)):</div><div class="line">        os.mkdir(<span class="keyword">item</span>.<span class="built_in">get</span>(<span class="string">'title'</span>))</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        response = requests.<span class="built_in">get</span>(<span class="keyword">item</span>.<span class="built_in">get</span>(<span class="string">'image'</span>))</div><div class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</div><div class="line">            file_path = <span class="string">'&#123;0&#125;/&#123;1&#125;.&#123;2&#125;'</span>.<span class="built_in">format</span>(<span class="keyword">item</span>.<span class="built_in">get</span>(<span class="string">'title'</span>), md5(response.content).hexdigest(), <span class="string">'jpg'</span>)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</div><div class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">                    f.<span class="built_in">write</span>(response.content)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">'Already Downloaded'</span>, file_path)</div><div class="line">    except requests.ConnectionError:</div><div class="line">        print(<span class="string">'Failed to Save Image'</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;最后，只需要构造一个<code>offset</code>数组，遍历<code>offset</code>，提取图片链接，并将其下载即可:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">from</span> multiprocessing.pool import Pool</div><div class="line"> </div><div class="line">def main(<span class="built_in">offset</span>):</div><div class="line">    json = get_page(<span class="built_in">offset</span>)</div><div class="line">    <span class="keyword">for</span> <span class="keyword">item</span> <span class="keyword">in</span> get_images(json):</div><div class="line">        print(<span class="keyword">item</span>)</div><div class="line">        save_image(<span class="keyword">item</span>)</div><div class="line"> </div><div class="line"> </div><div class="line">GROUP_START = <span class="number">1</span></div><div class="line">GROUP_END = <span class="number">20</span></div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pool = Pool()</div><div class="line">    groups = ([x * <span class="number">20</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(GROUP_START, GROUP_END + <span class="number">1</span>)])</div><div class="line">    pool.map(main, groups)</div><div class="line">    pool.<span class="built_in">close</span>()</div><div class="line">    pool.join()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里定义了分页的起始页数和终止页数，分别为<code>GROUP_START</code>和<code>GROUP_END</code>，还利用了多线程的线程池，调用其<code>map()</code>方法实现多线程下载。<br>&nbsp;&nbsp;&nbsp;&nbsp;这样整个程序就完成了，运行之后可以发现街拍美图都分文件夹保存下来了，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/8.png?raw=true" alt="8"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;抓取分析&quot;&gt;&lt;a href=&quot;#抓取分析&quot; class=&quot;headerlink&quot; title=&quot;抓取分析&quot;&gt;&lt;/a&gt;抓取分析&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在抓取之前，首先要分析抓取的逻辑。打开&lt;a href=&quot;https://www.toutiao.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;今日头条&lt;/a&gt;的首页。&lt;br&gt;&lt;img src=&quot;https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/1.png?raw=true&quot; alt=&quot;1&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL存储</title>
    <link href="http://www.sanstylemc.cn/2018/04/11/MySQL%E5%AD%98%E5%82%A8/"/>
    <id>http://www.sanstylemc.cn/2018/04/11/MySQL存储/</id>
    <published>2018-04-11T05:03:18.000Z</published>
    <updated>2018-04-11T05:04:04.184Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;在Python 2中，连接MySQL的库大多是使用MySQLdb，但是此库的官方并不支持Python 3，所以这里使用的库是PyMySQL。<br><a id="more"></a></p>
<h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> PyMySQL</div></pre></td></tr></table></figure>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;首先尝试连接一下数据库。假设当前的MySQL运行在本地，用户名为<code>root</code>，密码为<code>123123</code>，运行端口为<code>3306</code>。这里利用<code>PyMySQL</code>先连接<code>MySQL</code>，然后创建一个新的数据库，名字叫作<code>spiders</code>，代码如下:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"> </div><div class="line">db = pymysql.<span class="built_in">connect</span>(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>, password=<span class="string">'123123'</span>, port=<span class="number">3306</span>)</div><div class="line"><span class="built_in">cursor</span> = db.<span class="built_in">cursor</span>()</div><div class="line"><span class="built_in">cursor</span>.execute(<span class="string">'SELECT VERSION()'</span>)</div><div class="line">data = <span class="built_in">cursor</span>.fetchone()</div><div class="line"><span class="built_in">print</span>(<span class="string">'Database version:'</span>, data)</div><div class="line"><span class="built_in">cursor</span>.execute(<span class="string">"CREATE DATABASE spiders DEFAULT CHARACTER SET utf8"</span>)</div><div class="line">db.<span class="built_in">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Database <span class="string">version:</span> (<span class="string">'5.5.53'</span>,)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里通过<code>PyMySQL</code>的<code>connect()</code>方法声明一个<code>MySQL</code>连接对象<code>db</code>，此时需要传入<code>MySQL</code>运行的<code>host</code>（即IP）。由于<code>MySQL</code>在本地运行，所以传入的是<code>localhost</code>。如果<code>MySQL</code>在远程运行，则传入其公网<code>IP</code>地址。后续的参数<code>user</code>即用户名，<code>password</code>即密码，<code>port</code>即端口（默认为3306）。<br>&nbsp;&nbsp;&nbsp;&nbsp;连接成功后，需要再调用<code>cursor()</code>方法获得<code>MySQL</code>的操作游标，利用游标来执行<code>SQL</code>语句。这里我们执行了两句<code>SQL</code>，直接用<code>execute()</code>方法执行即可。第一句<code>SQL</code>用于获得<code>MySQL</code>的当前版本，然后调用<code>fetchone()</code>方法获得第一条数据，也就得到了版本号。第二句<code>SQL</code>执行创建数据库的操作，数据库名叫作<code>spiders</code>，默认编码为<code>UTF-8</code>。由于该语句不是查询语句，所以直接执行后就成功创建了数据库<code>spiders</code>。接着，再利用这个数据库进行后续的操作。</p>
<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;一般来说，创建数据库的操作只需要执行一次就好了。当然，我们也可以手动创建数据库。以后，我们的操作都在spiders数据库上执行。<br>&nbsp;&nbsp;&nbsp;&nbsp;创建数据库后，在连接时需要额外指定一个参数<code>db</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，新创建一个数据表<code>students</code>，此时执行创建表的<code>SQL</code>语句即可。这里指定3个字段，结构如表所示。</p>
<table>
<thead>
<tr>
<th style="text-align:center">字段名</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>id</code></td>
<td style="text-align:center">学号</td>
<td style="text-align:center"><code>varchar</code></td>
</tr>
<tr>
<td style="text-align:center"><code>name</code></td>
<td style="text-align:center">姓名</td>
<td style="text-align:center"><code>varchar</code></td>
</tr>
<tr>
<td style="text-align:center"><code>age</code></td>
<td style="text-align:center">年龄</td>
<td style="text-align:center"><code>int</code></td>
</tr>
</tbody>
</table>
<p>&nbsp;&nbsp;&nbsp;&nbsp;创建该表的示例代码如下:<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"> </div><div class="line"><span class="title">db</span> = pymysql.connect(host='localhost', user='root', password='<span class="number">123123</span>', <span class="keyword">port</span>=3306, db='spiders')</div><div class="line">cursor = db.cursor()</div><div class="line">sql = 'CREATE TABLE IF NOT EXISTS students (id <span class="type">VARCHAR(255)</span> <span class="type">NOT</span> <span class="type">NULL</span>, name <span class="type">VARCHAR(255)</span> <span class="type">NOT</span> <span class="type">NULL</span>, age <span class="type">INT</span> <span class="type">NOT</span> <span class="type">NULL</span>, <span class="type">PRIMARY</span> <span class="type">KEY</span> (id))'</div><div class="line">cursor.execute(sql)</div><div class="line">db.close()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行之后，我们便创建了一个名为<code>students</code>的数据表。</p>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;下一步就是向数据库中插入数据了。例如，这里爬取了一个学生信息，学号为<code>20120001</code>，名字为<code>Bob</code>，年龄为<code>20</code>，那么如何将该条数据插入数据库呢？示例代码如下:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"> </div><div class="line">id = <span class="string">'20120001'</span></div><div class="line">user = <span class="string">'Bob'</span></div><div class="line">age = <span class="number">20</span></div><div class="line"> </div><div class="line">db = pymysql.<span class="built_in">connect</span>(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'123123'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</div><div class="line"><span class="built_in">cursor</span> = db.<span class="built_in">cursor</span>()</div><div class="line">sql = <span class="string">'INSERT INTO students(id, name, age) values(%s, %s, %s)'</span></div><div class="line"><span class="built_in">try</span>:</div><div class="line">    <span class="built_in">cursor</span>.execute(sql, (id, user, age))</div><div class="line">    db.commit()</div><div class="line">except:</div><div class="line">    db.rollback()</div><div class="line">db.<span class="built_in">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里首先构造了一个<code>SQL</code>语句，其<code>Value</code>值没有用字符串拼接的方式来构造，如:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sql = '<span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(<span class="keyword">id</span>, <span class="keyword">name</span>, age) <span class="keyword">values</span>(<span class="string">' + id + '</span>, <span class="string">' + name + '</span>, <span class="string">' + age + '</span>)<span class="string">'</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样的写法烦琐而且不直观，所以我们选择直接用格式化符<code>%s</code>来实现。有几个<code>Value</code>写几个<code>%s</code>，我们只需要在<code>execute()</code>方法的第一个参数传入该<code>SQL</code>语句，<code>Value</code>值用统一的元组传过来就好了。这样的写法既可以避免字符串拼接的麻烦，又可以避免引号冲突的问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;之后值得注意的是，需要执行<code>db</code>对象的<code>commit()</code>方法才可实现数据插入，这个方法才是真正将语句提交到数据库执行的方法。对于数据插入、更新、删除操作，都需要调用该方法才能生效。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，我们加了一层异常处理。如果执行失败，则调用<code>rollback()</code>执行数据回滚，相当于什么都没有发生过。<br>&nbsp;&nbsp;&nbsp;&nbsp;这里涉及事务的问题。事务机制可以确保数据的一致性，也就是这件事要么发生了，要么没有发生。比如插入一条数据，不会存在插入一半的情况，要么全部插入，要么都不插入，这就是事务的原子性。另外，事务还有3个属性——一致性、隔离性和持久性。这4个属性通常称为<code>ACID</code>特性，具体如表所示。事务详情可看<a href="https://sanstylemc.cn/2018/04/01/MySQL%E4%BA%8B%E5%8A%A1%E5%8F%8A%E5%85%B6%E5%9B%9B%E4%B8%AA%E7%89%B9%E6%80%A7/" target="_blank" rel="external">此博文</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>原子性(atomicity)</code></td>
<td style="text-align:center">事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做</td>
</tr>
<tr>
<td style="text-align:center"><code>一致性（consistency）</code></td>
<td style="text-align:center">事务必须使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的</td>
</tr>
<tr>
<td style="text-align:center"><code>隔离性（isolation）</code></td>
<td style="text-align:center">一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰</td>
</tr>
<tr>
<td style="text-align:center"><code>持久性（durability）</code></td>
<td style="text-align:center">持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响</td>
</tr>
</tbody>
</table>
<p>&nbsp;&nbsp;&nbsp;&nbsp;插入、更新和删除操作都是对数据库进行更改的操作，而更改操作都必须为一个事务，所以这些操作的标准写法就是:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql)</div><div class="line">    db.commit()</div><div class="line">excep<span class="variable">t:</span></div><div class="line">    db.rollback()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样便可以保证数据的一致性。这里的commit()和rollback()方法就为事务的实现提供了支持。<br>&nbsp;&nbsp;&nbsp;&nbsp;上面数据插入的操作是通过构造SQL语句实现的，但是很明显，这有一个极其不方便的地方，比如突然增加了性别字段gender，此时SQL语句就需要改成:<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT INTO students(id, name, age, gender) <span class="built_in">values</span>(<span class="built_in">%s</span>, <span class="built_in">%s</span>, <span class="built_in">%s</span>, <span class="built_in">%s</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;相应的元组参数则需要改成:<br><figure class="highlight hy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">id</span></span>, name, age, gender)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这显然不是我们想要的。在很多情况下，我们要达到的效果是插入方法无需改动，做成一个通用方法，只需要传入一个动态变化的字典就好了。比如，构造这样一个字典:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    'id': '<span class="number">20120001</span>',</div><div class="line">    'name': 'Bob',</div><div class="line">    'age': <span class="number">20</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;然后<code>SQL</code>语句会根据字典动态构造，元组也动态构造，这样才能实现通用的插入方法。所以，这里我们需要改写一下插入方法:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">data = &#123;</div><div class="line">    <span class="string">'id'</span>: <span class="string">'20120001'</span>,</div><div class="line">    <span class="string">'name'</span>: <span class="string">'Bob'</span>,</div><div class="line">    <span class="string">'age'</span>: <span class="number">20</span></div><div class="line">&#125;</div><div class="line">table = <span class="string">'students'</span></div><div class="line"><span class="built_in">keys</span> = <span class="string">', '</span>.<span class="keyword">join</span>(data.<span class="built_in">keys</span>())</div><div class="line"><span class="built_in">values</span> = <span class="string">', '</span>.<span class="keyword">join</span>([<span class="string">'%s'</span>] * <span class="built_in">len</span>(data))</div><div class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;)'</span>.format(table=table, <span class="built_in">keys</span>=<span class="built_in">keys</span>, <span class="built_in">values</span>=<span class="built_in">values</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">   <span class="keyword">if</span> <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql, tuple(data.<span class="built_in">values</span>())):</div><div class="line">       <span class="keyword">print</span>(<span class="string">'Successful'</span>)</div><div class="line">       db.commit()</div><div class="line">excep<span class="variable">t:</span></div><div class="line">    <span class="keyword">print</span>(<span class="string">'Failed'</span>)</div><div class="line">    db.rollback()</div><div class="line">db.<span class="keyword">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们传入的数据是字典，并将其定义为<code>data</code>变量。表名也定义成变量<code>table</code>。接下来，就需要构造一个动态的<code>SQL</code>语句了。<br>&nbsp;&nbsp;&nbsp;&nbsp;首先，需要构造插入的字段<code>id</code>、<code>name</code>和<code>age</code>。这里只需要将<code>data</code>的键名拿过来，然后用逗号分隔即可。所以<code>&#39;, &#39;.join(data.keys())</code>的结果就是<code>id</code>, <code>name</code>, <code>age</code>，然后需要构造多个<code>%s</code>当作占位符，有几个字段构造几个即可。比如，这里有三个字段，就需要构造<code>%s</code>, <code>%s</code>, <code>%s</code>。这里首先定义了长度为<code>1</code>的数组<code>[&#39;%s&#39;]</code>，然后用乘法将其扩充为<code>[&#39;%s&#39;, &#39;%s&#39;, &#39;%s&#39;]</code>，再调用<code>join()</code>方法，最终变成<code>%s, %s, %s</code>。最后，我们再利用字符串的<code>format()</code>方法将表名、字段名和占位符构造出来。最终的<code>SQL</code>语句就被动态构造成了:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(<span class="keyword">id</span>, <span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (%s, %s, %s)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;最后，为<code>execute()</code>方法的第一个参数传入<code>sql</code>变量，第二个参数传入<code>data</code>的键值构造的元组，就可以成功插入数据了。<br>&nbsp;&nbsp;&nbsp;&nbsp;如此以来，我们便实现了传入一个字典来插入数据的方法，不需要再去修改SQL语句和插入操作了。</p>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;数据更新操作实际上也是执行SQL语句，最简单的方式就是构造一个SQL语句，然后执行:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">'UPDATE students SET age = %s WHERE name = %s'</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">   <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql, (<span class="number">25</span>, <span class="string">'Bob'</span>))</div><div class="line">   db.commit()</div><div class="line">excep<span class="variable">t:</span></div><div class="line">   db.rollback()</div><div class="line">db.<span class="keyword">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里同样用占位符的方式构造SQL，然后执行<code>execute()</code>方法，传入元组形式的参数，同样执行<code>commit()</code>方法执行操作。如果要做简单的数据更新的话，完全可以使用此方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;但是在实际的数据抓取过程中，大部分情况下需要插入数据，但是我们关心的是会不会出现重复数据，如果出现了，我们希望更新数据而不是重复保存一次。另外，就像前面所说的动态构造SQL的问题，所以这里可以再实现一种去重的方法，如果数据存在，则更新数据；如果数据不存在，则插入数据。另外，这种做法支持灵活的字典传值。示例如下:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">data = &#123;</div><div class="line">    <span class="string">'id'</span>: <span class="string">'20120001'</span>,</div><div class="line">    <span class="string">'name'</span>: <span class="string">'Bob'</span>,</div><div class="line">    <span class="string">'age'</span>: <span class="number">21</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line">table = <span class="string">'students'</span></div><div class="line"><span class="built_in">keys</span> = <span class="string">', '</span>.<span class="keyword">join</span>(data.<span class="built_in">keys</span>())</div><div class="line"><span class="built_in">values</span> = <span class="string">', '</span>.<span class="keyword">join</span>([<span class="string">'%s'</span>] * <span class="built_in">len</span>(data))</div><div class="line"> </div><div class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;) ON DUPLICATE KEY UPDATE'</span>.format(table=table, <span class="built_in">keys</span>=<span class="built_in">keys</span>, <span class="built_in">values</span>=<span class="built_in">values</span>)</div><div class="line"><span class="keyword">update</span> = <span class="string">','</span>.<span class="keyword">join</span>([<span class="string">" &#123;key&#125; = %s"</span>.format(key=key) <span class="keyword">for</span> key in data])</div><div class="line">sql += <span class="keyword">update</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">if</span> <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql, tuple(data.<span class="built_in">values</span>())*<span class="number">2</span>):</div><div class="line">        <span class="keyword">print</span>(<span class="string">'Successful'</span>)</div><div class="line">        db.commit()</div><div class="line">excep<span class="variable">t:</span></div><div class="line">    <span class="keyword">print</span>(<span class="string">'Failed'</span>)</div><div class="line">    db.rollback()</div><div class="line">db.<span class="keyword">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里构造的SQL语句其实是插入语句，但是我们在后面加了<code>ON DUPLICATE KEY UPDATE</code>。这行代码的意思是如果主键已经存在，就执行更新操作。比如，我们传入的数据<code>id</code>仍然为<code>20120001</code>，但是年龄有所变化，由<code>20</code>变成了<code>21</code>，此时这条数据不会被插入，而是直接更新<code>id</code>为<code>20120001</code>的数据。完整的SQL构造出来是这样的:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(<span class="keyword">id</span>, <span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (%s, %s, %s) <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> <span class="keyword">id</span> = %s, <span class="keyword">name</span> = %s, age = %s</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里就变成了6个<code>%s</code>。所以在后面的<code>execute()</code>方法的第二个参数元组就需要乘以2变成原来的2倍。<br>&nbsp;&nbsp;&nbsp;&nbsp;如此一来，我们就可以实现主键不存在便插入数据，存在则更新数据的功能了。</p>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;删除操作相对简单，直接使用<code>DELETE</code>语句即可，只是需要指定要删除的目标表名和删除条件，而且仍然需要使用<code>db</code>的<code>commit()</code>方法才能生效。示例如下:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">table</span> = <span class="string">'students'</span></div><div class="line">condition = <span class="string">'age &gt; 20'</span></div><div class="line"> </div><div class="line">sql = <span class="string">'DELETE FROM  &#123;table&#125; WHERE &#123;condition&#125;'</span>.<span class="built_in">format</span>(<span class="built_in">table</span>=<span class="built_in">table</span>, condition=condition)</div><div class="line">try:</div><div class="line">    cursor.<span class="built_in">execute</span>(sql)</div><div class="line">    db.commit()</div><div class="line">except:</div><div class="line">    db.rollback()</div><div class="line"> </div><div class="line">db.<span class="built_in">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;因为删除条件有多种多样，运算符有<code>大于</code>、<code>小于</code>、<code>等于</code>、<code>LIKE</code>等，条件连接符有<code>AND</code>、<code>OR</code>等，所以不再继续构造复杂的判断条件。这里直接将条件当作字符串来传递，以实现删除操作。</p>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;说完插入、修改和删除等操作，还剩下非常重要的一个操作，那就是查询。查询会用到<code>SELECT</code>语句，示例如下:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">'SELECT * FROM students WHERE age &gt;= 20'</span></div><div class="line"> </div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql)</div><div class="line">    <span class="keyword">print</span>(<span class="string">'Count:'</span>, <span class="built_in">cursor</span>.rowcount)</div><div class="line">    one = <span class="built_in">cursor</span>.fetchone()</div><div class="line">    <span class="keyword">print</span>(<span class="string">'One:'</span>, one)</div><div class="line">    results = <span class="built_in">cursor</span>.fetchall()</div><div class="line">    <span class="keyword">print</span>(<span class="string">'Results:'</span>, results)</div><div class="line">    <span class="keyword">print</span>(<span class="string">'Results Type:'</span>, <span class="built_in">type</span>(results))</div><div class="line">    <span class="keyword">for</span> row in result<span class="variable">s:</span></div><div class="line">        <span class="keyword">print</span>(row)</div><div class="line">excep<span class="variable">t:</span></div><div class="line">    <span class="keyword">print</span>(<span class="string">'Error'</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Count: <span class="number">4</span></div><div class="line">One: ('<span class="number">20120001</span>', 'Bob', <span class="number">25</span>)</div><div class="line">Results: (('<span class="number">20120011</span>', 'Mary', <span class="number">21</span>), ('<span class="number">20120012</span>', 'Mike', <span class="number">20</span>), ('<span class="number">20120013</span>', 'James', <span class="number">22</span>))</div><div class="line">Results Type: &lt;class 'tuple'&gt;</div><div class="line">('<span class="number">20120011</span>', 'Mary', <span class="number">21</span>)</div><div class="line">('<span class="number">20120012</span>', 'Mike', <span class="number">20</span>)</div><div class="line">('<span class="number">20120013</span>', 'James', <span class="number">22</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们构造了一条SQL语句，将年龄<code>20</code>岁及以上的学生查询出来，然后将其传给<code>execute()</code>方法。注意，这里不再需要<code>db</code>的<code>commit()</code>方法。接着，调用<code>cursor</code>的<code>rowcount</code>属性获取查询结果的条数，当前示例中是4条。<br>&nbsp;&nbsp;&nbsp;&nbsp;然后我们调用了<code>fetchone()</code>方法，这个方法可以获取结果的第一条数据，返回结果是元组形式，元组的元素顺序跟字段一一对应，即第一个元素就是第一个字段<code>id</code>，第二个元素就是第二个字段<code>name</code>，以此类推。随后，我们又调用了<code>fetchall()</code>方法，它可以得到结果的所有数据。然后将其结果和类型打印出来，它是二重元组，每个元素都是一条记录，我们将其遍历输出出来。<br>&nbsp;&nbsp;&nbsp;&nbsp;但是这里需要注意一个问题，这里显示的是3条数据而不是4条，<code>fetchall()</code>方法不是获取所有数据吗？这是因为它的内部实现有一个偏移指针用来指向查询结果，最开始偏移指针指向第一条数据，取一次之后，指针偏移到下一条数据，这样再取的话，就会取到下一条数据了。我们最初调用了一次<code>fetchone()</code>方法，这样结果的偏移指针就指向下一条数据，<code>fetchall()</code>方法返回的是偏移指针指向的数据一直到结束的所有数据，所以该方法获取的结果就只剩3个了。<br>&nbsp;&nbsp;&nbsp;&nbsp;此外，我们还可以用<code>while</code>循环加<code>fetchone()</code>方法来获取所有数据，而不是用<code>fetchall()</code>全部一起获取出来。<code>fetchall()</code>会将结果以元组形式全部返回，如果数据量很大，那么占用的开销会非常高。因此，推荐使用如下方法来逐条取数据:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">'SELECT * FROM students WHERE age &gt;= 20'</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql)</div><div class="line">    <span class="keyword">print</span>(<span class="string">'Count:'</span>, <span class="built_in">cursor</span>.rowcount)</div><div class="line">    row = <span class="built_in">cursor</span>.fetchone()</div><div class="line">    <span class="keyword">while</span> ro<span class="variable">w:</span></div><div class="line">        <span class="keyword">print</span>(<span class="string">'Row:'</span>, row)</div><div class="line">        row = <span class="built_in">cursor</span>.fetchone()</div><div class="line">excep<span class="variable">t:</span></div><div class="line">    <span class="keyword">print</span>(<span class="string">'Error'</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样每循环一次，指针就会偏移一条数据，随用随取，简单高效。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在Python 2中，连接MySQL的库大多是使用MySQLdb，但是此库的官方并不支持Python 3，所以这里使用的库是PyMySQL。&lt;br&gt;
    
    </summary>
    
    
      <category term="存储" scheme="http://www.sanstylemc.cn/tags/%E5%AD%98%E5%82%A8/"/>
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>CSV文件存储</title>
    <link href="http://www.sanstylemc.cn/2018/04/11/CSV%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    <id>http://www.sanstylemc.cn/2018/04/11/CSV文件存储/</id>
    <published>2018-04-11T02:34:04.000Z</published>
    <updated>2018-04-11T05:04:32.238Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;CSV，全称为Comma-Separated Values，中文可以叫作逗号分隔值或字符分隔值，其文件以纯文本形式存储表格数据。该文件是一个字符序列，可以由任意数目的记录组成，记录间以某种换行符分隔。每条记录由字段组成，字段间的分隔符是其他字符或字符串，最常见的是逗号或制表符。不过所有记录都有完全相同的字段序列，相当于一个结构化表的纯文本形式。它比Excel文件更加简介，XLS文本是电子表格，它包含了文本、数值、公式和格式等内容，而CSV中不包含这些内容，就是特定字符分隔的纯文本，结构简单清晰。所以，有时候用CSV来保存数据是比较方便的。<br><a id="more"></a></p>
<h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;这里先看一个最简单的例子:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import csv</div><div class="line"> </div><div class="line">with open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) as csvfile:</div><div class="line">    writer = csv.writer(csvfile)</div><div class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</div><div class="line">    writer.writerow([<span class="string">'10001'</span>, <span class="string">'Mike'</span>, <span class="number">20</span>])</div><div class="line">    writer.writerow([<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="number">22</span>])</div><div class="line">    writer.writerow([<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="number">21</span>])</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;首先，打开<code>data.csv</code>文件，然后指定打开的模式为<code>w</code>（即写入），获得文件句柄，随后调用<code>csv</code>库的<code>writer()</code>方法初始化写入对象，传入该句柄，然后调用<code>writerow()</code>方法传入每行的数据即可完成写入。<br>&nbsp;&nbsp;&nbsp;&nbsp;运行结束后，会生成一个名为<code>data.csv</code>的文件，此时数据就成功写入了。直接以文本形式打开的话，其内容如下:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">id,name,age</div><div class="line"><span class="number">10001</span>,Mike,<span class="number">20</span></div><div class="line"><span class="number">10002</span>,Bob,<span class="number">22</span></div><div class="line"><span class="number">10003</span>,Jordan,<span class="number">21</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，写入的文本默认以逗号分隔，调用一次<code>writerow()</code>方法即可写入一行数据。用<code>Excel</code>打开的结果如图所示:<br><img src="https://github.com/sunstady/hexo/blob/master/CSV%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/1.png?raw=true" alt="1"><br>&nbsp;&nbsp;&nbsp;&nbsp;如果想修改列与列之间的分隔符，可以传<code>入delimiter</code>参数，其代码如下:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import csv</div><div class="line"> </div><div class="line">with open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) as csvfile:</div><div class="line">    writer = csv.writer(csvfile, delimiter=<span class="string">' '</span>)</div><div class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</div><div class="line">    writer.writerow([<span class="string">'10001'</span>, <span class="string">'Mike'</span>, <span class="number">20</span>])</div><div class="line">    writer.writerow([<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="number">22</span>])</div><div class="line">    writer.writerow([<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="number">21</span>])</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;另外，我们也可以调用<code>writerows()</code>方法同时写入多行，此时参数就需要为二维列表，例如:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import csv</div><div class="line"> </div><div class="line">with open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) as csvfile:</div><div class="line">    writer = csv.writer(csvfile)</div><div class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</div><div class="line">    writer.writerows([[<span class="string">'10001'</span>, <span class="string">'Mike'</span>, <span class="number">20</span>], [<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="number">22</span>], [<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="number">21</span>]])</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;输出效果是相同的，内容如下:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">id,name,age</div><div class="line"><span class="number">10001</span>,Mike,<span class="number">20</span></div><div class="line"><span class="number">10002</span>,Bob,<span class="number">22</span></div><div class="line"><span class="number">10003</span>,Jordan,<span class="number">21</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;但是一般情况下，爬虫爬取的都是结构化数据，我们一般会用字典来表示。在<code>csv</code>库中也提供了字典的写入方式，示例如下:<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> csv</div><div class="line"> </div><div class="line">with open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> csvfile:</div><div class="line">    fieldnames = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>]</div><div class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</div><div class="line">    writer.writeheader()</div><div class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10001'</span>, <span class="string">'name'</span>: <span class="string">'Mike'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;)</div><div class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10002'</span>, <span class="string">'name'</span>: <span class="string">'Bob'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;)</div><div class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10003'</span>, <span class="string">'name'</span>: <span class="string">'Jordan'</span>, <span class="string">'age'</span>: <span class="number">21</span>&#125;)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里先定义3个字段，用<code>fieldnames</code>表示，然后将其传给<code>DictWriter</code>来初始化一个字典写入对象，接着可以调用<code>writeheader()</code>方法先写入头信息，然后再调用<code>writerow()</code>方法传入相应字典即可。最终写入的结果是完全相同的，内容如下:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">id,name,age</div><div class="line"><span class="number">10001</span>,Mike,<span class="number">20</span></div><div class="line"><span class="number">10002</span>,Bob,<span class="number">22</span></div><div class="line"><span class="number">10003</span>,Jordan,<span class="number">21</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样就可以完成字典到<code>CSV</code>文件的写入了。<br>&nbsp;&nbsp;&nbsp;&nbsp;另外，如果想追加写入的话，可以修改文件的打开模式，即将<code>open()</code>函数的第二个参数改成<code>a</code>，代码如下:<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> csv</div><div class="line"> </div><div class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> csvfile:</div><div class="line">    fieldnames = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>]</div><div class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</div><div class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10004'</span>, <span class="string">'name'</span>: <span class="string">'Durant'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样在上面的基础上再执行这段代码，文件内容便会变成:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">id,name,age</div><div class="line"><span class="number">10001</span>,Mike,<span class="number">20</span></div><div class="line"><span class="number">10002</span>,Bob,<span class="number">22</span></div><div class="line"><span class="number">10003</span>,Jordan,<span class="number">21</span></div><div class="line"><span class="number">10004</span>,Durant,<span class="number">22</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可见，数据被追加写入到文件中。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果要写入中文内容的话，可能会遇到字符编码的问题，此时需要用<code>codecs</code>提供的<code>open</code>方法来指定打开的文件的语言编码，它会在读取的时候自动转换为内部<code>unicode</code>。比如，这里再写入一行包含中文的数据，代码需要改写如下:<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> csv, codecs</div><div class="line"></div><div class="line"><span class="keyword">with</span> codecs.open(<span class="string">'data.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">'gbk'</span>) <span class="keyword">as</span> csvfile:</div><div class="line">    fieldnames = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>]</div><div class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</div><div class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10005'</span>, <span class="string">'name'</span>: <span class="string">'王伟'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里需要给<code>open()</code>函数指定编码，否则可能发生编码错误。<br>&nbsp;&nbsp;&nbsp;&nbsp;另外，如果接触过<code>pandas</code>等库的话，可以调用<code>DataFrame对象的to_csv()</code>方法来将数据写入<code>CSV</code>文件中。</p>
<h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们同样可以使用<code>csv</code>库来读取<code>CSV</code>文件。例如，将刚才写入的文件内容读取出来，相关代码如下:<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> csv</div><div class="line"> </div><div class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'r'</span>, encoding=<span class="string">'gbk'</span>) <span class="keyword">as</span> csvfile:</div><div class="line">    reader = csv.reader(csvfile)</div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</div><div class="line">        <span class="built_in">print</span>(row)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'id</span>', <span class="symbol">'name</span>', <span class="symbol">'age</span>']</div><div class="line">[<span class="symbol">'10001</span>', <span class="symbol">'Mike</span>', <span class="symbol">'20</span>']</div><div class="line">[<span class="symbol">'10002</span>', <span class="symbol">'Bob</span>', <span class="symbol">'22</span>']</div><div class="line">[<span class="symbol">'10003</span>', <span class="symbol">'Jordan</span>', <span class="symbol">'21</span>']</div><div class="line">[<span class="symbol">'10004</span>', <span class="symbol">'Durant</span>', <span class="symbol">'22</span>']</div><div class="line">[<span class="symbol">'10005</span>', <span class="symbol">'王伟</span>', <span class="symbol">'22</span>']</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们构造的是<code>Reader</code>对象，通过遍历输出了每行的内容，每一行都是一个列表形式。注意，如果<code>CSV</code>文件中包含中文的话，还需要指定文件编码。<br>&nbsp;&nbsp;&nbsp;&nbsp;另外，如果接触过<code>pandas</code>的话，可以利用<code>read_csv()</code>方法将数据从<code>CSV</code>中读取出来，例如:<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas  <span class="keyword">as</span> pd</div><div class="line"> </div><div class="line">df = pd.read_csv(<span class="string">'data.csv'</span>, encoding=<span class="string">'gbk'</span>)</div><div class="line"><span class="built_in">print</span>(df)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">      id    name  age</div><div class="line"><span class="number">0</span>  <span class="number">10001</span>    Mike   <span class="number">20</span></div><div class="line"><span class="number">1</span>  <span class="number">10002</span>     Bob   <span class="number">22</span></div><div class="line"><span class="number">2</span>  <span class="number">10003</span>  Jordan   <span class="number">21</span></div><div class="line"><span class="number">3</span>  <span class="number">10004</span>  Durant   <span class="number">22</span></div><div class="line"><span class="number">4</span>  <span class="number">10005</span>      王伟   <span class="number">22</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;在做数据分析的时候，此种方法用得比较多，也是一种比较方便地读取<code>CSV</code>文件的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CSV，全称为Comma-Separated Values，中文可以叫作逗号分隔值或字符分隔值，其文件以纯文本形式存储表格数据。该文件是一个字符序列，可以由任意数目的记录组成，记录间以某种换行符分隔。每条记录由字段组成，字段间的分隔符是其他字符或字符串，最常见的是逗号或制表符。不过所有记录都有完全相同的字段序列，相当于一个结构化表的纯文本形式。它比Excel文件更加简介，XLS文本是电子表格，它包含了文本、数值、公式和格式等内容，而CSV中不包含这些内容，就是特定字符分隔的纯文本，结构简单清晰。所以，有时候用CSV来保存数据是比较方便的。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
      <category term="存储" scheme="http://www.sanstylemc.cn/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>JSON文件存储</title>
    <link href="http://www.sanstylemc.cn/2018/04/11/JSON%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    <id>http://www.sanstylemc.cn/2018/04/11/JSON文件存储/</id>
    <published>2018-04-11T01:37:35.000Z</published>
    <updated>2018-04-11T01:38:21.491Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;JSON，全称为<code>JavaScript Object Notation</code>，也就是<code>JavaScript</code>对象标记，它通过对象和数组的组合来表示数据，构造简洁但是结构化程度非常高，是一种轻量级的数据交换格式。<br><a id="more"></a></p>
<h2 id="对象和数组"><a href="#对象和数组" class="headerlink" title="对象和数组"></a>对象和数组</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在<code>JavaScript</code>语言中，一切都是对象。因此，任何支持的类型都可以通过JSON来表示，例如字符串、数字、对象、数组等，但是对象和数组是比较特殊且常用的两种类型。</p>
<ul>
<li><code>对象</code>: 它在<code>JavaScript</code>中是使用花括号<code>{}</code>包裹起来的内容，数据结构为<code>{key1：value1, key2：value2, ...}</code>的键值对结构。在面向对象的语言中，<code>key</code>为对象的属性，<code>value</code>为对应的值。键名可以使用整数和字符串来表示。值得类型可以是任意类型。</li>
<li><code>数组</code>: 数组在<code>JavaScript</code>中是方括号<code>[]</code>包裹起来的内容，数据结构为<code>[&quot;java&quot;, &quot;javascript&quot;, &quot;vb&quot;, ...]</code>的索引结构。在<code>JavaScript</code>中，数组是一种比较特殊的数据类型，它也可以像对象那样使用键值对，但还是索引用得多。同样，值得类型可以是任意类型。</li>
</ul>
<p>所以，一个JSON对象可以写为如下形式:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"Bob"</span>,</div><div class="line">    <span class="attr">"gender"</span>: <span class="string">"male"</span>,</div><div class="line">    <span class="attr">"birthday"</span>: <span class="string">"1992-10-18"</span></div><div class="line">&#125;, &#123;</div><div class="line">     <span class="attr">"name"</span>: <span class="string">"Selina"</span>,</div><div class="line">    <span class="attr">"gender"</span>: <span class="string">"female"</span>,</div><div class="line">    <span class="attr">"birthday"</span>: <span class="string">"1995-10-18"</span></div><div class="line">&#125;]</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;由中括号包围的就相当于列表类型，列表中的每个元素可以是任意类型，这个示例中它是字典类型，由大括号包围。<br>&nbsp;&nbsp;&nbsp;&nbsp;JSON可以由以上两种形式自由组合而成，可以无限次嵌套，结构清晰，是数据交换的极佳方式。</p>
<h2 id="读取JSON"><a href="#读取JSON" class="headerlink" title="读取JSON"></a>读取JSON</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Python为我们提供了简单易用的库来实现JSON文件的读写操作，我们可以调用库的<code>loads()</code>方法将JSON文本字符串转为<code>JSON</code>对象，可以通过<code>dumps()</code>方法将<code>JSON</code>对象转为文本字符串。<br>&nbsp;&nbsp;&nbsp;&nbsp;例如，这里有一段<code>JSON</code>形式的字符串，它是<code>str</code>类型，我们用Python将其转换为可操作的数据结构，如列表或字典:<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"> </div><div class="line"><span class="title">str</span> = '''</div><div class="line">[&#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"Bob"</span>,</div><div class="line">    <span class="string">"gender"</span>: <span class="string">"male"</span>,</div><div class="line">    <span class="string">"birthday"</span>: <span class="string">"1992-10-18"</span></div><div class="line">&#125;, &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"Selina"</span>,</div><div class="line">    <span class="string">"gender"</span>: <span class="string">"female"</span>,</div><div class="line">    <span class="string">"birthday"</span>: <span class="string">"1995-10-18"</span></div><div class="line">&#125;]</div><div class="line">'''</div><div class="line"><span class="title">print</span>(<span class="class"><span class="keyword">type</span>(<span class="title">str</span>))</span></div><div class="line"><span class="class"><span class="keyword">data</span> = json.loads(<span class="title">str</span>)</span></div><div class="line"><span class="title">print</span>(<span class="class"><span class="keyword">data</span>)</span></div><div class="line"><span class="title">print</span>(<span class="class"><span class="keyword">type</span>(<span class="title">data</span>))</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;class 'str'&gt;</div><div class="line">[&#123;'name': 'Bob', 'gender': 'male', 'birthday': '<span class="number">1992-10-18</span>'&#125;, &#123;'name': 'Selina', 'gender': 'female', 'birthday': '<span class="number">1995-10-18</span>'&#125;]</div><div class="line">&lt;class 'list'&gt;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里使用<code>loads()</code>方法将字符串转为<code>JSON</code>对象。由于最外层是中括号，所以最终的类型是列表类型。<br>&nbsp;&nbsp;&nbsp;&nbsp;这样一来，我们就可以用索引来获取对应的内容了。例如，如果想取第一个元素里的<code>name</code>属性，就可以使用如下方式:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data[<span class="string">0</span>][<span class="symbol">'name'</span>]</div><div class="line">data[0].get('name')</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;得到的结果都是:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Bob</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;通过中括号加0索引，可以得到第一个字典元素，然后再调用其键名即可得到相应的键值。获取键值时有两种方式，一种是中括号加键名，另一种是通过<code>get()</code>方法传入键名。这里推荐使用<code>get()</code>方法，这样如果键名不存在，则不会报错，会返回<code>None</code>。另外，<code>get()</code>方法还可以传入第二个参数（即默认值），示例如下:<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">data</span>[0].get('<span class="title">age'</span>)</span></div><div class="line"><span class="class"><span class="keyword">data</span>[0].get('<span class="title">age'</span>, 25)</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">None</span></div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们尝试获取年龄<code>age</code>，其实在原字典中该键名不存在，此时默认会返回<code>None</code>。如果传入第二个参数（即默认值），那么在不存在的情况下返回该默认值。<br>&nbsp;&nbsp;&nbsp;&nbsp;值得注意的是，<code>JSON</code>的数据需要用双引号来包围，不能使用单引号。例如，若使用如下形式表示，则会出现错误:<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"> </div><div class="line">str = <span class="string">''</span><span class="string">'</span></div><div class="line"><span class="string">[&#123;</span></div><div class="line"><span class="string">    '</span>name<span class="string">': '</span>Bob<span class="string">',</span></div><div class="line"><span class="string">    '</span>gender<span class="string">': '</span>male<span class="string">',</span></div><div class="line"><span class="string">    '</span>birthday<span class="string">': '</span><span class="number">1992</span><span class="number">-10</span><span class="number">-18</span><span class="string">'</span></div><div class="line"><span class="string">&#125;]</span></div><div class="line"><span class="string">'</span><span class="string">''</span></div><div class="line"><span class="built_in">data</span> = json.loads(str)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">json.decoder.<span class="string">JSONDecodeError:</span> Expecting property name enclosed <span class="keyword">in</span> <span class="keyword">double</span> <span class="string">quotes:</span> line <span class="number">3</span> column <span class="number">5</span> (<span class="keyword">char</span> <span class="number">8</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里会出现<code>JSON</code>解析错误的提示。这是因为这里数据用单引号来包围，请千万注意<code>JSON</code>字符串的表示需要用双引号，否则<code>loads()</code>方法会解析失败。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果从<code>JSON</code>文本中读取内容，例如这里有一个<code>data.json</code>文本文件，其内容是刚才定义的<code>JSON</code>字符串，我们可以先将文本文件内容读出，然后再利用<code>loads()</code>方法转化:<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"> </div><div class="line"><span class="title">with</span> open('<span class="class"><span class="keyword">data</span>.json', 'r') as file:</span></div><div class="line">    str = file.read()</div><div class="line">    <span class="class"><span class="keyword">data</span> = json.loads(<span class="title">str</span>)</span></div><div class="line">    print(<span class="class"><span class="keyword">data</span>)</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&#123;<span class="symbol">'name</span><span class="symbol">':</span> <span class="symbol">'Bob</span>', <span class="symbol">'gender</span><span class="symbol">':</span> <span class="symbol">'male</span>', <span class="symbol">'birthday</span><span class="symbol">':</span> <span class="symbol">'1992-10-18</span>'&#125;, &#123;<span class="symbol">'name</span><span class="symbol">':</span> <span class="symbol">'Selina</span>', <span class="symbol">'gender</span><span class="symbol">':</span> <span class="symbol">'female</span>', <span class="symbol">'birthday</span><span class="symbol">':</span> <span class="symbol">'1995-10-18</span>'&#125;]</div></pre></td></tr></table></figure></p>
<h2 id="输出JSON"><a href="#输出JSON" class="headerlink" title="输出JSON"></a>输出JSON</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;另外，我们还可以调用<code>dumps()</code>方法将<code>JSON</code>对象转化为字符串。例如，将上例中的列表重新写入文本:<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"> </div><div class="line"><span class="keyword">data</span> = [&#123;</div><div class="line">    <span class="string">'name'</span>: <span class="string">'Bob'</span>,</div><div class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span>,</div><div class="line">    <span class="string">'birthday'</span>: <span class="string">'1992-10-18'</span></div><div class="line">&#125;]</div><div class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file:</div><div class="line">    file.write(json.dumps(<span class="keyword">data</span>))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;利用<code>dumps()</code>方法，我们可以将<code>JSON</code>对象转为字符串，然后再调用文件的<code>write()</code>方法写入文本，结果如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/json%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/1.png?raw=true" alt="1"><br>&nbsp;&nbsp;&nbsp;&nbsp;另外，如果想保存<code>JSON</code>的格式，可以再加一个参数<code>indent</code>，代表缩进字符个数。示例如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'data.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> <span class="built_in">file</span>:</div><div class="line">    <span class="built_in">file</span>.<span class="built_in">write</span>(json.dumps(data, indent=<span class="number">2</span>))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;此时写入结果如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/json%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/2.png?raw=true" alt="2"><br>&nbsp;&nbsp;&nbsp;&nbsp;这样得到的内容会自动带缩进，格式会更加清晰。<br>&nbsp;&nbsp;&nbsp;&nbsp;另外，如果<code>JSON</code>中包含中文字符，会怎么样呢？例如，我们将之前的<code>JSON</code>的部分值改为中文，再用之前的方法写入到文本:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import json</div><div class="line"> </div><div class="line">data = [&#123;</div><div class="line">    <span class="string">'name'</span>: <span class="string">'王伟'</span>,</div><div class="line">    <span class="string">'gender'</span>: <span class="string">'男'</span>,</div><div class="line">    <span class="string">'birthday'</span>: <span class="string">'1992-10-18'</span></div><div class="line">&#125;]</div><div class="line">with <span class="keyword">open</span>(<span class="string">'data.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> <span class="keyword">file</span>:</div><div class="line">    <span class="keyword">file</span>.<span class="keyword">write</span>(json.dumps(data, <span class="built_in">indent</span>=<span class="number">2</span>))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;写入结果如图所示:<br><img src="https://github.com/sunstady/hexo/blob/master/json%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/3.png?raw=true" alt="3"><br>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，中文字符都变成了<code>Unicode</code>字符，这并不是我们想要的结果。<br>&nbsp;&nbsp;&nbsp;&nbsp;为了输出中文，还需要指定参数<code>ensure_ascii</code>为<code>False</code>，另外还要规定文件输出的编码:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'data.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> <span class="built_in">file</span>:</div><div class="line">    <span class="built_in">file</span>.<span class="built_in">write</span>(json.dumps(data, indent=<span class="number">2</span>, ensure_ascii=False))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;写入结果如图所示:<br><img src="https://github.com/sunstady/hexo/blob/master/json%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/4.png?raw=true" alt="4"><br>&nbsp;&nbsp;&nbsp;&nbsp;可以发现，这样就可以输出<code>JSON</code>为中文了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JSON，全称为&lt;code&gt;JavaScript Object Notation&lt;/code&gt;，也就是&lt;code&gt;JavaScript&lt;/code&gt;对象标记，它通过对象和数组的组合来表示数据，构造简洁但是结构化程度非常高，是一种轻量级的数据交换格式。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
      <category term="存储" scheme="http://www.sanstylemc.cn/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>TXT存储</title>
    <link href="http://www.sanstylemc.cn/2018/04/09/TXT%E5%AD%98%E5%82%A8/"/>
    <id>http://www.sanstylemc.cn/2018/04/09/TXT存储/</id>
    <published>2018-04-09T14:33:18.000Z</published>
    <updated>2018-04-09T14:33:51.229Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;将数据保存到TXT文本的操作非常简单，而且TXT文本几乎兼容任何平台，但是这有个缺点，那就是不利于检索。所以如果对检索和数据结构要求不高，追求方便第一的话，可以采用TXT文本存储。<br><a id="more"></a></p>
<h2 id="基本实例"><a href="#基本实例" class="headerlink" title="基本实例"></a>基本实例</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，可以用<code>requests</code>将网页源代码获取下来，然后使用<code>PyQuery</code>解析库解析，接下来将提取的标题、回答者、回答保存到文本，代码如下:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">from pyquery import PyQuery <span class="keyword">as</span> pq</div><div class="line"> </div><div class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span></div><div class="line">&#125;</div><div class="line">html = requests.<span class="built_in">get</span>(url, headers=headers).text</div><div class="line">doc = pq(html)</div><div class="line"><span class="built_in">items</span> = doc(<span class="string">'.explore-tab .feed-item'</span>).<span class="built_in">items</span>()</div><div class="line"><span class="keyword">for</span> item in item<span class="variable">s:</span></div><div class="line">    question = item.<span class="keyword">find</span>(<span class="string">'h2'</span>).text()</div><div class="line">    author = item.<span class="keyword">find</span>(<span class="string">'.author-link-line'</span>).text()</div><div class="line">    answer = pq(item.<span class="keyword">find</span>(<span class="string">'.content'</span>).html()).text()</div><div class="line">    <span class="keyword">file</span> = <span class="keyword">open</span>(<span class="string">'explore.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>)</div><div class="line">    <span class="keyword">file</span>.<span class="keyword">write</span>(<span class="string">'\n'</span>.<span class="keyword">join</span>([question, author, answer]))</div><div class="line">    <span class="keyword">file</span>.<span class="keyword">write</span>(<span class="string">'\n'</span> + <span class="string">'='</span> * <span class="number">50</span> + <span class="string">'\n'</span>)</div><div class="line">    <span class="keyword">file</span>.<span class="keyword">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里主要是为了演示文件保存的方式，因此<code>requests</code>异常处理部分在此省去。首先，用<code>requests</code>提取知乎的“发现”页面，然后将热门话题的问题、回答者、答案全文提取出来，然后利用Python提供的<code>open()</code>方法打开一个文本文件，获取一个文件操作对象，这里赋值为<code>file</code>，接着利用<code>file</code>对象的<code>write()</code>方法将提取的内容写入文件，最后调用<code>close()</code>方法将其关闭，这样抓取的内容即可成功写入文本中了。<br>&nbsp;&nbsp;&nbsp;&nbsp;运行程序，可以发现在本地生成了一个<code>explore.txt</code>文件。<br>&nbsp;&nbsp;&nbsp;&nbsp;这里<code>open()</code>方法的第一个参数即要保存的目标文件名称，第二个参数为a，代表以追加方式写入到文本。另外，我们还指定了文件的编码为<code>utf-8</code>。最后，写入完成后，还需要调用<code>close()</code>方法来关闭文件对象。</p>
<h2 id="打开方式"><a href="#打开方式" class="headerlink" title="打开方式"></a>打开方式</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在刚才的实例中，<code>open()</code>方法的第二个参数设置成了<code>a</code>，这样在每次写入文本时不会清空源文件，而是在文件末尾写入新的内容，这是一种文件打开方式。关于文件的打开方式，其实还有其他几种，这里简要介绍一下。</p>
<ul>
<li><code>r</code>: 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</li>
<li><code>rb</code>: 以二进制只读方式打开一个文件。文件指针将会放在文件的开头。</li>
<li><code>r+</code>: 以读写方式打开一个文件。文件指针将会放在文件的开头。</li>
<li><code>rb+</code>: 以二进制读写方式打开一个文件。文件指针将会放在文件的开头。</li>
<li><code>w</code>: 以写入方式打开一个文件。如果该文件已存在，则将其覆盖。如果该文件不存在，则创建新文件。</li>
<li><code>wb</code>: 以二进制写入方式打开一个文件。如果该文件已存在，则将其覆盖。如果该文件不存在，则创建新文件。</li>
<li><code>w+</code>: 以读写方式打开一个文件。如果该文件已存在，则将其覆盖。如果该文件不存在，则创建新文件。</li>
<li>以二进制读写格式打开一个文件。如果该文件已存在，则将其覆盖。如果该文件不存在，则创建新文件。</li>
<li><code>a</code>: 以追加方式打开一个文件。如果该文件已存在，文件指针将会放在文件结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，则创建新文件来写入。</li>
<li><code>ab</code>: 以追加方式打开一个文件。如果该文件已存在，文件指针将会放在文件结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，则创建新文件来写入。</li>
<li><code>a+</code>: 以读写方式打开一个文件。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，则创建新文件来读写。</li>
<li><code>ab+</code>: 以二进制追加方式打开一个文件。如果该文件已存在，则文件指针将会放在文件结尾。如果该文件不存在，则创建新文件用于读写。</li>
</ul>
<h2 id="简化写法"><a href="#简化写法" class="headerlink" title="简化写法"></a>简化写法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;另外，文件写入还有一种简写方法，那就是使用<code>with as</code>语法。在<code>with</code>控制块结束时，文件会自动关闭，所以就不需要再调用<code>close()</code>方法了。这种保存方式可以简写如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'explore.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> <span class="built_in">file</span>:</div><div class="line">    <span class="built_in">file</span>.<span class="built_in">write</span>(<span class="string">'\n'</span>.join([question, author, answer]))</div><div class="line">    <span class="built_in">file</span>.<span class="built_in">write</span>(<span class="string">'\n'</span> + <span class="string">'='</span> * <span class="number">50</span> + <span class="string">'\n'</span>)</div></pre></td></tr></table></figure></p>
<p>如果想保存时将原文清空，那么可以将第二个参数改写为<code>w</code>，代码如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'explore.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> <span class="built_in">file</span>:</div><div class="line">    <span class="built_in">file</span>.<span class="built_in">write</span>(<span class="string">'\n'</span>.join([question, author, answer]))</div><div class="line">    <span class="built_in">file</span>.<span class="built_in">write</span>(<span class="string">'\n'</span> + <span class="string">'='</span> * <span class="number">50</span> + <span class="string">'\n'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;将数据保存到TXT文本的操作非常简单，而且TXT文本几乎兼容任何平台，但是这有个缺点，那就是不利于检索。所以如果对检索和数据结构要求不高，追求方便第一的话，可以采用TXT文本存储。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
      <category term="存储" scheme="http://www.sanstylemc.cn/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>使用pyquery</title>
    <link href="http://www.sanstylemc.cn/2018/04/09/%E4%BD%BF%E7%94%A8pyquery/"/>
    <id>http://www.sanstylemc.cn/2018/04/09/使用pyquery/</id>
    <published>2018-04-09T09:38:15.000Z</published>
    <updated>2018-04-09T14:07:20.112Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;PyQuery库也是一个非常强大又灵活的网页解析库，PyQuery 是 Python 仿照 jQuery 的严格实现。pyquery相当于jQuery的python实现，可以用于解析HTML网页等。语法与jQuery几乎完全相同。<br><a id="more"></a></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;像Beautiful Soup一样，初始化pyquery的时候，也需要传入HTML文本来初始化一个PyQuery对象。它的初始化方式有多种，比如直接传入字符串，传入URL，传入文件名，等等。</p>
<h3 id="字符串初始化"><a href="#字符串初始化" class="headerlink" title="字符串初始化"></a>字符串初始化</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，我们用一个实例来感受下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">html = '''</div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">'''</div><div class="line">from pyquery import PyQuery as pq</div><div class="line">doc = pq(html)</div><div class="line">print(doc('li'))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里首先引入<code>PyQuery</code>这个对象，取别名为<code>pq</code>。然后声明了一个HTML字符串，并将其当作参数传递给<code>PyQuery</code>类，这样就成功完成了初始化。接下来，将初始化的对象传入CSS选择器。在这个实例中，我们传入<code>li</code>节点，这样就可以选择所有的<code>li</code>节点。</p>
<h3 id="URL初始化"><a href="#URL初始化" class="headerlink" title="URL初始化"></a>URL初始化</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;初始化的参数不仅可以以字符串的形式传递，还可以传入网页的URL，此时只需要指定参数为<code>url</code>即可:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">from pyquery import PyQuery as pq</div><div class="line">doc = pq(<span class="name">url=</span>'https<span class="symbol">://sanstylemc</span>.cn/')</div><div class="line">print(<span class="name">doc</span>('title'))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> Sanstyle -  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样的话，<code>PyQuery</code>对象会首先请求这个URL，然后用得到的HTML内容完成初始化，这其实就相当于用网页的源代码以字符串的形式传递给<code>PyQuery</code>类来初始化。<br>&nbsp;&nbsp;&nbsp;&nbsp;它与下面的功能是相同的:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from pyquery import PyQuery as pq</div><div class="line">import requests</div><div class="line">doc = pq(<span class="name">requests</span>.get('http<span class="symbol">://cuiqingcai</span>.com').text)</div><div class="line">print(<span class="name">doc</span>('title'))</div></pre></td></tr></table></figure></p>
<h3 id="文件初始化"><a href="#文件初始化" class="headerlink" title="文件初始化"></a>文件初始化</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;当然，除了传递URL，还可以传递本地的文件名，此时将参数指定为<code>filename</code>即可:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">from pyquery import PyQuery as pq</div><div class="line">doc = pq(<span class="name">filename=</span>'demo.html')</div><div class="line">print(<span class="name">doc</span>('li'))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;当然，这里需要有一个本地HTML文件demo.html，其内容是待解析的HTML字符串。这样它会首先读取本地的文件内容，然后用文件内容以字符串的形式传递给<code>PyQuery</code>类来初始化。</p>
<h2 id="基本CSS选择器"><a href="#基本CSS选择器" class="headerlink" title="基本CSS选择器"></a>基本CSS选择器</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，用一个实例来感受<code>PyQuery</code>的CSS选择器的用法:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">html = '''</div><div class="line">&lt;div id=<span class="string">"container"</span>&gt;</div><div class="line">    &lt;ul <span class="keyword">class</span>=<span class="string">"list"</span>&gt;</div><div class="line">         &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0"</span>&gt;first item&lt;/<span class="keyword">li</span>&gt;</div><div class="line">         &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-1"</span>&gt;&lt;a href=<span class="string">"link2.html"</span>&gt;second item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">         &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0 active"</span>&gt;&lt;a href=<span class="string">"link3.html"</span>&gt;&lt;span <span class="keyword">class</span>=<span class="string">"bold"</span>&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">         &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-1 active"</span>&gt;&lt;a href=<span class="string">"link4.html"</span>&gt;fourth item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">         &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0"</span>&gt;&lt;a href=<span class="string">"link5.html"</span>&gt;fifth item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">     &lt;/ul&gt;</div><div class="line"> &lt;/div&gt;</div><div class="line">'''</div><div class="line">from pyquery import PyQuery <span class="keyword">as</span> pq</div><div class="line">doc = pq(html)</div><div class="line"><span class="keyword">print</span>(doc('#container .<span class="keyword">list</span> <span class="keyword">li</span>'))</div><div class="line"><span class="keyword">print</span>(<span class="keyword">type</span>(doc('#container .<span class="keyword">list</span> <span class="keyword">li</span>')))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们初始化<code>PyQuery</code>对象之后，传入了一个CSS选择器<code>#container .list li</code>，它的意思是先选取<code>id</code>为<code>container</code>的节点，然后再选取其内部的<code>class</code>为<code>list</code>的节点内容的所有<code>li</code>节点。然后，打印输出。可以看到，我们成功获取到了符合条件的节点。<br>&nbsp;&nbsp;&nbsp;&nbsp;最后，将它的类型打印输出。可以看到，它的类型依然是<code>PyQuery</code>类型。</p>
<h2 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;下面我们介绍一些常用的查询函数，这些函数和jQuery中函数的用法完全相同。</p>
<h3 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;查找子节点时，需要用到<code>find()</code>方法，此时传入的参数是CSS选择器。这里还是以前面的HTML为例:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from pyquery import PyQuery as pq</div><div class="line">doc = pq(html)</div><div class="line">items = doc(<span class="string">'.list'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(type(items)</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(items)</span></span></div><div class="line">lis = items.find(<span class="string">'li'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(type(lis)</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(lis)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;首先，我们选取<code>class</code>为<code>list</code>的节点，然后调用了<code>find()</code>方法，传入CSS选择器，选取其内部的<code>li</code>节点，最后打印输出。可以发现，<code>find()</code>方法会将符合条件的所有节点选择出来，结果的类型是<code>PyQuery</code>类型。<br>&nbsp;&nbsp;&nbsp;&nbsp;其实<code>find()</code>的查找范围是节点的所有子孙节点，而如果我们只想查找子节点，那么可以用<code>children()</code>方法:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">lis</span> = items.children()</div><div class="line"><span class="keyword">print</span>(<span class="keyword">type</span>(<span class="keyword">lis</span>))</div><div class="line"><span class="keyword">print</span>(<span class="keyword">lis</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果要筛选所有子节点中符合条件的节点，比如想筛选出子节点中<code>class</code>为<code>active</code>的节点，可以向<code>children()</code>方法传入CSS选择器<code>.active</code>:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lis = items.children(<span class="string">'.active'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(lis)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-1 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，输出结果已经做了筛选，留下了<code>class</code>为<code>active</code>的节点。</p>
<h3 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我们可以用<code>parent()</code>方法来获取某个节点的父节点，示例如下:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">html = '''</div><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"wrap"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"container"</span>&gt;</div><div class="line">        &lt;ul <span class="built_in">class</span>=<span class="string">"list"</span>&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-0"</span>&gt;<span class="keyword">first</span> <span class="built_in">item</span>&lt;/li&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-1"</span>&gt;&lt;a href=<span class="string">"link2.html"</span>&gt;<span class="keyword">second</span> <span class="built_in">item</span>&lt;/a&gt;&lt;/li&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-0 active"</span>&gt;&lt;a href=<span class="string">"link3.html"</span>&gt;&lt;span <span class="built_in">class</span>=<span class="string">"bold"</span>&gt;<span class="keyword">third</span> <span class="built_in">item</span>&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-1 active"</span>&gt;&lt;a href=<span class="string">"link4.html"</span>&gt;<span class="keyword">fourth</span> <span class="built_in">item</span>&lt;/a&gt;&lt;/li&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-0"</span>&gt;&lt;a href=<span class="string">"link5.html"</span>&gt;<span class="keyword">fifth</span> <span class="built_in">item</span>&lt;/a&gt;&lt;/li&gt;</div><div class="line">         &lt;/ul&gt;</div><div class="line">     &lt;/<span class="keyword">div</span>&gt;</div><div class="line"> &lt;/<span class="keyword">div</span>&gt;</div><div class="line">'''</div><div class="line"><span class="keyword">from</span> pyquery import PyQuery <span class="keyword">as</span> pq</div><div class="line">doc = pq(html)</div><div class="line">items = doc('.<span class="built_in">list</span>')</div><div class="line">container = items.parent()</div><div class="line">print(type(container))</div><div class="line">print(container)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们首先用<code>.list</code>选取<code>class</code>为<code>list</code>的节点，然后调用<code>parent()</code>方法得到其父节点，其类型依然是<code>PyQuery</code>类型。<br>&nbsp;&nbsp;&nbsp;&nbsp;这里的父节点是该节点的直接父节点，也就是说，它不会再去查找父节点的父节点，即祖先节点。<br>&nbsp;&nbsp;&nbsp;&nbsp;但是如果想获取某个祖先节点，该怎么办呢？这时可以用<code>parents()</code>方法:<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from pyquery import PyQuery as pq</div><div class="line">doc = p<span class="string">q(html)</span></div><div class="line">items = doc(<span class="string">'.list'</span>)</div><div class="line">parents = items.parents()</div><div class="line"><span class="keyword">print</span>(type(parents))</div><div class="line"><span class="keyword">print</span>(parents)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，输出结果有两个：一个是<code>class</code>为<code>wrap</code>的节点，一个是<code>id</code>为<code>container</code>的节点。也就是说，<code>parents()</code>方法会返回所有的祖先节点。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果想要筛选某个祖先节点的话，可以向<code>parents()</code>方法传入CSS选择器，这样就会返回祖先节点中符合CSS选择器的节点:<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">parent</span> = items.parents(<span class="string">'.wrap'</span>)</div><div class="line"><span class="keyword">print</span>(<span class="keyword">parent</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrap"</span>&gt;</div><div class="line">    &lt;div id=<span class="string">"container"</span>&gt;</div><div class="line">        &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span>&gt;</div><div class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0"</span>&gt;first item&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-1 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">             &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">         &lt;<span class="regexp">/ul&gt;</span></div><div class="line"><span class="regexp">     &lt;/</span>div&gt;</div><div class="line"> &lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，输出结果少了一个节点，只保留了<code>class</code>为<code>wrap</code>的节点。</p>
<h3 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;前面我们说明了子节点和父节点的用法，还有一种节点，那就是兄弟节点。如果要获取兄弟节点，可以使用<code>siblings()</code>方法。这里还是以上面的HTML代码为例:<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from pyquery import PyQuery as pq</div><div class="line">doc = p<span class="string">q(html)</span></div><div class="line">li = doc(<span class="string">'.list .item-0.active'</span>)</div><div class="line"><span class="keyword">print</span>(li.siblings())</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里首先选择<code>class</code>为<code>list</code>的节点内部<code>class</code>为<code>item-0</code>和<code>active</code>的节点，也就是第三个<code>li</code>节点。那么，很明显，它的兄弟节点有4个，那就是第一、二、四、五个<code>li</code>节点。<br>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，这正是我们刚才所说的4个兄弟节点。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果要筛选某个兄弟节点，我们依然可以向<code>siblings</code>方法传入CSS选择器，这样就会从所有兄弟节点中挑选出符合条件的节点了:<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from pyquery import PyQuery as pq</div><div class="line">doc = p<span class="string">q(html)</span></div><div class="line">li = doc(<span class="string">'.list .item-0.active'</span>)</div><div class="line"><span class="keyword">print</span>(li.siblings(<span class="string">'.active'</span>))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们筛选了<code>class</code>为<code>active</code>的节点，通过刚才的结果可以观察到，<code>class</code>为<code>active</code>的兄弟节点只有第四个<code>li</code>节点，所以结果应该是一个。<br>&nbsp;&nbsp;&nbsp;&nbsp;我们再看一下运行结果:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-1 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;刚才可以观察到，<code>pyquery</code>的选择结果可能是多个节点，也可能是单个节点，类型都是<code>PyQuery</code>类型，并没有返回像Beautiful Soup那样的列表。<br>&nbsp;&nbsp;&nbsp;&nbsp;对于单个节点来说，可以直接打印输出，也可以直接转成字符串:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from pyquery import PyQuery as pq</div><div class="line">doc = pq(<span class="name">html</span>)</div><div class="line">li = doc('.item-0.active')</div><div class="line">print(<span class="name">li</span>)</div><div class="line">print(<span class="name">str</span>(<span class="name">li</span>))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;对于多个节点的结果，我们就需要遍历来获取了。例如，这里把每一个<code>li</code>节点进行遍历，需要调用<code>items()</code>方法:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from pyquery import PyQuery <span class="keyword">as</span> pq</div><div class="line">doc = pq(html)</div><div class="line"><span class="keyword">lis</span> = doc('<span class="keyword">li</span>').items()</div><div class="line"><span class="keyword">print</span>(<span class="keyword">type</span>(<span class="keyword">lis</span>))</div><div class="line"><span class="keyword">for</span> <span class="keyword">li</span> <span class="keyword">in</span> <span class="keyword">lis</span>:</div><div class="line">    <span class="keyword">print</span>(<span class="keyword">li</span>, <span class="keyword">type</span>(<span class="keyword">li</span>))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">generator</span>'&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">pyquery.pyquery.PyQuery</span>'&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以发现，调用<code>items()</code>方法后，会得到一个生成器，遍历一下，就可以逐个得到<code>li</code>节点对象了，它的类型也是<code>PyQuery</code>类型。每个<code>li</code>节点还可以调用前面所说的方法进行选择，比如继续查询子节点，寻找某个祖先节点等，非常灵活。</p>
<h2 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;提取到节点之后，我们的最终目的当然是提取节点所包含的信息了。比较重要的信息有两类，一是获取属性，二是获取文本，下面分别进行说明。</p>
<h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;提取到某个<code>PyQuery</code>类型的节点后，就可以调用<code>attr()</code>方法来获取属性:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">html = '''</div><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"wrap"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"container"</span>&gt;</div><div class="line">        &lt;ul <span class="built_in">class</span>=<span class="string">"list"</span>&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-0"</span>&gt;<span class="keyword">first</span> <span class="built_in">item</span>&lt;/li&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-1"</span>&gt;&lt;a href=<span class="string">"link2.html"</span>&gt;<span class="keyword">second</span> <span class="built_in">item</span>&lt;/a&gt;&lt;/li&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-0 active"</span>&gt;&lt;a href=<span class="string">"link3.html"</span>&gt;&lt;span <span class="built_in">class</span>=<span class="string">"bold"</span>&gt;<span class="keyword">third</span> <span class="built_in">item</span>&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-1 active"</span>&gt;&lt;a href=<span class="string">"link4.html"</span>&gt;<span class="keyword">fourth</span> <span class="built_in">item</span>&lt;/a&gt;&lt;/li&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-0"</span>&gt;&lt;a href=<span class="string">"link5.html"</span>&gt;<span class="keyword">fifth</span> <span class="built_in">item</span>&lt;/a&gt;&lt;/li&gt;</div><div class="line">         &lt;/ul&gt;</div><div class="line">     &lt;/<span class="keyword">div</span>&gt;</div><div class="line"> &lt;/<span class="keyword">div</span>&gt;</div><div class="line">'''</div><div class="line"><span class="keyword">from</span> pyquery import PyQuery <span class="keyword">as</span> pq</div><div class="line">doc = pq(html)</div><div class="line">a = doc('.<span class="built_in">item</span><span class="number">-0.</span>active a')</div><div class="line">print(a, type(a))</div><div class="line">print(a.attr('href'))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"link3.html"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pyquery</span>.<span class="title">pyquery</span>.<span class="title">PyQuery</span>'&gt;</span></div><div class="line"><span class="class"><span class="title">link3</span>.<span class="title">html</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里首先选中<code>class</code>为<code>item-0</code>和<code>active</code>的<code>li</code>节点内的<code>a</code>节点，它的类型是<code>PyQuery</code>类型。<br>&nbsp;&nbsp;&nbsp;&nbsp;然后调用<code>attr()</code>方法。在这个方法中传入属性的名称，就可以得到这个属性值了。<br>&nbsp;&nbsp;&nbsp;&nbsp;此外，也可以通过调用<code>attr</code>属性来获取属性，用法如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">print</span><span class="params">(a.attr.href)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;结果如下:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">link3</span><span class="selector-class">.html</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这两种方法的结果完全一样。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果选中的是多个元素，然后调用<code>attr()</code>方法，会出现怎样的结果呢？我们用实例来测试一下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span> = doc(<span class="string">'a'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(a, type(a)</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(a.attr(<span class="string">'href'</span>)</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(a.attr.href)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">a</span> href=<span class="string">"link2.html"</span>&gt;<span class="keyword">second</span> <span class="keyword">item</span>&lt;/<span class="keyword">a</span>&gt;&lt;<span class="keyword">a</span> href=<span class="string">"link3.html"</span>&gt;&lt;span class=<span class="string">"bold"</span>&gt;<span class="keyword">third</span> <span class="keyword">item</span>&lt;/span&gt;&lt;/<span class="keyword">a</span>&gt;&lt;<span class="keyword">a</span> href=<span class="string">"link4.html"</span>&gt;<span class="keyword">fourth</span> <span class="keyword">item</span>&lt;/<span class="keyword">a</span>&gt;&lt;<span class="keyword">a</span> href=<span class="string">"link5.html"</span>&gt;<span class="keyword">fifth</span> <span class="keyword">item</span>&lt;/<span class="keyword">a</span>&gt; &lt;class <span class="string">'pyquery.pyquery.PyQuery'</span>&gt;</div><div class="line">link2.html</div><div class="line">link2.html</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;照理来说，我们选中的<code>a</code>节点应该有4个，而且打印结果也应该是4个，但是当我们调用<code>attr()</code>方法时，返回结果却只是第一个。这是因为，当返回结果包含多个节点时，调用<code>attr()</code>方法，只会得到第一个节点的属性。<br>&nbsp;&nbsp;&nbsp;&nbsp;那么，遇到这种情况时，如果想获取所有的<code>a</code>节点的属性，就要用到前面所说的遍历了:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">from</span> pyquery import PyQuery <span class="keyword">as</span> pq</div><div class="line">doc = pq(html)</div><div class="line"><span class="keyword">a</span> = doc(<span class="string">'a'</span>)</div><div class="line"><span class="keyword">for</span> <span class="keyword">item</span> <span class="keyword">in</span> <span class="keyword">a</span>.<span class="keyword">items</span>():</div><div class="line">    print(<span class="keyword">item</span>.attr(<span class="string">'href'</span>))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;此时的运行结果如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">link2.html</div><div class="line">link3.html</div><div class="line">link4.html</div><div class="line">link5.html</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;因此，在进行属性获取时，可以观察返回节点是一个还是多个，如果是多个，则需要遍历才能依次获取每个节点的属性。</p>
<h3 id="获取文本"><a href="#获取文本" class="headerlink" title="获取文本"></a>获取文本</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;获取节点之后的另一个主要操作就是获取其内部的文本了，此时可以调用<code>text()</code>方法来实现:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">html = '''</div><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"wrap"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"container"</span>&gt;</div><div class="line">        &lt;ul <span class="built_in">class</span>=<span class="string">"list"</span>&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-0"</span>&gt;<span class="keyword">first</span> <span class="built_in">item</span>&lt;/li&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-1"</span>&gt;&lt;a href=<span class="string">"link2.html"</span>&gt;<span class="keyword">second</span> <span class="built_in">item</span>&lt;/a&gt;&lt;/li&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-0 active"</span>&gt;&lt;a href=<span class="string">"link3.html"</span>&gt;&lt;span <span class="built_in">class</span>=<span class="string">"bold"</span>&gt;<span class="keyword">third</span> <span class="built_in">item</span>&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-1 active"</span>&gt;&lt;a href=<span class="string">"link4.html"</span>&gt;<span class="keyword">fourth</span> <span class="built_in">item</span>&lt;/a&gt;&lt;/li&gt;</div><div class="line">             &lt;li <span class="built_in">class</span>=<span class="string">"item-0"</span>&gt;&lt;a href=<span class="string">"link5.html"</span>&gt;<span class="keyword">fifth</span> <span class="built_in">item</span>&lt;/a&gt;&lt;/li&gt;</div><div class="line">         &lt;/ul&gt;</div><div class="line">     &lt;/<span class="keyword">div</span>&gt;</div><div class="line"> &lt;/<span class="keyword">div</span>&gt;</div><div class="line">'''</div><div class="line"><span class="keyword">from</span> pyquery import PyQuery <span class="keyword">as</span> pq</div><div class="line">doc = pq(html)</div><div class="line">a = doc('.<span class="built_in">item</span><span class="number">-0.</span>active a')</div><div class="line">print(a)</div><div class="line">print(a.<span class="built_in">text</span>())</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">a</span> href=<span class="string">"link3.html"</span>&gt;&lt;span class=<span class="string">"bold"</span>&gt;<span class="keyword">third</span> <span class="keyword">item</span>&lt;/span&gt;&lt;/<span class="keyword">a</span>&gt;</div><div class="line"><span class="keyword">third</span> <span class="keyword">item</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里首先选中一个<code>a</code>节点，然后调用<code>text()</code>方法，就可以获取其内部的文本信息。此时它会忽略掉节点内部包含的所有HTML，只返回纯文字内容。<br>&nbsp;&nbsp;&nbsp;&nbsp;但如果想要获取这个节点内部的HTML文本，就要用<code>html()</code>方法了:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from pyquery import PyQuery as pq</div><div class="line">doc = pq(html)</div><div class="line"><span class="selector-tag">li</span> = doc(<span class="string">'.item-0.active'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(li)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(li.html()</span></span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们选中了第三个<code>li</code>节点，然后调用了<code>html()</code>方法，它返回的结果应该是<code>li</code>节点内的所有HTML文本。<br>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"link3.html"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里同样有一个问题，如果我们选中的结果是多个节点，<code>text()</code>或<code>html()</code>会返回什么内容？我们用实例来看一下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">html = '''</div><div class="line">&lt;div <span class="keyword">class</span>=<span class="string">"wrap"</span>&gt;</div><div class="line">    &lt;div id=<span class="string">"container"</span>&gt;</div><div class="line">        &lt;ul <span class="keyword">class</span>=<span class="string">"list"</span>&gt;</div><div class="line">             &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-1"</span>&gt;&lt;a href=<span class="string">"link2.html"</span>&gt;second item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">             &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0 active"</span>&gt;&lt;a href=<span class="string">"link3.html"</span>&gt;&lt;span <span class="keyword">class</span>=<span class="string">"bold"</span>&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">             &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-1 active"</span>&gt;&lt;a href=<span class="string">"link4.html"</span>&gt;fourth item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">             &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0"</span>&gt;&lt;a href=<span class="string">"link5.html"</span>&gt;fifth item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">         &lt;/ul&gt;</div><div class="line">     &lt;/div&gt;</div><div class="line"> &lt;/div&gt;</div><div class="line">'''</div><div class="line">from pyquery import PyQuery <span class="keyword">as</span> pq</div><div class="line">doc = pq(html)</div><div class="line"><span class="keyword">li</span> = doc('<span class="keyword">li</span>')</div><div class="line"><span class="keyword">print</span>(<span class="keyword">li</span>.html())</div><div class="line"><span class="keyword">print</span>(<span class="keyword">li</span>.text())</div><div class="line"><span class="keyword">print</span>(<span class="keyword">type</span>(<span class="keyword">li</span>.text())</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">a</span> href=<span class="string">"link2.html"</span>&gt;<span class="keyword">second</span> <span class="keyword">item</span>&lt;/<span class="keyword">a</span>&gt;</div><div class="line"><span class="keyword">second</span> <span class="keyword">item</span> <span class="keyword">third</span> <span class="keyword">item</span> <span class="keyword">fourth</span> <span class="keyword">item</span> <span class="keyword">fifth</span> <span class="keyword">item</span></div><div class="line">&lt;class <span class="string">'str'</span>&gt;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;结果可能比较出乎意料，<code>html()</code>方法返回的是第一个<code>li</code>节点的内部HTML文本，而<code>text()</code>则返回了所有的<code>li</code>节点内部的纯文本，中间用一个空格分割开，即返回结果是一个字符串。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以这个地方值得注意，如果得到的结果是多个节点，并且想要获取每个节点的内部HTML文本，则需要遍历每个节点。而<code>text()</code>方法不需要遍历就可以获取，它将所有节点取文本之后合并成一个字符串。</p>
<h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;pyquery提供了一系列方法来对节点进行动态修改，比如为某个节点添加一个<code>class</code>，移除某个节点等，这些操作有时候会为提取信息带来极大的便利。<br>&nbsp;&nbsp;&nbsp;&nbsp;由于节点操作的方法太多，下面举几个典型的例子来说明它的用法。</p>
<h3 id="addClass和removeClass"><a href="#addClass和removeClass" class="headerlink" title="addClass和removeClass"></a><code>addClass</code>和<code>removeClass</code></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我们先用实例来感受一下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">html = '''</div><div class="line">&lt;div <span class="keyword">class</span>=<span class="string">"wrap"</span>&gt;</div><div class="line">    &lt;div id=<span class="string">"container"</span>&gt;</div><div class="line">        &lt;ul <span class="keyword">class</span>=<span class="string">"list"</span>&gt;</div><div class="line">             &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0"</span>&gt;first item&lt;/<span class="keyword">li</span>&gt;</div><div class="line">             &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-1"</span>&gt;&lt;a href=<span class="string">"link2.html"</span>&gt;second item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">             &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0 active"</span>&gt;&lt;a href=<span class="string">"link3.html"</span>&gt;&lt;span <span class="keyword">class</span>=<span class="string">"bold"</span>&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">             &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-1 active"</span>&gt;&lt;a href=<span class="string">"link4.html"</span>&gt;fourth item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">             &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0"</span>&gt;&lt;a href=<span class="string">"link5.html"</span>&gt;fifth item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">         &lt;/ul&gt;</div><div class="line">     &lt;/div&gt;</div><div class="line"> &lt;/div&gt;</div><div class="line">'''</div><div class="line">from pyquery import PyQuery <span class="keyword">as</span> pq</div><div class="line">doc = pq(html)</div><div class="line"><span class="keyword">li</span> = doc('.item-0.active')</div><div class="line"><span class="keyword">print</span>(<span class="keyword">li</span>)</div><div class="line"><span class="keyword">li</span>.removeClass('active')</div><div class="line"><span class="keyword">print</span>(<span class="keyword">li</span>)</div><div class="line"><span class="keyword">li</span>.addClass('active')</div><div class="line"><span class="keyword">print</span>(<span class="keyword">li</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;首先选中了第三个<code>li</code>节点，然后调用<code>removeClass()</code>方法，将<code>li</code>节点的<code>active</code>这个<code>class</code>移除，后来又调用<code>addClass()</code>方法，将<code>class</code>添加回来。每执行一次操作，就打印输出当前<code>li</code>节点的内容。<br>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0 active"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，一共输出了3次。第二次输出时，<code>li</code>节点的<code>active</code>这个<code>class</code>被移除了，第三次<code>class</code>又添加回来了。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以说，<code>addClass()</code>和<code>removeClass()</code>这些方法可以动态改变节点的<code>class</code>属性。</p>
<h3 id="attr、text和html"><a href="#attr、text和html" class="headerlink" title="attr、text和html"></a><code>attr</code>、<code>text</code>和<code>html</code></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;当然，除了操作<code>class</code>这个属性外，也可以用<code>attr()</code>方法对属性进行操作。此外，还可以用<code>text()</code>和<code>html()</code>方法来改变节点内部的内容。示例如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">html = <span class="string">'''</span></div><div class="line"><span class="string">&lt;ul class="list"&gt;</span></div><div class="line"><span class="string">     &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></div><div class="line"><span class="string">&lt;/ul&gt;</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</div><div class="line">doc = pq(html)</div><div class="line">li = doc(<span class="string">'.item-0.active'</span>)</div><div class="line">print(li)</div><div class="line">li.attr(<span class="string">'name'</span>, <span class="string">'link'</span>)</div><div class="line">print(li)</div><div class="line">li.text(<span class="string">'changed item'</span>)</div><div class="line">print(li)</div><div class="line">li.html(<span class="string">'&lt;span&gt;changed item&lt;/span&gt;'</span>)</div><div class="line">print(li)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们首先选中<code>li</code>节点，然后调用<code>attr()</code>方法来修改属性，其中该方法的第一个参数为属性名，第二个参数为属性值。接着，调用<code>text()</code>和<code>html()</code>方法来改变节点内部的内容。三次操作后，分别打印输出当前的li节点。<br>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span> <span class="attr">name</span>=<span class="string">"link"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span> <span class="attr">name</span>=<span class="string">"link"</span>&gt;</span>changed item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0 active"</span> <span class="attr">name</span>=<span class="string">"link"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>changed item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以发现，调用<code>attr()</code>方法后，<code>li</code>节点多了一个原本不存在的属性<code>name</code>，其值为<code>link</code>。接着调用<code>text()</code>方法，传入文本之后，<code>li</code>节点内部的文本全被改为传入的字符串文本了。最后，调用<code>html()</code>方法传入HTML文本后，<code>li</code>节点内部又变为传入的HTML文本了。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以说，如果<code>attr()</code>方法只传入第一个参数的属性名，则是获取这个属性值；如果传入第二个参数，可以用来修改属性值。<code>text()</code>和<code>html()</code>方法如果不传参数，则是获取节点内纯文本和HTML文本；如果传入参数，则进行赋值。</p>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a><code>remove()</code></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;顾名思义，<code>remove()</code>方法就是移除，它有时会为信息的提取带来非常大的便利。下面有一段HTML文本:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">html = <span class="string">'''</span></div><div class="line"><span class="string">&lt;div class="wrap"&gt;</span></div><div class="line"><span class="string">    Hello, World</span></div><div class="line"><span class="string">    &lt;p&gt;This is a paragraph.&lt;/p&gt;</span></div><div class="line"><span class="string"> &lt;/div&gt;</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</div><div class="line">doc = pq(html)</div><div class="line">wrap = doc(<span class="string">'.wrap'</span>)</div><div class="line">print(wrap.text())</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;现在想提取<code>Hello, World</code>这个字符串，而不要p节点内部的字符串，需要怎样操作呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;这里直接先尝试提取<code>class</code>为<code>wrap</code>的节点的内容，看看是不是我们想要的。运行结果如下:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello, World This <span class="keyword">is</span> a <span class="built_in">paragraph</span>.</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这个结果还包含了内部的<code>p</code>节点的内容，也就是说<code>text()</code>把所有的纯文本全提取出来了。如果我们想去掉<code>p</code>节点内部的文本，可以选择再把<code>p</code>节点内的文本提取一遍，然后从整个结果中移除这个子串，但这个做法明显比较烦琐。<br>&nbsp;&nbsp;&nbsp;&nbsp;这时<code>remove()</code>方法就可以派上用场了，我们可以接着这么做:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">wrap</span>.<span class="built_in">find</span>(<span class="string">'p'</span>).<span class="built_in">remove</span>()</div><div class="line"><span class="built_in">print</span>(<span class="built_in">wrap</span>.text())</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;首先选中<code>p</code>节点，然后调用了<code>remove()</code>方法将其移除，然后这时<code>wrap</code>内部就只剩下<code>Hello, World</code>这句话了，然后再利用<code>text()</code>方法提取即可。</p>
<h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;CSS选择器之所以强大，还有一个很重要的原因，那就是它支持多种多样的伪类选择器，例如选择第一个节点、最后一个节点、奇偶数节点、包含某一文本的节点等。示例如下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">html = '''</div><div class="line">&lt;div <span class="keyword">class</span>=<span class="string">"wrap"</span>&gt;</div><div class="line">    &lt;div id=<span class="string">"container"</span>&gt;</div><div class="line">        &lt;ul <span class="keyword">class</span>=<span class="string">"list"</span>&gt;</div><div class="line">             &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0"</span>&gt;first item&lt;/<span class="keyword">li</span>&gt;</div><div class="line">             &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-1"</span>&gt;&lt;a href=<span class="string">"link2.html"</span>&gt;second item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">             &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0 active"</span>&gt;&lt;a href=<span class="string">"link3.html"</span>&gt;&lt;span <span class="keyword">class</span>=<span class="string">"bold"</span>&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">             &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-1 active"</span>&gt;&lt;a href=<span class="string">"link4.html"</span>&gt;fourth item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">             &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0"</span>&gt;&lt;a href=<span class="string">"link5.html"</span>&gt;fifth item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">         &lt;/ul&gt;</div><div class="line">     &lt;/div&gt;</div><div class="line"> &lt;/div&gt;</div><div class="line">'''</div><div class="line">from pyquery import PyQuery <span class="keyword">as</span> pq</div><div class="line">doc = pq(html)</div><div class="line"><span class="keyword">li</span> = doc('<span class="keyword">li</span>:first-child')</div><div class="line"><span class="keyword">print</span>(<span class="keyword">li</span>)</div><div class="line"><span class="keyword">li</span> = doc('<span class="keyword">li</span>:last-child')</div><div class="line"><span class="keyword">print</span>(<span class="keyword">li</span>)</div><div class="line"><span class="keyword">li</span> = doc('<span class="keyword">li</span>:nth-child(2)')</div><div class="line"><span class="keyword">print</span>(<span class="keyword">li</span>)</div><div class="line"><span class="keyword">li</span> = doc('<span class="keyword">li</span>:gt(2)')</div><div class="line"><span class="keyword">print</span>(<span class="keyword">li</span>)</div><div class="line"><span class="keyword">li</span> = doc('<span class="keyword">li</span>:nth-child(2n)')</div><div class="line"><span class="keyword">print</span>(<span class="keyword">li</span>)</div><div class="line"><span class="keyword">li</span> = doc('<span class="keyword">li</span>:contains(second)')</div><div class="line"><span class="keyword">print</span>(<span class="keyword">li</span>)</div></pre></td></tr></table></figure></p>
<p>运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">             </div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         </div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">             </div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         </div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1 active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们使用了CSS3的伪类选择器，依次选择了第一个<code>li</code>节点、最后一个<code>li</code>节点、第二个<code>li</code>节点、第三个<code>li</code>之后的<code>li</code>节点、偶数位置的<code>li</code>节点、包含<code>second</code>文本的<code>li</code>节点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PyQuery库也是一个非常强大又灵活的网页解析库，PyQuery 是 Python 仿照 jQuery 的严格实现。pyquery相当于jQuery的python实现，可以用于解析HTML网页等。语法与jQuery几乎完全相同。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
      <category term="解析库" scheme="http://www.sanstylemc.cn/tags/%E8%A7%A3%E6%9E%90%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>使用Beautiful Soup</title>
    <link href="http://www.sanstylemc.cn/2018/04/08/%E4%BD%BF%E7%94%A8Beautiful-Soup/"/>
    <id>http://www.sanstylemc.cn/2018/04/08/使用Beautiful-Soup/</id>
    <published>2018-04-08T13:37:53.000Z</published>
    <updated>2018-04-08T14:11:03.592Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;Beautiful Soup是强大的解析工具，它借助网页的结构和属性等特性来解析网页。有了它，我们不用再去写一些复杂的正则表达式，只需要简单的几条语句，就可以完成网页中某个元素的提取。<br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;简单来说，Beautiful Soup就是Python的一个HTML或XML的解析库，可以用它来方便地从网页中提取数据。官方解释如下: </p>
<blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Beautiful Soup提供一些简单的、Python式的函数来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。<br>&nbsp;&nbsp;&nbsp;&nbsp;Beautiful Soup自动将输入文档转换为Unicode编码，输出文档转换为UTF-8编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时你仅仅需要说明一下原始编码方式就可以了。<br>&nbsp;&nbsp;&nbsp;&nbsp;Beautiful Soup已成为和lxml、html6lib一样出色的Python解释器，为用户灵活地提供不同的解析策略或强劲的速度。</p>
</blockquote>
<h2 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Beautiful Soup在解析时实际上依赖解析器，它除了支持Python标准库中的HTML解析器外，还支持一些第三方解析器(比如lxml).下表列出了Beautiful Soup支持的解析器。</p>
<table>
<thead>
<tr>
<th style="text-align:center">解析器</th>
<th style="text-align:center">使用方法</th>
<th style="text-align:center">优势</th>
<th style="text-align:center">劣势</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Python标准库</td>
<td style="text-align:center"><code>BeautifulSoup(markup, &quot;html.parser&quot;)</code></td>
<td style="text-align:center">Python的内置标准库、执行速度适中、文档容错能力强</td>
<td style="text-align:center">Python 2.7.3及Python 3.2.2之前的版本文档容错能力查</td>
</tr>
<tr>
<td style="text-align:center">lxml HTML解析器</td>
<td style="text-align:center"><code>BeautifulSoup(markup, &quot;lxml&quot;)</code></td>
<td style="text-align:center">速度快、文档容错能力强</td>
<td style="text-align:center">需要安装C语言库</td>
</tr>
<tr>
<td style="text-align:center">lxml XML解析器</td>
<td style="text-align:center"><code>BeautifulSoup(markup, &quot;xml&quot;)</code></td>
<td style="text-align:center">速度快、唯一支持XML的解析器</td>
<td style="text-align:center">需要安装C语言库</td>
</tr>
<tr>
<td style="text-align:center">html5lib</td>
<td style="text-align:center"><code>BeautifulSoup(markup, &quot;html5lib&quot;)</code></td>
<td style="text-align:center">最好的容错性、以浏览器的方式解析文档、生成HTML5格式的文档</td>
<td style="text-align:center">速度慢、不依赖外部扩展</td>
</tr>
</tbody>
</table>
<p>&nbsp;&nbsp;&nbsp;&nbsp;通过以上对比可以看出，lxml解析器有解析HTML和XML的功能，而且速度快，容错能力强，所以推荐使用它。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果使用<code>lxml</code>，那么在初始化Beautiful Soup时，可以把第二个参数改为<code>lxml</code>即可:<br><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line">soup = BeautifulSoup(<span class="string">'&lt;p&gt;Hello&lt;/p&gt;'</span>, <span class="string">'lxml'</span>)</div><div class="line"><span class="built_in">print</span>(soup.p.<span class="built_in">string</span>)</div></pre></td></tr></table></figure></p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;下面首先用实例来看看Beautiful Soup的基本用法:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">html = """</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>The Dormouse's story<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"dromouse"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>The Dormouse's story<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span>Once upon a time there were three little sisters; and their names were</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/elsie"</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">id</span>=<span class="string">"link1"</span>&gt;</span><span class="comment">&lt;!-- Elsie --&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/lacie"</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">id</span>=<span class="string">"link2"</span>&gt;</span>Lacie<span class="tag">&lt;/<span class="name">a</span>&gt;</span> and</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/tillie"</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">id</span>=<span class="string">"link3"</span>&gt;</span>Tillie<span class="tag">&lt;/<span class="name">a</span>&gt;</span>;</div><div class="line">and they lived at the bottom of a well.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">"""</div><div class="line">from bs4 import BeautifulSoup</div><div class="line">soup = BeautifulSoup(html, 'lxml')</div><div class="line">print(soup.prettify())</div><div class="line">print(soup.title.string)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></div><div class="line">   The Dormouse's story</div><div class="line">  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"dromouse"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">b</span>&gt;</span></div><div class="line">    The Dormouse's story</div><div class="line">   <span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span></div><div class="line">   Once upon a time there were three little sisters; and their names were</div><div class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/elsie"</span> <span class="attr">id</span>=<span class="string">"link1"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Elsie --&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">   ,</div><div class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/lacie"</span> <span class="attr">id</span>=<span class="string">"link2"</span>&gt;</span></div><div class="line">    Lacie</div><div class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">   and</div><div class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/tillie"</span> <span class="attr">id</span>=<span class="string">"link3"</span>&gt;</span></div><div class="line">    Tillie</div><div class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">   ;</div><div class="line">and they lived at the bottom of a well.</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span></div><div class="line">   ...</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">The Dormouse's story</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里首先声明变量html，它是一个HTML字符串。但是需要注意的是，它并不是一个完整的HTML字符串，因为<code>body</code>和<code>html</code>节点都没有闭合。接着，我们将它当作第一个参数传给<code>BeautifulSoup</code>对象，该对象的第二个参数为解析器的类型（这里使用lxml），此时就完成了BeautifulSoup对象的初始化。然后，将这个对象赋值给<code>soup</code>变量。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，就可以调用soup的各个方法和属性解析这串HTML代码了。<br>&nbsp;&nbsp;&nbsp;&nbsp;首先，调用<code>prettify()</code>方法。这个方法可以把要解析的字符串以标准的缩进格式输出。这里需要注意的是，输出结果里面包含body和html节点，也就是说对于不标准的HTML字符串BeautifulSoup，可以自动更正格式。这一步不是由<code>prettify()</code>方法做的，而是在初始化BeautifulSoup时就完成了。<br>&nbsp;&nbsp;&nbsp;&nbsp;然后调用<code>soup.title.string</code>，这实际上是输出HTML中<code>title</code>节点的文本内容。所以，<code>soup.title</code>可以选出HTML中的<code>title</code>节点，再调用<code>string</code>属性就可以得到里面的文本了。</p>
<h2 id="节点选择器"><a href="#节点选择器" class="headerlink" title="节点选择器"></a>节点选择器</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;直接调用节点的名称就可以选择节点元素，再调用<code>string</code>属性就可以得到节点内的文本了，这种选择方式速度非常快。如果单个节点结构层次非常清晰，可以选用这种方式来解析。</p>
<h3 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;下面再用一个例子详细说明选择元素的方法:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">html = """</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>The Dormouse's story<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"dromouse"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>The Dormouse's story<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span>Once upon a time there were three little sisters; and their names were</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/elsie"</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">id</span>=<span class="string">"link1"</span>&gt;</span><span class="comment">&lt;!-- Elsie --&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/lacie"</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">id</span>=<span class="string">"link2"</span>&gt;</span>Lacie<span class="tag">&lt;/<span class="name">a</span>&gt;</span> and</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/tillie"</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">id</span>=<span class="string">"link3"</span>&gt;</span>Tillie<span class="tag">&lt;/<span class="name">a</span>&gt;</span>;</div><div class="line">and they lived at the bottom of a well.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">"""</div><div class="line">from bs4 import BeautifulSoup</div><div class="line">soup = BeautifulSoup(html, 'lxml')</div><div class="line">print(soup.title)</div><div class="line">print(type(soup.title))</div><div class="line">print(soup.title.string)</div><div class="line">print(soup.head)</div><div class="line">print(soup.p)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;title&gt;The Dormouse<span class="comment">'s story<span class="doctag">&lt;/title&gt;</span></span></div><div class="line">&lt;<span class="keyword">class</span> <span class="comment">'bs4.element.Tag'&gt;</span></div><div class="line">The Dormouse<span class="comment">'s story</span></div><div class="line">&lt;head&gt;&lt;title&gt;The Dormouse<span class="comment">'s story<span class="doctag">&lt;/title&gt;</span><span class="doctag">&lt;/head&gt;</span></span></div><div class="line">&lt;p <span class="keyword">class</span>=<span class="string">"title"</span> name=<span class="string">"dromouse"</span>&gt;&lt;b&gt;The Dormouse<span class="comment">'s story<span class="doctag">&lt;/b&gt;</span><span class="doctag">&lt;/p&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里依然选用刚才的HTML代码，首先打印输出<code>title</code>节点的选择结果，输出结果正是<code>title</code>节点加里面的文字内容。接下来，输出它的类型，是<code>bs4.element.Tag</code>类型，这是Beautiful Soup中一个重要的数据结构。经过选择器选择后，选择结果都是这种<code>Tag</code>类型。<code>Tag</code>具有一些属性，比如string属性，调用该属性，可以得到节点的文本内容，所以接下来的输出结果正是节点的文本内容。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，我们又尝试选择了<code>head</code>节点，结果也是节点加其内部的所有内容。最后，选择了<code>p</code>节点。不过这次情况比较特殊，我们发现结果是第一个<code>p</code>节点的内容，后面的几个<code>p</code>节点并没有选到。也就是说，当有多个节点时，这种选择方式只会选择到第一个匹配的节点，其他的后面节点都会忽略。</p>
<h3 id="提取信息"><a href="#提取信息" class="headerlink" title="提取信息"></a>提取信息</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;上面演示了调用<code>string</code>属性来获取文本的值，那么如何获取节点属性的值呢？如何获取节点名呢？下面我们来统一梳理一下信息的提取方式。</p>
<h4 id="获取名称"><a href="#获取名称" class="headerlink" title="获取名称"></a>获取名称</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;可以利用<code>name</code>属性获取节点的名称。这里还是以上面的文本为例，选取<code>title</code>节点，然后调用<code>name</code>属性就可以得到节点名称:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">print</span><span class="params">(soup.title.name)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">title</span></div></pre></td></tr></table></figure></p>
<h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;每个节点可能有多个属性，比如<code>id</code>和<code>class</code>等，选择这个节点元素后，可以调用<code>attrs</code>获取所有属性:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">print</span><span class="params">(soup.p.attrs)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(soup.p.attrs[<span class="string">'name'</span>])</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">'class'</span>: [<span class="string">'title'</span>], <span class="string">'name'</span>: <span class="string">'dromouse'</span>&#125;</div><div class="line">dromouse</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，<code>attrs</code>的返回结果是字典形式，它把选择的节点的所有属性和属性值组合成一个字典。接下来，如果要获取<code>name</code>属性，就相当于从字典中获取某个键值，只需要用中括号加属性名就可以了。比如，要获取<code>name</code>属性，就可以通过<code>attrs[&#39;name&#39;]</code>来得到。<br>&nbsp;&nbsp;&nbsp;&nbsp;其实这样有点烦琐，还有一种更简单的获取方式：可以不用写<code>attrs</code>，直接在节点元素后面加中括号，传入属性名就可以获取属性值了。样例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">print</span><span class="params">(soup.p[<span class="string">'name'</span>])</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(soup.p[<span class="string">'class'</span>])</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dromouse</div><div class="line">['title']</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里需要注意的是，有的返回结果是字符串，有的返回结果是字符串组成的列表。比如，<code>name</code>属性的值是唯一的，返回的结果就是单个字符串。而对于<code>class</code>，一个节点元素可能有多个<code>class</code>，所以返回的是列表。在实际处理过程中，我们要注意判断类型。</p>
<h4 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;可以利用<code>string</code>属性获取节点元素包含的文本内容，比如要获取第一个<code>p</code>节点的文本:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">print</span><span class="params">(soup.p.string)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The Dormouse<span class="symbol">'s</span> story</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;再次注意一下，这里选择到的<code>p</code>节点是第一个<code>p</code>节点，获取的文本也是第一个<code>p</code>节点里面的文本。</p>
<h3 id="嵌套选择"><a href="#嵌套选择" class="headerlink" title="嵌套选择"></a>嵌套选择</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在上面的例子中，我们知道每一个返回结果都是<code>bs4.element.Tag</code>类型，它同样可以继续调用节点进行下一步的选择。比如，我们获取了<code>head</code>节点元素，我们可以继续调用<code>head</code>来选取其内部的<code>head</code>节点元素:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">html = <span class="string">"""</span></div><div class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></div><div class="line"><span class="string">&lt;body&gt;</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">print(soup.head.title)</div><div class="line">print(type(soup.head.title))</div><div class="line">print(soup.head.title.string)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;title&gt;The Dormouse<span class="comment">'s story<span class="doctag">&lt;/title&gt;</span></span></div><div class="line">&lt;<span class="keyword">class</span> <span class="comment">'bs4.element.Tag'&gt;</span></div><div class="line">The Dormouse<span class="comment">'s story</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;第一行结果是调用<code>head</code>之后再次调用<code>title</code>而选择的<code>title</code>节点元素。然后打印输出了它的类型，可以看到，它仍然是<code>bs4.element.Tag</code>类型。也就是说，我们在<code>Tag</code>类型的基础上再次选择得到的依然还是<code>Tag</code>类型，每次返回的结果都相同，所以这样就可以做嵌套选择了。<br>&nbsp;&nbsp;&nbsp;&nbsp;最后，输出它的<code>string</code>属性，也就是节点里的文本内容。</p>
<h3 id="关联选择"><a href="#关联选择" class="headerlink" title="关联选择"></a>关联选择</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在做选择的时候，有时候不能做到一步就选到想要的节点元素，需要先选中某一个节点元素，然后以它为基准再选择它的子节点、父节点、兄弟节点等，这里就来介绍如何选择这些节点元素。</p>
<h4 id="子节点和子孙节点"><a href="#子节点和子孙节点" class="headerlink" title="子节点和子孙节点"></a>子节点和子孙节点</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;选取节点元素之后，如果想要获取它的直接子节点，可以调用<code>contents</code>属性，示例如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">html = """</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>The Dormouse's story<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span></div><div class="line">            Once upon a time there were three little sisters; and their names were</div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/elsie"</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">id</span>=<span class="string">"link1"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>Elsie<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/lacie"</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">id</span>=<span class="string">"link2"</span>&gt;</span>Lacie<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </div><div class="line">            and</div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/tillie"</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">id</span>=<span class="string">"link3"</span>&gt;</span>Tillie<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            and they lived at the bottom of a well.</div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">"""</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">['\n            Once upon a <span class="built_in">time</span> there were three little sisters; <span class="keyword">and</span> their names were\n            ', &lt;a <span class="built_in">class</span>=<span class="string">"sister"</span> href=<span class="string">"http://example.com/elsie"</span> <span class="built_in">id</span>=<span class="string">"link1"</span>&gt;</div><div class="line">&lt;span&gt;Elsie&lt;/span&gt;</div><div class="line">&lt;/a&gt;, '\n', &lt;a <span class="built_in">class</span>=<span class="string">"sister"</span> href=<span class="string">"http://example.com/lacie"</span> <span class="built_in">id</span>=<span class="string">"link2"</span>&gt;Lacie&lt;/a&gt;, ' \n            <span class="keyword">and</span>\n            ', &lt;a <span class="built_in">class</span>=<span class="string">"sister"</span> href=<span class="string">"http://example.com/tillie"</span> <span class="built_in">id</span>=<span class="string">"link3"</span>&gt;Tillie&lt;/a&gt;, '\n            <span class="keyword">and</span> they lived <span class="keyword">at</span> <span class="keyword">the</span> bottom <span class="keyword">of</span> a well.\n        ']</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，返回结果是列表形式。<code>p</code>节点里既包含文本，又包含节点，最后会将它们以列表形式统一返回。<br>&nbsp;&nbsp;&nbsp;&nbsp;需要注意的是，列表中的每个元素都是<code>p</code>节点的直接子节点。比如第一个<code>a</code>节点里面包含一层<code>span</code>节点，这相当于孙子节点了，但是返回结果并没有单独把<code>span</code>节点选出来。所以说，<code>contents</code>属性得到的结果是直接子节点的列表。<br>&nbsp;&nbsp;&nbsp;&nbsp;同样，我们可以调用<code>children</code>属性得到相应的结果:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from bs4 import BeautifulSoup</div><div class="line">soup = BeautifulSoup(<span class="selector-tag">html</span>, <span class="string">'lxml'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(soup.p.children)</span></span></div><div class="line"><span class="keyword">for</span> <span class="selector-tag">i</span>, child <span class="keyword">in</span> enumerate(soup<span class="selector-class">.p</span><span class="selector-class">.children</span>):</div><div class="line">    print(<span class="selector-tag">i</span>, child)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;list_iterator object <span class="keyword">at</span> <span class="number">0x1064f7dd8</span>&gt;</div><div class="line"><span class="number">0</span> </div><div class="line">            Once upon <span class="keyword">a</span> <span class="built_in">time</span> there were <span class="literal">three</span> little sisters; <span class="keyword">and</span> their names were</div><div class="line"> </div><div class="line"><span class="number">1</span> &lt;<span class="keyword">a</span> class=<span class="string">"sister"</span> href=<span class="string">"http://example.com/elsie"</span> id=<span class="string">"link1"</span>&gt;</div><div class="line">&lt;span&gt;Elsie&lt;/span&gt;</div><div class="line">&lt;/<span class="keyword">a</span>&gt;</div><div class="line"><span class="number">2</span> </div><div class="line"> </div><div class="line"><span class="number">3</span> &lt;<span class="keyword">a</span> class=<span class="string">"sister"</span> href=<span class="string">"http://example.com/lacie"</span> id=<span class="string">"link2"</span>&gt;Lacie&lt;/<span class="keyword">a</span>&gt;</div><div class="line"><span class="number">4</span>  </div><div class="line">            <span class="keyword">and</span></div><div class="line"> </div><div class="line"><span class="number">5</span> &lt;<span class="keyword">a</span> class=<span class="string">"sister"</span> href=<span class="string">"http://example.com/tillie"</span> id=<span class="string">"link3"</span>&gt;Tillie&lt;/<span class="keyword">a</span>&gt;</div><div class="line"><span class="number">6</span> </div><div class="line">            <span class="keyword">and</span> they lived <span class="keyword">at</span> <span class="keyword">the</span> bottom <span class="keyword">of</span> <span class="keyword">a</span> well.</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;还是同样的HTML文本，这里调用了<code>children</code>属性来选择，返回结果是生成器类型。接下来，我们用for循环输出相应的内容。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果要得到所有的子孙节点的话，可以调用<code>descendants</code>属性:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from bs4 import BeautifulSoup</div><div class="line">soup = BeautifulSoup(<span class="selector-tag">html</span>, <span class="string">'lxml'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(soup.p.descendants)</span></span></div><div class="line"><span class="keyword">for</span> <span class="selector-tag">i</span>, child <span class="keyword">in</span> enumerate(soup<span class="selector-class">.p</span><span class="selector-class">.descendants</span>):</div><div class="line">    print(<span class="selector-tag">i</span>, child)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;generator object descendants <span class="keyword">at</span> <span class="number">0x10650e678</span>&gt;</div><div class="line"><span class="number">0</span> </div><div class="line">            Once upon <span class="keyword">a</span> <span class="built_in">time</span> there were <span class="literal">three</span> little sisters; <span class="keyword">and</span> their names were</div><div class="line"> </div><div class="line"><span class="number">1</span> &lt;<span class="keyword">a</span> class=<span class="string">"sister"</span> href=<span class="string">"http://example.com/elsie"</span> id=<span class="string">"link1"</span>&gt;</div><div class="line">&lt;span&gt;Elsie&lt;/span&gt;</div><div class="line">&lt;/<span class="keyword">a</span>&gt;</div><div class="line"><span class="number">2</span> </div><div class="line"> </div><div class="line"><span class="number">3</span> &lt;span&gt;Elsie&lt;/span&gt;</div><div class="line"><span class="number">4</span> Elsie</div><div class="line"><span class="number">5</span> </div><div class="line"> </div><div class="line"><span class="number">6</span> </div><div class="line"> </div><div class="line"><span class="number">7</span> &lt;<span class="keyword">a</span> class=<span class="string">"sister"</span> href=<span class="string">"http://example.com/lacie"</span> id=<span class="string">"link2"</span>&gt;Lacie&lt;/<span class="keyword">a</span>&gt;</div><div class="line"><span class="number">8</span> Lacie</div><div class="line"><span class="number">9</span>  </div><div class="line">            <span class="keyword">and</span></div><div class="line"> </div><div class="line"><span class="number">10</span> &lt;<span class="keyword">a</span> class=<span class="string">"sister"</span> href=<span class="string">"http://example.com/tillie"</span> id=<span class="string">"link3"</span>&gt;Tillie&lt;/<span class="keyword">a</span>&gt;</div><div class="line"><span class="number">11</span> Tillie</div><div class="line"><span class="number">12</span> </div><div class="line">            <span class="keyword">and</span> they lived <span class="keyword">at</span> <span class="keyword">the</span> bottom <span class="keyword">of</span> <span class="keyword">a</span> well.</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;此时返回结果还是生成器。遍历输出一下可以看到，这次的输出结果就包含了<code>span</code>节点。<code>descendants</code>会递归查询所有子节点，得到所有的子孙节点。</p>
<h4 id="父节点和祖先节点"><a href="#父节点和祖先节点" class="headerlink" title="父节点和祖先节点"></a>父节点和祖先节点</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;如果要获取某个节点元素的父节点，可以调用<code>parent</code>属性:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">html = """</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>The Dormouse's story<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span></div><div class="line">            Once upon a time there were three little sisters; and their names were</div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/elsie"</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">id</span>=<span class="string">"link1"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>Elsie<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">"""</div><div class="line">from bs4 import BeautifulSoup</div><div class="line">soup = BeautifulSoup(html, 'lxml')</div><div class="line">print(soup.a.parent)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span></div><div class="line">            Once upon a time there were three little sisters; and their names were</div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/elsie"</span> <span class="attr">id</span>=<span class="string">"link1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Elsie<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们选择的是第一个<code>a</code>节点的父节点元素。很明显，它的父节点是<code>p</code>节点，输出结果便是<code>p</code>节点及其内部的内容。<br>&nbsp;&nbsp;&nbsp;&nbsp;需要注意的是，这里输出的仅仅是<code>a</code>节点的直接父节点，而没有再向外寻找父节点的祖先节点。如果想获取所有的祖先节点，可以调用<code>parents</code>属性:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">html = <span class="string">""</span><span class="comment">"</span></div><div class="line"><span class="symbol">&lt;html&gt;</span></div><div class="line">    <span class="symbol">&lt;body&gt;</span></div><div class="line">        &lt;<span class="keyword">p</span> class=<span class="string">"story"</span>&gt;</div><div class="line">            &lt;<span class="keyword">a</span> href=<span class="string">"http://example.com/elsie"</span> class=<span class="string">"sister"</span> id=<span class="string">"link1"</span>&gt;</div><div class="line">                <span class="symbol">&lt;span&gt;</span>Elsie&lt;/span&gt;</div><div class="line">            &lt;/<span class="keyword">a</span>&gt;</div><div class="line">        &lt;/<span class="keyword">p</span>&gt;</div><div class="line"><span class="string">""</span><span class="comment">"</span></div><div class="line">from bs4 import BeautifulSoup</div><div class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line"><span class="keyword">print</span>(<span class="built_in">type</span>(soup.<span class="keyword">a</span>.parents))</div><div class="line"><span class="keyword">print</span>(<span class="keyword">list</span>(enumerate(soup.<span class="keyword">a</span>.parents)))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">generator</span>'&gt;</span></div><div class="line">[(0, <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/elsie"</span> <span class="attr">id</span>=<span class="string">"link1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Elsie<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span>), (1, <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/elsie"</span> <span class="attr">id</span>=<span class="string">"link1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Elsie<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>), (2, <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/elsie"</span> <span class="attr">id</span>=<span class="string">"link1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Elsie<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span>), (3, <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"story"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/elsie"</span> <span class="attr">id</span>=<span class="string">"link1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Elsie<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span>)]</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以发现，返回结果是生成器类型。这里用列表输出了它的索引和内容，而列表中的元素就是<code>a</code>节点的祖先节点。</p>
<h4 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;上面说明了子节点和父节点的获取方式，如果要获取同级的节点（也就是兄弟节点），应该怎么办呢？示例如下:<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">html = <span class="comment">""</span><span class="comment">"</span></div><div class="line"><span class="comment">&lt;html&gt;</span></div><div class="line"><span class="comment">    &lt;body&gt;</span></div><div class="line"><span class="comment">        &lt;p class="</span>story<span class="comment">"&gt;</span></div><div class="line"><span class="comment">            Once upon a time there were three little sisters; and their names were</span></div><div class="line"><span class="comment">            &lt;a href="</span>http://example.com/elsie<span class="comment">" class="</span>sister<span class="comment">" id="</span>link1<span class="comment">"&gt;</span></div><div class="line"><span class="comment">                &lt;span&gt;Elsie&lt;/span&gt;</span></div><div class="line"><span class="comment">            &lt;/a&gt;</span></div><div class="line"><span class="comment">            Hello</span></div><div class="line"><span class="comment">            &lt;a href="</span>http://example.com/lacie<span class="comment">" class="</span>sister<span class="comment">" id="</span>link2<span class="comment">"&gt;Lacie&lt;/a&gt; </span></div><div class="line"><span class="comment">            and</span></div><div class="line"><span class="comment">            &lt;a href="</span>http://example.com/tillie<span class="comment">" class="</span>sister<span class="comment">" id="</span>link3<span class="comment">"&gt;Tillie&lt;/a&gt;</span></div><div class="line"><span class="comment">            and they lived at the bottom of a well.</span></div><div class="line"><span class="comment">        &lt;/p&gt;</span></div><div class="line"><span class="comment">"</span><span class="comment">""</span></div><div class="line">from bs4 import <span class="type">BeautifulSoup</span></div><div class="line">soup = <span class="type">BeautifulSoup</span>(html, <span class="string">'lxml'</span>)</div><div class="line">print(<span class="string">'Next Sibling'</span>, soup.a.next_sibling)</div><div class="line">print(<span class="string">'Prev Sibling'</span>, soup.a.previous_sibling)</div><div class="line">print(<span class="string">'Next Siblings'</span>, list(enumerate(soup.a.next_siblings)))</div><div class="line">print(<span class="string">'Prev Siblings'</span>, list(enumerate(soup.a.previous_siblings)))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Next Sibling </div><div class="line">            Hello</div><div class="line"> </div><div class="line">Prev Sibling </div><div class="line">            Once upon a <span class="built_in">time</span> there were three little sisters; <span class="keyword">and</span> their names were</div><div class="line"> </div><div class="line">Next Siblings [(<span class="number">0</span>, '\n            Hello\n            '), (<span class="number">1</span>, &lt;a <span class="built_in">class</span>=<span class="string">"sister"</span> href=<span class="string">"http://example.com/lacie"</span> <span class="built_in">id</span>=<span class="string">"link2"</span>&gt;Lacie&lt;/a&gt;), (<span class="number">2</span>, ' \n            <span class="keyword">and</span>\n            '), (<span class="number">3</span>, &lt;a <span class="built_in">class</span>=<span class="string">"sister"</span> href=<span class="string">"http://example.com/tillie"</span> <span class="built_in">id</span>=<span class="string">"link3"</span>&gt;Tillie&lt;/a&gt;), (<span class="number">4</span>, '\n            <span class="keyword">and</span> they lived <span class="keyword">at</span> <span class="keyword">the</span> bottom <span class="keyword">of</span> a well.\n        ')]</div><div class="line">Prev Siblings [(<span class="number">0</span>, '\n            Once upon a <span class="built_in">time</span> there were three little sisters; <span class="keyword">and</span> their names were\n            ')]</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，这里调用了4个属性，其中<code>next_sibling</code>和<code>previous_sibling</code>分别获取节点的下一个和上一个兄弟元素，<code>next_siblings</code>和<code>previous_siblings</code>则分别返回所有前面和后面的兄弟节点的生成器。</p>
<h4 id="提取信息-1"><a href="#提取信息-1" class="headerlink" title="提取信息"></a>提取信息</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;前面讲解了关联元素节点的选择方法，如果想要获取它们的一些信息，比如文本、属性等，也用同样的方法，示例如下:<br><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">html = <span class="string">""</span><span class="string">"</span></div><div class="line"><span class="string">&lt;html&gt;</span></div><div class="line"><span class="string">    &lt;body&gt;</span></div><div class="line"><span class="string">        &lt;p class="</span>story<span class="string">"&gt;</span></div><div class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></div><div class="line"><span class="string">            &lt;a href="</span><span class="name">http</span>://example.com/elsie<span class="string">" class="</span>sister<span class="string">" id="</span>link1<span class="string">"&gt;Bob&lt;/a&gt;&lt;a href="</span><span class="name">http</span>://example.com/lacie<span class="string">" class="</span>sister<span class="string">" id="</span>link2<span class="string">"&gt;Lacie&lt;/a&gt; </span></div><div class="line"><span class="string">        &lt;/p&gt;</span></div><div class="line"><span class="string">"</span><span class="string">""</span></div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">'Next Sibling:'</span>)</div><div class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(soup.a.next_sibling))</div><div class="line"><span class="built_in">print</span>(soup.a.next_sibling)</div><div class="line"><span class="built_in">print</span>(soup.a.next_sibling.<span class="built_in">string</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">'Parent:'</span>)</div><div class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(soup.a.parents))</div><div class="line"><span class="built_in">print</span>(list(soup.a.parents)[<span class="number">0</span>])</div><div class="line"><span class="built_in">print</span>(list(soup.a.parents)[<span class="number">0</span>].attrs[<span class="string">'class'</span>])</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="type">Next</span> <span class="type">Sibling</span>:</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'<span class="title">&gt;</span></span></div><div class="line"><span class="class"><span class="title">&lt;a</span> <span class="title">class=</span>"<span class="title">sister</span>" <span class="title">href=</span>"<span class="title">http</span></span>:<span class="comment">//example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;</span></div><div class="line"><span class="type">Lacie</span></div><div class="line"><span class="type">Parent</span>:</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">generator</span>'<span class="title">&gt;</span></span></div><div class="line"><span class="class"><span class="title">&lt;p</span> <span class="title">class=</span>"<span class="title">story</span>"<span class="title">&gt;</span></span></div><div class="line"><span class="class">            <span class="title">Once</span> <span class="title">upon</span> <span class="title">a</span> <span class="title">time</span> <span class="title">there</span> <span class="title">were</span> <span class="title">three</span> <span class="title">little</span> <span class="title">sisters</span></span>; and their names were</div><div class="line">            &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"sister"</span> href=<span class="string">"http://example.com/elsie"</span> id=<span class="string">"link1"</span>&gt;<span class="type">Bob</span>&lt;/a&gt;&lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"sister"</span> href=<span class="string">"http://example.com/lacie"</span> id=<span class="string">"link2"</span>&gt;<span class="type">Lacie</span>&lt;/a&gt;</div><div class="line">&lt;/p&gt;</div><div class="line">[<span class="symbol">'stor</span>y']</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果返回结果是单个节点，那么可以直接调用<code>string</code>、<code>attrs</code>等属性获得其文本和属性；如果返回结果是多个节点的生成器，则可以转为列表后取出某个元素，然后再调用<code>string</code>、<code>attrs</code>等属性获取其对应节点的文本和属性。</p>
<h2 id="方法选择器"><a href="#方法选择器" class="headerlink" title="方法选择器"></a>方法选择器</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;前面所讲的选择方法都是通过属性来选择的，这种方法非常快，但是如果进行比较复杂的选择的话，它就比较烦琐，不够灵活了。幸好，Beautiful Soup还为我们提供了一些查询方法，比如<code>find_all()</code>和<code>find()</code>等，调用它们，然后传入相应的参数，就可以灵活查询了。</p>
<h3 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a>find_all()</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>find_all</code>，顾名思义，就是查询所有符合条件的元素。给它传入一些属性或文本，就可以得到符合条件的元素，它的功能十分强大。<br>&nbsp;&nbsp;&nbsp;&nbsp;它的API如下:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find_all(<span class="name">name</span> , attrs , recursive , text , **kwargs)</div></pre></td></tr></table></figure></p>
<h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;我们可以根据节点名来查询元素，示例如下:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">html='''</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel"</span>&gt;</div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel-heading"</span>&gt;</div><div class="line">        &lt;h4&gt;<span class="type">Hello</span>&lt;/h4&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel-body"</span>&gt;</div><div class="line">        &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span> id=<span class="string">"list-1"</span>&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Foo</span>&lt;/li&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Bar</span>&lt;/li&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Jay</span>&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list list-small"</span> id=<span class="string">"list-2"</span>&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Foo</span>&lt;/li&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Bar</span>&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">'''</div><div class="line">from bs4 <span class="keyword">import</span> <span class="type">BeautifulSoup</span></div><div class="line">soup = <span class="type">BeautifulSoup</span>(html, <span class="symbol">'lxm</span>l')</div><div class="line">print(soup.find_all(name=<span class="symbol">'u</span>l'))</div><div class="line">print(<span class="class"><span class="keyword">type</span>(<span class="params">soup.find_all(name='ul'</span>)[0]))</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[&lt;ul <span class="keyword">class</span>=<span class="string">"list"</span> id=<span class="string">"list-1"</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Foo&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Bar&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Jay&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;/ul&gt;, &lt;ul <span class="keyword">class</span>=<span class="string">"list list-small"</span> id=<span class="string">"list-2"</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Foo&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Bar&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;/ul&gt;]</div><div class="line">&lt;<span class="keyword">class</span> 'bs4.element.Tag'&gt;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们调用了<code>find_all()</code>方法，传入<code>name</code>参数，其参数值为<code>ul</code>。也就是说，我们想要查询所有<code>ul</code>节点，返回结果是列表类型，长度为2，每个元素依然都是<code>bs4.element.Tag</code>类型。<br>&nbsp;&nbsp;&nbsp;&nbsp;因为都是<code>Tag</code>类型，所以依然可以进行嵌套查询。还是同样的文本，这里查询出所有<code>ul</code>节点后，再继续查询其内部的<code>li</code>节点:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.find_all(<span class="attribute">name</span>=<span class="string">'ul'</span>):</div><div class="line">    <span class="builtin-name">print</span>(ul.find_all(<span class="attribute">name</span>=<span class="string">'li'</span>))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[&lt;li class="element"&gt;Foo&lt;/li&gt;, &lt;li class="element"&gt;Bar&lt;/li&gt;, &lt;li class="element"&gt;Jay&lt;/li&gt;]</span></div><div class="line"><span class="meta">[&lt;li class="element"&gt;Foo&lt;/li&gt;, &lt;li class="element"&gt;Bar&lt;/li&gt;]</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;返回结果是列表类型，列表中的每个元素依然还是<code>Tag</code>类型。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，就可以遍历每个<code>li</code>，获取它的文本了:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.find_all(<span class="attribute">name</span>=<span class="string">'ul'</span>):</div><div class="line">    <span class="builtin-name">print</span>(ul.find_all(<span class="attribute">name</span>=<span class="string">'li'</span>))</div><div class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> ul.find_all(<span class="attribute">name</span>=<span class="string">'li'</span>):</div><div class="line">        <span class="builtin-name">print</span>(li.string)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[&lt;li class="element"&gt;Foo&lt;/li&gt;, &lt;li class="element"&gt;Bar&lt;/li&gt;, &lt;li class="element"&gt;Jay&lt;/li&gt;]</span></div><div class="line">Foo</div><div class="line">Bar</div><div class="line">Jay</div><div class="line"><span class="meta">[&lt;li class="element"&gt;Foo&lt;/li&gt;, &lt;li class="element"&gt;Bar&lt;/li&gt;]</span></div><div class="line">Foo</div><div class="line">Bar</div></pre></td></tr></table></figure></p>
<h4 id="attrs"><a href="#attrs" class="headerlink" title="attrs"></a>attrs</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;除了根据节点名查询，我们也可以传入一些属性来查询，示例如下:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">html='''</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel"</span>&gt;</div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel-heading"</span>&gt;</div><div class="line">        &lt;h4&gt;<span class="type">Hello</span>&lt;/h4&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel-body"</span>&gt;</div><div class="line">        &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span> id=<span class="string">"list-1"</span> name=<span class="string">"elements"</span>&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Foo</span>&lt;/li&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Bar</span>&lt;/li&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Jay</span>&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list list-small"</span> id=<span class="string">"list-2"</span>&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Foo</span>&lt;/li&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Bar</span>&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">'''</div><div class="line">from bs4 <span class="keyword">import</span> <span class="type">BeautifulSoup</span></div><div class="line">soup = <span class="type">BeautifulSoup</span>(html, <span class="symbol">'lxm</span>l')</div><div class="line">print(soup.find_all(attrs=&#123;<span class="symbol">'i</span>d': <span class="symbol">'list</span><span class="number">-1</span>'&#125;))</div><div class="line">print(soup.find_all(attrs=&#123;<span class="symbol">'nam</span>e': <span class="symbol">'element</span>s'&#125;))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[&lt;ul <span class="keyword">class</span>=<span class="string">"list"</span> id=<span class="string">"list-1"</span> name=<span class="string">"elements"</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Foo&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Bar&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Jay&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;/ul&gt;]</div><div class="line">[&lt;ul <span class="keyword">class</span>=<span class="string">"list"</span> id=<span class="string">"list-1"</span> name=<span class="string">"elements"</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Foo&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Bar&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Jay&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;/ul&gt;]</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里查询的时候传入的是<code>attrs</code>参数，参数的类型是字典类型。比如，要查询<code>id</code>为<code>list-1</code>的节点，可以传入<code>attrs={&#39;id&#39;: &#39;list-1&#39;}</code>的查询条件，得到的结果是列表形式，包含的内容就是符合<code>id</code>为<code>list-1</code>的所有节点。在上面的例子中，符合条件的元素个数是1，所以结果是长度为1的列表。<br>&nbsp;&nbsp;&nbsp;&nbsp;对于一些常用的属性，比如<code>id</code>和<code>class</code>等，我们可以不用<code>attrs</code>来传递。比如，要查询<code>id</code>为<code>list-1</code>的节点，可以直接传入<code>id</code>这个参数。还是上面的文本，我们换一种方式来查询:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from bs4 import BeautifulSoup</div><div class="line">soup = BeautifulSoup(<span class="name">html</span>, 'lxml')</div><div class="line">print(<span class="name">soup</span>.find_all(<span class="name">id=</span>'list-1'))</div><div class="line">print(<span class="name">soup</span>.find_all(<span class="name">class_=</span>'element'))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[&lt;ul <span class="keyword">class</span>=<span class="string">"list"</span> id=<span class="string">"list-1"</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Foo&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Bar&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Jay&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;/ul&gt;]</div><div class="line">[&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Foo&lt;/<span class="keyword">li</span>&gt;, &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Bar&lt;/<span class="keyword">li</span>&gt;, &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Jay&lt;/<span class="keyword">li</span>&gt;, &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Foo&lt;/<span class="keyword">li</span>&gt;, &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Bar&lt;/<span class="keyword">li</span>&gt;]</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里直接传入<code>id=&#39;list-1&#39;</code>，就可以查询<code>id</code>为<code>list-1</code>的节点元素了。而对于<code>class</code>来说，由于<code>class</code>在<code>Python</code>里是一个关键字，所以后面需要加一个下划线，即<code>class_=&#39;element&#39;</code>，返回的结果依然还是<code>Tag</code>组成的列表。</p>
<h4 id="text"><a href="#text" class="headerlink" title="text"></a>text</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>text</code>参数可用来匹配节点的文本，传入的形式可以是字符串，可以是正则表达式对象，示例如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">html=<span class="string">'''</span></div><div class="line"><span class="string">&lt;div class="panel"&gt;</span></div><div class="line"><span class="string">    &lt;div class="panel-body"&gt;</span></div><div class="line"><span class="string">        &lt;a&gt;Hello, this is a link&lt;/a&gt;</span></div><div class="line"><span class="string">        &lt;a&gt;Hello, this is a link, too&lt;/a&gt;</span></div><div class="line"><span class="string">    &lt;/div&gt;</span></div><div class="line"><span class="string">&lt;/div&gt;</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</div><div class="line">print(soup.find_all(text=re.compile(<span class="string">'link'</span>)))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">['Hello, this is a link', 'Hello, this is a link, too']</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里有两个<code>a</code>节点，其内部包含文本信息。这里在<code>find_all()</code>方法中传入<code>text</code>参数，该参数为正则表达式对象，结果返回所有匹配正则表达式的节点文本组成的列表。</p>
<h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;除了<code>find_all()</code>方法，还有<code>find()</code>方法，只不过后者返回的是单个元素，也就是第一个匹配的元素，而前者返回的是所有匹配的元素组成的列表。示例如下:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">html='''</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel"</span>&gt;</div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel-heading"</span>&gt;</div><div class="line">        &lt;h4&gt;<span class="type">Hello</span>&lt;/h4&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"panel-body"</span>&gt;</div><div class="line">        &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span> id=<span class="string">"list-1"</span>&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Foo</span>&lt;/li&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Bar</span>&lt;/li&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Jay</span>&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list list-small"</span> id=<span class="string">"list-2"</span>&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Foo</span>&lt;/li&gt;</div><div class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"element"</span>&gt;<span class="type">Bar</span>&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">'''</div><div class="line">from bs4 <span class="keyword">import</span> <span class="type">BeautifulSoup</span></div><div class="line">soup = <span class="type">BeautifulSoup</span>(html, <span class="symbol">'lxm</span>l')</div><div class="line">print(soup.find(name=<span class="symbol">'u</span>l'))</div><div class="line">print(<span class="class"><span class="keyword">type</span>(<span class="params">soup.find(name='ul'</span>)))</span></div><div class="line"><span class="class"><span class="title">print</span>(<span class="params">soup.find(class_='list'</span>))</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;ul <span class="keyword">class</span>=<span class="string">"list"</span> id=<span class="string">"list-1"</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Foo&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Bar&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Jay&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;<span class="keyword">class</span> 'bs4.element.Tag'&gt;</div><div class="line">&lt;ul <span class="keyword">class</span>=<span class="string">"list"</span> id=<span class="string">"list-1"</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Foo&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Bar&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Jay&lt;/<span class="keyword">li</span>&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里的返回结果不再是列表形式，而是第一个匹配的节点元素，类型依然是<code>Tag</code>类型。<br>&nbsp;&nbsp;&nbsp;&nbsp;另外，还有许多查询方法，其用法与前面介绍的<code>find_all()</code>、<code>find()</code>方法完全相同，只不过查询范围不同，这里简单说明一下。</p>
<ul>
<li><code>find_parents()</code>和<code>find_parent()</code>：前者返回所有祖先节点，后者返回直接父节点。</li>
<li><code>find_next_siblings()</code>和<code>find_next_sibling()</code>：前者返回后面所有的兄弟节点，后者返回后面第一个兄弟节点。</li>
<li><code>find_previous_siblings()</code>和<code>find_previous_sibling()</code>：前者返回前面所有的兄弟节点，后者返回前面第一个兄弟节点。</li>
<li><code>find_all_next()</code>和<code>find_next()</code>：前者返回节点后所有符合条件的节点，后者返回第一个符合条件的节点。</li>
<li><code>find_all_previous()</code>和<code>find_previous()</code>：前者返回节点后所有符合条件的节点，后者返回第一个符合条件的节点。</li>
</ul>
<h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Beautiful Soup还提供了另外一种选择器，那就是CSS选择器。<br>使用CSS选择器时，只需要调用<code>select()</code>方法，传入相应的CSS选择器即可，示例如下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">html='''</div><div class="line">&lt;div <span class="keyword">class</span>=<span class="string">"panel"</span>&gt;</div><div class="line">    &lt;div <span class="keyword">class</span>=<span class="string">"panel-heading"</span>&gt;</div><div class="line">        &lt;h4&gt;Hello&lt;/h4&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div <span class="keyword">class</span>=<span class="string">"panel-body"</span>&gt;</div><div class="line">        &lt;ul <span class="keyword">class</span>=<span class="string">"list"</span> id=<span class="string">"list-1"</span>&gt;</div><div class="line">            &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Foo&lt;/<span class="keyword">li</span>&gt;</div><div class="line">            &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Bar&lt;/<span class="keyword">li</span>&gt;</div><div class="line">            &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Jay&lt;/<span class="keyword">li</span>&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &lt;ul <span class="keyword">class</span>=<span class="string">"list list-small"</span> id=<span class="string">"list-2"</span>&gt;</div><div class="line">            &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Foo&lt;/<span class="keyword">li</span>&gt;</div><div class="line">            &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"element"</span>&gt;Bar&lt;/<span class="keyword">li</span>&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">'''</div><div class="line">from bs4 import BeautifulSoup</div><div class="line">soup = BeautifulSoup(html, 'lxml')</div><div class="line"><span class="keyword">print</span>(soup.select('.panel .panel-heading'))</div><div class="line"><span class="keyword">print</span>(soup.select('ul <span class="keyword">li</span>'))</div><div class="line"><span class="keyword">print</span>(soup.select('#<span class="keyword">list</span>-2 .element'))</div><div class="line"><span class="keyword">print</span>(<span class="keyword">type</span>(soup.select('ul')[0]))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[&lt;div class="panel-heading"&gt;</span></div><div class="line"><span class="meta">&lt;h4&gt;Hello&lt;/h4&gt;</span></div><div class="line"><span class="meta">&lt;/div&gt;]</span></div><div class="line"><span class="meta">[&lt;li class="element"&gt;Foo&lt;/li&gt;, &lt;li class="element"&gt;Bar&lt;/li&gt;, &lt;li class="element"&gt;Jay&lt;/li&gt;, &lt;li class="element"&gt;Foo&lt;/li&gt;, &lt;li class="element"&gt;Bar&lt;/li&gt;]</span></div><div class="line"><span class="meta">[&lt;li class="element"&gt;Foo&lt;/li&gt;, &lt;li class="element"&gt;Bar&lt;/li&gt;]</span></div><div class="line">&lt;<span class="keyword">class</span> 'bs4.element.Tag'&gt;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们用了3次CSS选择器，返回的结果均是符合CSS选择器的节点组成的列表。例如，<code>select(&#39;ul li&#39;)</code>则是选择所有ul节点下面的所有<code>li</code>节点，结果便是所有的<code>li</code>节点组成的列表。<br>&nbsp;&nbsp;&nbsp;&nbsp;最后一句打印输出了列表中元素的类型。可以看到，类型依然是<code>Tag</code>类型。</p>
<h3 id="嵌套选择-1"><a href="#嵌套选择-1" class="headerlink" title="嵌套选择"></a>嵌套选择</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>select()</code>方法同样支持嵌套选择。例如，先选择所有<code>ul</code>节点，再遍历每个<code>ul</code>节点，选择其<code>li</code>节点，样例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from bs4 import BeautifulSoup</div><div class="line">soup = BeautifulSoup(<span class="selector-tag">html</span>, <span class="string">'lxml'</span>)</div><div class="line"><span class="keyword">for</span> <span class="selector-tag">ul</span> <span class="keyword">in</span> soup.select(<span class="string">'ul'</span>):</div><div class="line">    print(<span class="selector-tag">ul</span>.select(<span class="string">'li'</span>))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[&lt;li class="element"&gt;Foo&lt;/li&gt;, &lt;li class="element"&gt;Bar&lt;/li&gt;, &lt;li class="element"&gt;Jay&lt;/li&gt;]</span></div><div class="line"><span class="meta">[&lt;li class="element"&gt;Foo&lt;/li&gt;, &lt;li class="element"&gt;Bar&lt;/li&gt;]</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，这里正常输出了所有<code>ul</code>节点下所有<code>li</code>节点组成的列表。</p>
<h3 id="获取属性-1"><a href="#获取属性-1" class="headerlink" title="获取属性"></a>获取属性</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我们知道节点类型是<code>Tag</code>类型，所以获取属性还可以用原来的方法。仍然是上面的HTML文本，这里尝试获取每个<code>ul</code>节点的id属性:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from bs4 import BeautifulSoup</div><div class="line">soup = BeautifulSoup(<span class="selector-tag">html</span>, <span class="string">'lxml'</span>)</div><div class="line"><span class="keyword">for</span> <span class="selector-tag">ul</span> <span class="keyword">in</span> soup.select(<span class="string">'ul'</span>):</div><div class="line">    print(<span class="selector-tag">ul</span>[<span class="string">'id'</span>])</div><div class="line">    print(<span class="selector-tag">ul</span><span class="selector-class">.attrs</span>[<span class="string">'id'</span>])</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">list-1</span></div><div class="line"><span class="built_in">list-1</span></div><div class="line"><span class="built_in">list-2</span></div><div class="line"><span class="built_in">list-2</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，直接传入中括号和属性名，以及通过<code>attrs</code>属性获取属性值，都可以成功。</p>
<h3 id="获取文本"><a href="#获取文本" class="headerlink" title="获取文本"></a>获取文本</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;要获取文本，当然也可以用前面所讲的<code>string</code>属性。此外，还有一个方法，那就<code>是get_text()</code>，示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from bs4 import BeautifulSoup</div><div class="line">soup = BeautifulSoup(<span class="selector-tag">html</span>, <span class="string">'lxml'</span>)</div><div class="line"><span class="keyword">for</span> <span class="selector-tag">li</span> <span class="keyword">in</span> soup.select(<span class="string">'li'</span>):</div><div class="line">    print(<span class="string">'Get Text:'</span>, <span class="selector-tag">li</span>.get_text())</div><div class="line">    print(<span class="string">'String:'</span>, <span class="selector-tag">li</span>.string)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Get</span> <span class="keyword">Text</span>: Foo</div><div class="line"><span class="keyword">String</span>: Foo</div><div class="line"><span class="keyword">Get</span> <span class="keyword">Text</span>: Bar</div><div class="line"><span class="keyword">String</span>: Bar</div><div class="line"><span class="keyword">Get</span> <span class="keyword">Text</span>: Jay</div><div class="line"><span class="keyword">String</span>: Jay</div><div class="line"><span class="keyword">Get</span> <span class="keyword">Text</span>: Foo</div><div class="line"><span class="keyword">String</span>: Foo</div><div class="line"><span class="keyword">Get</span> <span class="keyword">Text</span>: Bar</div><div class="line"><span class="keyword">String</span>: Bar</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，二者的效果完全一致。<br>&nbsp;&nbsp;&nbsp;&nbsp;到此，Beautiful Soup的用法基本就介绍完了，最后做一下简单的总结。</p>
<ul>
<li>推荐使用lxml解析库，必要时使用<code>html.parser</code>。</li>
<li>节点选择筛选功能弱但是速度快。</li>
<li>建议使用<code>find()</code>或者<code>find_all()</code>查询匹配单个结果或者多个结果。</li>
<li>如果对CSS选择器熟悉的话，可以使用<code>select()</code>方法选择。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Beautiful Soup是强大的解析工具，它借助网页的结构和属性等特性来解析网页。有了它，我们不用再去写一些复杂的正则表达式，只需要简单的几条语句，就可以完成网页中某个元素的提取。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
      <category term="解析库" scheme="http://www.sanstylemc.cn/tags/%E8%A7%A3%E6%9E%90%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>使用XPath</title>
    <link href="http://www.sanstylemc.cn/2018/04/08/%E4%BD%BF%E7%94%A8XPath/"/>
    <id>http://www.sanstylemc.cn/2018/04/08/使用XPath/</id>
    <published>2018-04-08T12:12:38.000Z</published>
    <updated>2018-04-08T12:21:04.529Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;XPath，全称XML Path Language，即XML路径语言，它是一门在XML文档中查找信息的语言。它最初是用来搜寻XML文档的，但是它同样适用于HTML文档的搜索。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以在做爬虫时，我们完全可以使用XPath来做相应的信息抽取。<br><a id="more"></a></p>
<h2 id="XPath概览"><a href="#XPath概览" class="headerlink" title="XPath概览"></a>XPath概览</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;XPath的选择功能十分强大，它提供了非常简洁明了的路径选择表达式。另外，它还提供了超过100个内建函数，用于字符串、数值、时间的匹配以及节点、序列的处理等。几乎所有我们想要定位的节点，都可以用XPath来选择。<br>&nbsp;&nbsp;&nbsp;&nbsp;XPath于1999年11月16日成为W3C标准，它被设计为供XSLT、XPointer以及其他XML解析软件使用，更多的文档可以访问其官方网站：<a href="https://www.w3.org/TR/xpath/" target="_blank" rel="external">https://www.w3.org/TR/xpath/</a> 。</p>
<h2 id="XPath常用规则"><a href="#XPath常用规则" class="headerlink" title="XPath常用规则"></a>XPath常用规则</h2><table>
<thead>
<tr>
<th style="text-align:center">表达式</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>nodename</code></td>
<td style="text-align:center">选取此节点的所有子节点</td>
</tr>
<tr>
<td style="text-align:center"><code>/</code></td>
<td style="text-align:center">从当前节点选取直接子节点</td>
</tr>
<tr>
<td style="text-align:center"><code>//</code></td>
<td style="text-align:center">从当前节点选取子孙节点</td>
</tr>
<tr>
<td style="text-align:center"><code>.</code></td>
<td style="text-align:center">选取当前节点</td>
</tr>
<tr>
<td style="text-align:center"><code>..</code></td>
<td style="text-align:center">选取当前节点的父节点</td>
</tr>
<tr>
<td style="text-align:center"><code>@</code></td>
<td style="text-align:center">选取属性</td>
</tr>
</tbody>
</table>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里列出了XPath的常用匹配规则，示例如下:<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//title[<span class="symbol">@lang</span>=<span class="string">'eng'</span>]</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这就是一个XPath规则，它代表选择所有名称为<code>title</code>，同时属性<code>lang</code>的值为<code>eng</code>的节点。</p>
<h2 id="实例引入"><a href="#实例引入" class="headerlink" title="实例引入"></a>实例引入</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;现在通过实例来感受下使用XPath来对网页进行解析的过程，相关代码如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line">text = '''</div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link1.html"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-inactive"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">'''</div><div class="line">html = etree.HTML(text)</div><div class="line">result = etree.tostring(html)</div><div class="line">print(result.decode('utf-8'))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里首先导入lxml库的etree模块，然后声明了一段HTML文本，调用HTML类进行初始化，这样就成功构造了一个XPath解析对象。这里需要注意的是，HTML文本中的最后一个<code>li</code>节点是没有闭合的，但是etree模块可以自动修正HTML文本。<br>&nbsp;&nbsp;&nbsp;&nbsp;这里我们调用tostring()方法即可输出修正后的HTML代码，但是结果是bytes类型。这里利用decode()方法将其转成str类型，结果如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;&lt;body&gt;&lt;div&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">         &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</div><div class="line">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</div><div class="line">         &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</div><div class="line">         &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</div><div class="line">         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;</div><div class="line">     &lt;/li&gt;&lt;/ul&gt;</div><div class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，经过处理之后，<code>li</code>节点标签被补全，并且还自动添加了<code>body</code>、<code>html</code>节点。<br>&nbsp;&nbsp;&nbsp;&nbsp;另外，也可以直接读取 文本文件进行解析，示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line"> </div><div class="line"><span class="selector-tag">html</span> = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</div><div class="line">result = etree.tostring(html)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result.decode(<span class="string">'utf-8'</span>)</span></span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;其中test.html的内容就是上面例子中的HTML代码，内容如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link1.html"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-inactive"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这次的输出结果略有不同，多了一个<code>DOCTYPE</code>的声明，不过对解析无任何影响，结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link1.html"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-inactive"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="所有节点"><a href="#所有节点" class="headerlink" title="所有节点"></a>所有节点</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们一般会用//开头的XPath规则来选取所有符合要求的节点。这里以前面的HTML文本为例，如果要选取所有节点，可以这样实现:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rom lxml import etree</div><div class="line"><span class="selector-tag">html</span> = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</div><div class="line">result = <span class="selector-tag">html</span>.xpath(<span class="string">'//*'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&lt;Element html <span class="meta">at</span> <span class="number">0x10510d9c8</span>&gt;, &lt;Element body <span class="meta">at</span> <span class="number">0x10510da08</span>&gt;, &lt;Element <span class="keyword">div</span> <span class="meta">at</span> <span class="number">0x10510da48</span>&gt;, &lt;Element ul <span class="meta">at</span> <span class="number">0x10510da88</span>&gt;, &lt;Element li <span class="meta">at</span> <span class="number">0x10510dac8</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x10510db48</span>&gt;, &lt;Element li <span class="meta">at</span> <span class="number">0x10510db88</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x10510dbc8</span>&gt;, &lt;Element li <span class="meta">at</span> <span class="number">0x10510dc08</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x10510db08</span>&gt;, &lt;Element li <span class="meta">at</span> <span class="number">0x10510dc48</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x10510dc88</span>&gt;, &lt;Element li <span class="meta">at</span> <span class="number">0x10510dcc8</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x10510dd08</span>&gt;]</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里使用<code>*</code>代表匹配所有节点，也就是整个HTML文本中的所有节点都会被获取。可以看到，返回形式是一个列表，每个元素是<code>Element</code>类型，其后跟了节点的名称，如<code>html</code>、<code>body</code>、<code>div</code>、<code>ul</code>、<code>li</code>、<code>a</code>等，所有节点都包含在列表中了。<br>&nbsp;&nbsp;&nbsp;&nbsp;当然，此处匹配也可以指定节点名称。如果想获取所有li节点，示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line"><span class="selector-tag">html</span> = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</div><div class="line">result = <span class="selector-tag">html</span>.xpath(<span class="string">'//li'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result[<span class="number">0</span>])</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里要选取所有<code>li</code>节点，可以使用<code>//</code>，然后直接加上节点名称即可，调用时直接使用<code>xpath()</code>方法即可。<br>&nbsp;&nbsp;&nbsp;&nbsp;运行结果:<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[&lt;Element <span class="built_in">li</span> <span class="built_in">at</span> <span class="number">0x105849208</span>&gt;, &lt;Element <span class="built_in">li</span> <span class="built_in">at</span> <span class="number">0x105849248</span>&gt;, &lt;Element <span class="built_in">li</span> <span class="built_in">at</span> <span class="number">0x105849288</span>&gt;, &lt;Element <span class="built_in">li</span> <span class="built_in">at</span> <span class="number">0x1058492c8</span>&gt;, &lt;Element <span class="built_in">li</span> <span class="built_in">at</span> <span class="number">0x105849308</span>&gt;]</div><div class="line">&lt;Element <span class="built_in">li</span> <span class="built_in">at</span> <span class="number">0x105849208</span>&gt;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里可以看到提取结果是一个列表形式，其中每个元素都是一个 <code>Element</code>对象。如果要取出其中一个对象，可以直接用中括号加索引，如<code>[0]</code>。</p>
<h2 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们通过<code>/</code>或<code>//</code>即可查找元素的子节点或子孙节点。假如现在想选择li节点的所有直接<code>a</code>子节点，可以这样实现:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line"> </div><div class="line"><span class="selector-tag">html</span> = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</div><div class="line">result = <span class="selector-tag">html</span>.xpath(<span class="string">'//li/a'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里通过追加<code>/a</code>即选择了所有<code>li</code>节点的所有直接<code>a</code>子节点。因为<code>//li</code>用于选中所有<code>li</code>节点，<code>/a</code>用于选中<code>li</code>节点的所有直接子节点<code>a</code>，二者组合在一起即获取所有<code>li</code>节点的所有直接<code>a</code>子节点。<br>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[&lt;Element a at 0x106ee8688&gt;, &lt;Element a at 0x106ee86c8&gt;, &lt;Element a at 0x106ee8708&gt;, &lt;Element a at 0x106ee8748&gt;, &lt;Element a at 0x106ee8788&gt;]</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;此处的<code>/</code>用于选取直接子节点，如果要获取所有子孙节点，就可以使用<code>//</code>。例如，要获取<code>ul</code>节点下的所有子孙<code>a</code>节点，可以这样实现:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line"> </div><div class="line"><span class="selector-tag">html</span> = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</div><div class="line">result = <span class="selector-tag">html</span>.xpath(<span class="string">'//ul//a'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果是相同的。<br>&nbsp;&nbsp;&nbsp;&nbsp;但是如果这里用<code>//ul/a</code>，就无法获取任何结果了。因为<code>/</code>用于获取直接子节点，而在<code>ul</code>节点下没有直接的<code>a</code>子节点，只有<code>li</code>节点，所以无法获取任何匹配结果，代码如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line"> </div><div class="line"><span class="selector-tag">html</span> = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</div><div class="line">result = <span class="selector-tag">html</span>.xpath(<span class="string">'//ul/a'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[]</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;因此，这里我们要注意<code>/</code>和<code>//</code>的区别，其中<code>/</code>用于获取直接子节点，<code>//</code>用于获取子孙节点。</p>
<h2 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们知道通过连续的<code>/</code>或<code>//</code>可以查找子节点或子孙节点，那么假如我们知道了子节点，怎样来查找父节点呢？这可以用<code>..</code>来实现。<br>&nbsp;&nbsp;&nbsp;&nbsp;比如，现在首先选中<code>href</code>属性为<code>link4.html</code>的<code>a</code>节点，然后再获取其父节点，然后再获取其<code>class</code>属性，相关代码如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line"> </div><div class="line"><span class="selector-tag">html</span> = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</div><div class="line">result = <span class="selector-tag">html</span>.xpath(<span class="string">'//a[@href="link4.html"]/../@class'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'item-1</span>']</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;检查一下结果发现，这正是我们获取的目标<code>li</code>节点的<code>class</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;同时，我们也可以通过<code>parent::</code>来获取父节点，代码如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line"> </div><div class="line"><span class="selector-tag">html</span> = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</div><div class="line">result = <span class="selector-tag">html</span>.xpath(<span class="string">'//a[@href="link4.html"]/parent::*/@class'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div></pre></td></tr></table></figure></p>
<h2 id="属性匹配"><a href="#属性匹配" class="headerlink" title="属性匹配"></a>属性匹配</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在选取的时候，我们还可以用@符号进行属性过滤。比如，这里如果要选取<code>class</code>为<code>item-1</code>的<code>li</code>节点，可以这样实现:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line"><span class="selector-tag">html</span> = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</div><div class="line">result = <span class="selector-tag">html</span>.xpath(<span class="string">'//li[@class="item-0"]'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们通过加入<code>[@class=&quot;item-0&quot;]</code>，限制了节点的<code>class</code>属性为<code>item-0</code>，而HTML文本中符合条件的<code>li</code>节点有两个，所以结果应该返回两个匹配到的元素。结果如下:<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[&lt;Element li at 0x10a399288&gt;, &lt;Element li at 0x10a3992c8&gt;]</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可见，匹配结果正是两个。</p>
<h2 id="文本获取"><a href="#文本获取" class="headerlink" title="文本获取"></a>文本获取</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们用XPath中的<code>text()</code>方法获取节点中的文本，接下来尝试获取前面<code>li</code>节点中的文本，相关代码如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line"> </div><div class="line"><span class="selector-tag">html</span> = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</div><div class="line">result = <span class="selector-tag">html</span>.xpath(<span class="string">'//li[@class="item-0"]/text()'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">['\n     ']</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;奇怪的是，我们并没有获取到任何文本，只获取到了一个换行符，这是为什么呢？因为XPath中<code>text()</code>前面是<code>/</code>，而此处<code>/</code>的含义是选取直接子节点，很明显<code>li</code>的直接子节点都是<code>a</code>节点，文本都是在<code>a</code>节点内部的，所以这里匹配到的结果就是被修正的li节点内部的换行符，因为自动修正的<code>li</code>节点的尾标签换行了。<br>&nbsp;&nbsp;&nbsp;&nbsp;即选中的是这两个节点:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link1.html"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-0"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/li&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;其中一个节点因为自动修正，<code>li</code>节点的尾标签添加的时候换行了，所以提取文本得到的唯一结果就是<code>li</code>节点的尾标签和<code>a</code>节点的尾标签之间的换行符。<br>&nbsp;&nbsp;&nbsp;&nbsp;因此，如果想获取<code>li</code>节点内部的文本，就有两种方式，一种是先选取<code>a</code>节点再获取文本，另一种就是使用<code>//</code>。接下来，我们来看下二者的区别。<br>&nbsp;&nbsp;&nbsp;&nbsp;首先，选取到<code>a</code>节点再获取文本，代码如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line"> </div><div class="line"><span class="selector-tag">html</span> = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</div><div class="line">result = <span class="selector-tag">html</span>.xpath(<span class="string">'//li[@class="item-0"]/a/text()'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'first</span> item', <span class="symbol">'fifth</span> item']</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，这里的返回值是两个，内容都是属性为<code>item-0</code>的<code>li</code>节点的文本，这也印证了前面属性匹配的结果是正确的。<br>&nbsp;&nbsp;&nbsp;&nbsp;这里我们是逐层选取的，先选取了<code>li</code>节点，又利用<code>/</code>选取了其直接子节点a，然后再选取其文本，得到的结果恰好是符合我们预期的两个结果。<br>&nbsp;&nbsp;&nbsp;&nbsp;再来看下用另一种方式（即使用<code>//</code>）选取的结果，代码如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line"> </div><div class="line"><span class="selector-tag">html</span> = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</div><div class="line">result = <span class="selector-tag">html</span>.xpath(<span class="string">'//li[@class="item-0"]//text()'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'first</span> item', <span class="symbol">'fifth</span> item', '\n     ']</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;不出所料，这里的返回结果是3个。可想而知，这里是选取所有子孙节点的文本，其中前两个就是<code>li</code>的子节点<code>a</code>节点内部的文本，另外一个就是最后一个<code>li</code>节点内部的文本，即换行符。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以说，如果要想获取子孙节点内部的所有文本，可以直接用<code>//</code>加<code>text()</code>的方式，这样可以保证获取到最全面的文本信息，但是可能会夹杂一些换行符等特殊字符。如果想获取某些特定子孙节点下的所有文本，可以先选取到特定的子孙节点，然后再调用<code>text()</code>方法获取其内部文本，这样可以保证获取的结果是整洁的。</p>
<h2 id="属性获取"><a href="#属性获取" class="headerlink" title="属性获取"></a>属性获取</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们知道用<code>text()</code>可以获取节点内部文本，那么节点属性该怎样获取呢？其实还是用<code>@</code>符号就可以。例如，我们想获取所有<code>li</code>节点下所有<code>a</code>节点的<code>href</code>属性，代码如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line"> </div><div class="line"><span class="selector-tag">html</span> = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</div><div class="line">result = <span class="selector-tag">html</span>.xpath(<span class="string">'//li/a/@href'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们通过<code>@href</code>即可获取节点的<code>href</code>属性。注意，此处和属性匹配的方法不同，属性匹配是中括号加属性名和值来限定某个属性，如<code>[@href=&quot;link1.html&quot;]</code>，而此处的<code>@href</code>指的是获取节点的某个属性，二者需要做好区分。<br>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'link1.html</span>', <span class="symbol">'link2.html</span>', <span class="symbol">'link3.html</span>', <span class="symbol">'link4.html</span>', <span class="symbol">'link5.html</span>']</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，我们成功获取了所有<code>li</code>节点下<code>a</code>节点的<code>href</code>属性，它们以列表形式返回。</p>
<h2 id="属性多值匹配"><a href="#属性多值匹配" class="headerlink" title="属性多值匹配"></a>属性多值匹配</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;有时候，某些节点的某个属性可能有多个值，例如:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line">text = <span class="string">'''</span></div><div class="line"><span class="string">&lt;li class="li li-first"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></div><div class="line"><span class="string">'''</span></div><div class="line">html = etree.HTML(text)</div><div class="line">result = html.xpath(<span class="string">'//li[@class="li"]/a/text()'</span>)</div><div class="line">print(result)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里HTML文本中<code>li</code>节点的<code>class</code>属性有两个值<code>li</code>和<code>li-first</code>，此时如果还想用之前的属性匹配获取，就无法匹配了，此时的运行结果如下:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[]</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这时就需要用<code>contains()</code>函数了，代码可以改写如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line">text = <span class="string">'''</span></div><div class="line"><span class="string">&lt;li class="li li-first"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></div><div class="line"><span class="string">'''</span></div><div class="line">html = etree.HTML(text)</div><div class="line">result = html.xpath(<span class="string">'//li[contains(@class, "li")]/a/text()'</span>)</div><div class="line">print(result)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样通过<code>contains()</code>方法，第一个参数传入属性名称，第二个参数传入属性值，只要此属性包含所传入的属性值，就可以完成匹配了。<br>&nbsp;&nbsp;&nbsp;&nbsp;此时运行结果如下:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'first</span> item']</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;此种方式在某个节点的某个属性有多个值时经常用到，如某个节点的<code>class</code>属性通常有多个。</p>
<h2 id="多属性匹配"><a href="#多属性匹配" class="headerlink" title="多属性匹配"></a>多属性匹配</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;另外，我们可能还遇到一种情况，那就是根据多个属性确定一个节点，这时就需要同时匹配多个属性。此时可以使用运算符<code>and</code>来连接，示例如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line">text = <span class="string">'''</span></div><div class="line"><span class="string">&lt;li class="li li-first" name="item"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></div><div class="line"><span class="string">'''</span></div><div class="line">html = etree.HTML(text)</div><div class="line">result = html.xpath(<span class="string">'//li[contains(@class, "li") and @name="item"]/a/text()'</span>)</div><div class="line">print(result)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里的<code>li</code>节点又增加了一个属性<code>name</code>。要确定这个节点，需要同时根据<code>class</code>和<code>name</code>属性来选择，一个条件是<code>class</code>属性里面包含<code>li</code>字符串，另一个条件是<code>name</code>属性为<code>item</code>字符串，二者需要同时满足，需要用<code>and</code>操作符相连，相连之后置于中括号内进行条件筛选。运行结果如下:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'first</span> item']</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里的<code>and</code>其实是XPath中的运算符。另外，还有很多运算符，如<code>or</code>、<code>mod</code>等。</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">实例</th>
<th style="text-align:center">返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>or</code></td>
<td style="text-align:center">或</td>
<td style="text-align:center"><code>age=19 or age=20</code></td>
<td style="text-align:center">如果<code>age</code>是19，则返回<code>true</code>。如果<code>age</code>是21，则返回<code>false</code></td>
</tr>
<tr>
<td style="text-align:center"><code>and</code></td>
<td style="text-align:center">与</td>
<td style="text-align:center"><code>age&gt;19 and age&lt;21</code></td>
<td style="text-align:center">如果<code>age</code>是20，则返回<code>true</code>。如果<code>age</code>是18，则返回<code>false</code></td>
</tr>
<tr>
<td style="text-align:center"><code>mod</code></td>
<td style="text-align:center">计算除法的余数</td>
<td style="text-align:center"><code>5 mod 2</code></td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center"><code>+</code></td>
<td style="text-align:center">加法</td>
<td style="text-align:center"><code>6 + 4</code></td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center"><code>-</code></td>
<td style="text-align:center">减法</td>
<td style="text-align:center"><code>6 - 4</code></td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><code>*</code></td>
<td style="text-align:center">乘法</td>
<td style="text-align:center"><code>6 * 4</code></td>
<td style="text-align:center">24</td>
</tr>
<tr>
<td style="text-align:center"><code>div</code></td>
<td style="text-align:center">除法</td>
<td style="text-align:center"><code>8 div 4</code></td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><code>=</code></td>
<td style="text-align:center">等于</td>
<td style="text-align:center"><code>age=19</code></td>
<td style="text-align:center">如果<code>age</code>是19，则返回<code>true</code>。如果<code>age</code>是20，则返回<code>false</code></td>
</tr>
<tr>
<td style="text-align:center"><code>!=</code></td>
<td style="text-align:center">不等于</td>
<td style="text-align:center"><code>age!=19</code></td>
<td style="text-align:center">如果<code>age</code>是18，则返回<code>true</code>。如果<code>age</code>是19，则返回<code>false</code></td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;</code></td>
<td style="text-align:center">小于</td>
<td style="text-align:center"><code>age&lt;19</code></td>
<td style="text-align:center">如果<code>age</code>是18，则返回<code>true</code>。如果<code>age</code>是19，则返回<code>false</code></td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;=</code></td>
<td style="text-align:center">小于或等于</td>
<td style="text-align:center"><code>age&lt;=19</code></td>
<td style="text-align:center">如果<code>age</code>是19，则返回<code>true</code>。如果<code>age</code>是20，则返回<code>false</code></td>
</tr>
<tr>
<td style="text-align:center"><code>&gt;</code></td>
<td style="text-align:center">大于</td>
<td style="text-align:center"><code>age&gt;19</code></td>
<td style="text-align:center">如果<code>age</code>是20，则返回<code>true</code>。如果<code>age</code>是19，则返回<code>false</code></td>
</tr>
<tr>
<td style="text-align:center"><code>&gt;=</code></td>
<td style="text-align:center">大于或等于</td>
<td style="text-align:center"><code>age&gt;=19</code></td>
<td style="text-align:center">如果<code>age</code>是19，则返回<code>true</code>。如果<code>age</code>是18，则返回<code>false</code></td>
</tr>
</tbody>
</table>
<h2 id="按序选择"><a href="#按序选择" class="headerlink" title="按序选择"></a>按序选择</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;有时候，我们在选择的时候某些属性可能同时匹配了多个节点，但是只想要其中的某个节点，如第二个节点或者最后一个节点，这时该怎么办呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;这时可以利用中括号传入索引的方法获取特定次序的节点，示例如下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line"> </div><div class="line">text = '''</div><div class="line">&lt;div&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">         &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0"</span>&gt;&lt;a href=<span class="string">"link1.html"</span>&gt;first item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">         &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-1"</span>&gt;&lt;a href=<span class="string">"link2.html"</span>&gt;second item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">         &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-inactive"</span>&gt;&lt;a href=<span class="string">"link3.html"</span>&gt;third item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">         &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-1"</span>&gt;&lt;a href=<span class="string">"link4.html"</span>&gt;fourth item&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;</div><div class="line">         &lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"item-0"</span>&gt;&lt;a href=<span class="string">"link5.html"</span>&gt;fifth item&lt;/a&gt;</div><div class="line">     &lt;/ul&gt;</div><div class="line"> &lt;/div&gt;</div><div class="line">'''</div><div class="line">html = etree.HTML(text)</div><div class="line">result = html.xpath('<span class="comment">//li[1]/a/text()')</span></div><div class="line"><span class="keyword">print</span>(result)</div><div class="line">result = html.xpath('<span class="comment">//li[last()]/a/text()')</span></div><div class="line"><span class="keyword">print</span>(result)</div><div class="line">result = html.xpath('<span class="comment">//li[position()&lt;3]/a/text()')</span></div><div class="line"><span class="keyword">print</span>(result)</div><div class="line">result = html.xpath('<span class="comment">//li[last()-2]/a/text()')</span></div><div class="line"><span class="keyword">print</span>(result)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;第一次选择时，我们选取了第一个<code>li</code>节点，中括号中传入数字1即可。注意，这里和代码中不同，序号是以1开头的，不是以0开头。<br>&nbsp;&nbsp;&nbsp;&nbsp;第二次选择时，我们选取了最后一个<code>li</code>节点，中括号中传入<code>last()</code>即可，返回的便是最后一个<code>li</code>节点。<br>&nbsp;&nbsp;&nbsp;&nbsp;第三次选择时，我们选取了位置小于3的<code>li</code>节点，也就是位置序号为1和2的节点，得到的结果就是前两个<code>li</code>节点。<br>&nbsp;&nbsp;&nbsp;&nbsp;第四次选择时，我们选取了倒数第三个<code>li</code>节点，中括号中传入<code>last()-2</code>即可。因为<code>last()</code>是最后一个，所以<code>last()-2</code>就是倒数第三个。<br>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'first</span> item']</div><div class="line">[<span class="symbol">'fifth</span> item']</div><div class="line">[<span class="symbol">'first</span> item', <span class="symbol">'second</span> item']</div><div class="line">[<span class="symbol">'third</span> item']</div></pre></td></tr></table></figure></p>
<h2 id="节点轴选择"><a href="#节点轴选择" class="headerlink" title="节点轴选择"></a>节点轴选择</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;XPath提供了很多节点轴选择方法，包括获取子元素、兄弟元素、父元素、祖先元素等，示例如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div><div class="line"> </div><div class="line">text = '''</div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link1.html"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>&gt;</span>second item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-inactive"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>&gt;</span>third item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>&gt;</span>fourth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">'''</div><div class="line">html = etree.HTML(text)</div><div class="line">result = html.xpath('//li[1]/ancestor::*')</div><div class="line">print(result)</div><div class="line">result = html.xpath('//li[1]/ancestor::div')</div><div class="line">print(result)</div><div class="line">result = html.xpath('//li[1]/attribute::*')</div><div class="line">print(result)</div><div class="line">result = html.xpath('//li[1]/child::a[@href="link1.html"]')</div><div class="line">print(result)</div><div class="line">result = html.xpath('//li[1]/descendant::span')</div><div class="line">print(result)</div><div class="line">result = html.xpath('//li[1]/following::*[2]')</div><div class="line">print(result)</div><div class="line">result = html.xpath('//li[1]/following-sibling::*')<span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"lang-python"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"kwd"</span>&gt;</span>print<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pun"</span>&gt;</span>(<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pln"</span>&gt;</span>result<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pun"</span>&gt;</span>)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">[&lt;Element html at 0x107941808&gt;, &lt;Element body at 0x1079418c8&gt;, &lt;Element div at 0x107941908&gt;, &lt;Element ul at 0x107941948&gt;]</span></div><div class="line"><span class="meta">[&lt;Element div at 0x107941908&gt;]</span></div><div class="line">['item<span class="number">-0</span>']</div><div class="line"><span class="meta">[&lt;Element a at 0x1079418c8&gt;]</span></div><div class="line"><span class="meta">[&lt;Element span at 0x107941948&gt;]</span></div><div class="line"><span class="meta">[&lt;Element a at 0x1079418c8&gt;]</span></div><div class="line"><span class="meta">[&lt;Element li at 0x107941948&gt;, &lt;Element li at 0x107941988&gt;, &lt;Element li at 0x1079419c8&gt;, &lt;Element li at 0x107941a08&gt;]</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;第一次选择时，我们调用了<code>ancestor</code>轴，可以获取所有祖先节点。其后需要跟两个冒号，然后是节点的选择器，这里我们直接使用<code>*</code>，表示匹配所有节点，因此返回结果是第一个<code>li</code>节点的所有祖先节点，包括<code>html</code>、<code>body</code>、<code>div</code>和<code>ul</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;第二次选择时，我们又加了限定条件，这次在冒号后面加了<code>div</code>，这样得到的结果就只有<code>div</code>这个祖先节点了。<br>&nbsp;&nbsp;&nbsp;&nbsp;第三次选择时，我们调用了<code>attribute</code>轴，可以获取所有属性值，其后跟的选择器还是<code>*</code>，这代表获取节点的所有属性，返回值就是<code>li</code>节点的所有属性值。<br>&nbsp;&nbsp;&nbsp;&nbsp;第四次选择时，我们调用了<code>child</code>轴，可以获取所有直接子节点。这里我们又加了限定条件，选取<code>href</code>属性为<code>link1.html</code>的<code>a</code>节点。<br>&nbsp;&nbsp;&nbsp;&nbsp;第五次选择时，我们调用了<code>descendant</code>轴，可以获取所有子孙节点。这里我们又加了限定条件获取<code>span</code>节点，所以返回的结果只包含<code>span</code>节点而不包含<code>a</code>节点。<br>&nbsp;&nbsp;&nbsp;&nbsp;第六次选择时，我们调用了<code>following</code>轴，可以获取当前节点之后的所有节点。这里我们虽然使用的是<code>*</code>匹配，但又加了索引选择，所以只获取了第二个后续节点。<br>&nbsp;&nbsp;&nbsp;&nbsp;第七次选择时，我们调用了<code>following-sibling</code>轴，可以获取当前节点之后的所有同级节点。这里我们使用<code>*</code>匹配，所以获取了所有后续同级节点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;XPath，全称XML Path Language，即XML路径语言，它是一门在XML文档中查找信息的语言。它最初是用来搜寻XML文档的，但是它同样适用于HTML文档的搜索。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;所以在做爬虫时，我们完全可以使用XPath来做相应的信息抽取。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
      <category term="解析库" scheme="http://www.sanstylemc.cn/tags/%E8%A7%A3%E6%9E%90%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>抓取猫眼电影排行</title>
    <link href="http://www.sanstylemc.cn/2018/04/07/%E6%8A%93%E5%8F%96%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1%E6%8E%92%E8%A1%8C/"/>
    <id>http://www.sanstylemc.cn/2018/04/07/抓取猫眼电影排行/</id>
    <published>2018-04-07T12:53:31.000Z</published>
    <updated>2018-04-09T13:50:59.014Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;利用requests库和正则表达式来抓取猫眼电影TOP100的相关内容。requests比urllib使用更加方便，而且目前我还没有系统学习HTML解析库，所以这里就选用正则表达式来作为解析工具。<br><a id="more"></a></p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们提取出猫眼电影TOP100的电影名称、时间、评分、图片等信息，提取的站点URL为<code>http://maoyan.com/board/4</code></p>
<h2 id="抓取分析"><a href="#抓取分析" class="headerlink" title="抓取分析"></a>抓取分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们要抓取的目标站点为<code>http://maoyan.com/board/4</code> ,打开后便可以查看到榜单信息。<br><img src="https://github.com/sunstady/hexo/blob/master/%E6%8A%93%E5%8F%96%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1%E6%8E%92%E8%A1%8C/1.png?raw=true" alt="1"><br>&nbsp;&nbsp;&nbsp;&nbsp;排名第一的电影是霸王别姬，页面中显示的有效信息有影片名称、主演、上映时间、上映地区、评分、图片等信息。<br>将网页 滚动到最下方，可以发现有分页的列表，直接点击第2页，观察页面的URL和内容发生了怎样的变化。<br><img src="https://github.com/sunstady/hexo/blob/master/%E6%8A%93%E5%8F%96%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1%E6%8E%92%E8%A1%8C/2.png?raw=true" alt="2"><br>&nbsp;&nbsp;&nbsp;&nbsp;可以发现页面的URL变成<code>http://maoyan.com/board/4?offset=10</code> ,比之前的URL多了一个参数，那就是<code>offset=10</code>，而目前显示的结果是排行11~20名的电影，初步推断这是一个偏移量的参数。再点击下一页，发现页面的URL变成了<code>http://maoyan.com/board/4?offset=20</code> ,参数<code>offset</code>变成了20，而显示的结果是排行21~30的电影。<br>&nbsp;&nbsp;&nbsp;&nbsp;由此可以总结出规律: <code>offset</code>代表偏移量值，如果偏移量为<code>n</code>，则显示的电影序号就是<code>n+1</code>到<code>n+10</code>，每页显示10个。所以如果想获取TOP100电影，只需要分开请求10次，而10次的<code>offset</code>参数分别设置为0、10、20…100即可，这样获取不同的页面之后，再用正则表达式提取出相关信息，就可以得到TOP100的所有电影信息了。</p>
<h2 id="抓取首页"><a href="#抓取首页" class="headerlink" title="抓取首页"></a>抓取首页</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;接下来用代码实现这个过程。首先抓取第一页的内容。我们实现了<code>get_one_page()</code>方法，并给它传入<code>url</code>参数。然后将抓取的页面结果返回，再通过<code>main()</code>方法调用。初步代码实现如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span><span class="params">(url)</span>:</span></div><div class="line">    response = requests.get(url)</div><div class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</div><div class="line">        <span class="keyword">return</span> response.text</div><div class="line">    <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    url = <span class="string">'http://maoyan.com/board/4'</span></div><div class="line">    html = get_one_page(url)</div><div class="line">    print(html)</div><div class="line"> </div><div class="line">main()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样运行之后，就可以成功获取首页的源代码了。获取源代码后，就需要解析页面，提取出我们想要的信息。</p>
<h2 id="正则提取"><a href="#正则提取" class="headerlink" title="正则提取"></a>正则提取</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;接下来，回到网页看一下页面的真实源码。在开发者模式下的Network监听组件中查看源代码，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E6%8A%93%E5%8F%96%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1%E6%8E%92%E8%A1%8C/3.png?raw=true" alt="3"><br>&nbsp;&nbsp;&nbsp;&nbsp;注意，这里不要在Elements选项卡中直接查看源码，因为那里的源码可能经过Javascript操作而与原始请求不同，而是需要从Network选项卡部分查看原始请求得到的源码。<br>&nbsp;&nbsp;&nbsp;&nbsp;查看其中一个条目的源代码，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E6%8A%93%E5%8F%96%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1%E6%8E%92%E8%A1%8C/5.png?raw=true" alt="4"><br>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，一部电影信息对应的源代码是一个<code>dd</code>节点，我们用正则表达式来提取这里面的一些电影信息。首先，需要提取它的排名信息。而它的排名信息是在<code>class</code>为<code>board-index</code>的<code>i</code>节点内，这里利用非贪婪匹配来提取<code>i</code>节点内的信息，正则表达式为:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>.*?board-index.*?&gt;(.*?)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;随后需要提取电影的图片。可以看到，后面有<code>a</code>节点，其内部有两个<code>img</code>节点。经过检测后发现，第二个<code>img</code>节点的<code>data-src</code>属性是图片的链接。这里提取第二个<code>img</code>节点的<code>data-src</code>属性，正则表达式可以改写如下:<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="params">&lt;dd&gt;</span>.*?board-index.*?&gt;(.*?)<span class="params">&lt;/i&gt;</span>.*?data-src=<span class="string">"(.*?)"</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;再往后，需要提取电影的名称，它在后面的<code>p</code>节点内，<code>class</code>为<code>name</code>。所以，可以用<code>name</code>做一个标志位，然后进一步提取到期内<code>a</code>节点的正文内容，此时正则表达式改写如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;dd&gt;.*?board-index.*<span class="meta">?&gt;</span>(.*?)&lt;/i&gt;.*?data-src=<span class="string">"(.*?)"</span>.*?name.*?<span class="keyword">a</span>.*<span class="meta">?&gt;</span>(.*?)&lt;/<span class="keyword">a</span>&gt;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;再提取主演、发布时间、评分等内容时候，都是同样的原理。最后，正则表达式写为:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;dd&gt;.<span class="strong">*?board-index.*</span>?&gt;(.<span class="strong">*?)&lt;/i&gt;.*</span>?data-src="(.<span class="strong">*?)".*</span>?name.<span class="strong">*?a.*</span>?&gt;(.<span class="strong">*?)&lt;/a&gt;.*</span>?star.<span class="strong">*?&gt;(.*</span>?)&lt;/p&gt;.<span class="strong">*?releasetime.*</span>?&gt;(.<span class="strong">*?)&lt;/p&gt;.*</span>?integer.<span class="strong">*?&gt;(.*</span>?)&lt;/i&gt;.<span class="strong">*?fraction.*</span>?&gt;(.<span class="strong">*?)&lt;/i&gt;.*</span>?&lt;/dd&gt;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样一个正则表达式可以匹配一个电影的结果，里面匹配了7个信息。接下来，通过调用<code>findall()</code>方法提取出所有的内容。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，我们再定义解析页面的方法<code>parse_one_page()</code>，主要是通过正则表达式来从结果中提取出我们想要的内容，实现代码如下:<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def parse_one_page(html):</div><div class="line">    pattern = re.compile(</div><div class="line">        <span class="comment">'<span class="doctag">&lt;dd&gt;</span>.*?board-index.*?&gt;(.*?)<span class="doctag">&lt;/i&gt;</span>.*?data-src="(.*?)".*?name.*?a.*?&gt;(.*?)<span class="doctag">&lt;/a&gt;</span>.*?star.*?&gt;(.*?)<span class="doctag">&lt;/p&gt;</span>.*?releasetime.*?&gt;(.*?)<span class="doctag">&lt;/p&gt;</span>.*?integer.*?&gt;(.*?)<span class="doctag">&lt;/i&gt;</span>.*?fraction.*?&gt;(.*?)<span class="doctag">&lt;/i&gt;</span>.*?<span class="doctag">&lt;/dd&gt;</span>',</span></div><div class="line">        re.S)</div><div class="line">    items = re.findall(pattern, html)</div><div class="line">    print(items)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样就可以成功地将一页地10个电影信息都提取出来，这是一个列表形式，输出结果如下: </p>
<blockquote>
<p>[(‘1’, ‘<a href="http://p1.meituan.net/movie/20803f59291c47e1e116c11963ce019e68711.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p1.meituan.net/movie/20803f59291c47e1e116c11963ce019e68711.jpg@160w_220h_1e_1c</a>‘, ‘霸王别姬’, ‘\n                主演：张国荣,张丰毅,巩俐\n        ‘, ‘上映时间：1993-01-01(中国香港)’, ‘9.’, ‘6’), (‘2’, ‘<a href="http://p0.meituan.net/movie/__40191813__4767047.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/__40191813__4767047.jpg@160w_220h_1e_1c</a>‘, ‘肖申克的救赎’, ‘\n                主演：蒂姆·罗宾斯,摩根·弗里曼,鲍勃·冈顿\n        ‘, ‘上映时间：1994-10-14(美国)’, ‘9.’, ‘5’), (‘3’, ‘<a href="http://p0.meituan.net/movie/fc9d78dd2ce84d20e53b6d1ae2eea4fb1515304.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/fc9d78dd2ce84d20e53b6d1ae2eea4fb1515304.jpg@160w_220h_1e_1c</a>‘, ‘这个杀手不太冷’, ‘\n                主演：让·雷诺,加里·奥德曼,娜塔莉·波特曼\n        ‘, ‘上映时间：1994-09-14(法国)’, ‘9.’, ‘5’), (‘4’, ‘<a href="http://p0.meituan.net/movie/23/6009725.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/23/6009725.jpg@160w_220h_1e_1c</a>‘, ‘罗马假日’, ‘\n                主演：格利高利·派克,奥黛丽·赫本,埃迪·艾伯特\n        ‘, ‘上映时间：1953-09-02(美国)’, ‘9.’, ‘1’), (‘5’, ‘<a href="http://p0.meituan.net/movie/53/1541925.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/53/1541925.jpg@160w_220h_1e_1c</a>‘, ‘阿甘正传’, ‘\n                主演：汤姆·汉克斯,罗宾·怀特,加里·西尼斯\n        ‘, ‘上映时间：1994-07-06(美国)’, ‘9.’, ‘4’), (‘6’, ‘<a href="http://p0.meituan.net/movie/11/324629.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/11/324629.jpg@160w_220h_1e_1c</a>‘, ‘泰坦尼克号’, ‘\n                主演：莱昂纳多·迪卡普里奥,凯特·温丝莱特,比利·赞恩\n        ‘, ‘上映时间：1998-04-03’, ‘9.’, ‘5’), (‘7’, ‘<a href="http://p0.meituan.net/movie/99/678407.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/99/678407.jpg@160w_220h_1e_1c</a>‘, ‘龙猫’, ‘\n                主演：日高法子,坂本千夏,糸井重里\n        ‘, ‘上映时间：1988-04-16(日本)’, ‘9.’, ‘2’), (‘8’, ‘<a href="http://p0.meituan.net/movie/92/8212889.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/92/8212889.jpg@160w_220h_1e_1c</a>‘, ‘教父’, ‘\n                主演：马龙·白兰度,阿尔·帕西诺,詹姆斯·凯恩\n        ‘, ‘上映时间：1972-03-24(美国)’, ‘9.’, ‘3’), (‘9’, ‘<a href="http://p0.meituan.net/movie/62/109878.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/62/109878.jpg@160w_220h_1e_1c</a>‘, ‘唐伯虎点秋香’, ‘\n                主演：周星驰,巩俐,郑佩佩\n        ‘, ‘上映时间：1993-07-01(中国香港)’, ‘9.’, ‘2’), (‘10’, ‘<a href="http://p0.meituan.net/movie/9bf7d7b81001a9cf8adbac5a7cf7d766132425.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/9bf7d7b81001a9cf8adbac5a7cf7d766132425.jpg@160w_220h_1e_1c</a>‘, ‘千与千寻’, ‘\n                主演：柊瑠美,入野自由,夏木真理\n        ‘, ‘上映时间：2001-07-20(日本)’, ‘9.’, ‘3’)]</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;但是这样还不够，数据比较杂乱，我们再将匹配结果处理一下，遍历提取结果并生成字典，此时方法改写如下:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">def parse_one_page(html):</div><div class="line">    pattern = re.compile(</div><div class="line">        '&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src=<span class="string">"(.*?)"</span>.*?<span class="built_in">name</span>.*?a.*?&gt;(.*?)&lt;/a&gt;.*?star.*?&gt;(.*?)&lt;/p&gt;.*?releasetime.*?&gt;(.*?)&lt;/p&gt;.*?<span class="built_in">integer</span>.*?&gt;(.*?)&lt;/i&gt;.*?fraction.*?&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;',</div><div class="line">        re.S)</div><div class="line">    items = re.findall(pattern, html)</div><div class="line">    <span class="keyword">for</span> <span class="built_in">item</span> <span class="keyword">in</span> items:</div><div class="line">        yield &#123;</div><div class="line">            'index': <span class="built_in">item</span>[<span class="number">0</span>],</div><div class="line">            'image': <span class="built_in">item</span>[<span class="number">1</span>],</div><div class="line">            'title': <span class="built_in">item</span>[<span class="number">2</span>].strip(),</div><div class="line">            'actor': <span class="built_in">item</span>[<span class="number">3</span>].strip()[<span class="number">3</span>:] <span class="keyword">if</span> len(<span class="built_in">item</span>[<span class="number">3</span>]) &gt; <span class="number">3</span> <span class="keyword">else</span> '',</div><div class="line">            '<span class="built_in">time</span>': <span class="built_in">item</span>[<span class="number">4</span>].strip()[<span class="number">5</span>:] <span class="keyword">if</span> len(<span class="built_in">item</span>[<span class="number">4</span>]) &gt; <span class="number">5</span> <span class="keyword">else</span> '',</div><div class="line">            'score': <span class="built_in">item</span>[<span class="number">5</span>].strip() + <span class="built_in">item</span>[<span class="number">6</span>].strip()</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样就可以成功提取出电影地排名、图片、标题、演员、时间、评分等内容了，并把它赋值为一个个的字典，形成结构化数据。运行结果如下: </p>
<blockquote>
<p>{‘image’: ‘<a href="http://p1.meituan.net/movie/20803f59291c47e1e116c11963ce019e68711.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p1.meituan.net/movie/20803f59291c47e1e116c11963ce019e68711.jpg@160w_220h_1e_1c</a>‘, ‘actor’: ‘张国荣,张丰毅,巩俐’, ‘score’: ‘9.6’, ‘index’: ‘1’, ‘title’: ‘霸王别姬’, ‘time’: ‘1993-01-01(中国香港)’}<br>{‘image’: ‘<a href="http://p0.meituan.net/movie/__40191813__4767047.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/__40191813__4767047.jpg@160w_220h_1e_1c</a>‘, ‘actor’: ‘蒂姆·罗宾斯,摩根·弗里曼,鲍勃·冈顿’, ‘score’: ‘9.5’, ‘index’: ‘2’, ‘title’: ‘肖申克的救赎’, ‘time’: ‘1994-10-14(美国)’}<br>{‘image’: ‘<a href="http://p0.meituan.net/movie/fc9d78dd2ce84d20e53b6d1ae2eea4fb1515304.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/fc9d78dd2ce84d20e53b6d1ae2eea4fb1515304.jpg@160w_220h_1e_1c</a>‘, ‘actor’: ‘让·雷诺,加里·奥德曼,娜塔莉·波特曼’, ‘score’: ‘9.5’, ‘index’: ‘3’, ‘title’: ‘这个杀手不太冷’, ‘time’: ‘1994-09-14(法国)’}<br>{‘image’: ‘<a href="http://p0.meituan.net/movie/23/6009725.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/23/6009725.jpg@160w_220h_1e_1c</a>‘, ‘actor’: ‘格利高利·派克,奥黛丽·赫本,埃迪·艾伯特’, ‘score’: ‘9.1’, ‘index’: ‘4’, ‘title’: ‘罗马假日’, ‘time’: ‘1953-09-02(美国)’}<br>{‘image’: ‘<a href="http://p0.meituan.net/movie/53/1541925.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/53/1541925.jpg@160w_220h_1e_1c</a>‘, ‘actor’: ‘汤姆·汉克斯,罗宾·怀特,加里·西尼斯’, ‘score’: ‘9.4’, ‘index’: ‘5’, ‘title’: ‘阿甘正传’, ‘time’: ‘1994-07-06(美国)’}<br>{‘image’: ‘<a href="http://p0.meituan.net/movie/11/324629.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/11/324629.jpg@160w_220h_1e_1c</a>‘, ‘actor’: ‘莱昂纳多·迪卡普里奥,凯特·温丝莱特,比利·赞恩’, ‘score’: ‘9.5’, ‘index’: ‘6’, ‘title’: ‘泰坦尼克号’, ‘time’: ‘1998-04-03’}<br>{‘image’: ‘<a href="http://p0.meituan.net/movie/99/678407.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/99/678407.jpg@160w_220h_1e_1c</a>‘, ‘actor’: ‘日高法子,坂本千夏,糸井重里’, ‘score’: ‘9.2’, ‘index’: ‘7’, ‘title’: ‘龙猫’, ‘time’: ‘1988-04-16(日本)’}<br>{‘image’: ‘<a href="http://p0.meituan.net/movie/92/8212889.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/92/8212889.jpg@160w_220h_1e_1c</a>‘, ‘actor’: ‘马龙·白兰度,阿尔·帕西诺,詹姆斯·凯恩’, ‘score’: ‘9.3’, ‘index’: ‘8’, ‘title’: ‘教父’, ‘time’: ‘1972-03-24(美国)’}<br>{‘image’: ‘<a href="http://p0.meituan.net/movie/62/109878.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/62/109878.jpg@160w_220h_1e_1c</a>‘, ‘actor’: ‘周星驰,巩俐,郑佩佩’, ‘score’: ‘9.2’, ‘index’: ‘9’, ‘title’: ‘唐伯虎点秋香’, ‘time’: ‘1993-07-01(中国香港)’}<br>{‘image’: ‘<a href="http://p0.meituan.net/movie/9bf7d7b81001a9cf8adbac5a7cf7d766132425.jpg@160w_220h_1e_1c" target="_blank" rel="external">http://p0.meituan.net/movie/9bf7d7b81001a9cf8adbac5a7cf7d766132425.jpg@160w_220h_1e_1c</a>‘, ‘actor’: ‘柊瑠美,入野自由,夏木真理’, ‘score’: ‘9.3’, ‘index’: ‘10’, ‘title’: ‘千与千寻’, ‘time’: ‘2001-07-20(日本)’}<br>&nbsp;&nbsp;&nbsp;&nbsp;到此为止，我们就成功提取了单页的电影信息。</p>
</blockquote>
<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;随后，我们将提取的结果写入文件，这里直接写入到一个文本文件中。这里通过JSON库的<code>dumps()</code>方法实现字典的序列化，并指定<code>ensure_ascii</code>参数为<code>False</code>，这样可以保证输出结果是中文形式而不是Unicode编码。代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_json</span><span class="params">(content)</span>:</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'result.txt'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">        print(type(json.dumps(content)))</div><div class="line">        f.write(json.dumps(content, ensure_ascii=<span class="keyword">False</span>,).encode(<span class="string">'utf-8'</span>))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;通过调用<code>write_to_json()</code>方法即可实现将字典写入到文本文件的过程，此处的<code>content</code>参数就是一部电影的提取结果，是一个字典。</p>
<h2 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;最后，实现<code>main()</code>方法来调用前面实现的方法，将单页的电影结果写入到文件中。相关代码如下:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span></span><span class="symbol">:</span></div><div class="line">    url = <span class="string">'http://maoyan.com/board/4'</span></div><div class="line">    html = get_one_page(url)</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html)<span class="symbol">:</span></div><div class="line">        write_to_json(item)</div></pre></td></tr></table></figure></p>
<h2 id="分页爬取"><a href="#分页爬取" class="headerlink" title="分页爬取"></a>分页爬取</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;因为我们需要抓取的是TOP100电影，所以还需要遍历一下，给这个链接传入<code>offset</code>参数，实现其他90部电影的爬取，此时添加如下调用即可:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">11</span>):</div><div class="line">        main(<span class="built_in">offset</span>=i * <span class="number">10</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里还需要将<code>main()</code>方法修改一下，接收一个<code>offset</code>值作为偏移量，然后构造URL进行爬取。实现代码如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def main(<span class="built_in">offset</span>):</div><div class="line">    url = <span class="string">'http://maoyan.com/board/4?offset='</span> + str(<span class="built_in">offset</span>)</div><div class="line">    html = get_one_page(url)</div><div class="line">    <span class="keyword">for</span> <span class="keyword">item</span> <span class="keyword">in</span> parse_one_page(html):</div><div class="line">        print(<span class="keyword">item</span>)</div><div class="line">        write_to_file(<span class="keyword">item</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;到此为止，我们的猫眼电影TOP100的爬虫就全部完成了，再稍微整理下，完整的代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        headers = &#123;</div><div class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36'</span></div><div class="line">        &#125;</div><div class="line">        response = requests.get(url, headers=headers)</div><div class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</div><div class="line">            <span class="keyword">return</span> response.text</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    <span class="keyword">except</span> RequestException:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_one_page</span><span class="params">(html)</span>:</span></div><div class="line">    pattern = re.compile(<span class="string">'&lt;dd&gt;.*?board-index.*?&gt;(\d+)&lt;/i&gt;.*?data-src="(.*?)".*?name"&gt;&lt;a'</span></div><div class="line">                         + <span class="string">'.*?&gt;(.*?)&lt;/a&gt;.*?star"&gt;(.*?)&lt;/p&gt;.*?releasetime"&gt;(.*?)&lt;/p&gt;'</span></div><div class="line">                         + <span class="string">'.*?integer"&gt;(.*?)&lt;/i&gt;.*?fraction"&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;'</span>, re.S)</div><div class="line">    items = re.findall(pattern, html)</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</div><div class="line">        <span class="keyword">yield</span> &#123;</div><div class="line">            <span class="string">'index'</span>: item[<span class="number">0</span>],</div><div class="line">            <span class="string">'image'</span>: item[<span class="number">1</span>],</div><div class="line">            <span class="string">'title'</span>: item[<span class="number">2</span>],</div><div class="line">            <span class="string">'actor'</span>: item[<span class="number">3</span>].strip()[<span class="number">3</span>:],</div><div class="line">            <span class="string">'time'</span>: item[<span class="number">4</span>].strip()[<span class="number">5</span>:],</div><div class="line">            <span class="string">'score'</span>: item[<span class="number">5</span>] + item[<span class="number">6</span>]</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_file</span><span class="params">(content)</span>:</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'result.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(json.dumps(content, ensure_ascii=<span class="keyword">False</span>) + <span class="string">'\n'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset)</span>:</span></div><div class="line">    url = <span class="string">'http://maoyan.com/board/4?offset='</span> + str(offset)</div><div class="line">    html = get_one_page(url)</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</div><div class="line">        print(item)</div><div class="line">        write_to_file(item)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        main(offset=i * <span class="number">10</span>)</div><div class="line">        time.sleep(<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;现在猫眼多了反爬虫，如果速度过快，则会无响应，所以这里又增加了一个延时等待。</p>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;最后，我们运行一下代码，输出结果类似如下:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;'index': '1', 'image': 'http://p1.meituan.net/movie/<span class="number">2080</span>3f<span class="number">5929</span>1c47e1e116c<span class="number">1196</span>3ce019e<span class="number">6871</span>1.jpg@160w_220h_1e_1c', 'title': '霸王别姬', 'actor': '张国荣,张丰毅,巩俐', 'time': '<span class="number">1993-01-01</span>(中国香港)', 'score': '9.6'&#125;</div><div class="line">&#123;'index': '2', 'image': 'http://p0.meituan.net/movie/__<span class="number">40191813</span>__<span class="number">476704</span>7.jpg@160w_220h_1e_1c', 'title': '肖申克的救赎', 'actor': '蒂姆·罗宾斯,摩根·弗里曼,鲍勃·冈顿', 'time': '<span class="number">1994-10-14</span>(美国)', 'score': '9.5'&#125;</div><div class="line">...</div><div class="line">&#123;'index': '98', 'image': 'http://p0.meituan.net/movie/76/<span class="number">707338</span>9.jpg@160w_220h_1e_1c', 'title': '东京物语', 'actor': '笠智众,原节子,杉村春子', 'time': '<span class="number">1953-11-03</span>(日本)', 'score': '9.1'&#125;</div><div class="line">&#123;'index': '99', 'image': 'http://p0.meituan.net/movie/52/<span class="number">342029</span>3.jpg@160w_220h_1e_1c', 'title': '我爱你', 'actor': '宋在河,李彩恩,吉海延', 'time': '<span class="number">2011-02-17</span>(韩国)', 'score': '9.0'&#125;</div><div class="line">&#123;'index': '100', 'image': 'http://p1.meituan.net/movie/__<span class="number">44335138</span>__<span class="number">847077</span>9.jpg@160w_220h_1e_1c', 'title': '迁徙的鸟', 'actor': '雅克·贝汉,菲利普·拉波洛,Philippe Labro', 'time': '<span class="number">2001-12-12</span>(法国)', 'score': '9.1'&#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里省略了中间的部分输出结果。可以看到，这样就成功地把TOP100的电影信息爬取下来了。<br>&nbsp;&nbsp;&nbsp;&nbsp;这时我们再看下文本文件，结果如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E6%8A%93%E5%8F%96%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1%E6%8E%92%E8%A1%8C/4.png?raw=true" alt="4"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;利用requests库和正则表达式来抓取猫眼电影TOP100的相关内容。requests比urllib使用更加方便，而且目前我还没有系统学习HTML解析库，所以这里就选用正则表达式来作为解析工具。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://www.sanstylemc.cn/2018/04/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://www.sanstylemc.cn/2018/04/07/正则表达式/</id>
    <published>2018-04-07T09:21:00.000Z</published>
    <updated>2018-04-07T10:07:36.658Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;打开开源中国提供的正则表达式测试工具–&gt;<a href="http://tool.oschina.net/regex/" target="_blank" rel="external">在线正则表达式测试</a>，输入待匹配的文本，然后选择常用的正则表达式，就可以得出相应的匹配结果了。例如，这里输入待匹配的文本如下: </p>
<blockquote>
<p>Hello, my phone number is 086+18845658121 and email is sunstady@gmail.com, and my website is <a href="http://sanstylemc.cn" target="_blank" rel="external">http://sanstylemc.cn</a></p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这段字符串中包含了一个电话号码和一个电子邮件，接下来就尝试用正则表达式提取出来，如图所示。<br><a id="more"></a><br><img src="https://github.com/sunstady/hexo/blob/master/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1.png?raw=true" alt="1"><br>&nbsp;&nbsp;&nbsp;&nbsp;在网页右侧选择”匹配Email地址”，就可以看到下方出现了文本中的E-mail。如果选择”匹配网址URL”，就可以看到下方出现了文本中的URL。<br>&nbsp;&nbsp;&nbsp;&nbsp;其实，这里就是用了正则表达式匹配，也就是用一定的规则将特定的文本提取出来。比如，电子邮件开头是一段字符串，然后是一个@符号，最后是某个域名，这是有特定的组成格式的。另外，对于URL，开头是协议类型，然后是冒号加双斜线，最后是域名加路径。<br>&nbsp;&nbsp;&nbsp;&nbsp;对于URL来说，可以用下面的正则表达式匹配: </p>
<blockquote>
<p>[a-zA-z]+://[^\s]*</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;用这个正则表达式去匹配一个字符串，如果这个字符串中包含类似URL的文本，那就会被提取出来。<br>&nbsp;&nbsp;&nbsp;&nbsp;这个正则表达式看上去是乱糟糟的一团，其实不然，这里面都是有特定的语法规则的。比如，<code>a-z</code>代表匹配任意的小写字母，<code>\s</code>表示匹配任意的空白字符，<code>*</code>就代表匹配前面的字符任意多个，这一长串的正则表达式就是这么多匹配规则的组合。<br>&nbsp;&nbsp;&nbsp;&nbsp;写好正则表达式后，就可以拿它去一个长字符串里匹配查找了。不论这个字符串里面有什么，只要符合我们写的规则，统统可以找出来。对于网页来说，如果想找出网页源码里有多少个URL，用匹配URL的正则表达式去匹配即可。<br>&nbsp;&nbsp;&nbsp;&nbsp;下面是常用的匹配规则。</p>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\w</td>
<td style="text-align:center">匹配字母、数字及下划线</td>
</tr>
<tr>
<td style="text-align:center">\W</td>
<td style="text-align:center">匹配不是字母、数字及下划线的字符</td>
</tr>
<tr>
<td style="text-align:center">\s</td>
<td style="text-align:center">匹配任意空白字符，等价于[\t\n\r\f]</td>
</tr>
<tr>
<td style="text-align:center">\S</td>
<td style="text-align:center">匹配任意非空字符</td>
</tr>
<tr>
<td style="text-align:center">\d</td>
<td style="text-align:center">匹配任意数字，等价于[0-9]</td>
</tr>
<tr>
<td style="text-align:center">\D</td>
<td style="text-align:center">匹配任意非数字的字符</td>
</tr>
<tr>
<td style="text-align:center">\A</td>
<td style="text-align:center">匹配字符串开头</td>
</tr>
<tr>
<td style="text-align:center">\Z</td>
<td style="text-align:center">匹配字符串结尾，如果存在换行，只匹配到换行前的结束字符串</td>
</tr>
<tr>
<td style="text-align:center">\z</td>
<td style="text-align:center">匹配字符串结尾，如果存在换行，同时还会匹配换行符</td>
</tr>
<tr>
<td style="text-align:center">\G</td>
<td style="text-align:center">匹配最后匹配完成的位置</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td style="text-align:center">匹配一个换行符</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td style="text-align:center">匹配一个制表符</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">匹配一行字符串的开头</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:center">匹配一行字符串的结尾</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符</td>
</tr>
<tr>
<td style="text-align:center">[…]</td>
<td style="text-align:center">用来表示一组字符，单独列出，比如[amk]匹配a、m或k</td>
</tr>
<tr>
<td style="text-align:center">[^…]</td>
<td style="text-align:center">不在[]中的字符，比如[^abc]匹配除了a、b、c之外的字符</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">匹配0个或多个表达式</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">匹配1个或多个表达式</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:center">匹配0个或1个前面的正则表达式定义的片段，非贪婪方式</td>
</tr>
<tr>
<td style="text-align:center">{n}</td>
<td style="text-align:center">精确匹配n个前面的表达式</td>
</tr>
<tr>
<td style="text-align:center">{n,m}</td>
<td style="text-align:center">匹配n到m次由前面正则表达式定义的片段，贪婪方式</td>
</tr>
<tr>
<td style="text-align:center">a\b</td>
<td style="text-align:center">匹配a或b</td>
</tr>
<tr>
<td style="text-align:center">()</td>
<td style="text-align:center">匹配括号内的表达式，也表示一个组</td>
</tr>
</tbody>
</table>
<h2 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;向它传入要匹配的字符串以及正则表达式，就可以检测这个正则表达式是否匹配字符串。<br>&nbsp;&nbsp;&nbsp;&nbsp;match()方法会尝试从字符串的起始位置匹配正则表达式，如果匹配，就返回匹配成功的结果；如果不匹配，就返回None。示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import re</div><div class="line"> </div><div class="line"><span class="attribute">content</span> = <span class="string">'Hello 123 4567 World_This is a Regex Demo'</span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(len(content)</span></span>)</div><div class="line">result = re.match(<span class="string">'^Hello\s\d\d\d\s\d&#123;4&#125;\s\w&#123;10&#125;'</span>, <span class="attribute">content</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result.group()</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result.span()</span></span>)</div></pre></td></tr></table></figure></p>
<p>运行结果如下:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">41</span></div><div class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">25</span>), match='Hello <span class="number">123</span> <span class="number">4567</span> World_This'&gt;</div><div class="line">Hello <span class="number">123</span> <span class="number">4567</span> World_This</div><div class="line">(<span class="number">0</span>, <span class="number">25</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里首先声明了一个字符串，其中包含英文字母、空白字符、数字等。接下来，我们写一个正则表达式。<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^Hello<span class="tag">\<span class="name">s</span></span><span class="tag">\<span class="name">d</span></span><span class="tag">\<span class="name">d</span></span><span class="tag">\<span class="name">d</span></span><span class="tag">\<span class="name">s</span></span><span class="tag">\<span class="name">d</span><span class="string">&#123;4&#125;</span></span><span class="tag">\<span class="name">s</span></span><span class="tag">\<span class="name">w</span><span class="string">&#123;10&#125;</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;用它来匹配这个长字符串。开头的<code>^</code>是匹配字符串的开头，也就是以<code>Hello</code>开头；然后<code>\s</code>匹配空白字符，用来匹配目标字符串的空格；<code>\d</code>匹配数字，3个<code>\d</code>匹配<code>123</code>；然后再写1个<code>\s</code>匹配空格；后面还有<code>4567</code>，我们其实可以依然用4个<code>\d</code>来匹配，但是这么写比较烦琐，所以后面可以跟<code>{4}</code>以代表匹配前面的规则4次，也就是匹配4个数字；然后后面再紧接1个空白字符，最后<code>\w{10}</code>匹配10个字母及下划线。我们注意到，这里其实并没有把目标字符串匹配完，不过这样依然可以进行匹配，只不过匹配结果短一点而已。<br>&nbsp;&nbsp;&nbsp;&nbsp;而在match()方法中，第一个参数传入了正则表达式，第二个参数传入了要匹配的字符串。<br>&nbsp;&nbsp;&nbsp;&nbsp;打印输出结果，可以看到结果是<code>SRE_Match()</code>对象，这证明成功匹配。该对象有两个方法: <code>group()</code>方法可以输出匹配到的内容，结果是<code>Hello 123 4567 World_This</code>，这恰好是正则表达式规则所匹配的内容；<code>span()</code>方法可以输出匹配的范围，结果是<code>(0, 25)</code>，这就是匹配到的结果字符串在原字符串中的位置范围。</p>
<h3 id="匹配目标"><a href="#匹配目标" class="headerlink" title="匹配目标"></a><code>匹配目标</code></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;刚才我们用match()方法可以得到匹配到的字符串内容，但是如果想从字符串中提取一部分内容，该怎么办呢？就像最前面的实例一样，从一段文本中提取出邮件或电话号码等内容。<br>&nbsp;&nbsp;&nbsp;&nbsp;这里可以使用<code>()</code>括号将想提取的子字符串括起来。<code>()</code>实际上标记了一个子表达式的开始和结束位置，被标记的每个子表达式会依次对应每一个分组，调用<code>group()</code>方法传入分组的索引即可获取提取的结果。示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import re</div><div class="line"> </div><div class="line"><span class="attribute">content</span> = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></div><div class="line">result = re.match(<span class="string">'^Hello\s(\d+)\sWorld'</span>, <span class="attribute">content</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result.group()</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result.group(<span class="number">1</span>)</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result.span()</span></span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们想把字符串中的<code>1234567</code>提取出来，此时可以将数字部分的正则表达式用()括起来，然后调用了<code>group(1)</code>获取匹配结果。<br>运行结果如下:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">19</span>), match='Hello <span class="number">1234567</span> World'&gt;</div><div class="line">Hello <span class="number">1234567</span> World</div><div class="line"><span class="number">1234567</span></div><div class="line">(<span class="number">0</span>, <span class="number">19</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，我们成功得到了<code>1234567</code>。这里用的是<code>group(1)</code>，它与<code>group()</code>有所不同，后者会输出完整的匹配结果，而前者会输出第一个被<code>()</code>包围的匹配结果。假如正则表达式后面还有<code>()</code>包括的内容，那么可以依次用<code>group(2)</code>、<code>group(3)</code>等来获取。</p>
<h3 id="通用匹配"><a href="#通用匹配" class="headerlink" title="通用匹配"></a><code>通用匹配</code></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;刚才我们写的正则表达式其实比较复杂，出现空白字符我们就写<code>\s</code>匹配，出现数字我们就用<code>\d</code>匹配，这样的工作量非常大。其实完全没必要这么做，因为还有一个万能匹配可以用，那就是<code>.*</code>（点星）。其中<code>.</code>（点）可以匹配任意字符（除换行符），<code>*</code>（星）代表匹配前面的字符无限次，所以它们组合在一起就可以匹配任意字符了。有了它，我们就不用挨个字符地匹配了。<br>&nbsp;&nbsp;&nbsp;&nbsp;接着上面的例子，我们可以改写一下正则表达式:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import re</div><div class="line"> </div><div class="line"><span class="attribute">content</span> = <span class="string">'Hello 123 4567 World_This is a Regex Demo'</span></div><div class="line">result = re.match(<span class="string">'^Hello.*Demo$'</span>, <span class="attribute">content</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result.group()</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result.span()</span></span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们将中间部分直接省略，全部用<code>.*</code>来代替，最后加一个结尾字符串就好了。运行结果如下:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">41</span>), match='Hello <span class="number">123</span> <span class="number">4567</span> World_This is a Regex Demo'&gt;</div><div class="line">Hello <span class="number">123</span> <span class="number">4567</span> World_This is a Regex Demo</div><div class="line">(<span class="number">0</span>, <span class="number">41</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，<code>group()</code>方法输出了匹配的全部字符串，也就是说我们写的正则表达式匹配到了目标字符串的全部内容；<code>span()</code>方法输出<code>(0, 41)</code>，这是整个字符串的长度。<br>&nbsp;&nbsp;&nbsp;&nbsp;因此，我们可以用<code>.*</code>简化正则表达式的书写。</p>
<h3 id="贪婪与非贪婪"><a href="#贪婪与非贪婪" class="headerlink" title="贪婪与非贪婪"></a><code>贪婪与非贪婪</code></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;使用上面的<code>.*</code>时，可能有时候匹配到的并不是我们想要的结果。看下面的例子:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import re</div><div class="line"> </div><div class="line"><span class="attribute">content</span> = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></div><div class="line">result = re.match(<span class="string">'^He.*(\d+).*Demo$'</span>, <span class="attribute">content</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result.group(<span class="number">1</span>)</span></span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们依然想获取中间的数字，所以中间依然写的是<code>(\d+)</code>。而数字两侧由于内容比较杂乱，所以想省略来写，都写成<code>.*</code>。最后，组成<code>^He.*(\d+).*Demo$</code>，看样子并没有什么问题。我们看下运行结果:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">40</span>), match='Hello <span class="number">1234567</span> World_This is a Regex Demo'&gt;</div><div class="line"><span class="number">7</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;发现我们只得到数字7。<br>&nbsp;&nbsp;&nbsp;&nbsp;这里就涉及一个贪婪与非贪婪匹配的问题了。在贪婪匹配下，<code>.*</code>会匹配尽可能多的字符。正则表达式中<code>.*</code>后面是<code>\d+</code>，也就是至少一个数字，并没有指定具体多少个数字，因此，<code>.*</code>就尽可能匹配多的字符，这里就把<code>123456</code>匹配了，给<code>\d+</code>留下一个可满足条件的数字<code>7</code>，最后得到的内容就只有数字<code>7</code>了。<br>&nbsp;&nbsp;&nbsp;&nbsp;但这很明显会给我们带来很大的不便。有时候，匹配结果会莫名其妙少了一部分内容。其实，这里只需要使用非贪婪匹配就好了。非贪婪匹配的写法是<code>.*?</code>，多了一个<code>?</code>，那么它可以达到怎样的效果？我们再用实例看一下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import re</div><div class="line"> </div><div class="line"><span class="attribute">content</span> = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></div><div class="line">result = re.match(<span class="string">'^He.*?(\d+).*Demo$'</span>, <span class="attribute">content</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result.group(<span class="number">1</span>)</span></span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们只是将第一个<code>.*</code>改成了<code>.*?</code>，转变为非贪婪匹配。结果如下:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">40</span>), match='Hello <span class="number">1234567</span> World_This is a Regex Demo'&gt;</div><div class="line"><span class="number">1234567</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;此时就可以成功获取<code>1234567</code>了。原因可想而知，贪婪匹配是尽可能匹配多的字符，非贪婪匹配就是尽可能匹配少的字符。当<code>.*?</code>匹配到<code>Hello</code>后面的空白字符时，再往后的字符就是数字了，而<code>\d+</code>恰好可以匹配，那么这里<code>.*?</code>就不再进行匹配，交给<code>\d+</code>去匹配后面的数字。所以这样<code>.*?</code>匹配了尽可能少的字符，<code>\d+</code>的结果就是<code>1234567</code>了。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以说，在做匹配的时候，字符串中间尽量使用非贪婪匹配，也就是用<code>.*?</code>来代替<code>.*</code>，以免出现匹配结果缺失的情况。<br>&nbsp;&nbsp;&nbsp;&nbsp;但这里需要注意，如果匹配的结果在字符串结尾，.*?就有可能匹配不到任何内容了，因为它会匹配尽可能少的字符。例如:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import re</div><div class="line"> </div><div class="line"><span class="attribute">content</span> = <span class="string">'http://weibo.com/comment/kEraCN'</span></div><div class="line">result1 = re.match(<span class="string">'http.*?comment/(.*?)'</span>, <span class="attribute">content</span>)</div><div class="line">result2 = re.match(<span class="string">'http.*?comment/(.*)'</span>, <span class="attribute">content</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'result1'</span>, result1.group(<span class="number">1</span>)</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'result2'</span>, result2.group(<span class="number">1</span>)</span></span>)</div></pre></td></tr></table></figure></p>
<p>运行结果如下:<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">result1</span> </div><div class="line">result2 kEraCN</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以观察到，<code>.*?</code>没有匹配到任何结果，而<code>.*</code>则尽量匹配多的内容，成功得到了匹配结果。</p>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a><code>修饰符</code></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。我们用实例来看一下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">content = <span class="string">'''Hello 1234567 World_This</span></div><div class="line"><span class="string">is a Regex Demo</span></div><div class="line"><span class="string">'''</span></div><div class="line">result = re.match(<span class="string">'^He.*?(\d+).*?Demo$'</span>, content)</div><div class="line">print(result.group(<span class="number">1</span>))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;和上面的例子相仿，我们在字符串中加了换行符，正则表达式还是一样的，用来匹配其中的数字。看一下运行结果:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">AttributeError Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>)</div><div class="line">&lt;ipython-<span class="keyword">input</span><span class="number">-18</span>-c7d232b39645&gt; <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;()</div><div class="line">      <span class="number">5</span> <span class="string">'''</span></div><div class="line"><span class="string">      6 result = re.match('</span>^He.*?(\d+).*?Demo$<span class="string">', content)</span></div><div class="line"><span class="string">----&gt; 7 print(result.group(1))</span></div><div class="line"><span class="string"> </span></div><div class="line"><span class="string">AttributeError: '</span>NoneType<span class="string">' object has no attribute '</span><span class="keyword">group</span><span class="string">'</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行直接报错，也就是说正则表达式没有匹配到这个字符串，返回结果为<code>None</code>，而我们又调用了<code>group()</code>方法导致<code>AttributeError</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;那么，为什么加了一个换行符，就匹配不到了呢？这是因为<code>\.</code>匹配的是除换行符之外的任意字符，当遇到换行符时，<code>.*?</code>就不能匹配了，所以导致匹配失败。这里只需加一个修饰符<code>re.S</code>，即可修正这个错误:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">result</span> = re.match(<span class="string">'^He.*?(\d+).*?Demo$'</span>, content, re.S)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这个修饰符的作用是使.匹配包括换行符在内的所有字符。此时运行结果如下:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1234567</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这个<code>re.S</code>在网页匹配中经常用到。因为HTML节点经常会有换行，加上它，就可以匹配节点与节点之间的换行了。<br>&nbsp;&nbsp;&nbsp;&nbsp;另外，还有一些修饰符，在必要的情况下也可以使用。</p>
<table>
<thead>
<tr>
<th style="text-align:center">修饰符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">re.I</td>
<td style="text-align:center">使匹配对大小写不敏感</td>
</tr>
<tr>
<td style="text-align:center">re.L</td>
<td style="text-align:center">做本地化识别（locale-aware）匹配</td>
</tr>
<tr>
<td style="text-align:center">re.M</td>
<td style="text-align:center">多行匹配，影响^和$</td>
</tr>
<tr>
<td style="text-align:center">re.S</td>
<td style="text-align:center">使.匹配包括换行在内的所有字符</td>
</tr>
<tr>
<td style="text-align:center">re.U</td>
<td style="text-align:center">根据Unicode字符集解析字符。这个标志影响\w、\W、 \b和\B</td>
</tr>
<tr>
<td style="text-align:center">re.X</td>
<td style="text-align:center">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</td>
</tr>
</tbody>
</table>
<p>在网页匹配中，较为常用的有<code>re.S</code>和<code>re.I</code>。</p>
<h3 id="转义匹配"><a href="#转义匹配" class="headerlink" title="转义匹配"></a><code>转义匹配</code></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我们知道正则表达式定义了许多匹配模式，如<code>.</code>匹配除换行符以外的任意字符，但是如果目标字符串里面就包含<code>.</code>，那该怎么办呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;这里就需要用到转义匹配了，示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import re</div><div class="line"> </div><div class="line"><span class="attribute">content</span> = <span class="string">'(百度)www.baidu.com'</span></div><div class="line">result = re.match(<span class="string">'\(百度\)www\.baidu\.com'</span>, <span class="attribute">content</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;当遇到用于正则匹配模式的特殊字符时，在前面加反斜线转义一下即可。例如.就可以用.来匹配，运行结果如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">_sre.SRE_Match</span> <span class="attr">object</span>; <span class="attr">span</span>=<span class="string">(0,</span> <span class="attr">17</span>), <span class="attr">match</span>=<span class="string">'(百度)www.baidu.com'</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以看到，这里成功匹配到了原字符串。</p>
<h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;前面提到过，<code>match()</code>方法是从字符串的开头开始匹配的，一旦开头不匹配，那么整个匹配就失败了。我们看下面的例子:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import re</div><div class="line"> </div><div class="line"><span class="attribute">content</span> = <span class="string">'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'</span></div><div class="line">result = re.match(<span class="string">'Hello.*?(\d+).*?Demo'</span>, <span class="attribute">content</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里的字符串以<code>Extra</code>开头，但是正则表达式以<code>Hello</code>开头，整个正则表达式是字符串的一部分，但是这样匹配是失败的。运行结果如下:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">None</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;因为<code>match()</code>方法在使用时需要考虑到开头的内容，这在做匹配时并不方便。它更适合用来检测某个字符串是否符合某个正则表达式的规则。<br>&nbsp;&nbsp;&nbsp;&nbsp;这里就有另外一个方法<code>search()</code>，它在匹配时会扫描整个字符串，然后返回第一个成功匹配的结果。也就是说，正则表达式可以是字符串的一部分，在匹配时，<code>search()</code>方法会依次扫描字符串，直到找到第一个符合规则的字符串，然后返回匹配内容，如果搜索完了还没有找到，就返回<code>None</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;我们把上面代码中的<code>match()</code>方法修改成<code>search()</code>，再看下运行结果:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;_sre.SRE_Match object; span=(<span class="number">13</span>, <span class="number">53</span>), match='Hello <span class="number">1234567</span> World_This is a Regex Demo'&gt;</div><div class="line"><span class="number">1234567</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这时就得到了匹配结果。<br>&nbsp;&nbsp;&nbsp;&nbsp;因此，为了匹配方便，我们可以尽量使用<code>search()</code>方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;下面再用几个实例来看看<code>search()</code>方法的用法。<br>&nbsp;&nbsp;&nbsp;&nbsp;首先，这里有一段待匹配的HTML文本，接下来写几个正则表达式实例来实现相应信息的提取:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">html = '''<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"songs-list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>经典老歌<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"introduction"</span>&gt;</span></div><div class="line">        经典老歌列表</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">"2"</span>&gt;</span>一路上有你<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">"7"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/2.mp3"</span> <span class="attr">singer</span>=<span class="string">"任贤齐"</span>&gt;</span>沧海一声笑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">"4"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3.mp3"</span> <span class="attr">singer</span>=<span class="string">"齐秦"</span>&gt;</span>往事随风<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">"6"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/4.mp3"</span> <span class="attr">singer</span>=<span class="string">"beyond"</span>&gt;</span>光辉岁月<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/5.mp3"</span> <span class="attr">singer</span>=<span class="string">"陈慧琳"</span>&gt;</span>记事本<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-view</span>=<span class="string">"5"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/6.mp3"</span> <span class="attr">singer</span>=<span class="string">"邓丽君"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>但愿人长久<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'''</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以观察到，<code>ul</code>节点里有许多<code>li</code>节点，其中<code>li</code>节点中有的包含<code>a</code>节点，有的不包含<code>a</code>节点，<code>a</code>节点还有一些相应的属性——超链接和歌手名。<br>&nbsp;&nbsp;&nbsp;&nbsp;首先，我们尝试提取<code>class</code>为<code>active</code>的<code>li</code>节点内部的超链接包含的歌手名和歌名，此时需要提取第三个<code>li</code>节点下a节点的<code>singer</code>属性和文本。<br>&nbsp;&nbsp;&nbsp;&nbsp;此时正则表达式可以以<code>li</code>开头，然后寻找一个标志符<code>active</code>，中间的部分可以用<code>.*?</code>来匹配。接下来，要提取<code>singer</code>这个属性值，所以还需要写入<code>singer=&quot;(.*?)&quot;</code>，这里需要提取的部分用小括号括起来，以便用<code>group()</code>方法提取出来，它的两侧边界是双引号。然后还需要匹配<code>a</code>节点的文本，其中它的左边界是<code>&gt;</code>，右边界是<code>&lt;/a&gt;</code>。然后目标内容依然用<code>(.*?)</code>来匹配，所以最后的正则表达式就变成了:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;li.*?active.*?<span class="attribute">singer</span>=<span class="string">"(.*?)"</span>&gt;(.*?)&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;然后再调用<code>search()</code>方法，它会搜索整个HTML文本，找到符合正则表达式的第一个内容返回。<br>&nbsp;&nbsp;&nbsp;&nbsp;另外，由于代码有换行，所以这里第三个参数需要传入<code>re.S</code>。整个匹配代码如下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">result = re.<span class="keyword">search</span>('&lt;<span class="keyword">li</span>.*?active.*?singer=<span class="string">"(.*?)"</span>&gt;(.*?)&lt;/a&gt;', html, re.S)</div><div class="line"><span class="keyword">if</span> result:</div><div class="line">    <span class="keyword">print</span>(result.<span class="built_in">group</span>(1), result.<span class="built_in">group</span>(2))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;由于需要获取的歌手和歌名都已经用小括号包围，所以可以用<code>group()</code>方法获取。<br>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">齐秦 往事随风</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，这正是<code>class</code>为<code>active</code>的<code>li</code>节点内部的超链接包含的歌手名和歌名。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果正则表达式不加<code>active</code>（也就是匹配不带<code>class</code>为<code>active</code>的节点内容），那会怎样呢？我们将正则表达式中的<code>active</code>去掉，代码改写如下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">result = re.<span class="keyword">search</span>('&lt;<span class="keyword">li</span>.*?singer=<span class="string">"(.*?)"</span>&gt;(.*?)&lt;/a&gt;', html, re.S)</div><div class="line"><span class="keyword">if</span> result:</div><div class="line">    <span class="keyword">print</span>(result.<span class="built_in">group</span>(1), result.<span class="built_in">group</span>(2))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;由于<code>search()</code>方法会返回第一个符合条件的匹配目标，这里结果就变了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">任贤齐 沧海一声笑</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;把<code>active</code>标签去掉后，从字符串开头开始搜索，此时符合条件的节点就变成了第二个<code>li</code>节点，后面的就不再匹配，所以运行结果就变成第二个<code>li</code>节点中的内容。<br>&nbsp;&nbsp;&nbsp;&nbsp;注意，在上面的两次匹配中，<code>search()</code>方法的第三个参数都加了<code>re.S</code>，这使得<code>.*?</code>可以匹配换行，所以含有换行的<code>li</code>节点被匹配到了。如果我们将其去掉，结果会是什么？代码如下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">result = re.<span class="keyword">search</span>('&lt;<span class="keyword">li</span>.*?singer=<span class="string">"(.*?)"</span>&gt;(.*?)&lt;/a&gt;', html)</div><div class="line"><span class="keyword">if</span> result:</div><div class="line">    <span class="keyword">print</span>(result.<span class="built_in">group</span>(1), result.<span class="built_in">group</span>(2))</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">beyond </span>光辉岁月</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，结果变成了第四个<code>li</code>节点的内容。这是因为第二个和第三个<code>li</code>节点都包含了换行符，去掉<code>re.S</code>之后，<code>.*?</code>已经不能匹配换行符，所以正则表达式不会匹配到第二个和第三个<code>li</code>节点，而第四个<code>li</code>节点中不包含换行符，所以成功匹配。<br>&nbsp;&nbsp;&nbsp;&nbsp;由于绝大部分的HTML文本都包含了换行符，所以尽量都需要加上<code>re.S</code>修饰符，以免出现匹配不到的问题。</p>
<h2 id="findall"><a href="#findall" class="headerlink" title="findall()"></a>findall()</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;前面我们介绍了<code>search()</code>方法的用法，它可以返回匹配正则表达式的第一个内容，但是如果想要获取匹配正则表达式的所有内容，那该怎么办呢？这时就要借助<code>findall()</code>方法了。该方法会搜索整个字符串，然后返回匹配正则表达式的所有内容。<br>还是上面的HTML文本，如果想获取所有<code>a</code>节点的超链接、歌手和歌名，就可以将<code>search()</code>方法换成<code>findall()</code>方法。如果有返回结果的话，就是列表类型，所以需要遍历一下来依次获取每组内容。代码如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">results = re.findall(<span class="string">'&lt;li.*?href="(.*?)".*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>, <span class="selector-tag">html</span>, re.S)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(results)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(type(results)</span></span>)</div><div class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</div><div class="line">    print(result)</div><div class="line">    print(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>])</div></pre></td></tr></table></figure></p>
<p>运行结果如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[(<span class="string">'/2.mp3'</span>, <span class="string">'任贤齐'</span>, <span class="string">'沧海一声笑'</span>), (<span class="string">'/3.mp3'</span>, <span class="string">'齐秦'</span>, <span class="string">'往事随风'</span>), (<span class="string">'/4.mp3'</span>, <span class="string">'beyond'</span>, <span class="string">'光辉岁月'</span>), (<span class="string">'/5.mp3'</span>, <span class="string">'陈慧琳'</span>, <span class="string">'记事本'</span>), (<span class="string">'/6.mp3'</span>, <span class="string">'邓丽君'</span>, <span class="string">'但愿人长久'</span>)]</div><div class="line">&lt;class <span class="string">'list'</span>&gt;</div><div class="line">(<span class="string">'/2.mp3'</span>, <span class="string">'任贤齐'</span>, <span class="string">'沧海一声笑'</span>)</div><div class="line">/<span class="number">2</span><span class="selector-class">.mp3</span> 任贤齐 沧海一声笑</div><div class="line">(<span class="string">'/3.mp3'</span>, <span class="string">'齐秦'</span>, <span class="string">'往事随风'</span>)</div><div class="line">/<span class="number">3</span><span class="selector-class">.mp3</span> 齐秦 往事随风</div><div class="line">(<span class="string">'/4.mp3'</span>, <span class="string">'beyond'</span>, <span class="string">'光辉岁月'</span>)</div><div class="line">/<span class="number">4</span><span class="selector-class">.mp3</span> beyond 光辉岁月</div><div class="line">(<span class="string">'/5.mp3'</span>, <span class="string">'陈慧琳'</span>, <span class="string">'记事本'</span>)</div><div class="line">/<span class="number">5</span><span class="selector-class">.mp3</span> 陈慧琳 记事本</div><div class="line">(<span class="string">'/6.mp3'</span>, <span class="string">'邓丽君'</span>, <span class="string">'但愿人长久'</span>)</div><div class="line">/<span class="number">6</span><span class="selector-class">.mp3</span> 邓丽君 但愿人长久</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，返回的列表中的每个元素都是元组类型，我们用对应的索引依次取出即可。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果只是获取第一个内容，可以用<code>search()</code>方法。当需要提取多个内容时，可以用<code>findall()</code>方法。</p>
<h2 id="sub"><a href="#sub" class="headerlink" title="sub()"></a>sub()</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;除了使用正则表达式提取信息外，有时候还需要借助它来修改文本。比如，想要把一串文本中的所有数字都去掉，如果只用字符串的<code>replace()</code>方法，那就太烦琐了，这时可以借助<code>sub()</code>方法。示例如下:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">content = <span class="string">'54aK54yr5oiR54ix5L2g'</span></div><div class="line">content = re.sub(<span class="string">'\d+'</span>, <span class="string">''</span>, content)</div><div class="line"><span class="built_in">print</span>(content)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">aKyroiRixLg</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里只需要给第一个参数传入<code>\d+</code>来匹配所有的数字，第二个参数为替换成的字符串（如果去掉该参数的话，可以赋值为空），第三个参数是原字符串。<br>&nbsp;&nbsp;&nbsp;&nbsp;在上面的HTML文本中，如果想获取所有<code>li</code>节点的歌名，直接用正则表达式来提取可能比较烦琐。比如，可以写成这样子:<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">results = re.findall(<span class="comment">'<span class="doctag">&lt;li.*?&gt;</span>\s*?(<span class="doctag">&lt;a.*?&gt;</span>)?(\w+)(<span class="doctag">&lt;/a&gt;</span>)?\s*?<span class="doctag">&lt;/li&gt;</span>', html, re.S)</span></div><div class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</div><div class="line">    print(result[<span class="number">1</span>])</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">一路上有你</div><div class="line">沧海一声笑</div><div class="line">往事随风</div><div class="line">光辉岁月</div><div class="line">记事本</div><div class="line">但愿人长久</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;此时借助<code>sub()</code>方法就比较简单了。可以先用<code>sub()</code>方法将<code>a</code>节点去掉，只留下文本，然后再利用<code>findall()</code>提取就好了:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> = re.sub(<span class="string">'&lt;a.*?&gt;|&lt;/a&gt;'</span>, <span class="string">''</span>, html)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(html)</span></span></div><div class="line">results = re.findall(<span class="string">'&lt;li.*?&gt;(.*?)&lt;/li&gt;'</span>, <span class="selector-tag">html</span>, re.S)</div><div class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</div><div class="line">    print(result.strip())</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"songs-list"</span>&gt;</div><div class="line">    &lt;h2 <span class="keyword">class</span>=<span class="string">"title"</span>&gt;经典老歌&lt;/h2&gt;</div><div class="line">    &lt;p <span class="keyword">class</span>=<span class="string">"introduction"</span>&gt;</div><div class="line">        经典老歌列表</div><div class="line">    &lt;/p&gt;</div><div class="line">    &lt;ul id=<span class="string">"list"</span> <span class="keyword">class</span>=<span class="string">"list-group"</span>&gt;</div><div class="line">        &lt;<span class="keyword">li</span> data-<span class="keyword">view</span>=<span class="string">"2"</span>&gt;一路上有你&lt;/<span class="keyword">li</span>&gt;</div><div class="line">        &lt;<span class="keyword">li</span> data-<span class="keyword">view</span>=<span class="string">"7"</span>&gt;</div><div class="line">            沧海一声笑</div><div class="line">        &lt;/<span class="keyword">li</span>&gt;</div><div class="line">        &lt;<span class="keyword">li</span> data-<span class="keyword">view</span>=<span class="string">"4"</span> <span class="keyword">class</span>=<span class="string">"active"</span>&gt;</div><div class="line">            往事随风</div><div class="line">        &lt;/<span class="keyword">li</span>&gt;</div><div class="line">        &lt;<span class="keyword">li</span> data-<span class="keyword">view</span>=<span class="string">"6"</span>&gt;光辉岁月&lt;/<span class="keyword">li</span>&gt;</div><div class="line">        &lt;<span class="keyword">li</span> data-<span class="keyword">view</span>=<span class="string">"5"</span>&gt;记事本&lt;/<span class="keyword">li</span>&gt;</div><div class="line">        &lt;<span class="keyword">li</span> data-<span class="keyword">view</span>=<span class="string">"5"</span>&gt;</div><div class="line">            但愿人长久</div><div class="line">        &lt;/<span class="keyword">li</span>&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">一路上有你</div><div class="line">沧海一声笑</div><div class="line">往事随风</div><div class="line">光辉岁月</div><div class="line">记事本</div><div class="line">但愿人长久</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，<code>a</code>节点经过<code>sub()</code>方法处理后就没有了，然后再通过<code>findall()</code>方法直接提取即可。可以看到，在适当的时候，借助<code>sub()</code>方法可以起到事半功倍的效果。</p>
<h2 id="compile"><a href="#compile" class="headerlink" title="compile()"></a>compile()</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;前面所讲的方法都是用来处理字符串的方法，最后再介绍一下<code>compile()</code>方法，这个方法可以将正则字符串编译成正则表达式对象，以便在后面的匹配中复用。示例代码如下:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import re</div><div class="line"> </div><div class="line">content1 = '2016-12-15 12:00'</div><div class="line">content2 = '2016-12-17 12:55'</div><div class="line">content3 = '2016-12-22 13:21'</div><div class="line">pattern = re.compile('\d&#123;2&#125;:\d&#123;2&#125;')</div><div class="line">result1 = re.sub(pattern, '', content1)</div><div class="line">result2 = re.sub(pattern, '', content2)</div><div class="line">result3 = re.sub(pattern, '', content3)</div><div class="line">print(result1, result2, result3)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;例如，这里有3个日期，我们想分别将3个日期中的时间去掉，这时可以借助<code>sub()</code>方法。该方法的第一个参数是正则表达式，但是这里没有必要重复写3个同样的正则表达式，此时可以借助<code>compile()</code>方法将正则表达式编译成一个正则表达式对象，以便复用。<br>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2016</span><span class="number">-12</span><span class="number">-15</span>  <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">2016</span><span class="number">-12</span><span class="number">-22</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;另外，<code>compile()</code>还可以传入修饰符，例如<code>re.S</code>等修饰符，这样在<code>search()</code>、<code>findall()</code>等方法中就不需要额外传了。所以，<code>compile()</code>方法可以说是给正则表达式做了一层封装，以便我们更好地复用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;打开开源中国提供的正则表达式测试工具–&amp;gt;&lt;a href=&quot;http://tool.oschina.net/regex/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线正则表达式测试&lt;/a&gt;，输入待匹配的文本，然后选择常用的正则表达式，就可以得出相应的匹配结果了。例如，这里输入待匹配的文本如下: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello, my phone number is 086+18845658121 and email is sunstady@gmail.com, and my website is &lt;a href=&quot;http://sanstylemc.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sanstylemc.cn&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这段字符串中包含了一个电话号码和一个电子邮件，接下来就尝试用正则表达式提取出来，如图所示。&lt;br&gt;
    
    </summary>
    
    
      <category term="正则" scheme="http://www.sanstylemc.cn/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Linux下SCP指令的使用</title>
    <link href="http://www.sanstylemc.cn/2018/04/07/Linux%E4%B8%8BSCP%E6%8C%87%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.sanstylemc.cn/2018/04/07/Linux下SCP指令的使用/</id>
    <published>2018-04-07T03:19:34.000Z</published>
    <updated>2018-04-07T03:20:01.638Z</updated>
    
    <content type="html"><![CDATA[<p>SCP，即Secure copy的简写。通常在Linux下执行远程拷贝文件使用，他和cp指令类似，只不过cp是本机使用，而SCP则是跨机器使用。SCP传输是基于SSH的加密传输，也就是说知道SSH的账密就可以上下载文件了，因此比较安全。<br><a id="more"></a><br>SCP常用实例(在Linux的centos环境下为例，从服务器上下载一个文件到本地)<br>1、从远程服务器下载文件到本地服务器。</p>
<blockquote>
<p>scp 用户名@IP地址:/home/1.txt ./</p>
</blockquote>
<p>2、Linux下，通过指定端口从远程服务器下载文件到本地。</p>
<blockquote>
<p>scp -oPort=端口号 用户名@IP地址:/opt/ftp-0.17054.el6.x86_64.rpm ./</p>
</blockquote>
<p>3、Linux下，通过指定端口将本地文件，上传到远程服务器指定目录下。</p>
<blockquote>
<p>scp -oPort=端口号 -r ./1.txt 用户名@IP地址:/opt/</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SCP，即Secure copy的简写。通常在Linux下执行远程拷贝文件使用，他和cp指令类似，只不过cp是本机使用，而SCP则是跨机器使用。SCP传输是基于SSH的加密传输，也就是说知道SSH的账密就可以上下载文件了，因此比较安全。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.sanstylemc.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>公平锁与非公平锁</title>
    <link href="http://www.sanstylemc.cn/2018/04/07/%E5%85%AC%E5%B9%B3%E9%94%81%E4%B8%8E%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81/"/>
    <id>http://www.sanstylemc.cn/2018/04/07/公平锁与非公平锁/</id>
    <published>2018-04-07T02:42:25.000Z</published>
    <updated>2018-04-07T02:45:45.361Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;在Java并发编程中，公平锁与非公平锁是很常见的概念，ReentrantLock、ReadWriteLock默认都是非公平模式，非公平锁的效率为何高于公平锁呢？公平锁与非公平锁有什么区别呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;首先先简单从名字上来理解，公平锁就是保障了多线程下各种线程取锁的顺序，先到的线程优先获取锁，而非公平锁则无法提供这个保障。看到网上很多说法说非公平锁获取锁时各线程的概率是随机的，这也是一种很不确切的说法。非公平锁并非真正的随机，其获取锁还是有一定顺序的，但其顺序究竟是怎样呢？先看图:<br><a id="more"></a><br><img src="https://github.com/sunstady/hexo/blob/master/%E5%85%AC%E5%B9%B3%E9%94%81%E4%B8%8E%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81/1.png?raw=true" alt="1"><br><img src="https://github.com/sunstady/hexo/blob/master/%E5%85%AC%E5%B9%B3%E9%94%81%E4%B8%8E%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81/2.png?raw=true" alt="2"><br><img src="https://github.com/sunstady/hexo/blob/master/%E5%85%AC%E5%B9%B3%E9%94%81%E4%B8%8E%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81/3.png?raw=true" alt="3"><br>公平锁与非公平锁的一个重要区别就在于上图中的2、6、10那个步骤，对应源码如下:<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//非公平锁</span></div><div class="line"><span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> Thread current= Thread.currentThread();</div><div class="line">	<span class="keyword">int</span> c= getState();</div><div class="line">	<span class="keyword">if</span> (c== <span class="number">0</span>) &#123;</div><div class="line">		<span class="comment">//区别重点在这里</span></div><div class="line">		<span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">			setExclusiveOwnerThread(current);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (current== getExclusiveOwnerThread()) &#123;</div><div class="line">		<span class="keyword">int</span> nextc= c+ acquires;</div><div class="line">		<span class="keyword">if</span> (nextc&lt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">		&#125;</div><div class="line">		setState(<span class="keyword">true</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//公平锁</span></div><div class="line"><span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> Thread current= Thread.currentThread();</div><div class="line">	<span class="keyword">int</span> c= getState();</div><div class="line">	<span class="keyword">if</span> (c== <span class="number">0</span>) &#123;</div><div class="line">		<span class="comment">//hasQueuedPredecessors这个方法就是最大区别所在</span></div><div class="line">		<span class="keyword">if</span> (!hasQueuedPredecessors()&amp;&amp; compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">			setExclusiveOwnerThread(current);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (current== getExclusiveOwnerThread()) &#123;</div><div class="line">		<span class="keyword">int</span> nextc= c+ acquires;</div><div class="line">		<span class="keyword">if</span> (nextc&lt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">		&#125;</div><div class="line">		setState(<span class="keyword">true</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分析以上代码，我们可以看到公平锁就是在获取锁之前会先判断等待队列是否为空或者自己是否位于队列头部，该条件通过才能继续获取锁。<br>在结合兔子喝水的图分析，非公平锁获取所得顺序基本确定在9、10、11这三个事件发生的先后顺序:<br>1、若在释放锁的时候总是没有新的兔子来打扰，则非公平锁等于公平锁；<br>2、若释放锁的时候，正好一个兔子来喝水，而此时位于队列头的兔子还没有被唤醒(因为线程上下文切换是需要不少开销的)，此时后来的兔子则优先获得锁，成功打破公平，成为非公平锁。<br>其实对于非公平锁，只要线程进入了等待队列， 队列里面依然是FIFO的原则，跟公平锁的顺序是一样的。因为公平锁与非公平锁的release()部分代码是公用AQS的代码。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private void unparkSuccessor(<span class="keyword">Node</span> <span class="title">node</span>) &#123;</div><div class="line">	int <span class="attr">ws=</span> <span class="keyword">node</span>.<span class="title">waitStatus</span>;</div><div class="line">	if(ws<span class="tag">&lt; 0) &#123;</span></div><div class="line"><span class="tag">		compareAndSetWaitStatus(node, ws, 0);</span></div><div class="line"><span class="tag">	&#125;</span></div><div class="line"><span class="tag">	Node s= node.next;</span></div><div class="line"><span class="tag">	if (s== null|| s.waitStatus&gt;</span> <span class="number">0</span>) &#123;</div><div class="line">		s= null;</div><div class="line">		for(<span class="keyword">Node</span> <span class="title">t</span>= tail; t!= null&amp;&amp; t!= <span class="keyword">node</span><span class="title">; t</span>= t.prev) &#123;</div><div class="line">			if (t.waitStatus<span class="tag">&lt;= 0) &#123;</span></div><div class="line"><span class="tag">				s= t;</span></div><div class="line"><span class="tag">			&#125;</span></div><div class="line"><span class="tag">		&#125;</span></div><div class="line"><span class="tag">	&#125;</span></div><div class="line"><span class="tag">	if (s!= null) &#123;</span></div><div class="line"><span class="tag">		//唤醒队列头的线程</span></div><div class="line"><span class="tag">		LockSupport.unpark(s.thread);</span></div><div class="line"><span class="tag">	&#125;</span></div><div class="line"><span class="tag">&#125;</span></div></pre></td></tr></table></figure></p>
<p>上文说到的线程切换的开销，其实就是非公平锁效率高于公平锁的原因，因为非公平锁减少了线程挂起的几率，后来的线程有一定几率逃离被挂起的开销。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在Java并发编程中，公平锁与非公平锁是很常见的概念，ReentrantLock、ReadWriteLock默认都是非公平模式，非公平锁的效率为何高于公平锁呢？公平锁与非公平锁有什么区别呢？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;首先先简单从名字上来理解，公平锁就是保障了多线程下各种线程取锁的顺序，先到的线程优先获取锁，而非公平锁则无法提供这个保障。看到网上很多说法说非公平锁获取锁时各线程的概率是随机的，这也是一种很不确切的说法。非公平锁并非真正的随机，其获取锁还是有一定顺序的，但其顺序究竟是怎样呢？先看图:&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>py统计单词个数</title>
    <link href="http://www.sanstylemc.cn/2018/04/06/py%E7%BB%9F%E8%AE%A1%E5%8D%95%E8%AF%8D%E4%B8%AA%E6%95%B0/"/>
    <id>http://www.sanstylemc.cn/2018/04/06/py统计单词个数/</id>
    <published>2018-04-06T14:32:28.000Z</published>
    <updated>2018-04-06T14:35:41.862Z</updated>
    
    <content type="html"><![CDATA[<p>任一个英文的纯文本文件，统计其中的单词出现的个数<br><a id="more"></a><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import <span class="built_in">string</span></div><div class="line">f= open(r'C:\Users\<span class="number">12905</span>\Desktop\<span class="number">1.</span>txt', 'r+')   <span class="comment">#从文件中读取内容</span></div><div class="line">str1= f.<span class="built_in">read</span>()</div><div class="line">str= str1.lower()   <span class="comment">#全部切换成小写</span></div><div class="line"><span class="built_in">list</span>= str.split()   <span class="comment">#切片</span></div><div class="line">list1= []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(<span class="built_in">list</span>)):</div><div class="line">    <span class="built_in">list</span>[i]= <span class="built_in">list</span>[i].strip(<span class="built_in">string</span>.punctuation)</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="built_in">word</span> <span class="keyword">in</span> <span class="built_in">list</span>:</div><div class="line">    <span class="keyword">if</span> <span class="built_in">word</span> <span class="keyword">not</span> <span class="keyword">in</span> list1:</div><div class="line">        list1.append(<span class="built_in">word</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="built_in">word</span> <span class="keyword">in</span> list1:</div><div class="line">    print(<span class="built_in">word</span>, <span class="built_in">list</span>.<span class="built_in">count</span>(<span class="built_in">word</span>))</div></pre></td></tr></table></figure></p>
<p>运行结果如下图所示:<br><img src="https://github.com/sunstady/hexo/blob/master/py%E7%BB%9F%E8%AE%A1%E5%8D%95%E8%AF%8D%E4%B8%AA%E6%95%B0/1.png?raw=true" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;任一个英文的纯文本文件，统计其中的单词出现的个数&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>py生成图片验证码</title>
    <link href="http://www.sanstylemc.cn/2018/04/06/py%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://www.sanstylemc.cn/2018/04/06/py生成图片验证码/</id>
    <published>2018-04-06T14:22:18.000Z</published>
    <updated>2018-04-06T14:23:23.746Z</updated>
    
    <content type="html"><![CDATA[<p>生成图片二维码，并判断填写的验证码是否正确。<br><a id="more"></a><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="built_in">random</span></div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">import</span> sys</div><div class="line">from PIL <span class="keyword">import</span> Image,ImageDraw,ImageFont</div><div class="line"></div><div class="line">def random_text ():     #生成一串<span class="number">4</span>位的随机字符串</div><div class="line">	<span class="built_in">text</span>= string.digits+ string.ascii_letters</div><div class="line">	<span class="built_in">str</span>= <span class="string">''</span></div><div class="line">	<span class="keyword">for</span> i in range(<span class="number">0</span>, <span class="number">4</span>):</div><div class="line">		<span class="built_in">str</span>= <span class="built_in">str</span>+ <span class="built_in">text</span>[<span class="built_in">random</span>.randint(<span class="number">0</span>, len(<span class="built_in">text</span>))]</div><div class="line">	<span class="keyword">return</span> <span class="built_in">str</span></div><div class="line"></div><div class="line">def get_code (<span class="built_in">str</span>):</div><div class="line">	<span class="built_in">width</span>= <span class="number">120</span></div><div class="line">	<span class="built_in">height</span>= <span class="number">60</span>   #设置图片大小</div><div class="line">	<span class="built_in">color</span>= (<span class="number">43</span>, <span class="number">34</span>, <span class="number">88</span>)   #设置图片颜色</div><div class="line">	<span class="built_in">image</span>= Image.<span class="keyword">new</span>(<span class="string">'RGB'</span>, (<span class="built_in">width</span>, <span class="built_in">height</span>), <span class="built_in">color</span>)   #创建图片</div><div class="line">	fontl= ImageFont.truetype(<span class="string">"simsun.ttc"</span>, <span class="number">40</span>, index= <span class="number">1</span>)   #设置字体样式</div><div class="line">	<span class="title">draw</span>= ImageDraw.Draw(<span class="built_in">image</span>)   #将验证码画到图片上</div><div class="line">	<span class="title">draw</span>.<span class="built_in">text</span>((<span class="number">20</span>, <span class="number">10</span>), <span class="built_in">str</span>, <span class="built_in">fill</span>=(<span class="number">355</span>, <span class="number">0</span>, <span class="number">0</span>), font= fontl)</div><div class="line">	<span class="built_in">image</span>.show()</div><div class="line"></div><div class="line">s= random_text()</div><div class="line">get_code(s)</div><div class="line">code= input(<span class="string">"请输入图片中的验证码: "</span>)</div><div class="line"><span class="keyword">if</span> s.lower()== code.lower():</div><div class="line">	<span class="built_in">print</span>(<span class="string">"验证码输入正确"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">	<span class="built_in">print</span> (<span class="string">"验证码输入错误"</span>)</div></pre></td></tr></table></figure></p>
<p>运行结果如图所示:<br><img src="https://github.com/sunstady/hexo/blob/master/py%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81/1.png?raw=true" alt="1"><br><img src="https://github.com/sunstady/hexo/blob/master/py%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81/2.png?raw=true" alt="2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生成图片二维码，并判断填写的验证码是否正确。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>线程的生命周期</title>
    <link href="http://www.sanstylemc.cn/2018/04/06/%E7%BA%BF%E7%A8%8B%E5%9C%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://www.sanstylemc.cn/2018/04/06/线程地生命周期/</id>
    <published>2018-04-06T08:22:05.000Z</published>
    <updated>2018-04-10T12:54:55.563Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;当线程被创建并启动后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，它要经过<code>新建(New)</code>、<code>就绪(Runnable)</code>、<code>运行(Running)</code>、<code>阻塞(Blocked)</code>和<code>死亡(Dead)</code>五种状态。尤其是当线程启动以后，它不可能一直”霸占”着CPU独自运行，所以CPU需要在多条线程之间切换，于是线程状态也会多次在运行、阻塞之间切换。<br><a id="more"></a></p>
<blockquote>
<p>1、新建状态: 当程序使用new关键字创建了一个线程之后，该线程就处于新建状态，此时仅由JVM为其分配内存，并初始化其成员变量的值。<br>2、就绪状态: 当线程对象调用了start()方法后，该线程处于就绪状态。Java虚拟机会为其创建方法调用栈和程序计数器，等待调度运行。<br>3、运行状态: 如果处于就绪状态的线程获得了CPU，开始执行run()方法的线程执行体，则该线程处于运行状态。<br>4、阻塞状态: 当处于运行状态的线程失去所占用资源后，便进入阻塞状态。<br>5、死亡状态: 当线程执行完毕或被其它线程杀死，线程就进入死亡状态，这时线程不可能进入就绪状态等待执行。</p>
</blockquote>
<h2 id="新建和就绪状态"><a href="#新建和就绪状态" class="headerlink" title="新建和就绪状态"></a>新建和就绪状态</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;当程序使用new关键字创建了一个线程之后，该线程就处于新建状态，此时它和其他的Java对象一样，仅仅由Java虚拟机为其分配内存，并初始化其成员变量的值。此时的线程对象没有表现出任何线程的动态特征，程序也不会执行线程的线程执行体。<br>&nbsp;&nbsp;&nbsp;&nbsp;当线程对象调用了start()方法之后，该线程处于就绪状态。Java虚拟机会为其创建方法调用栈和程序计数器，处于这个状态中的线程并没有开始运行，只是表示该线程可以运行了。至于该线程何时开始运行，取决于JVM里线程调度器的调度。</p>
<blockquote>
<p>注意：启动线程使用start()方法，而不是run()方法。永远不要调用线程对象的run()方法。调用start()方法来启动线程，系统会把该run()方法当成线程执行体来处理；但如果直按调用线程对象的run()方法，则run()方法立即就会被执行，而且在run()方法返回之前其他线程无法并发执行。也就是说，系统把线程对象当成一个普通对象，而run()方法也是一个普通方法，而不是线程执行体。需要指出的是，调用了线程的run()方法之后，该线程已经不再处于新建状态，不要再次调用线程对象的start()方法。只能对处于新建状态的线程调用start()方法，否则将引发IllegaIThreadStateExccption异常。</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;调用线程对象的start()方法之后，该线程立即进入就绪状态——就绪状态相当于”等待执行”，但该线程并未真正进入运行状态。如果希望调用子线程的start()方法后子线程立即开始执行，程序可以使用Thread.sleep(1) 来让当前运行的线程（主线程）睡眠1毫秒，1毫秒就够了，因为在这1毫秒内CPU不会空闲，它会去执行另一个处于就绪状态的线程，这样就可以让子线程立即开始执行。</p>
<h2 id="运行和阻塞状态"><a href="#运行和阻塞状态" class="headerlink" title="运行和阻塞状态"></a>运行和阻塞状态</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;如果处于就绪状态的线程获得了CPU，开始执行run()方法的线程执行体，则该线程处于运行状态，如果计算机只有一个CPU。那么在任何时刻只有一个线程处于运行状态，当然在一个多处理器的机器上，将会有多个线程并行执行；当线程数大于处理器数时，依然会存在多个线程在同一个CPU上轮换的现象。<br>&nbsp;&nbsp;&nbsp;&nbsp;当一个线程开始运行后，它不可能一直处于运行状态（除非它的线程执行体足够短，瞬间就执行结束了）。线程在运行过程中需要被中断，目的是使其他线程获得执行的机会，线程调度的细节取决于底层平台所采用的策略。对于采用抢占式策略的系统而言，系统会给每个可执行的线程一个小时间段来处理任务；当该时间段用完后，系统就会剥夺该线程所占用的资源，让其他线程获得执行的机会。在选择下一个线程时，系统会考虑线程的优先级。<br>&nbsp;&nbsp;&nbsp;&nbsp;所有现代的桌面和服务器操作系统都采用抢占式调度策略，但一些小型设备如手机则可能采用协作式调度策略，在这样的系统中，只有当一个线程调用了它的sleep()或yield()方法后才会放弃所占用的资源——也就是必须由该线程主动放弃所占用的资源。<br>&nbsp;&nbsp;&nbsp;&nbsp;当发生如下情况时，线程将会进入阻塞状态</p>
<blockquote>
<p>1、线程调用sleep()方法主动放弃所占用的处理器资源。<br>2、线程调用了一个阻塞式IO方法，在该方法返回之前，该线程被阻塞。<br>3、线程试图获得一个同步监视器，但该同步监视器正被其他线程所持有。<br>4、线程在等待某个通知(notify)<br>5、程序调用了线程的suspend()方法将该线程挂起。但这个方法容易导致死锁，所以应该尽量避免使用该方法。</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;当前正在执行的线程被阻塞之后，其他线程就可以获得执行的机会。被阻塞的线程会在合适的时候重新进入就绪状态，注意是就绪状态而不是运行状态。也就是说，被阻塞线程的阻塞解除后，必须重新等待线程调度器再次调度它。<br>&nbsp;&nbsp;&nbsp;&nbsp;针对上面几种情况，当发生如下特定的情况时可以解除上面的阻塞，让该线程重新进入就绪状态</p>
<blockquote>
<p>1、调用sleep()方法的线程经过了指定时间<br>2、线程调用的阻塞式IO方法已经返回<br>3、线程成功地获得了识图取得地同步监视器<br>4、线程正在等待的某个通知时，其他线程发出了一个通知（signal）<br>5、处于挂起状态地线程被调用了resume()恢复方法</p>
</blockquote>
<h2 id="线程死亡"><a href="#线程死亡" class="headerlink" title="线程死亡"></a>线程死亡</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;线程会以如下三种方式结束，结束以后就处于死亡状态</p>
<blockquote>
<p>1、run()或call()方法执行完成，线程正常结束<br>2、线程抛出一个未捕获地Exception或Error<br>3、直接调用该线程stop()方法来结束该线程–该方法容易导致死锁，通常不推荐使用。</p>
</blockquote>
<p>注意: 当主线程结束时，其他线程不受任何影响，并不会随之结束。一旦子线程启动起来后，他就拥有和主线程相同地地位，他不会受主线程地影响。为了测试某个线程是否已经死亡，可以调用线程对象的isAlivc()方法，当线程处于就绪、运行、阻塞了种状态时，该方法将返回true；当线程处于新建、死亡状态时，该方法将返回false。</p>
<blockquote>
<p>不要试图对一个已经死亡的线程调用start()方法使它重新启动，死亡就是死亡，该线程将不可再次作为线程执行。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当线程被创建并启动后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，它要经过&lt;code&gt;新建(New)&lt;/code&gt;、&lt;code&gt;就绪(Runnable)&lt;/code&gt;、&lt;code&gt;运行(Running)&lt;/code&gt;、&lt;code&gt;阻塞(Blocked)&lt;/code&gt;和&lt;code&gt;死亡(Dead)&lt;/code&gt;五种状态。尤其是当线程启动以后，它不可能一直”霸占”着CPU独自运行，所以CPU需要在多条线程之间切换，于是线程状态也会多次在运行、阻塞之间切换。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>sleep()和wait()的区别</title>
    <link href="http://www.sanstylemc.cn/2018/04/06/sleep-%E5%92%8Cwait-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.sanstylemc.cn/2018/04/06/sleep-和wait-的区别/</id>
    <published>2018-04-06T07:40:00.000Z</published>
    <updated>2018-04-06T07:40:27.344Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;对于sleep()方法，该方法是属于Thread类中的。而wait()方法是属于Object()类中的。<br>&nbsp;&nbsp;&nbsp;&nbsp;sleep()方法导致了程序暂停执行指定的时间，让出cpu改其他线程，但是他的监控状态依然保持着，当指定的时间到了又会自动恢复运行状态。<br>&nbsp;&nbsp;&nbsp;&nbsp;在调用sleep()方法的过程中，线程不会释放对象锁。<br>&nbsp;&nbsp;&nbsp;&nbsp;而当调用wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用notify()方法后本线程才进入对象锁定池准备获取对象锁进入运行状态。<br><a id="more"></a><br>举个例子说明:<br><figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> long1_1 &#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Thread1()).start();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Thread.sleep(<span class="number">5000</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Thread2()).start();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> Thread1 implements Runnable &#123;</div><div class="line">		<span class="keyword">@Override</span></div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</div><div class="line">			<span class="keyword">synchronized</span> (long1_1.<span class="keyword">class</span>) &#123;</div><div class="line">				System.<span class="keyword">out</span>.println(<span class="string">"enter thread1..."</span>);</div><div class="line">				System.<span class="keyword">out</span>.println(<span class="string">"thread1 is waiting..."</span>);</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					<span class="comment">// 调用wait()方法，线程会放弃对象锁，进入等待此对象的等待锁定池</span></div><div class="line">					long1_1.<span class="keyword">class</span>.wait();</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				System.<span class="keyword">out</span>.println(<span class="string">"thread1 is going on ...."</span>);</div><div class="line">				System.<span class="keyword">out</span>.println(<span class="string">"thread1 is over!!!"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> Thread2 implements Runnable &#123;</div><div class="line">		<span class="keyword">@Override</span></div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</div><div class="line">			<span class="keyword">synchronized</span> (long1_1.<span class="keyword">class</span>) &#123;</div><div class="line">				System.<span class="keyword">out</span>.println(<span class="string">"enter thread2...."</span>);</div><div class="line">				System.<span class="keyword">out</span>.println(<span class="string">"thread2 is sleep...."</span>);</div><div class="line">				<span class="comment">// 只有针对此对象调用notify()方法后本线程才进入对象锁定池准备获取对象锁进入运行状态。</span></div><div class="line">				long1_1.<span class="keyword">class</span>.notify();</div><div class="line">				<span class="comment">// ==================</span></div><div class="line">				<span class="comment">// 区别</span></div><div class="line">				<span class="comment">// 如果我们把代码：TestD.class.notify();给注释掉，即TestD.class调用了wait()方法，但是没有调用notify()</span></div><div class="line">				<span class="comment">// 方法，则线程永远处于挂起状态。</span></div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					<span class="comment">// sleep()方法导致了程序暂停执行指定的时间，让出cpu该其他线程，</span></div><div class="line">					<span class="comment">// 但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态。</span></div><div class="line">					<span class="comment">// 在调用sleep()方法的过程中，线程不会释放对象锁。</span></div><div class="line">					Thread.sleep(<span class="number">5000</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				System.<span class="keyword">out</span>.println(<span class="string">"thread2 is going on...."</span>);</div><div class="line">				System.<span class="keyword">out</span>.println(<span class="string">"thread2 is over!!!"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果如下:<br><img src="https://github.com/sunstady/hexo/blob/master/sleep%E5%92%8Cwait%E5%8C%BA%E5%88%AB/1.png?raw=true" alt="1"><br>如果注释掉<code>long1_1.class.notify();</code><br>运行结果如下:<br><img src="https://github.com/sunstady/hexo/blob/master/sleep%E5%92%8Cwait%E5%8C%BA%E5%88%AB/2.png?raw=true" alt="2"><br>且程序一直处于挂起状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;对于sleep()方法，该方法是属于Thread类中的。而wait()方法是属于Object()类中的。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sleep()方法导致了程序暂停执行指定的时间，让出cpu改其他线程，但是他的监控状态依然保持着，当指定的时间到了又会自动恢复运行状态。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在调用sleep()方法的过程中，线程不会释放对象锁。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;而当调用wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用notify()方法后本线程才进入对象锁定池准备获取对象锁进入运行状态。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>start和run的区别</title>
    <link href="http://www.sanstylemc.cn/2018/04/06/start%E5%92%8Crun%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.sanstylemc.cn/2018/04/06/start和run的区别/</id>
    <published>2018-04-06T03:33:34.000Z</published>
    <updated>2018-04-06T03:34:14.340Z</updated>
    
    <content type="html"><![CDATA[<p><code>run()方法:</code>在本线程内调用Runnable对象的run()方法，可以重复多次调用。<br><code>start()方法:</code>启动一个线程，调用该Runnable对象的run()方法，不能多次启动一个线程。<br><a id="more"></a><br>这个解释看过好多次了，但是理解不够，现在想想，其实run方法并不是启动线程，而是方法调用，在主线程中调用一个对象的run()方法而已，而start才是真的启动来了一个线程。<br>看一下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">long1_1</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        TestThread tt = <span class="keyword">new</span> TestThread();  </div><div class="line">        tt.run();  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_I = <span class="number">10</span>;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        <span class="keyword">while</span> (i &lt; MAX_I) &#123;  </div><div class="line">            System.out.println(i++);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果如下:<br><img src="https://github.com/sunstady/hexo/blob/master/start%E5%92%8Crun%E5%8C%BA%E5%88%AB/1.png?raw=true" alt="1"><br>或许有人会得出结论，这样启动一个线程是可以的，我们再对程式稍作修改，会发现一个问题:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">long1_1</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        TestThread tt = <span class="keyword">new</span> TestThread();  </div><div class="line">        tt.run();  </div><div class="line">        System.out.println(<span class="string">"Printed by main thread"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_I = <span class="number">10</span>;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        <span class="keyword">while</span> (i &lt; MAX_I) &#123;  </div><div class="line">            System.out.println(i++);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里只在主线程中加入了一行代码，打印一行”Printed by main thread”，运行代码，结果如下:<br><img src="https://github.com/sunstady/hexo/blob/master/start%E5%92%8Crun%E5%8C%BA%E5%88%AB/2.png?raw=true" alt="2"><br>熟练多线程的开发的要发现问题了，为什么”Printed by main thread”会打印在最后一行呢？TestThread类中一直持有时间段吗？<br>对上面的代码进行分析，其实非常简单，这只是一个普通的类中方法的调用，其实是一个单线程的执行，我们来修改代码进一步验证下:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">long1_1</span> &#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        TestThread tt = <span class="keyword">new</span> TestThread();  </div><div class="line">        tt.run();  </div><div class="line">        System.<span class="keyword">out</span>.println(Thread.currentThread().getName());  </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Printed by main thread"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="title">extends</span> <span class="title">Thread</span> &#123;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;  </div><div class="line">    final <span class="keyword">static</span> <span class="keyword">int</span> MAX_I = <span class="number">10</span>;  </div><div class="line">  </div><div class="line">    @Override  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        System.<span class="keyword">out</span>.println(Thread.currentThread().getName());  </div><div class="line">        <span class="keyword">while</span> (i &lt; MAX_I) &#123;  </div><div class="line">            System.<span class="keyword">out</span>.println(i++);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这段代码分别在主线程和我们的TestThread的方法中打印当前线程名字，运行结果如下:<br><img src="https://github.com/sunstady/hexo/blob/master/start%E5%92%8Crun%E5%8C%BA%E5%88%AB/3.png?raw=true" alt="3"><br>在TestThread类和主线程中运行的是同一个线程，说明在直接调用run时是不能使用多线程的，那么把上面的run方法调用改为start方法的调动再看一下。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">long1_1</span> &#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        TestThread tt = <span class="keyword">new</span> TestThread();  </div><div class="line">        tt.start();  </div><div class="line">        System.<span class="keyword">out</span>.println(Thread.currentThread().getName());  </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Printed by main thread"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="title">extends</span> <span class="title">Thread</span> &#123;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;  </div><div class="line">    final <span class="keyword">static</span> <span class="keyword">int</span> MAX_I = <span class="number">10</span>;  </div><div class="line">  </div><div class="line">    @Override  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        System.<span class="keyword">out</span>.println(Thread.currentThread().getName());  </div><div class="line">        <span class="keyword">while</span> (i &lt; MAX_I) &#123;  </div><div class="line">            System.<span class="keyword">out</span>.println(i++);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果如下:<br><img src="https://github.com/sunstady/hexo/blob/master/start%E5%92%8Crun%E5%8C%BA%E5%88%AB/4.png?raw=true" alt="4"><br>很明显，这才是我们想看到的结果，所以结论是只有调用Thread的start方法，将线程交由JVM控制，才能产生多线程，而直接调用run方法只是一个普通的单线程程式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;run()方法:&lt;/code&gt;在本线程内调用Runnable对象的run()方法，可以重复多次调用。&lt;br&gt;&lt;code&gt;start()方法:&lt;/code&gt;启动一个线程，调用该Runnable对象的run()方法，不能多次启动一个线程。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>什么是线程池</title>
    <link href="http://www.sanstylemc.cn/2018/04/06/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://www.sanstylemc.cn/2018/04/06/什么是线程池/</id>
    <published>2018-04-06T03:05:36.000Z</published>
    <updated>2018-04-06T03:06:03.776Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;到目前为止我们使用多线程应用程序的目的是尽可能多地使用计算机处理器资源。所以，看起来我们仅需要为每个独立的任务分配一个不同的线程，并让处理器确定在任何时间它总会处理其中的某一个任务。额，对小系统来说这样做很好。但是当系统越来越复杂时，线程的数量也会越来越多，操作系统将会花费更多时间处理锁分配，理清线程之间的关系，处理程序指令的时间实际上是很少的。为了让我们的程序具备可扩展性，我们将不得不对线程进行一些控制。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;对那些生存周期比较短的线程来说，使用线程池来处理任务要比为每个任务都创建一个线程然后顺序地回收它们要高效得多。一个任务，在概念上说，可以是一个单一方法的执行过程或者一系列方法的执行过程。<code>为一个线程预分配一个集合或者一个池来以备未来之需以及能够在一个应用程序中重用的技术称作线程池</code>。</p>
<h2 id="什么是线程池"><a href="#什么是线程池" class="headerlink" title="什么是线程池"></a>什么是线程池</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;线程池是指在初始化一个多线程应用程序过程中创建一个线程集合，然后在需要执行新的任务时重用这些线程而不是新建一个线程。线程池中线程的数量通常完全取决于可用内存数量和应用程序的需求。然而，增加可用线程数量是可能的。线程池中的每个线程都有被分配一个任务，一旦任务已经完成了，线程回到池子中并等待下一个分配任务。</p>
<h2 id="为什么需要线程池"><a href="#为什么需要线程池" class="headerlink" title="为什么需要线程池"></a>为什么需要线程池</h2><p>基于以下几个原因在多线程应用程序中使用线程是必须的:<br>1、线程池改进了一个应用程序的响应时间。由于线程池中的线程已经准备好且等待被分配任务，应用程序可以直接拿来使用而不用新建一个线程。<br>2、线程池节省了CLR为每个短生存周期任务创建一个完整的线程的开销并可以在任务完成后回收资源。<br>3、线程池根据当前在系统中运行的进程来优化线程时间片。<br>4、线程池允许我们开启多个任务而不用为每个线程设置属性。<br>5、线程池允许我们为正在执行的任务的程序参数传递一个包含状态信息的对象引用。<br>6、线程池可以用来解决处理一个特定请求最大线程数量限制问题。</p>
<h2 id="线程池的概念"><a href="#线程池的概念" class="headerlink" title="线程池的概念"></a>线程池的概念</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;影响一个多线程应用程序的相应时间的几个主要因素之一是为每个任务生成一个线程时间。<br>&nbsp;&nbsp;&nbsp;&nbsp;例如，一个web Server是一个多线程应用程序，它可以同时对多个客户端请求提供服务。假设有是个客户端同时访问web Server:<br>1、如果服务执行一个客户端对应一个线程的策略，它将为这些客户端生成十个新线程，从创建第一个线程开始到在线程的整个生命周期管理它们都会增加系统开销。也有可能在某个时间计算机的资源耗尽。<br>2、相反的，如果服务端使用一个线程池来处理这些请求，那么当每次客户端请求来到后都创建一个线程的时间会节省下来。它可以管理已经创建的线程，如果线程池太忙的话也可以拒绝客户端请求。这是线程池背后的概念。<br>&nbsp;&nbsp;&nbsp;&nbsp;.NET CLR 为服务请求维护一个线程池。如果我们的应用程序从线程池中请求一个新线程，CLR 将试着从线程池中取出一个。如果线程池是空的，它将生成一个新线程并把它给我们。当我们的代码使用的线程结束以后，线程由.NET 回收并返回给线程池。线程池中线程的数量由当前可用地内存数量决定。<br>&nbsp;&nbsp;&nbsp;&nbsp;影响设计一个多线程应用程序的因素有:<br>1、一个应用程序的响应时间。<br>2、线程管理资源的分配。<br>3、资源共享。<br>4、线程同步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;到目前为止我们使用多线程应用程序的目的是尽可能多地使用计算机处理器资源。所以，看起来我们仅需要为每个独立的任务分配一个不同的线程，并让处理器确定在任何时间它总会处理其中的某一个任务。额，对小系统来说这样做很好。但是当系统越来越复杂时，线程的数量也会越来越多，操作系统将会花费更多时间处理锁分配，理清线程之间的关系，处理程序指令的时间实际上是很少的。为了让我们的程序具备可扩展性，我们将不得不对线程进行一些控制。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>hexo提交文章被killed</title>
    <link href="http://www.sanstylemc.cn/2018/04/06/hexo%E6%8F%90%E4%BA%A4%E6%96%87%E7%AB%A0%E8%A2%ABkilled/"/>
    <id>http://www.sanstylemc.cn/2018/04/06/hexo提交文章被killed/</id>
    <published>2018-04-06T02:01:43.000Z</published>
    <updated>2018-04-06T02:02:13.803Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/sunstady/hexo/blob/master/hexo%E8%A2%ABkilled/2.png?raw=true" alt="2"><br>如图所示，不管如何提交，都是被killed。<br><a id="more"></a><br><code>问题原因:</code><br>2016年4月15日起，新购买的Linux操作系统CVM，将不再提供2GB的SWAP盘。<br>swap分区是在系统物理内存不够用的时候，由系统内存管理程序将那些很长时间没有操作内存数据，临时保存到Swap分区中，以提高可用内存额度的一种机制。当那些程序要再次重新运行时，会再从Swap分区恢复之前保存的数据到内存中。<br>相关操作会导致额外的IO开销，特别是，如果内存使用率已经非常高，而同时IO性能也不是很好的情况下，该机制其实会起到相反的效果：不仅系统性能提升较小（因为内存使用率已经非常高了），而且由于频繁的内存到SWAP的切换操作，会导致产生大量额外的IO操作，导致IO性能进一步降低，最终反而降低了系统总体性能。<br>内存与磁盘性能有10倍以上的差距，如Mysql等业务，当内存数据临时保存到SWAP分区时，数据库的整体服务质量会大大下降。为了保证您业务的正常运行，当服务器内存不足时，建议您增加内存空间。<br><code>解决方法:</code><br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">free -m   <span class="string">//</span>查看系统当前的分区情况</div><div class="line">dd <span class="keyword">if</span>=<span class="string">/dev/zero</span> of=<span class="string">/swap</span> bs=4096 count=1572864   <span class="string">//</span>创建用于交换分区的文件</div><div class="line">mkswap <span class="string">/swap</span>   <span class="string">//</span>设置交换分区文件</div><div class="line">swapon <span class="string">/swap</span>   <span class="string">//</span>启用交换分区文件</div><div class="line"><span class="keyword">echo</span> “LABEL=SWAP-sda <span class="string">/xxx/swap</span> swap swap defaults 0 0” &gt;&gt; <span class="string">/etc/fstab</span>   <span class="string">//</span>若想开机时自启用，则需要修改文件<span class="string">/etc/fstab</span>中的swap行</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/sunstady/hexo/blob/master/hexo%E8%A2%ABkilled/1.png?raw=true" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/sunstady/hexo/blob/master/hexo%E8%A2%ABkilled/2.png?raw=true&quot; alt=&quot;2&quot;&gt;&lt;br&gt;如图所示，不管如何提交，都是被killed。&lt;br&gt;
    
    </summary>
    
    
      <category term="软件" scheme="http://www.sanstylemc.cn/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>进程和线程的区别</title>
    <link href="http://www.sanstylemc.cn/2018/04/06/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.sanstylemc.cn/2018/04/06/进程和线程的区别/</id>
    <published>2018-04-06T01:30:09.000Z</published>
    <updated>2018-04-06T01:30:43.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p><code>狭义定义:</code>进程是正在运行的程序的实例。</p>
<p><code>组成:</code>进程是一个实体。每一个进程都有它自己的地址空间。一般情况下，包括文本区域(text region)、数据区域(data region)和堆栈(stack region)。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。<br><a id="more"></a><br><code>结构:</code>结构特征: 进程由程序、数据和进程控制块三部分组成。</p>
<p><code>调度算法:</code>实时系统中: FIFO(First Input First Output, 先进先出算法)， SJF(Shortest Job First, 最短作业优先算法)，SRTF(Shortest Remaining Time First, 最短剩余时间优先算法)。<br>交互式系统中: RR(Round Robin, 时间片轮转法)，HPF(Highest Priority First, 最高优先级算法)，多级队列，最短进程优先，保证调度，彩票调度，公平分享调度。</p>
<h2 id="线程的定义及基本概念"><a href="#线程的定义及基本概念" class="headerlink" title="线程的定义及基本概念"></a>线程的定义及基本概念</h2><p>一个标准的线程由线程ID，当前指令指针(PC)，寄存器集合和堆栈组成。另外，线程式进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点儿在运行中不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。</p>
<p><code>线程之间的关系:</code>一个线程可以创建和撤销另一个线程，同一进程中的多个线程之间可以并发执行。由于线程之间的相互制约，致使线程在运行中呈现出间断性。线程也有就绪、阻塞和运行三种基本状态。</p>
<p><code>特点:</code> </p>
<ul>
<li>轻型实体(线程的实体包括程序、数据和TCB。TCB用于指示被执行指令序列的程序计数器、保留局部变量、少数状态参数和返回地址等的一组寄存器和堆栈。)</li>
<li>独立调度和分派的基本单位</li>
<li>可并发执行</li>
<li>共享进程资源(所有线程都具有相同的地址空间(进程的地址空间)，这意味着，线程可以访问该地址空间的每一个虚地址；此外，还可以访问进程所拥有的已打开文件、定时器、信号量机构等。由于同一个进程内的线程共享内存和文件，所以线程之间互相通信不必调用内核。)</li>
</ul>
<h2 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2><blockquote>
<p>1、线程是处理器调度的基本单位，但进程不是。<br>2、二者均可并发执行。<br>3、进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元<br>4、同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。<br>5、进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束<br>6、线程是轻两级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的<br>7、线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源<br>8、线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志</p>
</blockquote>
<h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><ul>
<li>Mutex(互斥锁): 用来锁住公用的内存，同时只有一个线程访问。</li>
<li>这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做”信号量”（Semaphore），用来保证多个线程不会互相冲突。<br>不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>进程是资源分配的基本单位，线程是调度的基本单位。进程包含线程，线程共用进程的资源。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h2&gt;&lt;p&gt;&lt;code&gt;狭义定义:&lt;/code&gt;进程是正在运行的程序的实例。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;组成:&lt;/code&gt;进程是一个实体。每一个进程都有它自己的地址空间。一般情况下，包括文本区域(text region)、数据区域(data region)和堆栈(stack region)。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
</feed>
