<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sanstyle</title>
  <subtitle>功有所不全 才有所不任 力有所不足</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunstady.github.io/"/>
  <updated>2018-01-19T16:40:00.759Z</updated>
  <id>http://sunstady.github.io/</id>
  
  <author>
    <name>MC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>py基础三</title>
    <link href="http://sunstady.github.io/2018/01/20/py%E5%9F%BA%E7%A1%80%E4%B8%89/"/>
    <id>http://sunstady.github.io/2018/01/20/py基础三/</id>
    <published>2018-01-19T16:38:49.000Z</published>
    <updated>2018-01-19T16:40:00.759Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"></div><div class="line"><span class="comment">#打开一个文件</span></div><div class="line">fo= open(<span class="string">"4.txt"</span>, <span class="string">"r+"</span>)</div><div class="line"><span class="comment">#fo.write( "www.runoob.com!\nVery good site!\n");</span></div><div class="line">str= fo.read(10)</div><div class="line"></div><div class="line"><span class="builtin-name">print</span> <span class="string">"文件名: "</span>, fo.name</div><div class="line"><span class="builtin-name">print</span> <span class="string">"是否已关闭: "</span>, fo.closed</div><div class="line"><span class="builtin-name">print</span> <span class="string">"访问模式: "</span>, fo. mode</div><div class="line"><span class="builtin-name">print</span> <span class="string">"末尾是否强制加空格: "</span>, fo.softspace</div><div class="line"><span class="builtin-name">print</span> <span class="string">"读取的字符串是: "</span>, str</div><div class="line"></div><div class="line">position= fo.tell()</div><div class="line"><span class="builtin-name">print</span> <span class="string">"当前文件位置: "</span>, position</div><div class="line"></div><div class="line">position= fo.seek(0, 0)</div><div class="line">str= fo.read(10)</div><div class="line"><span class="builtin-name">print</span> <span class="string">"重新读取字符串: "</span>, str</div><div class="line">fo.close()</div><div class="line"></div><div class="line"><span class="comment">#重命名文件</span></div><div class="line">import os</div><div class="line">os.rename(<span class="string">"4.txt"</span>, <span class="string">"1.txt"</span>)</div><div class="line"></div><div class="line"><span class="comment">#删除文件</span></div><div class="line">os.<span class="builtin-name">remove</span>(<span class="string">"1.txt"</span>)</div><div class="line"></div><div class="line"><span class="comment">#创建目录</span></div><div class="line">os.mkdir(<span class="string">"test"</span>)</div><div class="line"></div><div class="line"><span class="comment">#改变目录</span></div><div class="line"><span class="comment">#将当前目录改为"/home/newdir"</span></div><div class="line">os.chdir(<span class="string">"/home/newdir"</span>)</div><div class="line"></div><div class="line"><span class="comment">#显示当前目录</span></div><div class="line">os.getcwd()</div><div class="line"></div><div class="line"><span class="comment">#删除目录</span></div><div class="line">os.rmdir(<span class="string">"/tmp/test"</span>)</div><div class="line"></div><div class="line"><span class="comment">#在 write 内容后，直接 read 文件输出会为空，是因为指针已经在内容末尾。</span></div><div class="line"><span class="comment">#两种解决方式: 其一，先 close 文件，open 后再读取，其二，可以设置指针回到文件最初后再 read</span></div><div class="line"></div><div class="line">document = open(<span class="string">"testfile.txt"</span>, <span class="string">"w+"</span>);</div><div class="line"><span class="builtin-name">print</span> <span class="string">"文件名: "</span>, document.name;</div><div class="line">document.write(<span class="string">"这是我创建的第一个测试文件！\nwelcome!"</span>);</div><div class="line"><span class="builtin-name">print</span> document.tell();</div><div class="line"><span class="comment">#输出当前指针位置</span></div><div class="line">document.seek(os.SEEK_SET);</div><div class="line"><span class="comment">#设置指针回到文件最初</span></div><div class="line">context = document.read();</div><div class="line"><span class="builtin-name">print</span> context;</div><div class="line">document.close();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;
    
    </summary>
    
    
      <category term="python" scheme="http://sunstady.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>py基础二</title>
    <link href="http://sunstady.github.io/2018/01/18/py%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
    <id>http://sunstady.github.io/2018/01/18/py基础二/</id>
    <published>2018-01-18T15:53:18.000Z</published>
    <updated>2018-01-18T15:56:07.316Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"></div><div class="line">import <span class="keyword">time</span></div><div class="line"></div><div class="line"><span class="keyword">localtime</span> = time.localtime(time.time())</div><div class="line"><span class="keyword">print</span> <span class="string">"本地时间为 :"</span>, <span class="keyword">localtime</span></div><div class="line"></div><div class="line"><span class="comment">#获取格式化的时间</span></div><div class="line"><span class="keyword">localtime</span> = time.asctime( time.localtime(time.time()) )</div><div class="line"><span class="keyword">print</span> <span class="string">"本地时间为 :"</span>, <span class="keyword">localtime</span></div><div class="line"></div><div class="line"><span class="comment"># 格式化成2016-03-20 11:45:39形式</span></div><div class="line"><span class="keyword">print</span> time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime()) </div><div class="line"></div><div class="line"><span class="comment"># 格式化成Sat Mar 28 22:24:24 2016形式</span></div><div class="line"><span class="keyword">print</span> time.strftime(<span class="string">"%a %b %d %H:%M:%S %Y"</span>, time.localtime()) </div><div class="line">  </div><div class="line"><span class="comment"># 将格式字符串转换为时间戳</span></div><div class="line">a = <span class="string">"Sat Mar 28 22:24:24 2016"</span></div><div class="line"><span class="keyword">print</span> time.mktime(time.strptime(a,<span class="string">"%a %b %d %H:%M:%S %Y"</span>))</div><div class="line"></div><div class="line"><span class="comment">#获取某月日历</span></div><div class="line">import calendar</div><div class="line">cals = calendar.month(<span class="number">2018</span>, <span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"以下输出2018年1月份的日历:"</span></div><div class="line"><span class="keyword">print</span> cals;</div><div class="line"></div><div class="line">import datetime</div><div class="line">i = datetime.datetime.now()</div><div class="line"><span class="keyword">print</span> (<span class="string">"当前的日期和时间是 %s"</span> % i)</div><div class="line"><span class="keyword">print</span> (<span class="string">"ISO格式的日期和时间是 %s"</span> % i.isoformat() )</div><div class="line"><span class="keyword">print</span> (<span class="string">"当前的年份是 %s"</span> %i.year)</div><div class="line"><span class="keyword">print</span> (<span class="string">"当前的月份是 %s"</span> %i.month)</div><div class="line"><span class="keyword">print</span> (<span class="string">"当前的日期是  %s"</span> %i.day)</div><div class="line"><span class="keyword">print</span> (<span class="string">"dd/mm/yyyy 格式是  %s/%s/%s"</span> % (i.day, i.month, i.year) )</div><div class="line"><span class="keyword">print</span> (<span class="string">"当前小时是 %s"</span> %i.hour)</div><div class="line"><span class="keyword">print</span> (<span class="string">"当前分钟是 %s"</span> %i.minute)</div><div class="line"><span class="keyword">print</span> (<span class="string">"当前秒是  %s"</span> %i.second)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#函数</span></div><div class="line"></div><div class="line"><span class="comment">#缺省参数</span></div><div class="line"><span class="comment">#可写函数说明</span></div><div class="line">def printinfo( name, age = <span class="number">35</span> ):</div><div class="line">   <span class="string">"打印任何传入的字符串"</span></div><div class="line">   <span class="keyword">print</span> <span class="string">"Name: "</span>, name;</div><div class="line">   <span class="keyword">print</span> <span class="string">"Age "</span>, age;</div><div class="line">   <span class="keyword">return</span>;</div><div class="line"> </div><div class="line"><span class="comment">#调用printinfo函数</span></div><div class="line">printinfo( age=<span class="number">50</span>, name=<span class="string">"miki"</span> );</div><div class="line">printinfo( name=<span class="string">"miki"</span> );</div><div class="line"></div><div class="line"><span class="comment">#不定长参数</span></div><div class="line"><span class="comment">#加了星号（*）的变量名会存放所有未命名的变量参数。</span></div><div class="line"><span class="comment"># 可写函数说明</span></div><div class="line">def printinfo( arg1, *vartuple ):</div><div class="line">   <span class="string">"打印任何传入的参数"</span></div><div class="line">   <span class="keyword">print</span> <span class="string">"输出: "</span></div><div class="line">   <span class="keyword">print</span> arg1, <span class="string">'我是arg1'</span></div><div class="line">   <span class="keyword">for</span> var in vartuple:</div><div class="line">      <span class="keyword">print</span> var</div><div class="line">   <span class="keyword">return</span>;</div><div class="line"> </div><div class="line"><span class="comment"># 调用printinfo 函数</span></div><div class="line">printinfo( <span class="number">10</span> );</div><div class="line">printinfo(<span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">66</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#全局变量想作用于函数内，需加global</span></div><div class="line">globvar = <span class="number">0</span></div><div class="line"></div><div class="line">def set_globvar_to_one():</div><div class="line">    global globvar    <span class="comment"># 使用 global 声明全局变量</span></div><div class="line">    globvar = <span class="number">1</span></div><div class="line"></div><div class="line">def print_globvar():</div><div class="line">    <span class="keyword">print</span>(globvar)     <span class="comment"># 没有使用 global</span></div><div class="line"></div><div class="line">set_globvar_to_one()</div><div class="line"><span class="keyword">print</span>  globvar        <span class="comment"># 输出 1</span></div><div class="line">print_globvar()       <span class="comment"># 输出 1，函数内的 globvar 已经是全局变量</span></div><div class="line"></div><div class="line"><span class="comment">#列表反转函数</span></div><div class="line">def <span class="keyword">reverse</span>(li):</div><div class="line">    <span class="keyword">for</span> i in range(<span class="number">0</span>, len(li)/<span class="number">2</span>):</div><div class="line">        temp = li[i]</div><div class="line">        li[i] = li[-i-<span class="number">1</span>]</div><div class="line">        li[-i-<span class="number">1</span>] = temp</div><div class="line"></div><div class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="keyword">reverse</span>(l)</div><div class="line"><span class="keyword">print</span>(l)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
    
    </summary>
    
    
      <category term="python" scheme="http://sunstady.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ie11降级</title>
    <link href="http://sunstady.github.io/2018/01/17/ie11%E9%99%8D%E7%BA%A7/"/>
    <id>http://sunstady.github.io/2018/01/17/ie11降级/</id>
    <published>2018-01-17T08:13:55.000Z</published>
    <updated>2018-01-17T08:14:29.157Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ntce.cn/" target="_blank" rel="external">中小学教师资格证考试</a>有点坑…<br>上图<br><img src="https://raw.githubusercontent.com/sunstady/hexo/a39dee29260bcfe92f1110e14775444b564bd1ed/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81/1.png" alt="1"><br>说是使用IE6-IE10系列浏览器或“搜狗浏览器(兼容模式)”！对于我这种不太使用IE系列浏览器的人来说，确实有点…<br>下面说下解决方法：<br>打开你的IE<br><img src="https://raw.githubusercontent.com/sunstady/hexo/a39dee29260bcfe92f1110e14775444b564bd1ed/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81/2.png" alt="2"><br>按照流程进入到报名系统处<br><img src="https://raw.githubusercontent.com/sunstady/hexo/a39dee29260bcfe92f1110e14775444b564bd1ed/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81/7.png" alt="7"><br>发现系统提示<code>使用IE6-IE10系列浏览器或“搜狗浏览器(兼容模式)”！</code><br><img src="https://raw.githubusercontent.com/sunstady/hexo/a39dee29260bcfe92f1110e14775444b564bd1ed/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81/1.png" alt="1"><br>检查了下发现自家的IE是11，降级就行。<br>在此网页下，点右上角的齿轮，选择F12开发人员工具<br><img src="https://raw.githubusercontent.com/sunstady/hexo/a39dee29260bcfe92f1110e14775444b564bd1ed/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81/3.png" alt="3"><br>将<code>文档模式</code>和<code>用户代理字符串</code>改为11以下的就行，比如10<br><img src="https://raw.githubusercontent.com/sunstady/hexo/a39dee29260bcfe92f1110e14775444b564bd1ed/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81/4.png" alt="4"><br>然后将上方网址的<code>/memapp/ieNote</code>删除<br><img src="https://raw.githubusercontent.com/sunstady/hexo/e04c57a0ac6edf534a73ea0b78e190e68a3d2cfc/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81/8.png" alt="8"><br>再回车，就可以登录了。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/e04c57a0ac6edf534a73ea0b78e190e68a3d2cfc/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81/9.png" alt="9"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.ntce.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中小学教师资格证考试&lt;/a&gt;有点坑…&lt;br&gt;上图&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/suns
    
    </summary>
    
    
      <category term="Skill" scheme="http://sunstady.github.io/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>银行管理系统修改一</title>
    <link href="http://sunstady.github.io/2018/01/17/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9%E4%B8%80/"/>
    <id>http://sunstady.github.io/2018/01/17/银行管理系统修改一/</id>
    <published>2018-01-17T06:51:38.000Z</published>
    <updated>2018-01-17T07:37:20.288Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一个<a href="https://sunstady.github.io/2017/12/29/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/">银行管理系统</a>，现在对它进行了一些完善。<br>增加了主界面的背景图片。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/da8f266525d6e33d1091b4e13a1ea0655527f7db/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9%E4%B8%80/1.png" alt="1"><br>增加了管理员功能<br><img src="https://raw.githubusercontent.com/sunstady/hexo/da8f266525d6e33d1091b4e13a1ea0655527f7db/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9%E4%B8%80/2.png" alt="2"><br>管理员登陆成功<br><img src="https://raw.githubusercontent.com/sunstady/hexo/70bd83fbd842dbfb2ce8e6ba59ea429c79e1cc74/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9%E4%B8%80/3.png" alt="3"><br>管理员界面<br><img src="https://raw.githubusercontent.com/sunstady/hexo/da8f266525d6e33d1091b4e13a1ea0655527f7db/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9%E4%B8%80/4.png" alt="4"><br>点击查询按钮可以将数据库中的账户信息显示在上方表中。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/da8f266525d6e33d1091b4e13a1ea0655527f7db/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9%E4%B8%80/5.png" alt="5"><br>选中一行，可以对一些信息进行修改，比如删除或修改。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/da8f266525d6e33d1091b4e13a1ea0655527f7db/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9%E4%B8%80/6.png" alt="6"><br>完善了账户退出功能<br>用户登陆账户，点第一次退出会退出当前账户，再次点击退出会退出程序。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/dad7fe2656efc6349345cab1fe7c94c4d4aa9c23/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9%E4%B8%80/7.png" alt="7"><br><a href="http://download.csdn.net/download/sanstyle/10210018" target="_blank" rel="external">源码下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写过一个&lt;a href=&quot;https://sunstady.github.io/2017/12/29/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/&quot;&gt;银行管理系统&lt;/a&gt;，现在对它进行了一些完善。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://sunstady.github.io/tags/Java/"/>
    
      <category term="MySQL" scheme="http://sunstady.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>python基础一</title>
    <link href="http://sunstady.github.io/2018/01/16/python%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
    <id>http://sunstady.github.io/2018/01/16/python基础一/</id>
    <published>2018-01-16T15:59:02.000Z</published>
    <updated>2018-01-16T16:00:52.862Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> range(<span class="number">1</span>, <span class="number">5</span>) <span class="comment">#代表从1到5（不包括5）</span></div><div class="line"><span class="keyword">print</span> range(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>) <span class="comment">#代表从1到5，间隔2（不包括5）</span></div><div class="line"><span class="keyword">print</span> range(<span class="number">5</span>) <span class="comment">#代表从0到5（不包括5）</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="keyword">ord</span>(<span class="string">'b'</span>)  <span class="comment">#convert char to int</span></div><div class="line"><span class="keyword">print</span> <span class="keyword">chr</span>(<span class="number">100</span>)  <span class="comment">#convert int to char</span></div><div class="line"><span class="keyword">print</span> unichr(<span class="number">100</span>)  <span class="comment">#return a unicode byte</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#abs()和 fabs()区别</span></div><div class="line"><span class="comment">#abs()是一个内置函数， 而fabs()是在math模块中定义的。</span></div><div class="line"><span class="comment">#fabs()函数只适用于float和 integer类型，而abs()也适用于复数</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="keyword">abs</span>(-<span class="number">10</span>)</div><div class="line"></div><div class="line">import math</div><div class="line"><span class="keyword">print</span> math.fabs(-<span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> type(<span class="keyword">abs</span>(-<span class="number">10</span>))</div><div class="line"><span class="keyword">print</span> type(math.fabs(-<span class="number">10</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#多行语句</span></div><div class="line"></div><div class="line">total= <span class="string">'item_one   '</span>+ \</div><div class="line"><span class="string">'item_two   '</span>+ \</div><div class="line"><span class="string">'item_three'</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> total</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#字符串</span></div><div class="line"></div><div class="line">str = <span class="string">'Hello World!'</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> str           <span class="comment"># 输出完整字符串</span></div><div class="line"><span class="keyword">print</span> str[<span class="number">0</span>]        <span class="comment"># 输出字符串中的第一个字符</span></div><div class="line"><span class="keyword">print</span> str[<span class="number">2</span>:<span class="number">5</span>]      <span class="comment"># 输出字符串中第三个至第五个之间的字符串</span></div><div class="line"><span class="keyword">print</span> str[<span class="number">2</span>:]       <span class="comment"># 输出从第三个字符开始的字符串</span></div><div class="line"><span class="keyword">print</span> str * <span class="number">2</span>       <span class="comment"># 输出字符串两次</span></div><div class="line"><span class="keyword">print</span> str + <span class="string">"TEST"</span>  <span class="comment"># 输出连接的字符串</span></div><div class="line"><span class="keyword">print</span> str[:<span class="number">2</span>]       <span class="comment"># 输出从开始到第二个字符的字符串</span></div><div class="line"><span class="keyword">print</span> <span class="string">"更新字符串: "</span>, str[:<span class="number">3</span>]+ <span class="string">'sanstyle'</span>  <span class="comment">#更新字符串</span></div><div class="line"><span class="keyword">print</span> <span class="string">"My name is %s and age is %d!"</span> % (<span class="string">'style'</span>, <span class="number">21</span>)</div><div class="line"><span class="comment"># %s格式化字符串   %d格式化整数</span></div><div class="line"><span class="comment"># %c格式化字符及其ASCII码</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#列表</span></div><div class="line"></div><div class="line">list1 = [<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>];</div><div class="line"></div><div class="line"><span class="keyword">print</span> list1</div><div class="line"><span class="keyword">print</span> len(list1)          <span class="comment">#返回列表元素个数</span></div><div class="line"><span class="keyword">print</span> list1[-<span class="number">2</span>]           <span class="comment">#读取列表中倒数第二个元素</span></div><div class="line"><span class="keyword">print</span> list1[-<span class="number">2</span>:]          <span class="comment">#从倒数第二个元素开始读取</span></div><div class="line"><span class="keyword">print</span> list1[:-<span class="number">2</span>]          <span class="comment">#读到倒数第二个前(不包括倒数第二个)</span></div><div class="line">del list1[<span class="number">2</span>]              <span class="comment">#删除第三个</span></div><div class="line"><span class="keyword">print</span> list1</div><div class="line">list1.append(<span class="string">'3e3e'</span>)      <span class="comment">#在列表末尾添加新的对象</span></div><div class="line"><span class="keyword">print</span> list1.count(<span class="string">'3e3e'</span>) <span class="comment">#统计出现的次数</span></div><div class="line"><span class="keyword">print</span> list1.index(<span class="string">'3e3e'</span>) <span class="comment">#从列表重找出第一个匹配项的索引位置</span></div><div class="line">list1.remove(<span class="string">'3e3e'</span>)      <span class="comment">#移除列表中这个值的第一个匹配项</span></div><div class="line">list1.<span class="keyword">reverse</span>()           <span class="comment">#反向列表中元素</span></div><div class="line"><span class="keyword">print</span> list1</div><div class="line"></div><div class="line">list2=[<span class="number">123</span>,[<span class="string">"das"</span>,<span class="string">"aaa"</span>],<span class="number">234</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'aaa'</span> in list2      <span class="comment">#in只能判断一个层次的元素 </span></div><div class="line"><span class="keyword">print</span> <span class="string">'aaa'</span> in list2[<span class="number">1</span>]   <span class="comment">#选中列表中的二层列表进行判断</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#元组(元素不能修改)</span></div><div class="line"></div><div class="line"><span class="comment">#元组中只包含一个元素时，需要在元素后面添加逗号</span></div><div class="line">tup= (<span class="number">50</span>, )</div><div class="line"><span class="keyword">print</span> tup</div><div class="line"></div><div class="line">tup1= (<span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>)</div><div class="line">tup2= (<span class="string">'abc'</span>, <span class="string">'xyz'</span>)</div><div class="line"></div><div class="line"><span class="comment">#以下修改元组元素的操作是非法的</span></div><div class="line"><span class="comment">#tup1[0]= 100</span></div><div class="line"></div><div class="line"><span class="comment">#任意无符号的对象，以逗号隔开，默认为元组</span></div><div class="line"><span class="keyword">print</span> <span class="string">'abc'</span>, -<span class="number">4.24</span>e93, <span class="number">18</span>+<span class="number">6.6</span>j, <span class="string">'xyz'</span>;</div><div class="line"><span class="keyword">x</span>, <span class="keyword">y</span> = <span class="number">1</span>, <span class="number">2</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"Value of x , y : "</span>, <span class="keyword">x</span>,<span class="keyword">y</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#字典(可存储任意类型对象)</span></div><div class="line"></div><div class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"dict['Name']: "</span>, dict[<span class="string">'Name'</span>];</div><div class="line"><span class="keyword">print</span> <span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>];</div><div class="line"></div><div class="line">dict[<span class="string">'Age'</span>] = <span class="number">8</span>; <span class="comment"># update existing entry</span></div><div class="line">dict[<span class="string">'School'</span>] = <span class="string">"DPS School"</span>; <span class="comment"># Add new entry</span></div><div class="line"><span class="keyword">print</span> <span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>];</div><div class="line"><span class="keyword">print</span> <span class="string">"dict['School']: "</span>, dict[<span class="string">'School'</span>];</div><div class="line"></div><div class="line"><span class="keyword">print</span> dict</div><div class="line">del dict[<span class="string">'Name'</span>]; <span class="comment"># 删除键是'Name'的条目</span></div><div class="line"><span class="keyword">print</span> dict</div><div class="line"></div><div class="line"><span class="comment">#dict.clear();     # 清空词典所有条目</span></div><div class="line"><span class="comment">#print dict</span></div><div class="line"></div><div class="line"><span class="comment">#del dict ;        # 删除词典</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> dict.keys()   <span class="comment">#以列表返回一个字典所有的键</span></div><div class="line"><span class="keyword">print</span> dict.values() <span class="comment">#以列表返回一个字典所有的值</span></div><div class="line"></div><div class="line"><span class="comment">#字典值可以是任意数值类型</span></div><div class="line">dict1= &#123;<span class="string">"a"</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;      <span class="comment"># 值为列表</span></div><div class="line"><span class="keyword">print</span> dict1[<span class="string">'a'</span>][<span class="number">1</span>]</div><div class="line"></div><div class="line">dict2= &#123;<span class="string">"a"</span>:&#123;<span class="string">"c"</span>:<span class="string">"d"</span>&#125;&#125;  <span class="comment"># 值为字典 </span></div><div class="line"><span class="keyword">print</span> dict2[<span class="string">'a'</span>][<span class="string">'c'</span>]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
    
    </summary>
    
    
      <category term="python" scheme="http://sunstady.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>EditPlus运行py编码问题</title>
    <link href="http://sunstady.github.io/2018/01/15/EditPlus%E8%BF%90%E8%A1%8Cpy%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://sunstady.github.io/2018/01/15/EditPlus运行py编码问题/</id>
    <published>2018-01-15T14:36:54.000Z</published>
    <updated>2018-01-15T14:38:15.121Z</updated>
    
    <content type="html"><![CDATA[<p>文本编辑器是EditPlus，运行python时候报出如下错误: <code>SyntaxError: (unicode error) &#39;utf-8&#39; codec can&#39;t decode byte 0xc4 in position 0: invalid continuation byte</code>。<br>非常普通的Hello World，编码格式是utf-8<br><img src="https://raw.githubusercontent.com/sunstady/hexo/a1303b0bdcc6ffd361f25ca06653f2dd6c2e898e/py%E9%97%AE%E9%A2%98%E4%B8%80/1.png" alt="1"><br>解决方法：<br>用notepad++打开python1_1.py发现存储格式是ANSI。<br>保存的时候默认是保存成ANSI格式。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/a1303b0bdcc6ffd361f25ca06653f2dd6c2e898e/py%E9%97%AE%E9%A2%98%E4%B8%80/2.png" alt="2"><br>发现问题就好解决啦，保存文件的时候将文件格式换成UTF-8就好了。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/a1303b0bdcc6ffd361f25ca06653f2dd6c2e898e/py%E9%97%AE%E9%A2%98%E4%B8%80/3.png" alt="3"><br>成功输出！<br><img src="https://raw.githubusercontent.com/sunstady/hexo/a1303b0bdcc6ffd361f25ca06653f2dd6c2e898e/py%E9%97%AE%E9%A2%98%E4%B8%80/4.png" alt="4"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文本编辑器是EditPlus，运行python时候报出如下错误: &lt;code&gt;SyntaxError: (unicode error) &amp;#39;utf-8&amp;#39; codec can&amp;#39;t decode byte 0xc4 in position 0: inval
    
    </summary>
    
    
      <category term="python" scheme="http://sunstady.github.io/tags/python/"/>
    
      <category term="软件" scheme="http://sunstady.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>javax/xml/bind/DatatypeConverter</title>
    <link href="http://sunstady.github.io/2018/01/15/javax-xml-bind-DatatypeConverter/"/>
    <id>http://sunstady.github.io/2018/01/15/javax-xml-bind-DatatypeConverter/</id>
    <published>2018-01-15T07:35:27.000Z</published>
    <updated>2018-01-15T07:36:12.257Z</updated>
    
    <content type="html"><![CDATA[<p>话不多说，上图。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7f76602e9ecba6b36378722b447e72238f15fc24/java%E9%97%AE%E9%A2%98%E4%BA%8C/1.png" alt="NoClassDefFoundError"><br>重装系统后，想调试下实训的代码，发现一样的代码竟然运行不了。后来发现，重装后安装的jdk版本是9.0，并不是完全兼容。<br>看错误提示是<code>java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverter</code>。<br>这是因为Java虚拟机在编译时候能找到这个类，而在运行时没能找到这个类。按照错误提示，下载这个类的jar包就行。<br><a href="https://github.com/sunstady/hexo/blob/master/java%E9%97%AE%E9%A2%98%E4%BA%8C/javax.xml.bind.DatatypeConverter.jar" target="_blank" rel="external">jar包下载地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话不多说，上图。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunstady/hexo/7f76602e9ecba6b36378722b447e72238f15fc24/java%E9%97%AE%E9%A2%98%E4%
    
    </summary>
    
    
      <category term="Java" scheme="http://sunstady.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>.length和.length()的区别</title>
    <link href="http://sunstady.github.io/2017/12/31/length%E5%92%8C-length-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://sunstady.github.io/2017/12/31/length和-length-的区别/</id>
    <published>2017-12-31T13:20:59.000Z</published>
    <updated>2017-12-31T13:21:26.401Z</updated>
    
    <content type="html"><![CDATA[<p>java中的length属性是针对<code>数组</code>说的,比如说你声明了一个数组,想知道这个数组的长度则用到了length这个属性。java中的length()方法是针对<code>字符串String</code>说的,如果想看这个字符串的长度则用到length()这个方法。</p>
<p>如何获取一个数组的长度？以及，如何获取一个字符串的长度？</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">int</span>[] arr = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>];</div><div class="line">System.out.<span class="built_in">println</span>(arr.length);<span class="comment">//使用length获取数组的程度</span></div><div class="line"> </div><div class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"abc"</span>;</div><div class="line">System.out.<span class="built_in">println</span>(<span class="built_in">str</span>.length());<span class="comment">//使用length()获取字符串的长度</span></div></pre></td></tr></table></figure>
<p>为什么数组有length属性？</p>
<blockquote>
<p>数组是一个容器对象，其中包含固定数量的同一类型的值。<br>一旦数组被创建，他的长度就是固定的了。<br>数组的长度可以作为final实例变量的长度。<br>因此，长度可以被视为一个数组的属性。</p>
</blockquote>
<p>为什么String有length()方法？</p>
<blockquote>
<p>String背后的数据结构是一个char数组,所以没有必要来定义一个不必要的属性（因为该属性在char数值中已经提供了）。<br>和C不同的是，Java中char的数组并不等于字符串，虽然String的内部机制是char数组实现的。</p>
</blockquote>
<p><code>注: 要想把char[]转成字符串有以下方式：</code><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> []s = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</div><div class="line"><span class="keyword">String</span> string1 = s.toString();</div><div class="line"><span class="keyword">String</span> string2 = <span class="keyword">new</span> <span class="keyword">String</span>(s);</div><div class="line"><span class="keyword">String</span> string3 = <span class="keyword">String</span>.valueOf(s);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java中的length属性是针对&lt;code&gt;数组&lt;/code&gt;说的,比如说你声明了一个数组,想知道这个数组的长度则用到了length这个属性。java中的length()方法是针对&lt;code&gt;字符串String&lt;/code&gt;说的,如果想看这个字符串的长度则用到length
    
    </summary>
    
    
      <category term="Java" scheme="http://sunstady.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java知识点一</title>
    <link href="http://sunstady.github.io/2017/12/31/Java%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%80/"/>
    <id>http://sunstady.github.io/2017/12/31/Java知识点一/</id>
    <published>2017-12-31T12:59:54.000Z</published>
    <updated>2017-12-31T13:00:26.790Z</updated>
    
    <content type="html"><![CDATA[<p>1、面向对象的特征有哪些方面</p>
<blockquote>
<p>1、抽象：抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。<br>抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。<br>抽象包括两个方面，一是过程抽象，二是数据抽象。</p>
<p>2、继承：继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。<br>对象的一个新类可以从现有的类中派生，这个过程称为类继承。<br>新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。<br>派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。</p>
<p>3、封装：封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。<br>面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象。</p>
<p>4、多态性：多态性是指允许不同类的对象对同一消息作出响应。<br>多态性包括参数化多态性和包含多态性。<br>多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。</p>
</blockquote>
<p>2、什么是接口？写出接口与抽象类的区别。</p>
<blockquote>
<p>接口是你在写程序时所有方法的一个声明，只设计，无实现。<br>区别：<br>1、都没有方法体<br>2、通过接口可以支持多重继承，抽象类不支持<br>3、抽象类可以包含已经实现的方法而接口不可以</p>
</blockquote>
<p>3、写出String和StringBuffer的区别，int和Integer有什么区别。</p>
<blockquote>
<p>String类创建的对象不可修改，StringBuffer创建的的对象是内存空间可以改变的大小的，可以调用append方法追加到字符串序列;<br>Int是java的原始数据类型，Integer是java为int提供的封装类,引用数据类型。</p>
</blockquote>
<p>4、sleep() 和 wait() 有什么区别?sleep()不释放同步锁,wait()释放同步锁。</p>
<blockquote>
<p>sleep方法是Thread类的静态方法,线程在占用CPU资源期间，通过调用Sleep方法来使自己放CPU资源，休眠一段时间。<br>wait是object类的方法，可以中断方法的执行，使本线程等待，暂时让出cpu的使用权，并允许其他线程使用这个同步方法。</p>
</blockquote>
<p>5、简述线程的生命周期</p>
<blockquote>
<p>新建、运行、中断、死亡</p>
</blockquote>
<p>6、举例说明如何获取当前的年月日，时分秒以及从1970年到现在的毫秒数。<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Date</span> nowtime=<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">System</span>.out.println(nowtime);</div><div class="line"></div><div class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">  <span class="built_in">Date</span> currentTime=<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">  <span class="built_in">Date</span> beginTime=sdf.<span class="built_in">parse</span>(<span class="string">"1970-01-01 12:53:30"</span>);</div><div class="line">  long interval=(currentTime.getTime()-beginTime.getTime());</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、面向对象的特征有哪些方面&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、抽象：抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。&lt;br&gt;抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。&lt;br&gt;抽象包括两个方面，一是过
    
    </summary>
    
    
      <category term="Java" scheme="http://sunstady.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>窗口程序</title>
    <link href="http://sunstady.github.io/2017/12/31/%E7%AA%97%E5%8F%A3%E7%A8%8B%E5%BA%8F/"/>
    <id>http://sunstady.github.io/2017/12/31/窗口程序/</id>
    <published>2017-12-31T12:52:07.000Z</published>
    <updated>2017-12-31T12:52:48.717Z</updated>
    
    <content type="html"><![CDATA[<p><code>编写一个程序，生成一个窗口。标题为记事本，有一个文件菜单，正中显示一个TextArea,默认值为“我是TextArea！”。</code><br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.awt.event.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowJiShiBen</span> <span class="keyword"><span class="keyword">extends</span> <span class="type">Frame</span></span></span></div><div class="line"><span class="class"><span class="keyword"><span class="keyword">implements</span> <span class="type">ActionListener</span></span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">	MenuBar menubar;</div><div class="line">	Menu menu;</div><div class="line">	MenuItem itemExit;</div><div class="line">	MenuItem itemSave;</div><div class="line">	TextArea text1;</div><div class="line">    	FileWriter tofile;</div><div class="line">	BufferedWriter out; </div><div class="line">	FileDialog filedialog_save;</div><div class="line">	WindowJiShiBen(<span class="keyword">String</span> s)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">super</span>(s);</div><div class="line">		</div><div class="line">		text1 =<span class="keyword">new</span> <span class="type">TextArea</span>(<span class="string">"我是TextArea"</span>);</div><div class="line">		menubar =<span class="keyword">new</span> <span class="type">MenuBar</span>();</div><div class="line">		menu =<span class="keyword">new</span> <span class="type">Menu</span>(<span class="string">"文件"</span>);</div><div class="line">		itemExit =<span class="keyword">new</span> <span class="type">MenuItem</span>(<span class="string">"退出"</span>);</div><div class="line">		itemExit.setShortcut(<span class="keyword">new</span> <span class="type">MenuShortcut</span>(KeyEvent.VK_E));</div><div class="line">		itemSave=<span class="keyword">new</span> <span class="type">MenuItem</span>(<span class="string">"保存"</span>);</div><div class="line">		itemSave.setShortcut(<span class="keyword">new</span> <span class="type">MenuShortcut</span>(KeyEvent.VK_S));</div><div class="line">		filedialog_save=<span class="keyword">new</span> <span class="type">FileDialog</span>(<span class="built_in">this</span>,<span class="string">"保存文件话框"</span>,FileDialog.SAVE);</div><div class="line">		menu.add(itemExit);</div><div class="line">		menubar.add(menu);</div><div class="line">		menu.add(itemSave);</div><div class="line">		setMenuBar(menubar);</div><div class="line">		add(text1);</div><div class="line">		itemExit.addActionListener(<span class="built_in">this</span>);</div><div class="line">		itemSave.addActionListener(<span class="built_in">this</span>);</div><div class="line">		setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">150</span>,<span class="number">150</span>);</div><div class="line">		setVisible(<span class="literal">true</span>);</div><div class="line">		validate();</div><div class="line">		filedialog_save.addWindowListener(<span class="keyword">new</span> <span class="type">WindowAdapter</span>()</div><div class="line">                                  &#123;<span class="keyword">public</span> void windowClosing(WindowEvent e)</div><div class="line">                                       &#123;  filedialog_save.setVisible(<span class="literal">false</span>);</div><div class="line">                                       &#125;</div><div class="line">                                  &#125;);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> void actionPerformed(ActionEvent e)</div><div class="line">		&#123;</div><div class="line">		<span class="keyword">if</span>(e.getSource()==itemExit)</div><div class="line">			&#123;System.exit(<span class="number">0</span>);&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(e.getSource()==itemSave)</div><div class="line">			&#123;filedialog_save.setVisible(<span class="literal">true</span>);</div><div class="line">           			<span class="keyword">if</span>(filedialog_save.getFile()!=<span class="literal">null</span>)</div><div class="line">             		 	&#123; <span class="keyword">try</span> &#123;  File file=<span class="keyword">new</span><span class="type"></span></div><div class="line"><span class="type"></span>                       File(filedialog_save.getDirectory(),filedialog_save.getFile());</div><div class="line">                       tofile=<span class="keyword">new</span> <span class="type">FileWriter</span>(file);</div><div class="line">                       out=<span class="keyword">new</span> <span class="type">BufferedWriter</span>(tofile);</div><div class="line">                       out.write(text1.getText(),<span class="number">0</span>,(text1.getText()).length());</div><div class="line">                       out.close();</div><div class="line">                       tofile.close();</div><div class="line">                     &#125;</div><div class="line">                <span class="keyword">catch</span>(IOException e2)&#123;&#125;</div><div class="line">              &#125;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jishiben</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span> args[])</div><div class="line">	&#123;</div><div class="line">		WindowJiShiBen win=<span class="keyword">new</span> <span class="type">WindowJiShiBen</span>(<span class="string">"记事本"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;编写一个程序，生成一个窗口。标题为记事本，有一个文件菜单，正中显示一个TextArea,默认值为“我是TextArea！”。&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
    
    </summary>
    
    
      <category term="Java" scheme="http://sunstady.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java常见问题一</title>
    <link href="http://sunstady.github.io/2017/12/29/Java%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%80/"/>
    <id>http://sunstady.github.io/2017/12/29/Java常见问题一/</id>
    <published>2017-12-29T14:12:01.000Z</published>
    <updated>2017-12-29T14:12:32.576Z</updated>
    
    <content type="html"><![CDATA[<p><code>错误: 找不到或无法加载主类 Test8.Main</code><br>解决方法：右键你的项目，选最后一个<code>properties</code>，把<code>properties</code>属性里的<code>java compiler</code>–&gt;<code>building</code>–&gt;<code>abort build when build path errors occur</code>前的勾去掉就好了。<br>好像还有其他的<a href="http://blog.csdn.net/chenleixing/article/details/44816629" target="_blank" rel="external">解决方法</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;错误: 找不到或无法加载主类 Test8.Main&lt;/code&gt;&lt;br&gt;解决方法：右键你的项目，选最后一个&lt;code&gt;properties&lt;/code&gt;，把&lt;code&gt;properties&lt;/code&gt;属性里的&lt;code&gt;java compiler&lt;/code&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://sunstady.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>银行管理系统</title>
    <link href="http://sunstady.github.io/2017/12/29/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://sunstady.github.io/2017/12/29/银行管理系统/</id>
    <published>2017-12-29T12:01:23.000Z</published>
    <updated>2017-12-30T02:53:25.332Z</updated>
    
    <content type="html"><![CDATA[<p>此次的项目是银行管理系统，要求连接数据库，在此记录下。</p>
<h2 id="总界面"><a href="#总界面" class="headerlink" title="总界面"></a>总界面</h2><p>在此界面除了开户和退出两个功能能实现外，其它功能都需要登录后才能使用。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7218246af6cd6ff8b84b2543aef07fa9b9fc0c3a/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1.png" alt="总界面"></p>
<h2 id="开户界面"><a href="#开户界面" class="headerlink" title="开户界面"></a>开户界面</h2><p>此界面需要用户输入个人信息来进行开户操作，用户输入的信息将会保存到数据库中。开户成功后系统会反馈一个开户账号。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7218246af6cd6ff8b84b2543aef07fa9b9fc0c3a/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2.png" alt="开户界面"><br>这个账号是使用的<code>System.currentTimeMillis()</code>产生一个当前的毫秒，这个毫秒其实就是自1970年1月1日0时起的毫秒数。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7218246af6cd6ff8b84b2543aef07fa9b9fc0c3a/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/3.png" alt="开户账号"></p>
<h2 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h2><p>此界面需要用户输入开户的账号和密码，系统会从数据库中读取信息与之比对，无误则成功登录。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7218246af6cd6ff8b84b2543aef07fa9b9fc0c3a/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/4.png" alt="登录界面"></p>
<h2 id="存款界面"><a href="#存款界面" class="headerlink" title="存款界面"></a>存款界面</h2><p>此界面需要用户输入存款金额，完成后系统会显示当前账号的余额。此操作记录将会存到数据库中。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7218246af6cd6ff8b84b2543aef07fa9b9fc0c3a/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/4.png" alt="存款界面"></p>
<h2 id="取款界面"><a href="#取款界面" class="headerlink" title="取款界面"></a>取款界面</h2><p>此界面需要用户输入取款金额，完成后系统会显示当前账号的余额。此操作记录将会保存到数据库中。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7218246af6cd6ff8b84b2543aef07fa9b9fc0c3a/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/6.png" alt="取款界面"></p>
<h2 id="转账界面"><a href="#转账界面" class="headerlink" title="转账界面"></a>转账界面</h2><p>此界面需要用户输入对方的账号和转账金额，完成后系统会显示当前账号的余额。此操作记录将会保存到数据库中。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7218246af6cd6ff8b84b2543aef07fa9b9fc0c3a/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/7.png" alt="转账界面"></p>
<h2 id="销户界面"><a href="#销户界面" class="headerlink" title="销户界面"></a>销户界面</h2><p>进入此界面，系统会判断账户余额是否为零，如果不是，不能销户。用户将余额取出，销户完成。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7218246af6cd6ff8b84b2543aef07fa9b9fc0c3a/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/8.png" alt="销户界面"></p>
<h2 id="修改密码界面"><a href="#修改密码界面" class="headerlink" title="修改密码界面"></a>修改密码界面</h2><p>用户需要输入两次相同的六位数字或字母密码，此操作记录将会保存到数据库中。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7218246af6cd6ff8b84b2543aef07fa9b9fc0c3a/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/10.png" alt="修改密码界面"></p>
<h2 id="查看个人信息界面"><a href="#查看个人信息界面" class="headerlink" title="查看个人信息界面"></a>查看个人信息界面</h2><p>此界面将会显示查询到的当前账户的信息包括账号，姓名，性别，身份证号，联系电话以及开户时间。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7218246af6cd6ff8b84b2543aef07fa9b9fc0c3a/%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/9.png" alt="查看个人信息界面"><br><a href="http://download.csdn.net/download/sanstyle/10180777" target="_blank" rel="external">源码</a>可在这里下载。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此次的项目是银行管理系统，要求连接数据库，在此记录下。&lt;/p&gt;
&lt;h2 id=&quot;总界面&quot;&gt;&lt;a href=&quot;#总界面&quot; class=&quot;headerlink&quot; title=&quot;总界面&quot;&gt;&lt;/a&gt;总界面&lt;/h2&gt;&lt;p&gt;在此界面除了开户和退出两个功能能实现外，其它功能都需要登录后才
    
    </summary>
    
    
      <category term="Java" scheme="http://sunstady.github.io/tags/Java/"/>
    
      <category term="MySQL" scheme="http://sunstady.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Four_or_six</title>
    <link href="http://sunstady.github.io/2017/12/13/Four-or-six/"/>
    <id>http://sunstady.github.io/2017/12/13/Four-or-six/</id>
    <published>2017-12-13T12:55:23.000Z</published>
    <updated>2017-12-13T12:56:03.207Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/1.jpg" alt="1"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/2.jpg" alt="2"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/3.jpg" alt="3"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/4.jpg" alt="4"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/5.jpg" alt="5"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/6.jpg" alt="6"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/7.jpg" alt="7"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/8.jpg" alt="8"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/9.jpg" alt="9"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/10.jpg" alt="10"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/11.jpg" alt="11"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/21.jpg" alt="21"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/22.jpg" alt="22"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/23.jpg" alt="23"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/24.jpg" alt="24"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/25.jpg" alt="25"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/26.jpg" alt="26"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/27.jpg" alt="27"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/28.jpg" alt="28"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/29.jpg" alt="29"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunstady/hexo/ce2d5c805447695b8a695e8d23b44548e3293151/Four%20or%20six/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;br&gt;&lt;im
    
    </summary>
    
    
      <category term="English" scheme="http://sunstady.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>OS填空题</title>
    <link href="http://sunstady.github.io/2017/12/12/OS%E5%A1%AB%E7%A9%BA%E9%A2%98/"/>
    <id>http://sunstady.github.io/2017/12/12/OS填空题/</id>
    <published>2017-12-12T12:40:54.000Z</published>
    <updated>2017-12-13T11:44:33.365Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">影响文件安全的主要因素:</span> `人为因素`, `系统因素`, `自然因素`。</div><div class="line"><span class="symbol">程序执行时呈现出局部性规律:</span> `时间局限性`, `空间局限性`。</div><div class="line"><span class="symbol">操作系统的主要功能有:</span> `处理机管理`, `存储器管理`, `设备管理`, `文件管理`, `用户接口`。</div><div class="line"><span class="symbol">解决通道“瓶颈”问题最有效的方法是增加设备到主机间的:</span> `通路`。</div><div class="line"><span class="symbol">进程三种基本状态:</span> `就绪状态`, `执行状态`, `阻塞状态`。</div><div class="line"><span class="symbol">目录管理的主要功能:</span> `实现按名存取`, `提高检索速度`, `文件共享`, `允许文件重名`。</div><div class="line"><span class="symbol">在操作系统中，实现进程同步的机制有:</span> `信号量机制`, `管程机制`。</div><div class="line"><span class="symbol">进程同步机制应遵循的准则:</span> `空闲让进`, `忙则等待`, `有限等待`, `让权等待`。</div><div class="line"><span class="symbol">抢占式进程调度方式基于的主要原则有:</span> `优先权原则`, `短进程优先原则`, `时间片原则`。</div><div class="line"><span class="symbol">请求分页系统的主要硬件支持有:</span> `请求分页页表机制`, `缺页中断机构`, `地址变换机构`。</div><div class="line"><span class="symbol">进程死锁原因:</span> `竞争资源`, `进程间推进顺序非法`。</div><div class="line"><span class="symbol">通常采用解除死锁的两种方法是:</span> `剥夺资源`, `撤消进程`。</div><div class="line"><span class="symbol">设备分配中的主要数据结构(英文缩写):</span> `DCT`, `COCT`, `CHCT`, `SDT`。</div><div class="line"><span class="symbol">进程、文件、线程在系统中是否存在的唯一标志(英文缩写):</span> `PCB`, `FCB`, `TCB`。</div><div class="line"><span class="symbol">产生进程死锁的必要条件:</span> `互斥条件`, `请求和保持条件`, `不剥夺条件`, `环路等待条件`。</div><div class="line"><span class="symbol">目前比较流行的操作系统(实例):</span> `Windows`, `UNIX`, `Linux`。</div><div class="line"><span class="symbol">OS(操作系统)的基本特征:</span> `并发性`, `共享性`, `虚拟性`, `异步性`。</div><div class="line"><span class="symbol">OS(操作系统)的基本类型:</span> `批处理系统`, `分时系统`, `实时系统`。</div><div class="line"><span class="symbol">外存分配条件:</span> `连续分配`, `链接分配`, `索引分配`。</div><div class="line"><span class="symbol">文件物理结构:</span> `顺序文件`, `链接文件`, `索引文件`。</div><div class="line"><span class="symbol">设备的独立性:</span> `LUT`。</div><div class="line"><span class="symbol">按设备的固有属性分类，将I/O设备分为:</span> `独占设备`, `共享设备`, `虚拟设备`。</div><div class="line"><span class="symbol">虚拟存储理论:</span> `局部性原理`。</div><div class="line"><span class="symbol">虚拟设备技术:</span> `SPOOLing`。</div><div class="line"><span class="symbol">将一台物理I/O设备虚拟为多台逻辑I/O设备的技术:</span> `SPOOLing`。</div><div class="line"><span class="symbol">UNIX本质特征:</span> `OSI`。</div><div class="line"><span class="symbol">UNIX内核结构:</span> `进程控制子系统`, `文件子系统`。</div><div class="line"><span class="symbol">OS(操作系统)设计目标:</span> `方便性`, `有效性`, `可扩充性`, `开放性`。</div><div class="line"><span class="symbol">OS(操作系统)用户接口:</span> `命令接口`, `程序接口`, `图形用户接口`。</div><div class="line">`方便性`和`有效性`是操作系统设计中最重要的两个目标</div><div class="line"><span class="number">1990</span>年后，`开放性`已成为新系统或软件能否被广泛应用的至关重要的因素。</div><div class="line">`并发性`和`共享性`是多用户、多任务操作系统两个最基本的特征。</div><div class="line">`并发性`是多用户、多任务操作系统最重要的特征。</div><div class="line">在OS基本特征中，`异步性`是指进程是以人们不可预知的速度向前推进的。</div><div class="line">在操作系统基本类型中，`可靠性`是实时系统最重要的特征。</div><div class="line">在操作系统接口中，`程序接口`亦称为`系统调用`。</div><div class="line">进程所请求的一次I/O完成后，将使进程状态从`阻塞状态`变为`就绪状态`。</div><div class="line">操作系统中处于执行状态的进程时间片用完后，进程状态将转变为`就绪状态`。</div><div class="line">操作系统中处于执行状态的进程提出I/O后请求后，进程状态将转变为`阻塞状态`。</div><div class="line">进程三种基本状态中，`就绪状态`是指进程已分配到除CPU以外的所有必要资源。</div><div class="line">同步机制准则中，`让权等待`是指当进程不能进入自己的临界区时，应立即释放处理机。</div><div class="line">在文件系统中，文件属性信息存储在`数据结构(英文缩写)FCB`中。</div><div class="line">操作系统利用`数据结构(英文缩写)PCB`描述进程的基本情况和活动过程。</div><div class="line">系统将被中断进程的CPU现场信息保存在该进程的`数据结构(英文缩写)PCB`中。</div><div class="line"><span class="number">1965</span>年，荷兰学者Dijkstra提出的`信号量机制`是一种卓有成效的进程同步工具。</div><div class="line">在死锁的条件中，`不剥夺条件`是指进程已获得的资源只能在使用完时由自己释放。</div><div class="line">在死锁的条件中，`互斥条件`是指在一段时间内，某资源只能被一个进程占用。</div><div class="line">`资源的按序分配法`是摒弃死锁条件中的`环路等待条件`来预防死锁的发生。</div><div class="line">现代操作系统产生死锁的条件中，`互斥条件`是不能被摒弃来预防死锁的发生。</div><div class="line">在局部性原理中，产生`时间局限性`的典型原因是在程序中存在着大量的循环操作。</div><div class="line">在局部性原理中，产生`空间局限性`的典型情况是程序的顺序执行。</div><div class="line">在请求分页系统的硬件支持中，当所要访问的页面不在内存时，由`缺页中断机构`实现。</div><div class="line">在请求分页系统的硬件支持中，页面置换算法需要应用`请求页表机制`实现。</div><div class="line"><span class="symbol">为了实现设备的独立性，系统必须设置(英文缩写):</span> `LUT`。</div><div class="line"><span class="symbol">在设备分配中，用于记录每一个设备情况的数据结构(英文缩写):</span> `DCT`。</div><div class="line"><span class="symbol">在设备分配中，用于记录全部设备情况的数据结构(英文缩写):</span> `SDT`。</div><div class="line"><span class="symbol">在设备分配中，用于记录每一个控制器情况的数据结构(英文缩写):</span> `COCT`。</div><div class="line">在设备的固有属性分类中，`独占设备`属于临界资源，即进程临界区访问的资源。</div><div class="line">在设备的固有属性分类中，典型的独占设备有`打印机`、`磁带机`等。</div><div class="line">在设备的固有属性分类中，典型的共享设备有`磁盘`、`光盘`。</div><div class="line">在假脱机打印机系统中，在设备的固有属性分类，是将`独占设备`改造为`共享设备`。</div><div class="line">在假脱机打印机系统中，在设备的固有属性分类，实现了`虚拟设备`功能。</div><div class="line">`SPOOLing`技术是对脱机I/O系统的模拟，或称为`假脱机技术`。</div><div class="line">在索引节点中设置链接引用(links)计数的目的是为了实现目录管理的`文件共享功能`。</div><div class="line">实现`按名存取`是文件系统目录管理中最基本的功能。</div><div class="line">实现`按名存取`是文件系统向用户提供的最基本的服务。</div><div class="line">通过`建立后备系统`，防止由`自然因素`所造成的文件系统的不安全性。</div><div class="line">通过`存取控制机制`，防止由`人为因素`所造成的文件系统的不安全性。</div><div class="line">通过`采取容错技术`，防止由`系统因素`所造成的文件系统的不安全性。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
    
      <category term="OS" scheme="http://sunstady.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>隐写之图片隐藏</title>
    <link href="http://sunstady.github.io/2017/12/08/%E9%9A%90%E5%86%99%E4%B9%8B%E5%9B%BE%E7%89%87%E9%9A%90%E8%97%8F/"/>
    <id>http://sunstady.github.io/2017/12/08/隐写之图片隐藏/</id>
    <published>2017-12-08T02:40:17.000Z</published>
    <updated>2017-12-08T02:50:17.874Z</updated>
    
    <content type="html"><![CDATA[<p>在图片中插入其他的文件，例如一段音乐，一段视频，或是某个文件。<br>1、准备一张图片和要隐藏的资料信息<br>比如这里，style准备了一张壁纸和一个txt文件。现在需要将一个文件隐藏在这张图片里。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/6f6dc0c117f0279e1c8407f5e690c1a3e704b3b4/%E9%9A%90%E5%86%99%E4%B9%8B%E5%9B%BE%E7%89%87%E9%9A%90%E8%97%8F/1.jpg" alt="1"><br>2、选择需要隐藏的文件，右键压缩成一个rar文件，文件名字可以随便起，在这里style将其压缩成1.rar。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/6f6dc0c117f0279e1c8407f5e690c1a3e704b3b4/%E9%9A%90%E5%86%99%E4%B9%8B%E5%9B%BE%E7%89%87%E9%9A%90%E8%97%8F/2.jpg" alt="2"><br>3、新建一个文本文档，名字随便起，style这里将其命名为2.txt,，在里面输入以下代码<code>copy /b 1.jpg+1.rar 222.jpg</code><br><img src="https://raw.githubusercontent.com/sunstady/hexo/6f6dc0c117f0279e1c8407f5e690c1a3e704b3b4/%E9%9A%90%E5%86%99%E4%B9%8B%E5%9B%BE%E7%89%87%E9%9A%90%E8%97%8F/3.jpg" alt="3"><br>4、接着另存为这个文本文档，重要的是文件类型得是bat类型，也就是批处理命令。style这里命名为2.bat。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/6f6dc0c117f0279e1c8407f5e690c1a3e704b3b4/%E9%9A%90%E5%86%99%E4%B9%8B%E5%9B%BE%E7%89%87%E9%9A%90%E8%97%8F/4.jpg" alt="4"><br>5、双击这个bat命令，得到一个最终的文件222.jpg。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/6f6dc0c117f0279e1c8407f5e690c1a3e704b3b4/%E9%9A%90%E5%86%99%E4%B9%8B%E5%9B%BE%E7%89%87%E9%9A%90%E8%97%8F/5.jpg" alt="5"><br>6、这个图片打开看的话和正常的图片一样，但是大小与封面图片相比是不一样的，其实这里面包含了刚刚隐藏的那些重要信息。将得到的新的图片的后缀改为rar，然后解压就可得到我们刚刚隐藏的文件。也可以用二进制编辑器查看，发现在后面有个zip的文件头，可以将这个压缩包提取出来，再解压。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/6f6dc0c117f0279e1c8407f5e690c1a3e704b3b4/%E9%9A%90%E5%86%99%E4%B9%8B%E5%9B%BE%E7%89%87%E9%9A%90%E8%97%8F/6.jpg" alt="6"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/6f6dc0c117f0279e1c8407f5e690c1a3e704b3b4/%E9%9A%90%E5%86%99%E4%B9%8B%E5%9B%BE%E7%89%87%E9%9A%90%E8%97%8F/7.jpg" alt="7"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在图片中插入其他的文件，例如一段音乐，一段视频，或是某个文件。&lt;br&gt;1、准备一张图片和要隐藏的资料信息&lt;br&gt;比如这里，style准备了一张壁纸和一个txt文件。现在需要将一个文件隐藏在这张图片里。&lt;br&gt;&lt;img src=&quot;https://raw.githubuserc
    
    </summary>
    
    
      <category term="CTF" scheme="http://sunstady.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>情报搜集技术</title>
    <link href="http://sunstady.github.io/2017/12/07/%E6%83%85%E6%8A%A5%E6%90%9C%E9%9B%86%E6%8A%80%E6%9C%AF/"/>
    <id>http://sunstady.github.io/2017/12/07/情报搜集技术/</id>
    <published>2017-12-07T13:05:45.000Z</published>
    <updated>2017-12-08T02:05:26.128Z</updated>
    
    <content type="html"><![CDATA[<p>#外围信息搜集<br><code>网站的IP地址查询</code><br>kali中使用nslookup工具对testfire.net这个网站进行查询<br>root@bt:~# nslookup<br>回车后输入set type=A<br>回车后输入testfire.net<br>就可以了。</p>
<p><code>IP2Location地理位置查询</code><br>查询IP地址，可以在<a href="http://www.maxmind.com" target="_blank" rel="external">http://www.maxmind.com</a> 网站上使用该服务。<br>如果是国内的IP地址，推荐使用“<a href="http://www.cz88.net" target="_blank" rel="external">QQ纯真数据库</a>”。</p>
<p><code>IP2Domain反查域名</code><br>一台物理服务器上面可能运行多个虚拟主机，这些虚拟主机具有不同的域名，但通常公用一个IP地址。如果你要知道有哪些网站公用这台服务器，就有可能通过此台服务器上其他网站的漏洞获取服务器控制权，进而迂回获取渗透目标的权限，这种攻击技术也称为<code>旁注</code>。可以使用<a href="http://www.ip-adress.com/reverse_ip/" target="_blank" rel="external">http://www.ip-adress.com/reverse_ip/</a> 提供的服务查询有哪些域名指向同一个IP地址。<br>国内也有一些类似的网站可用于IP反查，如<a href="http://www.7c.com/" target="_blank" rel="external">http://www.7c.com/</a> ,该网站针对国内的IP查询结果更为准确。</p>
<p><code>探索网站的目录结构</code><br>如果管理员允许，Web服务器会将没有默认页面的目录以文件列表的方式显示出来，而这些开放了浏览功能的网站目录往往会透露一些网站可供浏览的页面之外的信息，甚至能够再这些目录中发现网站源代码甚至后端数据库的连接口令。可以再Google中输入<code>parent directory site:testfire.net</code>来查找<code>testfire.net</code>上的此类目录。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/a7365224bc81889bc152361bc00d6c6adf8f1fdd/Metasploit/1.jpg" alt="1"><br>打开第一个链接，网站的bank目录中的文件内容一览无余。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/a7365224bc81889bc152361bc00d6c6adf8f1fdd/Metasploit/2.jpg" alt="2"><br>在浏览网站目录时，应当对以下几种文件特别留意: </p>
<blockquote>
<p>1、扩展名为inc的文件:可能会包含网站的配置信息，如数据库用户名/口令等。<br>2、扩展名为bak的文件：通常是一些文本编辑器在编辑源代码后留下的备份文件，可以让你知道与其对应的程序脚本文件中的大致内容。<br>3、扩展名为txt或sql的文件：一般包含网站运行的SQL脚本，可能会透露类似数据库结构等信息。</p>
</blockquote>
<p><code>检索特定类型的文件</code><br>在Google中输入<code>site:testfire.net filetype:xls</code>，可以查询testfire.net这个网站中<code>xls</code>类型文件。</p>
<p><code>搜索网站中的E-mail地址</code><br>使用Metasploit中一个非常棒的辅助模块search_email_collector，进行有针对性的右键地址搜集。<br>search_email_collector模块要求提供一个邮箱后缀（域名），它并不是通过直接遍历网站页面获取邮件地址，而是通过多个搜索引擎的查询结果分析使用此后缀的邮件地址，使用它就能够很方便地获取某个机构地大量邮件地址。<br>msf&gt; use auxiliary/gather/search_email_collector<br>msf auxiliary(search_email_collector)&gt; set DOMAIN altoromutual.com<br>回车后输入<code>run</code><br>testfire网站模拟了一个名为altoromutual地电子银行站点，用它来做测试。</p>
<p><code>搜索易存在SQL注入点地页面</code><br>使用Google可以筛选出网站中容易出现SQL注入漏洞的页面，如网站登录页面。例如在google.com中输入<code>site:testfire.net inurl:login</code>关键字进行搜索，得到了其后台登录URL。</p>
<p>#主机探测与端口扫描<br><code>Metasploit的主机发现模块</code><br>Metasploit中提供了一些辅助模块可用于活跃主机的发现，这些模块位于Metasploit源码路径的modules/auxiliary/scanner/discovery/目录中。其中两个常用模块的主要功能为: </p>
<blockquote>
<p>1、arp_sweep使用ARP请求枚举本地局域网络中的所有活跃主机。<br>2、udp_sweep通过发送UDP数据包探查指定主机是否活跃，并发现主机上的UDP服务。</p>
</blockquote>
<p>Metasploit的arp_sweep模块是一个ARP扫描器。如下演示使用方法。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7b903b987b55b4a51741ca5aa99b739ca823fa26/Metasploit/3.jpg" alt="3"><br>首先需要输入RHOSTS来对扫描目标进行设置，设置好后输入run命令启动扫描器。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7b903b987b55b4a51741ca5aa99b739ca823fa26/Metasploit/4.jpg" alt="4"><br>从代码中可以看到，arp_sweep模块很快发现了192.168.2.0/24网段上拥有3台活跃主机，其中前两个IP地址为宿主主机上模拟的虚拟网卡IP地址。arp_sweep模块只能探测同一子网中的活跃主机，对于远程网络，可以使用更为强大的Nmap扫描器进行探测。</p>
<p><code>使用Nmap进行主机探测</code><br>通常一个Nmap命令格式如下所示:<br><code>nmap &lt;扫描选项&gt; &lt;扫描目标&gt;</code><br>如果仅是在一个内部网中发现存活主机，可以使用-sn，这个选项会使用ICMP的Ping扫描获取网络中的存活主机情况，而不会进一步探测主机的详细情况。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7b903b987b55b4a51741ca5aa99b739ca823fa26/Metasploit/5.jpg" alt="5"><br>如果是在Internet环境中，推荐使用-Pn选项，它会告诉Nmap不要使用Ping扫描，因为ICMP数据包通常无法穿透Internet上的网络边界(通常是被防火墙过滤掉了)。<br>在Internet环境中，可以使用nmap-PU通过对开放的UDP端口进行探测以确定存活的主机，其功能类似Metasploit中的udp_sweep辅助模块。Nmap在进行UDP主机探测时，默认会列出开放的TCP端口，如果想加快扫描速度，可以使用-sn告诉Nmap仅探测存活主机，不对开放的TCP端口进行扫描。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7b903b987b55b4a51741ca5aa99b739ca823fa26/Metasploit/6.jpg" alt="6"></p>
<p><code>操作系统辨识</code><br>可以使用-O选项让Nmap对目标的操作系统进行识别。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/1bcad0f74cfe69d2cdd622dd9fa2f05703111fc5/Metasploit/7.jpg" alt="7"><br>使用nmap -A命令可以获取更详细的服务和操作系统信息。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/1bcad0f74cfe69d2cdd622dd9fa2f05703111fc5/Metasploit/8.jpg" alt="8"></p>
<p>#端口扫描与服务类型探测<br><code>Metasploit中的端口扫描器</code><br>Metasploit的辅助模块中提供了几款实用的端口扫描器。可以输入<code>search portscan</code>命令找到相关的端口扫描器。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/c70b8330ff18e201da09119dfd60926f4a1126d3/Metasploit/9.jpg" alt="9"></p>
<blockquote>
<p>1、ack: 通过ACK扫描的方式对防火墙上未被屏蔽的端口进行探测。<br>2、ftpbounce: 通过FTP bounce攻击的原理对TCP服务进行枚举，一些新的FTP服务器软件能够很好的防范FTP bounce攻击，但在一些旧的Solaris及FreeBSD系统的FTP服务中此类攻击方式仍能够被利用。<br>3、syn: 通过一次完整的TCP连接来判断端口是否开放，这种扫描方式最精确，但扫描速度慢。<br>4、xmas: 一种更为隐秘的扫描方式，通过发送FIN、PSH和URG标志，能够躲避一些高级的TCP标记监测器的过滤。</p>
</blockquote>
<p>一般情况下，推荐使用syn端口扫描器，因为它的扫描速度较快、结果精确且不容易被对方察觉。</p>
<p><code>Nmap的端口扫描功能</code><br>Nmap对端口的状态分为六个层次: open(开放)、cloase(关闭)、filtered(被过滤)、unfiltered(未过滤)、open|filtered(开放或被过滤)、closed|filtered(关闭或被过滤)。<br>下面对这几种端口状态进行说明: </p>
<blockquote>
<p>1、open: 一个应用程序正在此端口上进行监听，以接收来自TCP、UDP或SCTP协议的数据。这是在渗透测试中最关注的一类端口，开放端口往往能够为我们提供一条能够进入系统的攻击路径。<br>2、closed: 关闭的端口指的是主机已响应，但没有应用程序监听的端口。这些信息并非毫无价值，扫描出关闭端口至少说明主机是活跃的。<br>3、filtered: 指Nmap不能确认端口是否开放，但根据响应数据猜测该端口可能被防火墙等设备过滤。<br>4、unfiltered: 仅在使用ACK扫描时，Nmap无法确定端口是否开放，会归为此类。可以使用其他类型的扫描(如WIndow扫描、SYN扫描、FIN扫描)进一步确认端口的信息。</p>
</blockquote>
<p>常用的Nmap扫描类型参数主要有: </p>
<blockquote>
<p>1、-sT: TCP connect扫描，类似Metasploit中的tcp扫描模块。<br>2、-sS: TCP SYN扫描，类似Metasploit中的syn扫描模块。<br>3、-sF/-sX/-sN: 这些扫描通过发送一些特殊的标志位以避开设备或软件的监测，<br>4、-sP: 通过发送ICMP echo请求探测主机是否存活，原理同ping。<br>5、-sU: 探测目标主机开放了哪些UDP端口。<br>6、-sA: TCP ACK扫描，类似Metasploit中的ack扫描模块。</p>
</blockquote>
<p>常用的Nmap扫描选项有: </p>
<blockquote>
<p>1、-Pn: 在扫描之前，不发送ICMP echo请求测试目标是否活跃。<br>2、-O: 启用对于TCP/IP协议栈的指纹特征扫描以获取远程主机的操作系统类型等信息。<br>3、-F: 快速扫描模式，只扫描在nmap-services中列出的端口。<br>4、-p&lt;端口范围&gt;: 可以使用这个参数指定希望扫描的端口，也可以使用一段端口范围(例如1~1023).在IP协议扫描中(使用-sO参数)，该参数的意义是指定想要扫描的协议号(0~255)。</p>
</blockquote>
<p>使用Nmap对192.168.2.2进行一次端口扫描的结果，其中用到了-sS选项，该选项指定使用TCP SYN扫描，这种扫描方式不等待打开一个完全的TCP连接，所以执行速度会更快，而且这种扫描通常不会被IDS等设备记录。如果想同时列出UDP端口，可以加上-sU，但执行速度就会变得比较慢。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/c70b8330ff18e201da09119dfd60926f4a1126d3/Metasploit/10.jpg" alt="10"></p>
<p><code>使用Nmap探测更详细的服务信息</code><br>如果想获取更加详细的服务版本等信息，需要使用-sV选项。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/c70b8330ff18e201da09119dfd60926f4a1126d3/Metasploit/11.jpg" alt="11"></p>
<p>#服务扫描与查点<br>在Metasploit的Scanner辅助模块中，有很多用于服务扫描和查点的工具，这些工具常以[service_name]_version和[service_name]_login命令。</p>
<blockquote>
<p>1、[service_name]_version可用于遍历网络中包含了某种服务的主机，并进一步确定服务的版本。<br>2、[service_name]_login可对于某种服务进行口令探测攻击。</p>
</blockquote>
<p>在MSF终端中，可以输入search name:_version命令查看所有可用的服务查点模块。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/a704d0e75ae982e9cab39e4f2ffb6c19e6302111/Metasploit/12.jpg" alt="12"></p>
<p><code>SSH服务扫描</code><br>与telnet不同的是，ssh采用安全的加密信息传输方式。通常管理员会使用ssh对服务器进行远程管理，服务器会向ssh客户端返回一个远程的Shell连接。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/721626d19ef6e241055ddbe78243d436b477c61f/Metasploit/13.jpg" alt="13"></p>
<p><code>Oracle数据库服务查点</code><br>使用mssql_ping模块查找网络中的Microsoft SQL Server，使用tnslsnr_version模块查找网络中开放端口的Oracle监听器服务。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/721626d19ef6e241055ddbe78243d436b477c61f/Metasploit/14.jpg" alt="14"></p>
<p><code>开放代理探测与利用</code><br>避免被对方的入侵监测系统跟踪，需要隐藏自己的身份，最简单和最常见的是使用代理服务器。<br>Metasploit提供了open_proxy模块，能够让你更加方便地获取免费地HTTP代理服务器地址。获取免费开放代理后，就可以在浏览器或者一些支持配置代理地渗透软件中配置代理，这可以在进行渗透测试时隐藏你的真实IP地址。比开放代理更保险地隐藏攻击源方法是利用开放的或自主架设VPN服务，可以自己架设OpenVPN。使用这些VPN可以采用加密方式转发路由你的渗透测试数据包，而无需担心你的攻击发起源被跟踪到。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/721626d19ef6e241055ddbe78243d436b477c61f/Metasploit/15.jpg" alt="15"></p>
<p>#口令猜测与嗅探<br><code>SSH服务口令猜测</code><br>载入ssh_login模块后，首先需要设置RHOSTS参数指定口令攻击的对象，可以是一个IP地址，或一段IP地址，同样也可以使用CIDR表示的地址区段。然后使用USERNAME参数指定一个用户名(或者使用USER_FILE参数指定一个包含多个用户名的文本文件，每个用户名占一行)，并使用PASSWORD指定一个特定的口令字符串(或者使用PASS_FILE参数指定一个包含多个口令的字典文件，每个口令占一行)，也可以使用USER PASS_FILE指定一个用户名和口令的配对文件(用户名和口令之间用空格隔开，每对用户名和口令占一行)。默认情况下，ssh_login模块还会尝试空口令，以及与用户名相同的弱口令进行登录测试。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/721626d19ef6e241055ddbe78243d436b477c61f/Metasploit/16.jpg" alt="16"></p>
<p><code>psnuffle口令嗅探</code><br>psnuffle是目前Metasploit中唯一用于口令嗅探的工具，可以使用它截获常见协议的身份认证过程，并将用户名和口令信息记录下来。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/721626d19ef6e241055ddbe78243d436b477c61f/Metasploit/17.jpg" alt="17"></p>
<p>#网络漏洞扫描<br><code>OpenVAS漏洞扫描器</code><br>可以用来识别远程主机、Web应用存在的各种漏洞，使用NVT脚本对多种远程系统的安全问题进行监测。<br>在kali中安装openVAS，输入命令: <code>apt-get install openvas</code>，安装过程中可能会出现错误，输入<code>openvas-check-setpu</code>查看安装到哪步出错，以及缺少什么东西。<br>配置OpenVAS的过程如下:<br>1、输入以下命令生成OpenVAS运行所需的证书文件，生成证书过程中，系统会询问一些信息，可以按回车键使用其默认值: </p>
<blockquote>
<p>root@bt:~# openvas-mkcert -q<br>root@bt:~# openvas-mkcert-client -n om -i</p>
</blockquote>
<p>2、升级NVT库: </p>
<blockquote>
<p>root@bt:~# openvas-nvt-sync</p>
</blockquote>
<p>3、对OpenVAS的扫描引擎进行一些初始化的操作，依次输入如下命令: </p>
<blockquote>
<p>root@bt:~# openvassd<br>root@bt:~# openvasmd –migrate<br>root@bt:~# openvasmd –rebuild</p>
</blockquote>
<p>4、使用openvasad命令添加一个管理员角色的OpenVAS登录用户: </p>
<blockquote>
<p>root@bt:~# openvasad -c ‘add_user’ -n admin -r ‘Admin’<br>Enter password:<br>admain:MESSAGE:2327:2017-12-07 03h37.44 EDT: No rules file provided, the new user will have no restrictions.<br>admin:MESSAGE:2327:2017-12-07 03h37.44 EDT: User admin has been successfully created.</p>
</blockquote>
<p>5、在终端输入如下命令启动OpenVAS Scanner: </p>
<blockquote>
<p>root@bt:~# openvassd –listen=127.0.0.1 –port=9391<br>All plugins loaded</p>
</blockquote>
<p>6、最后启动OpenVAS Manager，在终端中运行如下命令: </p>
<blockquote>
<p>root@bt:~# openvasmd –database=/usr/local/var/lib/openvas/mgr/tasks.db –slisten=127.0.0.1 –sport=9391 –listen=0.0.0.0 –port=9390</p>
</blockquote>
<p>如果在启动OpenVAS各部件时报错，可以运行以下脚本确认OpenVAS已经安装配置无误，如果脚本运行检测出错误，请按照屏幕提示进行修正。</p>
<blockquote>
<p>root@bt:~# /pentest/misc/openvas/openvas-check-setup</p>
</blockquote>
<p><code>Nmap扫描漏洞</code><br>如果服务器开启了SMB服务，可以使用Nmap的SMB服务漏洞扫描模块对它进行探测。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/40f45c2251e998b61ef89f35d93a199d4eea86b2/Metasploit/18.jpg" alt="18"><br><img src="https://raw.githubusercontent.com/sunstady/hexo/40f45c2251e998b61ef89f35d93a199d4eea86b2/Metasploit/19.jpg" alt="19"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#外围信息搜集&lt;br&gt;&lt;code&gt;网站的IP地址查询&lt;/code&gt;&lt;br&gt;kali中使用nslookup工具对testfire.net这个网站进行查询&lt;br&gt;root@bt:~# nslookup&lt;br&gt;回车后输入set type=A&lt;br&gt;回车后输入testfire.ne
    
    </summary>
    
    
      <category term="渗透" scheme="http://sunstady.github.io/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>java读写文件二</title>
    <link href="http://sunstady.github.io/2017/12/05/java%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E4%BA%8C/"/>
    <id>http://sunstady.github.io/2017/12/05/java读写文件二/</id>
    <published>2017-12-05T03:54:42.000Z</published>
    <updated>2017-12-05T03:56:07.941Z</updated>
    
    <content type="html"><![CDATA[<p>使用Java的输入流、输出流将一个文本文件的内容按行读出，每读出一行就顺序添加行号，并写入到另一个文件中。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="keyword">BufferedReader</span>;  </div><div class="line"><span class="keyword">import</span> java.io.BufferedWriter;  </div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;  </div><div class="line"><span class="keyword">import</span> java.io.FileReader;  </div><div class="line"><span class="keyword">import</span> java.io.FileWriter;  </div><div class="line"><span class="keyword">import</span> java.io.IOException;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> class Test4 &#123;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line"><span class="comment">     * @param args </span></div><div class="line"><span class="comment">     */</span>  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;  </div><div class="line">        <span class="comment">// TODO Auto-generated method stub  </span></div><div class="line">        <span class="keyword">BufferedReader</span> br = <span class="keyword">null</span>;  </div><div class="line">        BufferedWriter bw = <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            br = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(<span class="keyword">new</span> FileReader(<span class="string">"Input.txt"</span>));  </div><div class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"Output.txt"</span>));  </div><div class="line">            <span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">""</span>;  </div><div class="line">            <span class="built_in">int</span> i = <span class="number">1</span>;  </div><div class="line">            <span class="keyword">while</span>((<span class="built_in">str</span> = br.readLine()) != <span class="keyword">null</span>)&#123;  </div><div class="line">                bw.write(i+<span class="string">" "</span>);  </div><div class="line">                bw.write(<span class="built_in">str</span>);  </div><div class="line">                System.out.<span class="built_in">println</span>(i+ <span class="string">" "</span>+ <span class="built_in">str</span>);  </div><div class="line">                bw.newLine();  <span class="comment">//换行，换行后可以使用readline()来一行行读取数据</span></div><div class="line">                i++;  </div><div class="line">            &#125;  </div><div class="line">            bw.flush();  </div><div class="line">            <span class="comment">//清空缓冲区的数据流，进行流的操作时，数据先被读到内存中，然后再用数据写到文件中，</span></div><div class="line">            <span class="comment">//当数据读完时，如果调用close()方法关闭读写流，就可能造成数据丢失，</span></div><div class="line">            <span class="comment">//原因是一部分的数据可能留在缓存区</span></div><div class="line">            bw.close();  </div><div class="line">            br.close();  </div><div class="line">              </div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;  </div><div class="line">            <span class="comment">// TODO Auto-generated catch block  </span></div><div class="line">            System.out.<span class="built_in">println</span>(<span class="string">"找不到指定文件！"</span>);  </div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;  </div><div class="line">            <span class="comment">// TODO Auto-generated catch block  </span></div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Java的输入流、输出流将一个文本文件的内容按行读出，每读出一行就顺序添加行号，并写入到另一个文件中。&lt;br&gt;&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div cla
    
    </summary>
    
    
      <category term="Java" scheme="http://sunstady.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java读写文件一</title>
    <link href="http://sunstady.github.io/2017/12/05/java%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E4%B8%80/"/>
    <id>http://sunstady.github.io/2017/12/05/java读写文件一/</id>
    <published>2017-12-05T03:27:31.000Z</published>
    <updated>2017-12-05T03:56:38.060Z</updated>
    
    <content type="html"><![CDATA[<p><code>写入文件后可逆序输出</code><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Test3 &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">		<span class="comment">//创建文件对象</span></div><div class="line">		<span class="keyword">File</span> <span class="keyword">file</span>= <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"2.txt"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">file</span>.exists()) &#123;</div><div class="line">			<span class="comment">//文件存在</span></div><div class="line">			String name= <span class="keyword">file</span>.getName();</div><div class="line">			<span class="keyword">long</span> len= <span class="keyword">file</span>.length();</div><div class="line">			<span class="comment">//判断文件隐藏属性</span></div><div class="line">			<span class="keyword">boolean</span> hidden= <span class="keyword">file</span>.isHidden();</div><div class="line">			System.out.<span class="keyword">println</span>(<span class="string">"文件名称: "</span>+ name+ <span class="string">"\n文件长度: "</span>+ len+ <span class="string">"\n隐藏属性: "</span>+ hidden);</div><div class="line">			writefile(<span class="keyword">file</span>);</div><div class="line">			readfile(<span class="keyword">file</span>);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">//文件不存在，创建文件</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">file</span>.createNewFile();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;<span class="keyword">finally</span> &#123;</div><div class="line">				System.out.<span class="keyword">println</span>(<span class="string">"文件已创建"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> readfile(<span class="keyword">File</span> <span class="keyword">file</span>) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">		FileInputStream fileInputStream= <span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">byte</span>[] b= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> len= fileInputStream.<span class="keyword">read</span>(b);</div><div class="line">		fileInputStream.close();</div><div class="line">		StringBuilder ab = <span class="keyword">new</span> StringBuilder(<span class="keyword">new</span> String(b, <span class="number">0</span>, len));</div><div class="line">		</div><div class="line">		System.out.<span class="keyword">println</span>(<span class="string">"文件读出的内容是: \n"</span>+ ab.<span class="keyword">reverse</span>().toString());</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> writefile(<span class="keyword">File</span> <span class="keyword">file</span>) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Scanner in= <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		System.out.<span class="keyword">println</span>(<span class="string">"请输入要写入得内容"</span>);</div><div class="line">		String string= in.<span class="keyword">next</span>();</div><div class="line">		</div><div class="line">		<span class="comment">//建立文件传输管道</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			FileOutputStream fileOutputStream= <span class="keyword">new</span> FileOutputStream(<span class="keyword">file</span>);</div><div class="line">			</div><div class="line">			<span class="comment">//写文件</span></div><div class="line">			fileOutputStream.<span class="keyword">write</span>(string.getBytes());</div><div class="line">			</div><div class="line">			<span class="comment">//关闭管道</span></div><div class="line">			fileOutputStream.close();</div><div class="line">			System.out.<span class="keyword">println</span>(<span class="string">"文件写入完成"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;写入文件后可逆序输出&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;
    
    </summary>
    
    
      <category term="Java" scheme="http://sunstady.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>UDP简单大文件传送</title>
    <link href="http://sunstady.github.io/2017/12/04/UDP%E7%AE%80%E5%8D%95%E5%A4%A7%E6%96%87%E4%BB%B6%E4%BC%A0%E9%80%81/"/>
    <id>http://sunstady.github.io/2017/12/04/UDP简单大文件传送/</id>
    <published>2017-12-04T12:40:03.000Z</published>
    <updated>2017-12-04T12:46:45.624Z</updated>
    
    <content type="html"><![CDATA[<p>话不多说，直接上代码。<br>运行的时候先运行<code>You.java</code>, 再运行<code>My.java</code><br><code>My.java</code><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.net.*;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</div><div class="line"><span class="keyword">import</span> java.awt.event.*;</div><div class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</div><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> My&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">		<span class="keyword">new</span> MyFrame();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> MyFrame <span class="keyword">extends</span> JFrame <span class="keyword">implements</span>  ActionListener &#123;</div><div class="line">	JTextField out_message = <span class="keyword">new</span> JTextField(<span class="number">16</span>);</div><div class="line">	JTextArea in_message = <span class="keyword">new</span> JTextArea();</div><div class="line">	JButton cfile = <span class="keyword">new</span> JButton(<span class="string">"选择文件"</span>);</div><div class="line">	JFileChooser chooser = <span class="keyword">new</span> JFileChooser();</div><div class="line"></div><div class="line">	<span class="keyword">public</span> MyFrame() &#123;		</div><div class="line">		setTitle(<span class="string">"My"</span>);</div><div class="line">		<span class="comment">// setSize(600, 600);</span></div><div class="line">		setVisible(<span class="keyword">true</span>);</div><div class="line">		setBounds(<span class="number">300</span>, <span class="number">200</span>, <span class="number">350</span>, <span class="number">300</span>);</div><div class="line">		cfile.addActionListener(<span class="keyword">this</span>);</div><div class="line">		<span class="comment">// send.addActionListener(this);</span></div><div class="line">		<span class="comment">// out_message.addKeyListener(this);</span></div><div class="line">		JPanel pSouth = <span class="keyword">new</span> JPanel();</div><div class="line">		pSouth.add(out_message);</div><div class="line">		pSouth.add(cfile);</div><div class="line">		<span class="comment">// pSouth.add(send);</span></div><div class="line">		add(pSouth, <span class="string">"South"</span>);</div><div class="line">		add(<span class="keyword">new</span> JScrollPane(in_message), <span class="string">"Center"</span>);</div><div class="line">		validate();</div><div class="line">		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> actionPerformed(ActionEvent event) &#123;</div><div class="line">		chooser.setFileSelectionMode(<span class="number">0</span>);</div><div class="line">		<span class="keyword">int</span> status = chooser.showOpenDialog(<span class="keyword">null</span>);</div><div class="line">		<span class="keyword">if</span> (status == <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">File</span> <span class="keyword">file</span> = chooser.getSelectedFile();</div><div class="line">			out_message.setText(<span class="keyword">file</span>.getAbsolutePath());</div><div class="line">			out_message.grabFocus();</div><div class="line">			<span class="keyword">long</span> startTime = System.currentTimeMillis();<span class="comment">// 获取当前时间</span></div><div class="line"></div><div class="line">			<span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[UDPUtils.BUFFER_SIZE];<span class="comment">// 发送文件的字节数组</span></div><div class="line">			<span class="keyword">byte</span>[] receiveBuf = <span class="keyword">new</span> <span class="keyword">byte</span>[Math.max(UDPUtils.successData.length, UDPUtils.exitData.length)];<span class="comment">// 传送验证信息的字节数组</span></div><div class="line"></div><div class="line">			RandomAccessFile accessFile = <span class="keyword">null</span>;</div><div class="line">			DatagramPacket dpk = <span class="keyword">null</span>;</div><div class="line">			DatagramSocket dsk = <span class="keyword">null</span>;</div><div class="line">			<span class="keyword">int</span> readSize = -<span class="number">1</span>;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				accessFile = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">file</span>.getAbsolutePath(), <span class="string">"r"</span>);<span class="comment">// 创建一个只读的文件流</span></div><div class="line">				dpk = <span class="keyword">new</span> DatagramPacket(buf, buf.length,</div><div class="line">						<span class="keyword">new</span> InetSocketAddress(InetAddress.getByName(<span class="string">"192.168.199.143"</span>), UDPUtils.PORT + <span class="number">1</span>));<span class="comment">// 创建一个待发送数据包</span></div><div class="line">				dsk = <span class="keyword">new</span> DatagramSocket(UDPUtils.PORT);<span class="comment">// 接收....</span></div><div class="line">				dsk.setSoTimeout(<span class="number">1000</span>);<span class="comment">// 设置确认报文超时重传</span></div><div class="line">				<span class="keyword">int</span> sendCount = <span class="number">0</span>;<span class="comment">// 记录发送的数据包的数量</span></div><div class="line">				<span class="keyword">while</span> ((readSize = accessFile.<span class="keyword">read</span>(buf, <span class="number">0</span>, buf.length)) != -<span class="number">1</span>) &#123;<span class="comment">// 将文件的数据读满字节数组，返回读入数组的总字节数，如果到文件尾则等于-1</span></div><div class="line">					<span class="comment">// 未读到文件尾</span></div><div class="line">					dpk.setData(buf, <span class="number">0</span>, readSize);<span class="comment">// 设置包的缓冲区长度为读入的字节数</span></div><div class="line">					dsk.send(dpk);<span class="comment">// 发送包</span></div><div class="line">					<span class="comment">// 等待服务端回应</span></div><div class="line">					&#123;</div><div class="line">						<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">							dpk.setData(receiveBuf, <span class="number">0</span>, receiveBuf.length);<span class="comment">// UDPUtils.successData.length);</span></div><div class="line">							<span class="keyword">try</span> &#123;</div><div class="line">								dsk.receive(dpk);<span class="comment">// 接收数据包</span></div><div class="line">								<span class="keyword">if</span> (!UDPUtils.isEqualsByteArray(UDPUtils.successData, receiveBuf, dpk.getLength())) &#123;<span class="comment">// 返回的不是成功标志</span></div><div class="line">									<span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(<span class="string">"数据没有收到！"</span>);</div><div class="line">								&#125; <span class="keyword">else</span> &#123;</div><div class="line">									<span class="keyword">break</span>;</div><div class="line">								&#125;</div><div class="line">							&#125; <span class="keyword">catch</span> (SocketTimeoutException | TimeoutException e) &#123;<span class="comment">//没有收到数据包或返回的不是成功标志</span></div><div class="line">								<span class="comment">// TODO 超时重传</span></div><div class="line">								System.out.<span class="keyword">println</span>(<span class="string">"resend ..."</span>);</div><div class="line">								dpk.setData(buf, <span class="number">0</span>, readSize);</div><div class="line">								dsk.send(dpk);</div><div class="line">								<span class="keyword">continue</span>;</div><div class="line">							&#125;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					System.out.<span class="keyword">println</span>(<span class="string">"send count of "</span> + (++sendCount) + <span class="string">"!"</span>);</div><div class="line">				&#125;</div><div class="line">				<span class="comment">// 发送退出标志等待回应</span></div><div class="line"></div><div class="line">				System.out.<span class="keyword">println</span>(<span class="string">"客户端退出 ...."</span>);</div><div class="line">				dpk.setData(UDPUtils.exitData, <span class="number">0</span>, UDPUtils.exitData.length);</div><div class="line">				dsk.send(dpk);</div><div class="line"></div><div class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">					dpk.setData(receiveBuf, <span class="number">0</span>, receiveBuf.length);</div><div class="line">					<span class="comment">// byte[] receiveData = dpk.getData();</span></div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						dsk.receive(dpk);</div><div class="line">						<span class="keyword">if</span> (!UDPUtils.isEqualsByteArray(UDPUtils.exitData, receiveBuf, dpk.getLength())) &#123;</div><div class="line">							<span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(<span class="string">"Msg not equal"</span>);</div><div class="line">						&#125; <span class="keyword">else</span> &#123;</div><div class="line">							<span class="keyword">break</span>;</div><div class="line">						&#125;</div><div class="line">					&#125; <span class="keyword">catch</span> (SocketTimeoutException | TimeoutException e) &#123;</div><div class="line">						<span class="comment">// TODO 超时重传</span></div><div class="line">						System.out.<span class="keyword">println</span>(<span class="string">"client Resend exit message ...."</span>);</div><div class="line">						dsk.send(dpk);</div><div class="line">						<span class="keyword">continue</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					<span class="keyword">if</span> (accessFile != <span class="keyword">null</span>)</div><div class="line">						accessFile.close();</div><div class="line">					<span class="keyword">if</span> (dsk != <span class="keyword">null</span>)</div><div class="line">						dsk.close();</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">long</span> endTime = System.currentTimeMillis();</div><div class="line">			System.out.<span class="keyword">println</span>(<span class="string">"time:"</span> + (endTime - startTime));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>You.java</code><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.DatagramPacket;</div><div class="line"><span class="keyword">import</span> java.net.DatagramSocket;</div><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> You &#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SAVE_FILE_PATH = <span class="string">"C:/Users/马冲/Desktop/flag.zip"</span>;<span class="comment">//接收文件存储的路径</span></div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[UDPUtils.BUFFER_SIZE];</div><div class="line"></div><div class="line">		DatagramPacket dpk = <span class="keyword">null</span>;<span class="comment">//定义一个数据包</span></div><div class="line">		DatagramSocket dsk = <span class="keyword">null</span>;<span class="comment">//定义一个接收数据包</span></div><div class="line">		BufferedOutputStream bos = <span class="keyword">null</span>;<span class="comment">//定义一个缓冲的文件输出流</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			dpk = <span class="keyword">new</span> DatagramPacket(buf, buf.length,</div><div class="line">					<span class="keyword">new</span> InetSocketAddress(InetAddress.getByName(<span class="string">"127.0.0.1"</span>), UDPUtils.PORT));</div><div class="line">			dsk = <span class="keyword">new</span> DatagramSocket(UDPUtils.PORT + <span class="number">1</span>);<span class="comment">//创建一个数据包由于接收</span></div><div class="line">			bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(SAVE_FILE_PATH));<span class="comment">//创建一个缓冲的文件输出流</span></div><div class="line">			System.out.<span class="keyword">println</span>(<span class="string">"等待客户端...."</span>);</div><div class="line">			dsk.receive(dpk);<span class="comment">//等待客户端发送文件</span></div><div class="line"></div><div class="line">			<span class="keyword">int</span> readSize = <span class="number">0</span>;</div><div class="line">			<span class="keyword">int</span> readCount = <span class="number">0</span>;</div><div class="line">			<span class="keyword">int</span> flushSize = <span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span> ((readSize = dpk.getLength()) != <span class="number">0</span>) &#123;</div><div class="line">				<span class="comment">// 验证客户端发送退出标志</span></div><div class="line">				<span class="keyword">if</span> (UDPUtils.isEqualsByteArray(UDPUtils.exitData, buf, readSize)) &#123;</div><div class="line">					System.out.<span class="keyword">println</span>(<span class="string">"服务器退出 ..."</span>);</div><div class="line">					dpk.setData(UDPUtils.exitData, <span class="number">0</span>, UDPUtils.exitData.length);<span class="comment">//设置包中数据为退出标志</span></div><div class="line">					dsk.send(dpk);<span class="comment">//发送退出标志</span></div><div class="line">					<span class="keyword">break</span>;<span class="comment">//退出</span></div><div class="line">				&#125;</div><div class="line"></div><div class="line">				bos.<span class="keyword">write</span>(buf, <span class="number">0</span>, readSize);<span class="comment">//将字节数组中的数据写入缓冲流</span></div><div class="line">				<span class="keyword">if</span> (++flushSize % <span class="number">1000</span> == <span class="number">0</span>) &#123;</div><div class="line">					flushSize = <span class="number">0</span>;</div><div class="line">					bos.flush();</div><div class="line">				&#125;</div><div class="line">				dpk.setData(UDPUtils.successData, <span class="number">0</span>, UDPUtils.successData.length);<span class="comment">//设置包中数据为接收成功标志</span></div><div class="line">				dsk.send(dpk);<span class="comment">//返回一个接收成功标志</span></div><div class="line"></div><div class="line">				dpk.setData(buf, <span class="number">0</span>, buf.length);<span class="comment">//重新设置包用于接收下一个数据包</span></div><div class="line">				System.out.<span class="keyword">println</span>(<span class="string">"receive count of "</span> + (++readCount) + <span class="string">" !"</span>);</div><div class="line">				dsk.receive(dpk);<span class="comment">//等待客户端发送文件</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// last flush</span></div><div class="line">			bos.flush();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (bos != <span class="keyword">null</span>)</div><div class="line">					bos.close();</div><div class="line">				<span class="keyword">if</span> (dsk != <span class="keyword">null</span>)</div><div class="line">					dsk.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>UDPUtils.java</code><br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPUtils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> UDPUtils() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/** transfer file byte buffer **/</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_SIZE = <span class="number">50</span> * <span class="number">1024</span>;</div><div class="line"></div><div class="line">	<span class="comment">/** controller port **/</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">50000</span>;</div><div class="line"></div><div class="line">	<span class="comment">/** mark transfer success **/</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] successData = <span class="string">"success data mark"</span>.getBytes();</div><div class="line"></div><div class="line">	<span class="comment">/** mark transfer exit **/</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] exitData = <span class="string">"exit data mark"</span>.getBytes();</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * compare byteArray equest successData</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * @param compareBuf</span></div><div class="line"><span class="comment">	 *            src</span></div><div class="line"><span class="comment">	 * @param buf</span></div><div class="line"><span class="comment">	 *            target</span></div><div class="line"><span class="comment">	 * @return</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isEqualsByteArray(<span class="keyword">byte</span>[] compareBuf, <span class="keyword">byte</span>[] buf, <span class="keyword">int</span> len) &#123;</div><div class="line">		<span class="keyword">if</span> (buf == <span class="keyword">null</span> || buf.length == <span class="number">0</span> || compareBuf.length &lt; len)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> innerMinLen = Math.min(compareBuf.length, len);</div><div class="line">		<span class="comment">// if(buf.length == compareBuf.length)&#123;</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; innerMinLen; i++) &#123;</div><div class="line">			<span class="keyword">if</span> (buf[i] != compareBuf[i]) &#123;</div><div class="line">				flag = <span class="keyword">false</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// &#125;else</span></div><div class="line">		<span class="comment">// return false;</span></div><div class="line">		<span class="keyword">return</span> flag;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话不多说，直接上代码。&lt;br&gt;运行的时候先运行&lt;code&gt;You.java&lt;/code&gt;, 再运行&lt;code&gt;My.java&lt;/code&gt;&lt;br&gt;&lt;code&gt;My.java&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://sunstady.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>UDP通信-AES和Base64加解密</title>
    <link href="http://sunstady.github.io/2017/12/04/UDP%E9%80%9A%E4%BF%A1-AES%E5%92%8CBase64%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <id>http://sunstady.github.io/2017/12/04/UDP通信-AES和Base64加解密/</id>
    <published>2017-12-04T12:25:35.000Z</published>
    <updated>2017-12-04T12:36:43.335Z</updated>
    
    <content type="html"><![CDATA[<p>基于UDP的通信和基于TCP的通信不同，基于UDP的信息传递更快，但不提供可靠性保证。也就是说，数据在传输时，用户无法知道能否正确地到达目的地主机，也不能确定数据到达目的地地顺序是否和发送地顺序相同。<br>基于UDP通信地基本模式如下:<br>(1)将数据打包，称为数据包，然后将数据包发往目的地。<br>(2)接收别人发来地数据包，然后查看数据包中地内容。</p>
<h3 id="发送数据包"><a href="#发送数据包" class="headerlink" title="发送数据包"></a>发送数据包</h3><p>用DatagramPacket类将数据打包，即用DatagramPacket类创建一个对象，称为数据包。用DatagramPacket地以下两个构造方法创建待发送地数据包: DatagramPacket(byte data[], int length, InetAddtress address, int port);<br>使用该构造方法创建地数据包对象具有下列两个性质：<br>(1)含有data数组指定地数据<br>(2)该数据包将发送到地址是adress、端口号是port的主机上。<br>用DatagramSocket类的不带参数的构造方法DatagramSocket()创建一个对象，该对象负责发送数据包。例如: </p>
<blockquote>
<p>DatagramSocket mail_out= new DatagramSocket();<br>mail_out.send(data_pack);</p>
</blockquote>
<p>下面附上<code>Mac.java</code>, 其中使用了AES和Base64加解密。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.net.*;</div><div class="line"><span class="keyword">import</span> java.<span class="built_in">text</span>.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.awt.event.*;</div><div class="line"><span class="keyword">import</span> javax.crypto.Cipher;</div><div class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</div><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">import</span> org.apache.commons.codec.<span class="built_in">binary</span>.Base64;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Mac&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		MaCs maC= <span class="keyword">new</span> MaCs();</div><div class="line">	&#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line">class MaCs extends JFrame implements Runnable, ActionListener, KeyListener&#123;</div><div class="line"></div><div class="line">	SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">	JTextField out_message1= <span class="keyword">new</span> JTextField(<span class="number">12</span>);</div><div class="line">	JTextArea in_message= <span class="keyword">new</span> JTextArea();</div><div class="line">	JButton send= <span class="keyword">new</span> JButton(<span class="string">"发送"</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">String</span> password = <span class="string">"ABCDEFGHIJKLMNOP"</span>;</div><div class="line">	</div><div class="line">	MaCs()&#123;</div><div class="line">		setTitle(<span class="string">"SS"</span>);</div><div class="line">		setSize(<span class="number">400</span>, <span class="number">200</span>);</div><div class="line">		setBounds(<span class="number">700</span>, <span class="number">200</span>, <span class="number">350</span>, <span class="number">300</span>);</div><div class="line">		setVisible(<span class="keyword">true</span>);</div><div class="line">		send.addActionListener(<span class="keyword">this</span>);</div><div class="line">		out_message1.addKeyListener(<span class="keyword">this</span>);</div><div class="line">		</div><div class="line">		JPanel pSouthJPanel= <span class="keyword">new</span> JPanel();</div><div class="line">		pSouthJPanel.<span class="built_in">add</span>(out_message1);</div><div class="line">		pSouthJPanel.<span class="built_in">add</span>(send);</div><div class="line">		</div><div class="line">		<span class="built_in">add</span>(pSouthJPanel, <span class="string">"South"</span>);</div><div class="line">		<span class="built_in">add</span>(<span class="keyword">new</span> JScrollPane(in_message), <span class="string">"Center"</span>);</div><div class="line">		in_message.setEditable(<span class="keyword">false</span>);</div><div class="line">		validate();</div><div class="line">		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">		Thread thread= <span class="keyword">new</span> Thread(<span class="keyword">this</span>);</div><div class="line">		thread.start();<span class="comment">//线程负责接收数据包</span></div><div class="line">	&#125;</div><div class="line">    </div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用参数中的密钥加密</span></div><div class="line"><span class="comment">     */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> Encrypt(<span class="keyword">String</span> sSrc, <span class="keyword">String</span> sKey) &#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">if</span> (sKey == <span class="keyword">null</span>) &#123;</div><div class="line">                System.out.<span class="built_in">print</span>(<span class="string">"Key为空null"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 判断Key是否为16位</span></div><div class="line">            <span class="keyword">if</span> (sKey.length() != <span class="number">16</span>) &#123;</div><div class="line">                System.out.<span class="built_in">print</span>(<span class="string">"Key长度不是16位"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">byte</span>[] raw = sKey.getBytes(<span class="string">"utf-8"</span>);</div><div class="line">            SecretKeySpec skeySpec = <span class="keyword">new</span> SecretKeySpec(raw, <span class="string">"AES"</span>);</div><div class="line">            <span class="comment">//SecretKeySpec类是KeySpec接口的实现类，用于构建秘密密钥规范</span></div><div class="line">            <span class="comment">//构造一个用AES算法加密的密钥</span></div><div class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"AES/ECB/PKCS5Padding"</span>);<span class="comment">//"算法/模式/补码方式，创建密码器"</span></div><div class="line">            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);<span class="comment">//初始化为加密模式的密码器</span></div><div class="line">            <span class="comment">//Cipher为加密解密提供密码功能</span></div><div class="line">            <span class="built_in">byte</span>[] encrypted = cipher.doFinal(sSrc.getBytes(<span class="string">"utf-8"</span>));<span class="comment">//加密</span></div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Base64().encodeToString(encrypted);<span class="comment">//此处使用BASE64做转码功能，同时能起到2次加密的作用。</span></div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="comment">//在命令行打印异常信息在程序中出错的位置及原因</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用参数中的密钥解密</span></div><div class="line"><span class="comment">     */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> Decrypt(<span class="keyword">String</span> sSrc, <span class="keyword">String</span> sKey) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 判断Key是否正确</span></div><div class="line">            <span class="keyword">if</span> (sKey == <span class="keyword">null</span>) &#123;</div><div class="line">                System.out.<span class="built_in">print</span>(<span class="string">"Key为空null"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 判断Key是否为16位</span></div><div class="line">            <span class="keyword">if</span> (sKey.length() != <span class="number">16</span>) &#123;</div><div class="line">                System.out.<span class="built_in">print</span>(<span class="string">"Key长度不是16位"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">byte</span>[] raw = sKey.getBytes(<span class="string">"utf-8"</span>);</div><div class="line">            SecretKeySpec skeySpec = <span class="keyword">new</span> SecretKeySpec(raw, <span class="string">"AES"</span>);</div><div class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"AES/ECB/PKCS5Padding"</span>);</div><div class="line">            cipher.init(Cipher.DECRYPT_MODE, skeySpec);</div><div class="line">            <span class="built_in">byte</span>[] encrypted1 = <span class="keyword">new</span> Base64().decode(sSrc);<span class="comment">//先用base64解密</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="built_in">byte</span>[] original = cipher.doFinal(encrypted1);</div><div class="line">                <span class="keyword">String</span> originalString = <span class="keyword">new</span> <span class="keyword">String</span>(original,<span class="string">"utf-8"</span>);</div><div class="line">                <span class="keyword">return</span> originalString;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                System.out.<span class="built_in">println</span>(e.toString());</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            System.out.<span class="built_in">println</span>(ex.toString());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">//回车发送</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">keyPressed</span>(KeyEvent e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">if</span> (e.getKeyCode()== <span class="number">10</span>) &#123;</div><div class="line">			(<span class="keyword">this</span>).actionPerformed(<span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> actionPerformed(ActionEvent event) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">String</span> content1 = Encrypt(out_message1.getText(), password);</div><div class="line">		<span class="built_in">byte</span> buffer[]= content1.<span class="built_in">trim</span>().getBytes();</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			InetAddress address= InetAddress.getByName(<span class="string">"192.168.199.143"</span>);</div><div class="line">			DatagramPacket datagramPacket= <span class="keyword">new</span> DatagramPacket(buffer, buffer.length, address, <span class="number">888</span>);</div><div class="line">			DatagramSocket mailDatagramSocket= <span class="keyword">new</span> DatagramSocket();</div><div class="line">			mailDatagramSocket.send(datagramPacket);</div><div class="line">			<span class="keyword">String</span> content2 = Decrypt(content1, password);</div><div class="line">			in_message.<span class="built_in">append</span>(<span class="string">"----------"</span>+ df.format(<span class="keyword">new</span> Date())+ <span class="string">"----------\nss: "</span>+ content2+ <span class="string">"\n"</span>);</div><div class="line">			out_message1.setText(<span class="keyword">null</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		DatagramPacket packet= <span class="keyword">null</span>;</div><div class="line">		DatagramSocket mailDatagramSocket=<span class="keyword">null</span>;</div><div class="line">		<span class="built_in">byte</span> data[]= <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">8192</span>];<span class="comment">//定义数据包的大小</span></div><div class="line">		</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			packet= <span class="keyword">new</span> DatagramPacket(data, data.length);</div><div class="line">			mailDatagramSocket= <span class="keyword">new</span> DatagramSocket(<span class="number">666</span>);</div><div class="line">		&#125; <span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			<span class="keyword">if</span> (mailDatagramSocket== <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					mailDatagramSocket.receive(packet);<span class="comment">//可能会发生堵塞，直到收到数据包</span></div><div class="line">					<span class="keyword">String</span> mesString= <span class="keyword">new</span> <span class="keyword">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength());</div><div class="line">					<span class="keyword">String</span> content3 = Decrypt(mesString, password);</div><div class="line">					<span class="comment">//System.out.println("123");</span></div><div class="line">					in_message.<span class="built_in">append</span>(<span class="string">"**********"</span>+ df.format(<span class="keyword">new</span> Date())+ <span class="string">"**********\n"</span>);</div><div class="line">					in_message.<span class="built_in">append</span>(<span class="string">"mc: "</span>+ content3+ <span class="string">"\n"</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e1) &#123;</div><div class="line">					<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> keyReleased(KeyEvent e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">keyTyped</span>(KeyEvent e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="接收数据包"><a href="#接收数据包" class="headerlink" title="接收数据包"></a>接收数据包</h3><p>用DatagramSocket的另一个构造方法DatagramSocket(int port)创建一个对象，其中的参数必须和待接收的数据包的端口号相同。例如，如果发送方发送的数据包的端口是5666，那么如下创建DatagramSocket对象:<br>DatagramSocket mail_in= new DatagramSocket(5666);<br>然后对象maill_in使用方法receive(DatagramPacket pack)接收数据包。该方法有一个数据包参数pack，方法receive把收到的数据包传递给该参数。因此，用户必须预备一个数据包，以便收取数据包。这时需使用DatagramPack类的另一个构造方法DatagramPacket(byte data[], int length)创建一个数据包，用于接收数据包，例如: </p>
<blockquote>
<p>byte data[]= new byte[100];<br>int length= 90;<br>DatagramPacket pack= new DatagramPacket(data, length);<br>mail_in.receive(pack);</p>
</blockquote>
<p>该数据包pack将接收长度是length字节的数据放入data。<br>值得注意的是: receive方法可能会堵塞，直到收到数据包。<br>下面附上<code>Shens.java</code>, 其中同样使用了AES、Base64加解密。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.net.*;</div><div class="line"><span class="keyword">import</span> java.<span class="built_in">text</span>.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.awt.event.*;</div><div class="line"><span class="keyword">import</span> javax.crypto.Cipher;</div><div class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</div><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">import</span> org.apache.commons.codec.<span class="built_in">binary</span>.Base64;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> class Shens&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		ShenSs shenS= <span class="keyword">new</span> ShenSs();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ShenSs extends JFrame implements Runnable, ActionListener, KeyListener&#123;</div><div class="line">	</div><div class="line">	SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">	JTextField out_message= <span class="keyword">new</span> JTextField(<span class="number">12</span>);</div><div class="line">	JTextArea in_message= <span class="keyword">new</span> JTextArea();</div><div class="line">	JButton send=<span class="keyword">new</span> JButton(<span class="string">"发送"</span>);</div><div class="line"></div><div class="line">	<span class="keyword">String</span> password = <span class="string">"ABCDEFGHIJKLMNOP"</span>;</div><div class="line">	</div><div class="line">	ShenSs()&#123;</div><div class="line">		setTitle(<span class="string">"MC"</span>);</div><div class="line">		<span class="comment">//setSize(400, 200);</span></div><div class="line">		setBounds(<span class="number">300</span>, <span class="number">200</span>, <span class="number">350</span>, <span class="number">300</span>);</div><div class="line">		setVisible(<span class="keyword">true</span>);</div><div class="line">		send.addActionListener(<span class="keyword">this</span>);</div><div class="line">		out_message.addKeyListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">		JPanel panel= <span class="keyword">new</span> JPanel();<span class="comment">//创建一个面板，里面可以布局</span></div><div class="line">		panel.<span class="built_in">add</span>(out_message);</div><div class="line">		panel.<span class="built_in">add</span>(send);</div><div class="line"></div><div class="line">		<span class="built_in">add</span>(panel, <span class="string">"South"</span>);</div><div class="line">		<span class="built_in">add</span>(<span class="keyword">new</span> JScrollPane(in_message), <span class="string">"Center"</span>);</div><div class="line">		in_message.setEditable(<span class="keyword">false</span>);</div><div class="line">		validate();<span class="comment">//验证此容器及所有组件</span></div><div class="line">		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">		Thread thread= <span class="keyword">new</span> Thread(<span class="keyword">this</span>);</div><div class="line">		thread.start();<span class="comment">//线程负责接收数据包 </span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用参数中的密钥加密</span></div><div class="line"><span class="comment">     */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> Encrypt(<span class="keyword">String</span> sSrc, <span class="keyword">String</span> sKey) &#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">if</span> (sKey == <span class="keyword">null</span>) &#123;</div><div class="line">                System.out.<span class="built_in">print</span>(<span class="string">"Key为空null"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 判断Key是否为16位</span></div><div class="line">            <span class="keyword">if</span> (sKey.length() != <span class="number">16</span>) &#123;</div><div class="line">                System.out.<span class="built_in">print</span>(<span class="string">"Key长度不是16位"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">byte</span>[] raw = sKey.getBytes(<span class="string">"utf-8"</span>);<span class="comment">//字节型数组</span></div><div class="line">            SecretKeySpec skeySpec = <span class="keyword">new</span> SecretKeySpec(raw, <span class="string">"AES"</span>);</div><div class="line">            <span class="comment">//SecretKeySpec类是KeySpec接口的实现类，用于构建秘密密钥规范</span></div><div class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"AES/ECB/PKCS5Padding"</span>);<span class="comment">//"算法/模式/补码方式"</span></div><div class="line">            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);</div><div class="line">            <span class="comment">//Cipher为加密解密提供密码功能</span></div><div class="line">            <span class="built_in">byte</span>[] encrypted = cipher.doFinal(sSrc.getBytes(<span class="string">"utf-8"</span>));</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Base64().encodeToString(encrypted);<span class="comment">//此处使用BASE64做转码功能，同时能起到2次加密的作用。</span></div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="comment">//在命令行打印异常信息在程序中出错的位置及原因</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用参数中的密钥解密</span></div><div class="line"><span class="comment">     */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> Decrypt(<span class="keyword">String</span> sSrc, <span class="keyword">String</span> sKey) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 判断Key是否正确</span></div><div class="line">            <span class="keyword">if</span> (sKey == <span class="keyword">null</span>) &#123;</div><div class="line">                System.out.<span class="built_in">print</span>(<span class="string">"Key为空null"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 判断Key是否为16位</span></div><div class="line">            <span class="keyword">if</span> (sKey.length() != <span class="number">16</span>) &#123;</div><div class="line">                System.out.<span class="built_in">print</span>(<span class="string">"Key长度不是16位"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">byte</span>[] raw = sKey.getBytes(<span class="string">"utf-8"</span>);</div><div class="line">            SecretKeySpec skeySpec = <span class="keyword">new</span> SecretKeySpec(raw, <span class="string">"AES"</span>);</div><div class="line">            <span class="comment">//SecretKeySpec类是KeySpec接口的实现类，用于构建秘密密钥规范</span></div><div class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"AES/ECB/PKCS5Padding"</span>);<span class="comment">//只实例化一次</span></div><div class="line">            <span class="comment">//Cipher为加密解密提供密码功能</span></div><div class="line">            cipher.init(Cipher.DECRYPT_MODE, skeySpec);</div><div class="line">            <span class="comment">//初始化为解密模式的密码器</span></div><div class="line">            <span class="built_in">byte</span>[] encrypted1 = <span class="keyword">new</span> Base64().decode(sSrc);<span class="comment">//先用base64解密</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="built_in">byte</span>[] original = cipher.doFinal(encrypted1);<span class="comment">//解密</span></div><div class="line">                <span class="keyword">String</span> originalString = <span class="keyword">new</span> <span class="keyword">String</span>(original,<span class="string">"utf-8"</span>);</div><div class="line">                <span class="keyword">return</span> originalString;<span class="comment">//明文</span></div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                System.out.<span class="built_in">println</span>(e.toString());</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            System.out.<span class="built_in">println</span>(ex.toString());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">	<span class="comment">//回车发送</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">keyPressed</span>(KeyEvent e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">if</span> (e.getKeyCode()== <span class="number">10</span>) &#123;</div><div class="line">			(<span class="keyword">this</span>).actionPerformed(<span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> actionPerformed(ActionEvent event) &#123;<span class="comment">//单击按钮发送数据包</span></div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">String</span> content1 = Encrypt(out_message.getText(), password);</div><div class="line">		<span class="built_in">byte</span> buffer[]= content1.<span class="built_in">trim</span>().getBytes();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			InetAddress address= InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</div><div class="line">			DatagramPacket datagramPacket= <span class="keyword">new</span> DatagramPacket(buffer, buffer.length, address, <span class="number">666</span>);</div><div class="line">			<span class="comment">//存放数据的数据报</span></div><div class="line">			DatagramSocket mailDatagramSocket= <span class="keyword">new</span> DatagramSocket();</div><div class="line">			<span class="comment">//接受或发送数据报的套接字</span></div><div class="line">			mailDatagramSocket.send(datagramPacket);</div><div class="line">			<span class="keyword">String</span> content2 = Decrypt(content1, password);</div><div class="line">			in_message.<span class="built_in">append</span>(<span class="string">"**********"</span>+ df.format(<span class="keyword">new</span> Date())+ <span class="string">"**********\nmc: "</span>+ content2+ <span class="string">"\n"</span>);</div><div class="line">			out_message.setText(<span class="keyword">null</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		DatagramPacket packet= <span class="keyword">null</span>;</div><div class="line">		DatagramSocket mailDatagramSocket=<span class="keyword">null</span>;</div><div class="line">		<span class="built_in">byte</span> data[]= <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">8192</span>];<span class="comment">//指定数据包的大小</span></div><div class="line">		</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			packet= <span class="keyword">new</span> DatagramPacket(data, data.length);</div><div class="line">			mailDatagramSocket= <span class="keyword">new</span> DatagramSocket(<span class="number">888</span>);</div><div class="line">		&#125; <span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			<span class="keyword">if</span> (mailDatagramSocket== <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					mailDatagramSocket.receive(packet);</div><div class="line">					<span class="keyword">String</span> mesString= <span class="keyword">new</span> <span class="keyword">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength());</div><div class="line">					<span class="keyword">String</span> content3 = Decrypt(mesString, password);</div><div class="line">					in_message.<span class="built_in">append</span>(<span class="string">"----------"</span>+ df.format(<span class="keyword">new</span> Date())+ <span class="string">"----------\n"</span>);</div><div class="line">					in_message.<span class="built_in">append</span>(<span class="string">"ss: "</span>+ content3+ <span class="string">"\n"</span>);	</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e1) &#123;</div><div class="line">					<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> keyReleased(KeyEvent e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">keyTyped</span>(KeyEvent e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于使用了Base64加解密，会出现<code>Base64 cannot be resolved to a type</code>这个错误。可以参考我的上一篇<a href="https://sunstady.github.io/2017/11/28/Java%E8%A7%A3%E5%86%B3Base64%E5%8C%85%E9%97%AE%E9%A2%98/">博文</a>，那里有解决的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于UDP的通信和基于TCP的通信不同，基于UDP的信息传递更快，但不提供可靠性保证。也就是说，数据在传输时，用户无法知道能否正确地到达目的地主机，也不能确定数据到达目的地地顺序是否和发送地顺序相同。&lt;br&gt;基于UDP通信地基本模式如下:&lt;br&gt;(1)将数据打包，称为数据包
    
    </summary>
    
    
      <category term="Java" scheme="http://sunstady.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
