<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sanstyle</title>
  <subtitle>功有所不全 才有所不任 力有所不足</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sanstylemc.cn/"/>
  <updated>2018-05-18T14:35:59.463Z</updated>
  <id>http://www.sanstylemc.cn/</id>
  
  <author>
    <name>MC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL练习二</title>
    <link href="http://www.sanstylemc.cn/2018/05/18/MySQL%E7%BB%83%E4%B9%A0%E4%BA%8C/"/>
    <id>http://www.sanstylemc.cn/2018/05/18/MySQL练习二/</id>
    <published>2018-05-18T14:35:21.000Z</published>
    <updated>2018-05-18T14:35:59.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="统计各个部门对应员工涨幅的次数总和，给出部门编码dept-no、部门名称dept-name以及次数sum"><a href="#统计各个部门对应员工涨幅的次数总和，给出部门编码dept-no、部门名称dept-name以及次数sum" class="headerlink" title="统计各个部门对应员工涨幅的次数总和，给出部门编码dept_no、部门名称dept_name以及次数sum"></a>统计各个部门对应员工涨幅的次数总和，给出部门编码dept_no、部门名称dept_name以及次数sum</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`departments`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_name`</span> varchar(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">dept_no</th>
<th style="text-align:center">dept_name</th>
<th style="text-align:center">sum</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">d001</td>
<td style="text-align:center">Marketing</td>
<td style="text-align:center">24</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">d006</td>
<td style="text-align:center">Quality Management</td>
<td style="text-align:center">25</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select c<span class="selector-class">.dept_no</span>, c<span class="selector-class">.dept_name</span>, count(salary) as sum from (salaries <span class="selector-tag">a</span>, dept_emp <span class="selector-tag">b</span> on <span class="selector-tag">a</span>.emp_no= <span class="selector-tag">b</span>.emp_no), departments c on c.dept_no= <span class="selector-tag">b</span><span class="selector-class">.dept_no</span> group by c.dept_no</div></pre></td></tr></table></figure>
<h2 id="对所有员工的当前-to-date-’9999-01-01’-薪水按照salary进行按照1-N的排名，相同salary并列且按照emp-no升序排列"><a href="#对所有员工的当前-to-date-’9999-01-01’-薪水按照salary进行按照1-N的排名，相同salary并列且按照emp-no升序排列" class="headerlink" title="对所有员工的当前(to_date=’9999-01-01’)薪水按照salary进行按照1-N的排名，相同salary并列且按照emp_no升序排列"></a>对所有员工的当前(to_date=’9999-01-01’)薪水按照salary进行按照1-N的排名，相同salary并列且按照emp_no升序排列</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
<th style="text-align:center">rank</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10005</td>
<td style="text-align:center">94692</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">10009</td>
<td style="text-align:center">94409</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">10010</td>
<td style="text-align:center">94409</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">10001</td>
<td style="text-align:center">88958</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.emp_no</span>, <span class="selector-tag">a</span><span class="selector-class">.salary</span>, count(distinct <span class="selector-tag">b</span>.salary) as rank </div><div class="line">from salaries <span class="selector-tag">a</span>, salaries <span class="selector-tag">b</span> </div><div class="line">where <span class="selector-tag">a</span>.salary&lt;= <span class="selector-tag">b</span><span class="selector-class">.salary</span> and <span class="selector-tag">a</span>.to_date= <span class="string">"9999-01-01"</span> and <span class="selector-tag">b</span>.to_date= <span class="string">"9999-01-01"</span> </div><div class="line">group by <span class="selector-tag">a</span><span class="selector-class">.emp_no</span> <span class="attribute">order</span> by rank</div></pre></td></tr></table></figure>
<h2 id="获取所有非manager员工当前的薪水情况，给出dept-no、emp-no以及salary-，当前表示to-date-’9999-01-01’"><a href="#获取所有非manager员工当前的薪水情况，给出dept-no、emp-no以及salary-，当前表示to-date-’9999-01-01’" class="headerlink" title="获取所有非manager员工当前的薪水情况，给出dept_no、emp_no以及salary ，当前表示to_date=’9999-01-01’"></a>获取所有非manager员工当前的薪水情况，给出dept_no、emp_no以及salary ，当前表示to_date=’9999-01-01’</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_manager`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">dept_no</th>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">d001</td>
<td style="text-align:center">10001</td>
<td style="text-align:center">88958</td>
</tr>
<tr>
<td style="text-align:center">d004</td>
<td style="text-align:center">10003</td>
<td style="text-align:center">43311</td>
</tr>
<tr>
<td style="text-align:center">d005</td>
<td style="text-align:center">10007</td>
<td style="text-align:center">88070</td>
</tr>
<tr>
<td style="text-align:center">d006</td>
<td style="text-align:center">10009</td>
<td style="text-align:center">95409</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> d.dept_no, <span class="built_in">e</span>.emp_no, s.salary </div><div class="line"><span class="keyword">from</span> dept_emp d, (</div><div class="line">    <span class="keyword">select</span> emp_no <span class="keyword">from</span> employees <span class="keyword">where</span> emp_no <span class="keyword">not</span> <span class="keyword">in</span> (</div><div class="line">        <span class="keyword">select</span> emp_no <span class="keyword">from</span> dept_manager</div><div class="line">    )) <span class="built_in">e</span>, salaries s </div><div class="line"><span class="keyword">where</span> d.emp_no= <span class="built_in">e</span>.emp_no <span class="keyword">and</span> d.emp_no= s.emp_no <span class="keyword">and</span> d.to_date= <span class="string">"9999-01-01"</span> <span class="keyword">and</span> s.to_date= <span class="string">"9999-01-01"</span></div></pre></td></tr></table></figure>
<h2 id="获取员工其当前的薪水比其manager当前薪水还高的相关信息，当前表示to-date-’9999-01-01’"><a href="#获取员工其当前的薪水比其manager当前薪水还高的相关信息，当前表示to-date-’9999-01-01’" class="headerlink" title="获取员工其当前的薪水比其manager当前薪水还高的相关信息，当前表示to_date=’9999-01-01’"></a>获取员工其当前的薪水比其manager当前薪水还高的相关信息，当前表示to_date=’9999-01-01’</h2><p>结果第一列给出员工的emp_no，<br>第二列给出其manager的manager_no，<br>第三列给出该员工当前的薪水emp_salary,<br>第四列给该员工对应的manager当前的薪水manager_salary<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_manager`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure></p>
<h3 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">manager_no</th>
<th style="text-align:center">emp_salary</th>
<th style="text-align:center">manager_salary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10001</td>
<td style="text-align:center">10002</td>
<td style="text-align:center">88958</td>
<td style="text-align:center">72527</td>
</tr>
<tr>
<td style="text-align:center">10009</td>
<td style="text-align:center">10010</td>
<td style="text-align:center">95409</td>
<td style="text-align:center">94409</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-3"><a href="#解答-3" class="headerlink" title="解答"></a>解答</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> t1.emp_no, t2.emp_no,t1.salary <span class="keyword">as</span> s1,t2.salary <span class="keyword">as</span> s2</div><div class="line"><span class="keyword">from</span></div><div class="line">(</div><div class="line">    <span class="keyword">select</span> salary,s.emp_no,dept_no</div><div class="line">    <span class="keyword">from</span> salaries <span class="keyword">as</span> s <span class="keyword">join</span> dept_emp de <span class="keyword">on</span> s.emp_no=de.emp_no</div><div class="line">    <span class="keyword">where</span> s.to_date=<span class="string">'9999-01-01'</span> <span class="keyword">and</span> de.to_date=<span class="string">'9999-01-01'</span> <span class="keyword">and</span></div><div class="line">    s.emp_no <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> emp_no <span class="keyword">from</span> dept_manager dm)</div><div class="line">) <span class="keyword">as</span> t1,</div><div class="line">(</div><div class="line">    <span class="keyword">select</span> salary,s.emp_no,dept_no</div><div class="line">    <span class="keyword">from</span> salaries <span class="keyword">as</span> s <span class="keyword">join</span> dept_manager dm <span class="keyword">on</span> s.emp_no=dm.emp_no</div><div class="line">    <span class="keyword">where</span> s.to_date=<span class="string">'9999-01-01'</span></div><div class="line">    <span class="keyword">and</span> dm.to_date=<span class="string">'9999-01-01'</span></div><div class="line">) <span class="keyword">as</span> t2</div><div class="line"><span class="keyword">where</span> s1&gt;s2</div><div class="line"><span class="keyword">and</span> t1.dept_no = t2.dept_no</div></pre></td></tr></table></figure>
<h2 id="汇总各个部门当前员工的title类型的分配数目，结果给出部门编号dept-no、dept-name、其当前员工所有的title以及该类型title对应的数目count"><a href="#汇总各个部门当前员工的title类型的分配数目，结果给出部门编号dept-no、dept-name、其当前员工所有的title以及该类型title对应的数目count" class="headerlink" title="汇总各个部门当前员工的title类型的分配数目，结果给出部门编号dept_no、dept_name、其当前员工所有的title以及该类型title对应的数目count"></a>汇总各个部门当前员工的title类型的分配数目，结果给出部门编号dept_no、dept_name、其当前员工所有的title以及该类型title对应的数目count</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`departments`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_name`</span> varchar(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">"titles"</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`title`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date DEFAULT <span class="literal">NULL</span>);</div></pre></td></tr></table></figure>
<h3 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">dept_no</th>
<th style="text-align:center">dept_name</th>
<th style="text-align:center">title</th>
<th style="text-align:center">count</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">d001</td>
<td style="text-align:center">Marketing</td>
<td style="text-align:center">Senior Engineer</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">d001</td>
<td style="text-align:center">Marketing</td>
<td style="text-align:center">Staff</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">d002</td>
<td style="text-align:center">Finance</td>
<td style="text-align:center">Senior Engineer</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">d003</td>
<td style="text-align:center">Human Resources</td>
<td style="text-align:center">Senior Staff</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">d004</td>
<td style="text-align:center">Production</td>
<td style="text-align:center">Senior Engineer</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">d005</td>
<td style="text-align:center">Development</td>
<td style="text-align:center">Senior Staff</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-4"><a href="#解答-4" class="headerlink" title="解答"></a>解答</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">法一：</div><div class="line">select e<span class="selector-class">.dept_no</span>,d<span class="selector-class">.dept_name</span>,t<span class="selector-class">.title</span>,count(t.title)</div><div class="line">from departments d,dept_emp e,titles t</div><div class="line">where d.dept_no=e.dept_no</div><div class="line">and e.emp_no=t.emp_no</div><div class="line">and e.to_date=<span class="string">'9999-01-01'</span></div><div class="line">and t.to_date=<span class="string">'9999-01-01'</span></div><div class="line">group by e<span class="selector-class">.dept_no</span>,t.title</div><div class="line">法二：</div><div class="line">select dp<span class="selector-class">.dept_no</span>,dp<span class="selector-class">.dept_name</span>,t<span class="selector-class">.title</span>,count(*) as count</div><div class="line">from (</div><div class="line">        select ds<span class="selector-class">.dept_no</span>,ds<span class="selector-class">.dept_name</span>,de.emp_no</div><div class="line">        from departments as ds </div><div class="line">                inner join</div><div class="line">             dept_emp as de</div><div class="line">                on ds<span class="selector-class">.dept_no</span> = de.dept_no</div><div class="line">           where de<span class="selector-class">.to_date</span> = <span class="string">'9999-01-01'</span></div><div class="line">        ) as dp</div><div class="line">        inner join </div><div class="line">     titles as t</div><div class="line">        on dp<span class="selector-class">.emp_no</span> = t.emp_no</div><div class="line">    where t<span class="selector-class">.to_date</span> = <span class="string">'9999-01-01'</span></div><div class="line">    group by dp<span class="selector-class">.dept_no</span>,t.title</div></pre></td></tr></table></figure>
<blockquote>
<p>解析: 法一、先按照emp_no分组，再按照每个emp_no里的title分组。<br>法二、先将部门表和部门员工表进行关联获取到部门编号和部门名称以及员工编号，然后再关联titles表，最后使用dept_no和title进行分组即可。</p>
</blockquote>
<h2 id="给出每个员工每年薪水涨幅超过5000的员工编号emp-no、薪水变更开始日期from-date以及薪水涨幅值salary-growth，并按照salary-growth逆序排列。"><a href="#给出每个员工每年薪水涨幅超过5000的员工编号emp-no、薪水变更开始日期from-date以及薪水涨幅值salary-growth，并按照salary-growth逆序排列。" class="headerlink" title="给出每个员工每年薪水涨幅超过5000的员工编号emp_no、薪水变更开始日期from_date以及薪水涨幅值salary_growth，并按照salary_growth逆序排列。"></a>给出每个员工每年薪水涨幅超过5000的员工编号emp_no、薪水变更开始日期from_date以及薪水涨幅值salary_growth，并按照salary_growth逆序排列。</h2><p>提示：在sqlite中获取datetime时间对应的年份函数为strftime(‘%Y’, to_date)<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure></p>
<h3 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">from_date</th>
<th style="text-align:center">salary_growth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10003</td>
<td style="text-align:center">1995-12-03</td>
<td style="text-align:center">24178</td>
</tr>
<tr>
<td style="text-align:center">10008</td>
<td style="text-align:center">1998-03-11</td>
<td style="text-align:center">20843</td>
</tr>
<tr>
<td style="text-align:center">10008</td>
<td style="text-align:center">2000-03-10</td>
<td style="text-align:center">5997</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-5"><a href="#解答-5" class="headerlink" title="解答"></a>解答</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select </span><span class="built_in">s1</span>.emp_no, <span class="built_in">s1</span>.from_date, <span class="built_in">s1</span>.salary- <span class="built_in">s2</span>.salary as salary_growth</div><div class="line"><span class="symbol">from</span> salaries <span class="built_in">s1</span>, salaries <span class="built_in">s2</span> </div><div class="line"><span class="symbol">where</span> (<span class="keyword">strftime('%Y', </span><span class="built_in">s1</span>.to_date)- <span class="keyword">strftime('%Y', </span><span class="built_in">s2</span>.to_date))= <span class="number">1</span></div><div class="line"><span class="keyword">and </span><span class="built_in">s1</span>.emp_no= <span class="built_in">s2</span>.emp_no</div><div class="line"><span class="keyword">and </span>salary_growth&gt; <span class="number">5000</span></div><div class="line"><span class="symbol">order</span> <span class="keyword">by </span>salary_growth desc</div></pre></td></tr></table></figure>
<h2 id="查找描述信息中包括robot的电影对应的分类名称以及电影数目，而且还需要该分类对应电影数量-gt-5部"><a href="#查找描述信息中包括robot的电影对应的分类名称以及电影数目，而且还需要该分类对应电影数量-gt-5部" class="headerlink" title="查找描述信息中包括robot的电影对应的分类名称以及电影数目，而且还需要该分类对应电影数量&gt;=5部"></a>查找描述信息中包括robot的电影对应的分类名称以及电影数目，而且还需要该分类对应电影数量&gt;=5部</h2><table>
<thead>
<tr>
<th style="text-align:center">film</th>
<th style="text-align:center">film</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">字段</td>
<td style="text-align:center">说明</td>
</tr>
<tr>
<td style="text-align:center">file_id</td>
<td style="text-align:center">电影id</td>
</tr>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">电影名称</td>
</tr>
<tr>
<td style="text-align:center">description</td>
<td style="text-align:center">电影描述信息</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> film (</div><div class="line">film_id <span class="built_in">smallint</span>(<span class="number">5</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">title <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">description <span class="built_in">text</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (film_id));</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">category</th>
<th style="text-align:center">category</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">字段</td>
<td style="text-align:center">说明</td>
</tr>
<tr>
<td style="text-align:center">category_id</td>
<td style="text-align:center">电影分类id</td>
</tr>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">电影分类名称</td>
</tr>
<tr>
<td style="text-align:center">last_update</td>
<td style="text-align:center">电影分类最后更新时间</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">category</span>  (</div><div class="line">category_id  tinyint(<span class="number">3</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="keyword">name</span>  <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="string">`last_update`</span> <span class="keyword">timestamp</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> ( category_id ));</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">film_category</th>
<th style="text-align:center">film_category</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">字段</td>
<td style="text-align:center">说明</td>
</tr>
<tr>
<td style="text-align:center">film_id</td>
<td style="text-align:center">电影id</td>
</tr>
<tr>
<td style="text-align:center">category_id</td>
<td style="text-align:center">电影分类id</td>
</tr>
<tr>
<td style="text-align:center">last_update</td>
<td style="text-align:center">电影id和分类id对应关系的最后更新时间</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> film_category  (</div><div class="line">film_id  <span class="built_in">smallint</span>(<span class="number">5</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">category_id  tinyint(<span class="number">3</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="string">`last_update`</span> <span class="keyword">timestamp</span>);</div></pre></td></tr></table></figure>
<h3 id="输入描述-6"><a href="#输入描述-6" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-6"><a href="#输出描述-6" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="解答-6"><a href="#解答-6" class="headerlink" title="解答"></a>解答</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> c.name,<span class="keyword">count</span>(fc.film_id)</div><div class="line"><span class="keyword">from</span> (</div><div class="line">        <span class="keyword">select</span> category_id,<span class="keyword">count</span>(film_id) <span class="keyword">as</span> amount</div><div class="line">        <span class="keyword">from</span> film_category</div><div class="line">        <span class="keyword">group</span> <span class="keyword">by</span> category_id</div><div class="line">        <span class="keyword">having</span> amount&gt;=<span class="number">5</span></div><div class="line">        ) <span class="keyword">as</span> cc,</div><div class="line">        <span class="keyword">category</span> <span class="keyword">as</span> c,</div><div class="line">        film <span class="keyword">as</span> f,</div><div class="line">        film_category <span class="keyword">as</span> fc</div><div class="line"><span class="keyword">where</span> f.film_id = fc.film_id</div><div class="line">      <span class="keyword">and</span> fc.category_id = c.category_id</div><div class="line">      <span class="keyword">and</span> cc.category_id = c.category_id</div><div class="line">      <span class="keyword">and</span> f.description <span class="keyword">like</span> <span class="string">'%robot%'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>解析: 本题考查的是多表关联，本身有三个表关联，但是由于有条件说分类下的电影总数&gt;=5，所以可以先查询出film_category表内满足条件的category_id，然后与其他三表进行关联即可。</p>
</blockquote>
<h2 id="使用join查询方式找出没有分类的电影id以及名称"><a href="#使用join查询方式找出没有分类的电影id以及名称" class="headerlink" title="使用join查询方式找出没有分类的电影id以及名称"></a>使用join查询方式找出没有分类的电影id以及名称</h2><h3 id="输入描述-7"><a href="#输入描述-7" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-7"><a href="#输出描述-7" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="解答-7"><a href="#解答-7" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> cc.film_id, cc.<span class="built_in">title</span> <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> film <span class="keyword">as</span> f <span class="keyword">left</span> <span class="keyword">join</span> film_category <span class="keyword">as</span> fc <span class="keyword">on</span> f.film_id= fc.film_id) <span class="keyword">as</span> cc <span class="keyword">where</span> cc.category_id <span class="keyword">is</span> <span class="literal">null</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;统计各个部门对应员工涨幅的次数总和，给出部门编码dept-no、部门名称dept-name以及次数sum&quot;&gt;&lt;a href=&quot;#统计各个部门对应员工涨幅的次数总和，给出部门编码dept-no、部门名称dept-name以及次数sum&quot; class=&quot;headerlink&quot; title=&quot;统计各个部门对应员工涨幅的次数总和，给出部门编码dept_no、部门名称dept_name以及次数sum&quot;&gt;&lt;/a&gt;统计各个部门对应员工涨幅的次数总和，给出部门编码dept_no、部门名称dept_name以及次数sum&lt;/h2&gt;&lt;figure class=&quot;highlight n1ql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; TABLE &lt;span class=&quot;symbol&quot;&gt;`departments`&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`dept_no`&lt;/span&gt; char(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`dept_name`&lt;/span&gt; varchar(&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;symbol&quot;&gt;`dept_no`&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; TABLE &lt;span class=&quot;symbol&quot;&gt;`dept_emp`&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`emp_no`&lt;/span&gt; int(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`dept_no`&lt;/span&gt; char(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`from_date`&lt;/span&gt; date &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`to_date`&lt;/span&gt; date &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;symbol&quot;&gt;`emp_no`&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;`dept_no`&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; TABLE &lt;span class=&quot;symbol&quot;&gt;`salaries`&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`emp_no`&lt;/span&gt; int(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`salary`&lt;/span&gt; int(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`from_date`&lt;/span&gt; date &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;`to_date`&lt;/span&gt; date &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;symbol&quot;&gt;`emp_no`&lt;/span&gt;,&lt;span class=&quot;symbol&quot;&gt;`from_date`&lt;/span&gt;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL练习一</title>
    <link href="http://www.sanstylemc.cn/2018/05/12/MySQL%E7%BB%83%E4%B9%A0%E4%B8%80/"/>
    <id>http://www.sanstylemc.cn/2018/05/12/MySQL练习一/</id>
    <published>2018-05-12T14:14:59.000Z</published>
    <updated>2018-05-12T14:15:39.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查找最晚入职员工的所有信息"><a href="#查找最晚入职员工的所有信息" class="headerlink" title="查找最晚入职员工的所有信息"></a>查找最晚入职员工的所有信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees ( </div><div class="line">emp_no <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </div><div class="line">birth_date <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>, </div><div class="line">first_name <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </div><div class="line">last_name <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </div><div class="line">gender <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </div><div class="line">hire_date <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>, </div><div class="line">PRIMARY <span class="keyword">KEY</span> (emp_no));</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">birth_date</th>
<th style="text-align:center">first_name</th>
<th style="text-align:center">last_name</th>
<th style="text-align:center">gender</th>
<th style="text-align:center">hire_date</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10008</td>
<td style="text-align:center">1958-02-19</td>
<td style="text-align:center">Saniya</td>
<td style="text-align:center">Kalloufi</td>
<td style="text-align:center">M</td>
<td style="text-align:center">1994-09-15</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="查找入职员工时间排名倒数第三的员工所有信息"><a href="#查找入职员工时间排名倒数第三的员工所有信息" class="headerlink" title="查找入职员工时间排名倒数第三的员工所有信息"></a>查找入职员工时间排名倒数第三的员工所有信息</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">birth_date</th>
<th style="text-align:center">first_name</th>
<th style="text-align:center">last_name</th>
<th style="text-align:center">gender</th>
<th style="text-align:center">hire_date</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10005</td>
<td style="text-align:center">1955-01-21</td>
<td style="text-align:center">Kyoichi</td>
<td style="text-align:center">Maliniak</td>
<td style="text-align:center">M</td>
<td style="text-align:center">1989-09-12</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">2</span>, <span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="查找各个部门当前-to-date-’9999-01-01’-领导当前薪水详情以及其对应部门编号dept-no"><a href="#查找各个部门当前-to-date-’9999-01-01’-领导当前薪水详情以及其对应部门编号dept-no" class="headerlink" title="查找各个部门当前(to_date=’9999-01-01’)领导当前薪水详情以及其对应部门编号dept_no"></a>查找各个部门当前(to_date=’9999-01-01’)领导当前薪水详情以及其对应部门编号dept_no</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_manager`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
<th style="text-align:center">from_date</th>
<th style="text-align:center">to_date</th>
<th style="text-align:center">dept_no</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10002</td>
<td style="text-align:center">72527</td>
<td style="text-align:center">2001-08-02</td>
<td style="text-align:center">9999-01-01</td>
<td style="text-align:center">d001</td>
</tr>
<tr>
<td style="text-align:center">10004</td>
<td style="text-align:center">74057</td>
<td style="text-align:center">2001-11-27</td>
<td style="text-align:center">9999-01-01</td>
<td style="text-align:center">d004</td>
</tr>
<tr>
<td style="text-align:center">10005</td>
<td style="text-align:center">94692</td>
<td style="text-align:center">2001-09-09</td>
<td style="text-align:center">9999-01-01</td>
<td style="text-align:center">d003</td>
</tr>
<tr>
<td style="text-align:center">10006</td>
<td style="text-align:center">43311</td>
<td style="text-align:center">2001-08-02</td>
<td style="text-align:center">9999-01-01</td>
<td style="text-align:center">d002</td>
</tr>
<tr>
<td style="text-align:center">10010</td>
<td style="text-align:center">94409</td>
<td style="text-align:center">2001-11-23</td>
<td style="text-align:center">9999-01-01</td>
<td style="text-align:center">d006</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> a.*, b.dept_no <span class="keyword">from</span> salaries a <span class="keyword">left</span> <span class="keyword">join</span> dept_manager b <span class="keyword">on</span> a.emp_no= b.emp_no <span class="keyword">where</span> a.to_date= <span class="string">'9999-01-01'</span> <span class="keyword">and</span> b.to_date= <span class="string">'9999-01-01'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注解:<br><code>INNER JOIN</code> 两边表同时有对应的数据，即任何一边缺失数据就不显示。<br><code>LEFT JOIN</code> 会读取左边数据表的全部数据，即便右边表无对应数据。<br><code>RIGHT JOIN</code> 会读取右边数据表的全部数据，即便左边表无对应数据。</p>
</blockquote>
<h2 id="查找所有已经分配部门的员工的last-name和first-name"><a href="#查找所有已经分配部门的员工的last-name和first-name" class="headerlink" title="查找所有已经分配部门的员工的last_name和first_name"></a>查找所有已经分配部门的员工的last_name和first_name</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">last_name</th>
<th style="text-align:center">first_name</th>
<th style="text-align:center">dept_no</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Facello</td>
<td style="text-align:center">Georgi</td>
<td style="text-align:center">d001</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">Piveteau</td>
<td style="text-align:center">Duangkaew</td>
<td style="text-align:center">d006</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-3"><a href="#解答-3" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.last_name</span>, <span class="selector-tag">a</span><span class="selector-class">.first_name</span>, <span class="selector-tag">b</span><span class="selector-class">.dept_no</span> from employees <span class="selector-tag">a</span>, dept_emp <span class="selector-tag">b</span> where <span class="selector-tag">a</span>.emp_no= <span class="selector-tag">b</span>.emp_no</div></pre></td></tr></table></figure>
<h2 id="查找所有员工的last-name和first-name以及对应部门编号dept-no，也包括展示没有分配具体部门的员工"><a href="#查找所有员工的last-name和first-name以及对应部门编号dept-no，也包括展示没有分配具体部门的员工" class="headerlink" title="查找所有员工的last_name和first_name以及对应部门编号dept_no，也包括展示没有分配具体部门的员工"></a>查找所有员工的last_name和first_name以及对应部门编号dept_no，也包括展示没有分配具体部门的员工</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">last_name</th>
<th style="text-align:center">first_name</th>
<th style="text-align:center">dept_no</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Facello</td>
<td style="text-align:center">Georgi</td>
<td style="text-align:center">d001</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">Sluis</td>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NULL(在sqlite中此处为空,MySQL为NULL)</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-4"><a href="#解答-4" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select <span class="keyword">a</span>.last_name, <span class="keyword">a</span>.first_name, b.dept_no <span class="built_in">from</span> employees <span class="keyword">a</span> left join dept_emp b <span class="keyword">on</span> <span class="title">a</span>.<span class="title">emp_no</span>= <span class="title">b</span>.<span class="title">emp_no</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注解<br>数据库在通过连接两张或多张表来返回记录时，都会生成一张中间的临时表，然后再将这张临时表返回给用户。<br>在使用left join时，on和where条件的区别如下:<br>1、on条件是在生成临时表时使用的条件，它不管on中的条件是否为真，都会返回左边表中的记录。<br>2、where条件是在临时表生成后，再对临时表进行过滤的条件。这时已经没有left join的含义(必须返回左边表的记录)了，条件不为真的就全部过滤掉。</p>
</blockquote>
<h2 id="查找所有员工入职时候的薪水情况，给出emp-no以及salary，-并按照emp-no进行逆序"><a href="#查找所有员工入职时候的薪水情况，给出emp-no以及salary，-并按照emp-no进行逆序" class="headerlink" title="查找所有员工入职时候的薪水情况，给出emp_no以及salary， 并按照emp_no进行逆序"></a>查找所有员工入职时候的薪水情况，给出emp_no以及salary， 并按照emp_no进行逆序</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10011</td>
<td style="text-align:center">25828</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">10001</td>
<td style="text-align:center">60117</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-5"><a href="#解答-5" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select <span class="keyword">a</span>.emp_no, b.salary <span class="built_in">from</span> employees <span class="keyword">a</span>, salaries b where <span class="keyword">a</span>.emp_no= b.emp_no <span class="keyword">and</span> <span class="keyword">a</span>.hire_date= b.from_date order <span class="keyword">by</span> <span class="keyword">a</span>.emp_no desc</div></pre></td></tr></table></figure>
<h2 id="查找薪水涨幅超过15次的员工号emp-no以及其对应的涨幅次数t"><a href="#查找薪水涨幅超过15次的员工号emp-no以及其对应的涨幅次数t" class="headerlink" title="查找薪水涨幅超过15次的员工号emp_no以及其对应的涨幅次数t"></a>查找薪水涨幅超过15次的员工号emp_no以及其对应的涨幅次数t</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-6"><a href="#输入描述-6" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-6"><a href="#输出描述-6" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">t</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10001</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">10004</td>
<td style="text-align:center">16</td>
</tr>
<tr>
<td style="text-align:center">10009</td>
<td style="text-align:center">18</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-6"><a href="#解答-6" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select emp_no, count(emp_no) as t <span class="keyword">from</span> salaries<span class="built_in"> group </span>by emp_no having t&gt; 15</div></pre></td></tr></table></figure>
<blockquote>
<p>注解<br><code>GROUP BY</code>语法可以根据给定数据列的每个成员对查询结果进行分组统计，最终得到一个分组汇总表。<br><code>SELECT</code>子句中的列名必须为分组列或列函数，列函数对于<code>GROUP BY</code>子句定义的每个组返回一个结果。<br><code>GROUP BY</code>子句之后使用<code>Having</code>子句，可应用限定条件进行分组，以便系统仅对满足条件的组返回结果。因此，在<code>GROUP BY</code>子句后面包含了一个<code>HAVING</code>子句。<code>HAVING</code>类似于<code>WHERE</code>(唯一的差别是<code>WHERE</code>过滤行，<code>HAVING</code>过滤组), <code>HAVING</code>支持所有的<code>WHERE</code>操作符。</p>
</blockquote>
<h2 id="找出所有员工当前-to-date-’9999-01-01’-具体的薪水salary情况，对于相同的薪水只显示一次-并按照逆序显示"><a href="#找出所有员工当前-to-date-’9999-01-01’-具体的薪水salary情况，对于相同的薪水只显示一次-并按照逆序显示" class="headerlink" title="找出所有员工当前(to_date=’9999-01-01’)具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示"></a>找出所有员工当前(to_date=’9999-01-01’)具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-7"><a href="#输入描述-7" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-7"><a href="#输出描述-7" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">salary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">94692</td>
</tr>
<tr>
<td style="text-align:center">94409</td>
</tr>
<tr>
<td style="text-align:center">88958</td>
</tr>
<tr>
<td style="text-align:center">88070</td>
</tr>
<tr>
<td style="text-align:center">74057</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-7"><a href="#解答-7" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> salary <span class="keyword">from</span> salaries <span class="keyword">where</span> <span class="keyword">to_date</span>= <span class="string">'9999-01-01'</span> <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></div></pre></td></tr></table></figure>
<h2 id="获取所有部门当前manager的当前薪水情况，给出dept-no-emp-no以及salary，当前表示to-date-’9999-01-01’"><a href="#获取所有部门当前manager的当前薪水情况，给出dept-no-emp-no以及salary，当前表示to-date-’9999-01-01’" class="headerlink" title="获取所有部门当前manager的当前薪水情况，给出dept_no, emp_no以及salary，当前表示to_date=’9999-01-01’"></a>获取所有部门当前manager的当前薪水情况，给出dept_no, emp_no以及salary，当前表示to_date=’9999-01-01’</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_manager`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-8"><a href="#输入描述-8" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-8"><a href="#输出描述-8" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">dept_no</th>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">d001</td>
<td style="text-align:center">10002</td>
<td style="text-align:center">72527</td>
</tr>
<tr>
<td style="text-align:center">d004</td>
<td style="text-align:center">10004</td>
<td style="text-align:center">74057</td>
</tr>
<tr>
<td style="text-align:center">d003</td>
<td style="text-align:center">10005</td>
<td style="text-align:center">94692</td>
</tr>
<tr>
<td style="text-align:center">d002</td>
<td style="text-align:center">10006</td>
<td style="text-align:center">43311</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-8"><a href="#解答-8" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.dept_no</span>, <span class="selector-tag">a</span><span class="selector-class">.emp_no</span>, <span class="selector-tag">b</span><span class="selector-class">.salary</span> from salaries <span class="selector-tag">b</span> inner join dept_manager <span class="selector-tag">a</span> on <span class="selector-tag">a</span>.emp_no= <span class="selector-tag">b</span><span class="selector-class">.emp_no</span> where <span class="selector-tag">a</span>.to_date= <span class="string">'9999-01-01'</span> and <span class="selector-tag">b</span>.to_date=<span class="string">'9999-01-01'</span></div></pre></td></tr></table></figure>
<h2 id="获取所有非manager的员工emp-no"><a href="#获取所有非manager的员工emp-no" class="headerlink" title="获取所有非manager的员工emp_no"></a>获取所有非manager的员工emp_no</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_manager`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-9"><a href="#输入描述-9" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-9"><a href="#输出描述-9" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10001</td>
</tr>
<tr>
<td style="text-align:center">10003</td>
</tr>
<tr>
<td style="text-align:center">10007</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-9"><a href="#解答-9" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.emp_no</span> from employees <span class="selector-tag">a</span> where <span class="selector-tag">a</span><span class="selector-class">.emp_no</span> not <span class="keyword">in</span> (select <span class="selector-tag">b</span><span class="selector-class">.emp_no</span> from dept_manager b)</div></pre></td></tr></table></figure>
<blockquote>
<p>注解<br><code>employees</code>里的<code>emp_no</code>不在<code>dept_manager</code>出现非<code>manager</code>了，关键使用<code>not in</code></p>
</blockquote>
<h2 id="获取所有员工当前的manager，如果当前的manager是自己的话结果不显示，当前表示to-date-’9999-01-01’。结果第一列给出当前员工的emp-no-第二列给出其manager对应的manager-no。"><a href="#获取所有员工当前的manager，如果当前的manager是自己的话结果不显示，当前表示to-date-’9999-01-01’。结果第一列给出当前员工的emp-no-第二列给出其manager对应的manager-no。" class="headerlink" title="获取所有员工当前的manager，如果当前的manager是自己的话结果不显示，当前表示to_date=’9999-01-01’。结果第一列给出当前员工的emp_no,第二列给出其manager对应的manager_no。"></a>获取所有员工当前的manager，如果当前的manager是自己的话结果不显示，当前表示to_date=’9999-01-01’。结果第一列给出当前员工的emp_no,第二列给出其manager对应的manager_no。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_manager`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-10"><a href="#输入描述-10" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-10"><a href="#输出描述-10" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">manager_no</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10001</td>
<td style="text-align:center">10002</td>
</tr>
<tr>
<td style="text-align:center">10003</td>
<td style="text-align:center">10004</td>
</tr>
<tr>
<td style="text-align:center">10009</td>
<td style="text-align:center">10010</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-10"><a href="#解答-10" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.emp_no</span>, <span class="selector-tag">b</span><span class="selector-class">.emp_no</span> as manager_no from dept_emp <span class="selector-tag">a</span>, dept_manager <span class="selector-tag">b</span> where <span class="selector-tag">a</span>.to_date= <span class="string">'9999-01-01'</span> and <span class="selector-tag">b</span>.to_date=<span class="string">'9999-01-01'</span> and <span class="selector-tag">a</span>.dept_no= <span class="selector-tag">b</span><span class="selector-class">.dept_no</span> and <span class="selector-tag">a</span><span class="selector-class">.emp_no</span> != <span class="selector-tag">b</span>.emp_no</div></pre></td></tr></table></figure>
<blockquote>
<p>他们的职位不一样，部门却是一样的。</p>
</blockquote>
<h2 id="获取所有部门中当前员工薪水最高的相关信息，给出dept-no-emp-no以及其对应的salary"><a href="#获取所有部门中当前员工薪水最高的相关信息，给出dept-no-emp-no以及其对应的salary" class="headerlink" title="获取所有部门中当前员工薪水最高的相关信息，给出dept_no, emp_no以及其对应的salary"></a>获取所有部门中当前员工薪水最高的相关信息，给出dept_no, emp_no以及其对应的salary</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-11"><a href="#输入描述-11" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-11"><a href="#输出描述-11" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">dept_no</th>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">d001</td>
<td style="text-align:center">10001</td>
<td style="text-align:center">88958</td>
</tr>
<tr>
<td style="text-align:center">d002</td>
<td style="text-align:center">10006</td>
<td style="text-align:center">43311</td>
</tr>
<tr>
<td style="text-align:center">d003</td>
<td style="text-align:center">10005</td>
<td style="text-align:center">94692</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-11"><a href="#解答-11" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.dept_no</span>,<span class="selector-tag">a</span><span class="selector-class">.emp_no</span>,max(s.salary) as salary</div><div class="line">from dept_emp <span class="selector-tag">a</span> <span class="attribute">left</span> join salaries s </div><div class="line">            on <span class="selector-tag">a</span>.emp_no= s.emp_no</div><div class="line">where <span class="selector-tag">a</span>.to_date=<span class="string">'9999-01-01'</span></div><div class="line">    and s.to_date=<span class="string">'9999-01-01'</span></div><div class="line">group by <span class="selector-tag">a</span>.dept_no</div></pre></td></tr></table></figure>
<h2 id="从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。"><a href="#从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。" class="headerlink" title="从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。"></a>从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">"titles"</span> (</div><div class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>);</div></pre></td></tr></table></figure>
<h3 id="输入描述-12"><a href="#输入描述-12" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-12"><a href="#输出描述-12" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">title</th>
<th style="text-align:center">t</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Assistant Engineer</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">Engineer</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">Staff</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-12"><a href="#解答-12" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select title, count(title) as t <span class="keyword">from</span> titles<span class="built_in"> group </span>by title having t&gt;= 2</div></pre></td></tr></table></figure>
<blockquote>
<p>having语句可以筛选出满足条件的聚合函数的结果。</p>
</blockquote>
<h2 id="从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。注意对于重复的emp-no进行忽略。"><a href="#从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。注意对于重复的emp-no进行忽略。" class="headerlink" title="从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。注意对于重复的emp_no进行忽略。"></a>从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。注意对于重复的emp_no进行忽略。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">"titles"</span> (</div><div class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>);</div></pre></td></tr></table></figure>
<h3 id="输入描述-13"><a href="#输入描述-13" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-13"><a href="#输出描述-13" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">title</th>
<th style="text-align:center">t</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Assistant Engineer</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">Engineer</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">Staff</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-13"><a href="#解答-13" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select title, count(distinct emp_no) as t <span class="keyword">from</span> titles<span class="built_in"> group </span>by title having t&gt;= 2</div></pre></td></tr></table></figure>
<h2 id="查找employees表所有emp-no为奇数，且last-name不为Mary的员工信息，并按照hire-date逆序排列"><a href="#查找employees表所有emp-no为奇数，且last-name不为Mary的员工信息，并按照hire-date逆序排列" class="headerlink" title="查找employees表所有emp_no为奇数，且last_name不为Mary的员工信息，并按照hire_date逆序排列"></a>查找employees表所有emp_no为奇数，且last_name不为Mary的员工信息，并按照hire_date逆序排列</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-14"><a href="#输入描述-14" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-14"><a href="#输出描述-14" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">birth_date</th>
<th style="text-align:center">first_name</th>
<th style="text-align:center">last_name</th>
<th style="text-align:center">gender</th>
<th style="text-align:center">hire_date</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10011</td>
<td style="text-align:center">1953-11-07</td>
<td style="text-align:center">Mary</td>
<td style="text-align:center">Sluis</td>
<td style="text-align:center">F</td>
<td style="text-align:center">1990-01-22</td>
</tr>
<tr>
<td style="text-align:center">10005</td>
<td style="text-align:center">1955-01-21</td>
<td style="text-align:center">Kyoichi</td>
<td style="text-align:center">Maliniak</td>
<td style="text-align:center">M</td>
<td style="text-align:center">1989-09-12</td>
</tr>
<tr>
<td style="text-align:center">10007</td>
<td style="text-align:center">1957-05-23</td>
<td style="text-align:center">Tzvetan</td>
<td style="text-align:center">Zielinski</td>
<td style="text-align:center">F</td>
<td style="text-align:center">1989-02-10</td>
</tr>
<tr>
<td style="text-align:center">10003</td>
<td style="text-align:center">1959-12-03</td>
<td style="text-align:center">Parto</td>
<td style="text-align:center">Bamford</td>
<td style="text-align:center">M</td>
<td style="text-align:center">1986-08-28</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-14"><a href="#解答-14" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> emp_no% <span class="number">2</span>!= <span class="number">0</span> <span class="keyword">and</span> last_name!= <span class="string">"Mary"</span> <span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span></div></pre></td></tr></table></figure>
<h2 id="统计出当前各个title类型对应的员工当前薪水对应的平均工资。结果给出title以及平均工资avg。"><a href="#统计出当前各个title类型对应的员工当前薪水对应的平均工资。结果给出title以及平均工资avg。" class="headerlink" title="统计出当前各个title类型对应的员工当前薪水对应的平均工资。结果给出title以及平均工资avg。"></a>统计出当前各个title类型对应的员工当前薪水对应的平均工资。结果给出title以及平均工资avg。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">"titles"</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`title`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date DEFAULT <span class="literal">NULL</span>);</div></pre></td></tr></table></figure>
<h3 id="输入描述-15"><a href="#输入描述-15" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-15"><a href="#输出描述-15" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">title</th>
<th style="text-align:center">avg</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Engineer Engineer</td>
<td style="text-align:center">94409.0</td>
</tr>
<tr>
<td style="text-align:center">Senior Engineer</td>
<td style="text-align:center">69009.2</td>
</tr>
<tr>
<td style="text-align:center">Senior Staff</td>
<td style="text-align:center">91381.0</td>
</tr>
<tr>
<td style="text-align:center">Staff</td>
<td style="text-align:center">72527.0</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-15"><a href="#解答-15" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select title, avg(salary) <span class="keyword">from</span> titles left join salaries on titles.emp_no= salaries.emp_no where titles.to_date= <span class="string">"9999-01-01"</span> <span class="keyword">and</span> salaries.to_date= <span class="string">"9999-01-01"</span><span class="built_in"> group </span>by titles.title</div></pre></td></tr></table></figure>
<h2 id="获取当前（to-date-’9999-01-01’）薪水第二多的员工的emp-no以及其对应的薪水salary"><a href="#获取当前（to-date-’9999-01-01’）薪水第二多的员工的emp-no以及其对应的薪水salary" class="headerlink" title="获取当前（to_date=’9999-01-01’）薪水第二多的员工的emp_no以及其对应的薪水salary"></a>获取当前（to_date=’9999-01-01’）薪水第二多的员工的emp_no以及其对应的薪水salary</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-16"><a href="#输入描述-16" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-16"><a href="#输出描述-16" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10009</td>
<td style="text-align:center">94409</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-16"><a href="#解答-16" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> emp_no, salary <span class="keyword">from</span> salaries <span class="keyword">where</span> <span class="keyword">to_date</span>= <span class="string">"9999-01-01"</span> <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>, <span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="查找当前薪水-to-date-’9999-01-01’-排名第二多的员工编号emp-no、薪水salary、last-name以及first-name，不准使用order-by"><a href="#查找当前薪水-to-date-’9999-01-01’-排名第二多的员工编号emp-no、薪水salary、last-name以及first-name，不准使用order-by" class="headerlink" title="查找当前薪水(to_date=’9999-01-01’)排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不准使用order by"></a>查找当前薪水(to_date=’9999-01-01’)排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不准使用order by</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-17"><a href="#输入描述-17" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-17"><a href="#输出描述-17" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">salary</th>
<th style="text-align:center">last_name</th>
<th style="text-align:center">first_name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10009</td>
<td style="text-align:center">94409</td>
<td style="text-align:center">Peac</td>
<td style="text-align:center">Sumant</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-17"><a href="#解答-17" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">select <span class="selector-tag">a</span><span class="selector-class">.emp_no</span>, max(<span class="selector-tag">a</span>.salary), <span class="selector-tag">b</span><span class="selector-class">.last_name</span>, <span class="selector-tag">b</span><span class="selector-class">.first_name</span> </div><div class="line">from salaries <span class="selector-tag">a</span>, employees <span class="selector-tag">b</span> where <span class="selector-tag">a</span>.emp_no= <span class="selector-tag">b</span><span class="selector-class">.emp_no</span> </div><div class="line">    and <span class="selector-tag">a</span>.to_date= <span class="string">"9999-01-01"</span> </div><div class="line">    and <span class="selector-tag">a</span><span class="selector-class">.salary</span> not <span class="keyword">in</span> (select max(salary) from salaries where to_date= <span class="string">"9999-01-01"</span>)</div></pre></td></tr></table></figure>
<h2 id="查找所有员工的last-name和first-name以及对应的dept-name，也包括暂时没有分配部门的员工"><a href="#查找所有员工的last-name和first-name以及对应的dept-name，也包括暂时没有分配部门的员工" class="headerlink" title="查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工"></a>查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`departments`</span> (</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_name`</span> varchar(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`dept_emp`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`dept_no`</span> char(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`dept_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-18"><a href="#输入描述-18" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-18"><a href="#输出描述-18" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">last_name</th>
<th style="text-align:center">first_name</th>
<th style="text-align:center">dept_name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Facello</td>
<td style="text-align:center">Georgi</td>
<td style="text-align:center">Marketing</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">Sluis</td>
<td style="text-align:center">Mary</td>
<td style="text-align:center">NULL</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-18"><a href="#解答-18" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> a.last_name, a.first_name, c.dept_name <span class="keyword">from</span> employees a <span class="keyword">left</span> <span class="keyword">join</span> dept_emp b <span class="keyword">on</span> a.emp_no= b.emp_no <span class="keyword">left</span> <span class="keyword">join</span> departments c <span class="keyword">on</span> b.dept_no= c.dept_no</div></pre></td></tr></table></figure>
<h2 id="查找员工编号emp-now为10001其自入职以来的薪水salary涨幅值growth"><a href="#查找员工编号emp-now为10001其自入职以来的薪水salary涨幅值growth" class="headerlink" title="查找员工编号emp_now为10001其自入职以来的薪水salary涨幅值growth"></a>查找员工编号emp_now为10001其自入职以来的薪水salary涨幅值growth</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-19"><a href="#输入描述-19" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-19"><a href="#输出描述-19" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">growth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">28841</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-19"><a href="#解答-19" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> (</div><div class="line">    (<span class="keyword">select</span> salary <span class="keyword">from</span> salaries <span class="keyword">where</span> emp_no= <span class="string">"10001"</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">to_date</span> <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>)- </div><div class="line">    (<span class="keyword">select</span> salary <span class="keyword">from</span> salaries <span class="keyword">where</span> emp_no= <span class="string">"10001"</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">to_date</span> <span class="keyword">asc</span> <span class="keyword">limit</span> <span class="number">1</span>)</div><div class="line">) <span class="keyword">as</span> growth</div></pre></td></tr></table></figure>
<h2 id="查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp-noy以及其对应的薪水涨幅growth，并按照growth进行升序"><a href="#查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp-noy以及其对应的薪水涨幅growth，并按照growth进行升序" class="headerlink" title="查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp_noy以及其对应的薪水涨幅growth，并按照growth进行升序"></a>查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp_noy以及其对应的薪水涨幅growth，并按照growth进行升序</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`employees`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`birth_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`first_name`</span> varchar(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`last_name`</span> varchar(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`gender`</span> char(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`hire_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>));</div><div class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`salaries`</span> (</div><div class="line"><span class="symbol">`emp_no`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`salary`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`from_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="symbol">`to_date`</span> date <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`emp_no`</span>,<span class="symbol">`from_date`</span>));</div></pre></td></tr></table></figure>
<h3 id="输入描述-20"><a href="#输入描述-20" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote>
<p>无</p>
</blockquote>
<h3 id="输出描述-20"><a href="#输出描述-20" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">emp_no</th>
<th style="text-align:center">growth</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10011</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
<tr>
<td style="text-align:center">10010</td>
<td style="text-align:center">54496</td>
</tr>
<tr>
<td style="text-align:center">10004</td>
<td style="text-align:center">34003</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="解答-20"><a href="#解答-20" class="headerlink" title="解答:"></a>解答:</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">select t1<span class="selector-class">.emp_no</span>, t1<span class="selector-class">.salary-</span> t2<span class="selector-class">.salary</span> as growth from(</div><div class="line">    (select <span class="selector-tag">a</span><span class="selector-class">.emp_no</span>, <span class="selector-tag">b</span><span class="selector-class">.salary</span> from employees <span class="selector-tag">a</span>, salaries <span class="selector-tag">b</span> where <span class="selector-tag">a</span>.emp_no= <span class="selector-tag">b</span><span class="selector-class">.emp_no</span> and <span class="selector-tag">b</span>.to_date= <span class="string">"9999-01-01"</span>) as t1, </div><div class="line">    (select <span class="selector-tag">a</span><span class="selector-class">.emp_no</span>, <span class="selector-tag">b</span><span class="selector-class">.salary</span> from employees <span class="selector-tag">a</span>, salaries <span class="selector-tag">b</span> where <span class="selector-tag">a</span>.emp_no= <span class="selector-tag">b</span><span class="selector-class">.emp_no</span> and <span class="selector-tag">b</span>.from_date= <span class="selector-tag">a</span>.hire_date) as t2</div><div class="line">) where t1.emp_no= t2<span class="selector-class">.emp_no</span> <span class="attribute">order</span> by growth</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查找最晚入职员工的所有信息&quot;&gt;&lt;a href=&quot;#查找最晚入职员工的所有信息&quot; class=&quot;headerlink&quot; title=&quot;查找最晚入职员工的所有信息&quot;&gt;&lt;/a&gt;查找最晚入职员工的所有信息&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; employees ( &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;emp_no &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;birth_date &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;first_name &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;last_name &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gender &lt;span class=&quot;built_in&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hire_date &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (emp_no));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>response用法</title>
    <link href="http://www.sanstylemc.cn/2018/05/11/response%E7%94%A8%E6%B3%95/"/>
    <id>http://www.sanstylemc.cn/2018/05/11/response用法/</id>
    <published>2018-05-11T09:20:59.000Z</published>
    <updated>2018-05-11T09:21:29.761Z</updated>
    
    <content type="html"><![CDATA[<p><code>response</code>是<code>HttpServletResponse</code>的实例，用于提供给浏览器的响应信息。<br><a id="more"></a></p>
<h2 id="设置响应内容"><a href="#设置响应内容" class="headerlink" title="设置响应内容"></a>设置响应内容</h2><p>通过<code>response</code>设置响应已经用得比较多了，<code>PrintWriter pw= response.getWriter();</code> 通过<code>response.getWriter();</code>获取一个<code>PrintWriter</code>对象。<br>可以使用<code>println()</code>，<code>append()</code>，<code>write()</code>，<code>format()</code>等等方法设置返回给浏览器的html内容。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line">     </div><div class="line">    public void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)&#123;</div><div class="line">         </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="type">PrintWriter</span> pw= response.getWriter();</div><div class="line">            pw.println(<span class="string">"&lt;h1&gt;Hello Servlet&lt;/h1&gt;"</span>);</div><div class="line">             </div><div class="line">        &#125; <span class="keyword">catch</span> (<span class="type">IOException</span> e) &#123;</div><div class="line">            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="设置响应格式"><a href="#设置响应格式" class="headerlink" title="设置响应格式"></a>设置响应格式</h2><blockquote>
<p>response.setContentType(“text/html”);</p>
</blockquote>
<p><code>&quot;text/html&quot;</code> 是即格式 ，在<code>request</code>获取头信息中对应的<code>request.getHeader(&quot;accept&quot;)</code>。<br><code>&quot;text/html&quot;</code> 是存在的，表示浏览器可以识别这种格式，如果换一个其他的格式， 比如 <code>&quot;text/lol&quot;</code> ，浏览器不能识别，那么打开此<code>servlet</code>就会弹出一个下载的对话框。<br>这样的手段也就常常用于实现下载功能。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    public void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) &#123;</div><div class="line"> </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="type">PrintWriter</span> pw = response.getWriter();</div><div class="line">            pw.println(<span class="string">"&lt;h1&gt;Hello Servlet&lt;/h1&gt;"</span>);</div><div class="line"> </div><div class="line">            response.setContentType(<span class="string">"text/lol"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (<span class="type">IOException</span> e) &#123;</div><div class="line">            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="设置响应编码"><a href="#设置响应编码" class="headerlink" title="设置响应编码"></a>设置响应编码</h2><p>设置响应编码有两种方式<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>)<span class="comment">;</span></div><div class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>这两种方式都需要在response.getWriter调用之前执行才能生效。<br>他们的区别在于:<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>不仅发送到浏览器的内容会使用UTF-8编码，而且还通知浏览器使用UTF-8编码方式进行显示。所以总能正常显示中文。<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>仅仅是发送的浏览器的内容是UTF-8编码的，至于浏览器是用哪种编码方式显示不管。 所以当浏览器的显示编码方式不是UTF-8的时候，就会看到乱码，需要手动再进行一次设置。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    public void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</div><div class="line"><span class="comment">//          response.setCharacterEncoding("UTF-8");</span></div><div class="line"> </div><div class="line">            <span class="type">PrintWriter</span> pw = response.getWriter();</div><div class="line">            pw.println(<span class="string">"&lt;h1&gt;第一次 使用 Servlet&lt;/h1&gt;"</span>);</div><div class="line"> </div><div class="line">        &#125; <span class="keyword">catch</span> (<span class="type">IOException</span> e) &#123;</div><div class="line">            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="301或者302客户端跳转"><a href="#301或者302客户端跳转" class="headerlink" title="301或者302客户端跳转"></a>301或者302客户端跳转</h2><p>客户端有两种跳转：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">301</span>表示永久性跳转</div><div class="line"><span class="selector-tag">response</span><span class="selector-class">.setStatus</span>(<span class="number">301</span>);</div><div class="line"><span class="selector-tag">response</span><span class="selector-class">.setHeader</span>(<span class="string">"Location"</span>, <span class="string">"fail.html"</span>);</div><div class="line"><span class="selector-tag">302</span>表示临时跳转   </div><div class="line"><span class="selector-tag">response</span><span class="selector-class">.sendRedirect</span>(<span class="string">"fail.html"</span>);</div></pre></td></tr></table></figure></p>
<p>用户感受不出这两种跳转的区别，但是可以借助火狐的调试工具看到响应的头信息是：<br>301 Moved Permanently。<br>301和302的区别主要在搜索引擎对页面排名的时候有影响。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> void service(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line"> </div><div class="line">        <span class="type">String</span> name = request.getParameter(<span class="string">"name"</span>);</div><div class="line">        <span class="type">String</span> password = request.getParameter(<span class="string">"password"</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password)) &#123;</div><div class="line">            request.getRequestDispatcher(<span class="string">"success.html"</span>).forward(request, response);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            response.setStatus(<span class="number">301</span>);</div><div class="line">            response.setHeader(<span class="string">"Location"</span>, <span class="string">"fail.html"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="设置不使用缓存"><a href="#设置不使用缓存" class="headerlink" title="设置不使用缓存"></a>设置不使用缓存</h2><p>使用缓存可以加快页面的加载，降低服务端的负担。但是也可能看到过时的信息，可以通过如下手段通知浏览器不要使用缓存<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">response.setDateHeader("Expires",0 );</div><div class="line">response.setHeader("<span class="keyword">Cache</span>-Control<span class="string">","</span><span class="keyword">no</span>-<span class="keyword">cache</span><span class="string">");</span></div><div class="line"><span class="string">response.setHeader("</span><span class="keyword">pragma</span><span class="string">","</span><span class="keyword">no</span>-<span class="keyword">cache</span><span class="string">");</span></div></pre></td></tr></table></figure></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.util.<span class="type">Date</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    public void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) &#123;</div><div class="line"> </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0</span>);</div><div class="line">            response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);</div><div class="line">            response.setHeader(<span class="string">"pragma"</span>, <span class="string">"no-cache"</span>);</div><div class="line">            response.getWriter().println(<span class="string">"&lt;h1&gt;Hello Servlet!&lt;/h1&gt;"</span>);</div><div class="line">            response.getWriter().println(<span class="keyword">new</span> <span class="type">Date</span>().toLocaleString());</div><div class="line">        &#125; <span class="keyword">catch</span> (<span class="type">IOException</span> e) &#123;</div><div class="line">            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;response&lt;/code&gt;是&lt;code&gt;HttpServletResponse&lt;/code&gt;的实例，用于提供给浏览器的响应信息。&lt;br&gt;
    
    </summary>
    
    
      <category term="ssm" scheme="http://www.sanstylemc.cn/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>request常见方法</title>
    <link href="http://www.sanstylemc.cn/2018/05/11/request%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"/>
    <id>http://www.sanstylemc.cn/2018/05/11/request常见方法/</id>
    <published>2018-05-11T08:53:47.000Z</published>
    <updated>2018-05-11T08:54:17.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="request常见方法"><a href="#request常见方法" class="headerlink" title="request常见方法"></a>request常见方法</h2><p><code>request.getRequestURL()</code>: 浏览器发出请求时的完整URL，包括协议 主机名 端口(如果有)” +<br><code>request.getRequestURI()</code>: 浏览器发出请求的资源名部分，去掉了协议和主机名” +<br><code>request.getQueryString()</code>: 请求行中的参数部分，只能显示以get方式发出的参数，post方式的看不到<br><code>request.getRemoteAddr()</code>: 浏览器所处于的客户机的IP地址<br><code>request.getRemoteHost()</code>: 浏览器所处于的客户机的主机名<br><code>request.getRemotePort()</code>: 浏览器所处于的客户机使用的网络端口<br><code>request.getLocalAddr()</code>: 服务器的IP地址<br><code>request.getLocalName()</code>: 服务器的主机名<br><code>request.getMethod()</code>: 得到客户机请求方式一般是GET或者POST<br><a id="more"></a><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="title">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    protected void service(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line">        <span class="type">String</span> name = request.getParameter(<span class="string">"name"</span>);</div><div class="line">        <span class="type">String</span> password = request.getParameter(<span class="string">"password"</span>);</div><div class="line"> </div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"浏览器发出请求时的完整URL，包括协议 主机名 端口(如果有): "</span> + request.getRequestURL());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"浏览器发出请求的资源名部分，去掉了协议和主机名: "</span> + request.getRequestURI());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"请求行中的参数部分: "</span> + request.getQueryString());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"浏览器所处于的客户机的IP地址: "</span> + request.getRemoteAddr());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"浏览器所处于的客户机的主机名: "</span> + request.getRemoteHost());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"浏览器所处于的客户机使用的网络端口: "</span> + request.getRemotePort());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"服务器的IP地址: "</span> + request.getLocalAddr());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"服务器的主机名: "</span> + request.getLocalName());</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"得到客户机请求方式: "</span> + request.getMethod());</div><div class="line"> </div><div class="line">        <span class="type">String</span> html = null;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password))</div><div class="line">            html = <span class="string">"&lt;div style='color:green'&gt;登录成功&lt;/div&gt;"</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            html = <span class="string">"&lt;div style='color:red'&gt;登录失败&lt;/div&gt;"</span>;</div><div class="line"> </div><div class="line">        response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</div><div class="line">        <span class="type">PrintWriter</span> pw = response.getWriter();</div><div class="line">        pw.<span class="built_in">println</span>(html);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/sunstady/hexo/blob/master/request%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/1.jpg?raw=true" alt="1"></p>
<h2 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h2><p><code>request.getParameter()</code>：是常见的方法，用于获取单值的参数<br><code>request.getParameterValues()</code>：用于获取具有多值的参数，比如注册的时候提交的爱好，可以是多选的。<br><code>request.getParameterMap()</code>：用于遍历所有的参数，并返回Map类型。<br>本例准备了一个注册的例子：<br>包括一个注册页面register.html<br>服务端的RegisterServlet<br>分别演示了获取单值参数，多值参数以及遍历所有的参数。<br><img src="https://github.com/sunstady/hexo/blob/master/request%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/2.jpg?raw=true" alt="2"><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">register.html</div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"register"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">    账号 ： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    爱好 ： LOL<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobits"</span> <span class="attr">value</span>=<span class="string">"lol"</span>&gt;</span></div><div class="line">        DOTA<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobits"</span> <span class="attr">value</span>=<span class="string">"dota"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">       </div><div class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="type">RegisterServlet</span>.java</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServlet</span> <span class="title">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    protected void service(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line"> </div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"获取单值参数name:"</span> + request.getParameter(<span class="string">"name"</span>));</div><div class="line"> </div><div class="line">        <span class="type">String</span>[] hobits = request.getParameterValues(<span class="string">"hobits"</span>);</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"获取具有多值的参数hobits: "</span> + <span class="type">Arrays</span>.asList(hobits));</div><div class="line"> </div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"通过 getParameterMap 遍历所有的参数： "</span>);</div><div class="line">        <span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">String</span>[]&gt; parameters = request.getParameterMap();</div><div class="line"> </div><div class="line">        <span class="type">Set</span>&lt;<span class="type">String</span>&gt; paramNames = parameters.keySet();</div><div class="line">        <span class="keyword">for</span> (<span class="type">String</span> param : paramNames) &#123;</div><div class="line">            <span class="type">String</span>[] value = parameters.<span class="keyword">get</span>(param);</div><div class="line">            <span class="type">System</span>.out.<span class="built_in">println</span>(param + <span class="string">":"</span> + <span class="type">Arrays</span>.asList(value));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">web.xml</div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>10<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">     </div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RegisterServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>RegisterServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RegisterServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/register<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>   </div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="获取头信息"><a href="#获取头信息" class="headerlink" title="获取头信息"></a>获取头信息</h2><p><code>request.getHeader()</code>获取浏览器传递过来的头信息。比如getHeader(“user-agent”)可以获取 浏览器的基本资料，这样就能判断是firefox、IE、chrome或者是safari浏览器 。<br><code>request.getHeaderNames()</code>获取 浏览器所有的头信息名称，根据头信息名称就能遍历出所有的头信息。<br>在本例，修改HelloServlet，使其获取头信息。<br>访问HelloServlet获取如下头信息：<br><code>host</code>: 主机地址<br><code>user-agent</code>: 浏览器基本资料<br><code>accept</code>: 表示浏览器接受的数据类型<br><code>accept-language</code>: 表示浏览器接受的语言<br><code>accept-encoding</code>: 表示浏览器接受的压缩方式，是压缩方式，并非编码<br><code>connection</code>: 是否保持连接<br><code>cache-control</code>:缓存时限<br><img src="https://github.com/sunstady/hexo/blob/master/request%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/3.jpg?raw=true" alt="3"><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.IOException;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Date;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Enumeration;</span></div><div class="line"> </div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.servlet.ServletConfig;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.servlet.http.HttpServlet;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.servlet.http.HttpServletRequest;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.servlet.http.HttpServletResponse;</span></div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line">     </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> init(ServletConfig config)&#123;</div><div class="line">        System.out.println(<span class="string">"init of Hello Servlet"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> doGet(HttpServletRequest request, HttpServletResponse response)&#123;</div><div class="line">     </div><div class="line">        Enumeration&lt;String&gt; headerNames= request.getHeaderNames();</div><div class="line">        <span class="keyword">while</span>(headerNames.hasMoreElements())&#123;</div><div class="line">            String header = headerNames.nextElement();</div><div class="line">            String value = request.getHeader(header);</div><div class="line">            System.out.printf(<span class="string">"%s\t%s%n"</span>,header,value);</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            response.getWriter().println(<span class="string">"&lt;h1&gt;Hello Servlet!&lt;/h1&gt;"</span>);</div><div class="line">            response.getWriter().println(<span class="keyword">new</span> Date().toLocaleString());</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="服务器传参"><a href="#服务器传参" class="headerlink" title="服务器传参"></a>服务器传参</h2><p><code>setAttribute</code>和<code>getAttribute</code>可以用来在进行服务端跳转的时候，在不同的Servlet之间进行数据共享。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;request常见方法&quot;&gt;&lt;a href=&quot;#request常见方法&quot; class=&quot;headerlink&quot; title=&quot;request常见方法&quot;&gt;&lt;/a&gt;request常见方法&lt;/h2&gt;&lt;p&gt;&lt;code&gt;request.getRequestURL()&lt;/code&gt;: 浏览器发出请求时的完整URL，包括协议 主机名 端口(如果有)” +&lt;br&gt;&lt;code&gt;request.getRequestURI()&lt;/code&gt;: 浏览器发出请求的资源名部分，去掉了协议和主机名” +&lt;br&gt;&lt;code&gt;request.getQueryString()&lt;/code&gt;: 请求行中的参数部分，只能显示以get方式发出的参数，post方式的看不到&lt;br&gt;&lt;code&gt;request.getRemoteAddr()&lt;/code&gt;: 浏览器所处于的客户机的IP地址&lt;br&gt;&lt;code&gt;request.getRemoteHost()&lt;/code&gt;: 浏览器所处于的客户机的主机名&lt;br&gt;&lt;code&gt;request.getRemotePort()&lt;/code&gt;: 浏览器所处于的客户机使用的网络端口&lt;br&gt;&lt;code&gt;request.getLocalAddr()&lt;/code&gt;: 服务器的IP地址&lt;br&gt;&lt;code&gt;request.getLocalName()&lt;/code&gt;: 服务器的主机名&lt;br&gt;&lt;code&gt;request.getMethod()&lt;/code&gt;: 得到客户机请求方式一般是GET或者POST&lt;br&gt;
    
    </summary>
    
    
      <category term="ssm" scheme="http://www.sanstylemc.cn/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>跳转</title>
    <link href="http://www.sanstylemc.cn/2018/05/11/%E8%B7%B3%E8%BD%AC/"/>
    <id>http://www.sanstylemc.cn/2018/05/11/跳转/</id>
    <published>2018-05-11T08:06:54.000Z</published>
    <updated>2018-05-13T01:12:59.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在web目录下准备两个页面<code>success.html</code>，<code>fail.html</code>。<br>分别用于显示登录成功或者登录失败。<br>如果登录成功了，就服务端跳转到<code>success.html</code>；如果登录失败了，就客户端跳转到<code>fail.html</code>。<br><a id="more"></a><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">success.html</div><div class="line">&lt;<span class="selector-tag">div</span> style=<span class="string">"color:green"</span>&gt;login success&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fail.html</div><div class="line">&lt;<span class="selector-tag">div</span> style=<span class="string">"color:red"</span>&gt;login fail&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="type">HelloServlet</span>.java</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.util.<span class="type">Date</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line"></div><div class="line">	public void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			response.getWriter().println(<span class="string">"&lt;h1&gt;Hello Servlet!&lt;/h1&gt;"</span>);</div><div class="line">			response.getWriter().println(<span class="keyword">new</span> <span class="type">Date</span>().toLocaleString());</div><div class="line">		&#125; <span class="keyword">catch</span> (<span class="type">IOException</span> e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="服务端跳转"><a href="#服务端跳转" class="headerlink" title="服务端跳转"></a>服务端跳转</h2><p>在Servlet中进行服务端跳转的方式:<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">request</span>.getRequestDispatcher(<span class="string">"success.html"</span>).forward(<span class="built_in">request</span>, <span class="built_in">response</span>);</div></pre></td></tr></table></figure></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="type">LoginServlet</span>.java</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> void service(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line"> </div><div class="line">        <span class="type">String</span> name = request.getParameter(<span class="string">"name"</span>);</div><div class="line">        <span class="type">String</span> password = request.getParameter(<span class="string">"password"</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password)) &#123;</div><div class="line">            request.getRequestDispatcher(<span class="string">"success.html"</span>).forward(request, response);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="客户端跳转"><a href="#客户端跳转" class="headerlink" title="客户端跳转"></a>客户端跳转</h2><p>在Servlet中进行 客户端跳转的方式：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.sendRedirect(<span class="string">"fail.html"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="type">LoginServlet</span>.java</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> void service(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line"> </div><div class="line">        <span class="type">String</span> name = request.getParameter(<span class="string">"name"</span>);</div><div class="line">        <span class="type">String</span> password = request.getParameter(<span class="string">"password"</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password)) &#123;</div><div class="line">            request.getRequestDispatcher(<span class="string">"success.html"</span>).forward(request, response);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            response.sendRedirect(<span class="string">"fail.html"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="服务端跳转和客户端跳转图示"><a href="#服务端跳转和客户端跳转图示" class="headerlink" title="服务端跳转和客户端跳转图示"></a>服务端跳转和客户端跳转图示</h2><p><img src="https://github.com/sunstady/hexo/blob/master/%E8%B7%B3%E8%BD%AC/1.png?raw=true" alt="1"></p>
<blockquote>
<p>客户端的跳转：跳转之后地址栏的信息是会变的，变为跳转之后的地址信息 。<br>服务器端的跳转：跳转之后的地址栏的信息不会 发生任何的改变。<br>(1) 在使用request属性范围时，只有服务器端跳转才能将request范围的属性保存到跳转页面；而如果是客户端的跳转，则无法进行request属性的传递<br>(2) 另外，如果是服务器端的跳转，则执行跳转语句时立刻进行跳转；如果使用的是客户端跳转，则是整个页面执行完之后才执行跳转的。<br>(3) 在Servlet中如果想要进行客户端的跳转，直接使用HttpServletResponse接口的SendRedirect()即可，但是需要注意的是，此跳转只能传递session以及application范围的属性，而无法传递request范围的属性。</p>
</blockquote>
<h2 id="响应代码"><a href="#响应代码" class="headerlink" title="响应代码"></a>响应代码</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">200</span>: 表示响应成功了，比如打开页面，就会看到200响应码。</div><div class="line"><span class="attribute">301</span>: 表示客户端跳转，永久性的跳转。为了实现301跳转，在Servlet中应该使用如下代码: response.setStatus(301); response.setHeader("Location", "fail.html");</div><div class="line"><span class="attribute">302</span>: 表示客户端跳转，临时性的跳转。在Servlet的代码 实现要比301简单点，直接使用: response.sendRedirect("/listHero");</div><div class="line"><span class="attribute">304</span>: 表示资源未被修改。当不是第一次访问一个静态页面或者图片的时候，就会得到这么一个提示。这是服务端提示浏览器，这个资源没有发生变化，你直接使用上一次下载的就行了，不需要重新下载。这样就节约了带宽，并且浏览器的加载速度也更快。</div><div class="line"><span class="attribute">404</span>: 表示访问的页面不存在。</div><div class="line"><span class="attribute">500</span>: 表示服务端的错误。</div></pre></td></tr></table></figure>
<p>更多代码预览:<br><img src="https://github.com/sunstady/hexo/blob/master/%E8%B7%B3%E8%BD%AC/2.png?raw=true" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;在web目录下准备两个页面&lt;code&gt;success.html&lt;/code&gt;，&lt;code&gt;fail.html&lt;/code&gt;。&lt;br&gt;分别用于显示登录成功或者登录失败。&lt;br&gt;如果登录成功了，就服务端跳转到&lt;code&gt;success.html&lt;/code&gt;；如果登录失败了，就客户端跳转到&lt;code&gt;fail.html&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="ssm" scheme="http://www.sanstylemc.cn/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>Service()</title>
    <link href="http://www.sanstylemc.cn/2018/05/11/Service/"/>
    <id>http://www.sanstylemc.cn/2018/05/11/Service/</id>
    <published>2018-05-10T23:57:20.000Z</published>
    <updated>2018-05-10T23:57:46.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="doGet"><a href="#doGet" class="headerlink" title="doGet"></a>doGet</h2><p>当浏览器使用<code>get</code>方式提交数据的时候，<code>servlet</code>需要提供<code>doGet()</code>方法。<br>哪些是<code>get</code>方式呢？</p>
<ul>
<li><code>form</code>默认的提交方式</li>
<li>如果通过一个超链访问某个地址</li>
<li>如果在地址栏直接输入某个地址</li>
<li><code>ajax</code>指定使用<code>get</code>方式的时候<a id="more"></a>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="doPost"><a href="#doPost" class="headerlink" title="doPost()"></a>doPost()</h2><p>当浏览器使用<code>post</code>方式提交数据的时候，<code>servlet</code>需要提供<code>doPost()</code>方法。<br>哪些是<code>post</code>方式呢？</p>
<ul>
<li>在form上显示设置<code>method=&quot;post&quot;的时候</code></li>
<li><code>ajax</code>指定<code>post</code>方式的时候</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="service"><a href="#service" class="headerlink" title="service()"></a>service()</h2><p><code>LoginServlet</code>继承了<code>HttpServlet</code>，同时也继承了一个方法。</p>
<blockquote>
<p>service(HttpServletRequest , HttpServletResponse )</p>
</blockquote>
<p>实际上，在执行<code>doGet()</code>或者<code>doPost()</code>之前，都会先执行<code>service()</code>。<br>由<code>service()</code>方法进行判断，到底该调用<code>doGet()</code>还是<code>doPost()</code><br>可以发现，<code>service()</code>, <code>doGet()</code>, <code>doPost()</code>三种方式的参数列表都是一样的。<br>所以，有时候也会<code>直接重写service()</code>方法，在其中提供相应的服务，就不用区分到底是<code>get</code>还是<code>post</code>了。<br>比如把前面的登录的<code>LoginServlet</code>，改为提供<code>service</code>方法，也可以达到相同的效果。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">原：</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line">  </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="comment">/*Tomcat定位到了LoginServlet后，发现并没有LoginServlet的实例存在，</span></div><div class="line"><span class="comment">	 * 于是就调用LoginServlet的public无参构造方法LoginServlet()实例化一个LoginServlet对象以备后续使用*/</span></div><div class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line">        <span class="type">String</span> name = request.getParameter(<span class="string">"name"</span>);</div><div class="line">        <span class="type">String</span> password = request.getParameter(<span class="string">"password"</span>);</div><div class="line">  </div><div class="line">        <span class="type">String</span> html = <span class="literal">null</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password))</div><div class="line">            html = <span class="string">"&lt;div style='color:green'&gt;success&lt;/div&gt;"</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            html = <span class="string">"&lt;div style='color:red'&gt;fail&lt;/div&gt;"</span>;</div><div class="line">  </div><div class="line">        <span class="type">PrintWriter</span> pw = response.getWriter();</div><div class="line">        <span class="comment">/*获取 response的输出流，这个流是字符流用来向jsp界面输出字符串的*/</span></div><div class="line">        pw.println(html);</div><div class="line">        <span class="comment">/*在Servlet完成工作后，tomcat拿到被Servlet修改过的response，根据这个response生成html字符串，</span></div><div class="line"><span class="comment">         * 然后通过HTTP协议，这个html字符串，回发给浏览器，浏览器再根据HTTP协议获取这个html字符串，</span></div><div class="line"><span class="comment">         * 并渲染在界面上。这样在效果上，浏览器就可以看到Servlet中生成的字符串了*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">改：</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</div><div class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> void service(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response)</div><div class="line">            <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</div><div class="line"> </div><div class="line">        <span class="type">String</span> name = request.getParameter(<span class="string">"name"</span>);</div><div class="line">        <span class="type">String</span> password = request.getParameter(<span class="string">"password"</span>);</div><div class="line"> </div><div class="line">        <span class="type">String</span> html = <span class="literal">null</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name) &amp;&amp; <span class="string">"123"</span>.equals(password))</div><div class="line">            html = <span class="string">"&lt;div style='color:green'&gt;success&lt;/div&gt;"</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            html = <span class="string">"&lt;div style='color:red'&gt;fail&lt;/div&gt;"</span>;</div><div class="line"> </div><div class="line">        <span class="type">PrintWriter</span> pw = response.getWriter();</div><div class="line">        pw.println(html);</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;doGet&quot;&gt;&lt;a href=&quot;#doGet&quot; class=&quot;headerlink&quot; title=&quot;doGet&quot;&gt;&lt;/a&gt;doGet&lt;/h2&gt;&lt;p&gt;当浏览器使用&lt;code&gt;get&lt;/code&gt;方式提交数据的时候，&lt;code&gt;servlet&lt;/code&gt;需要提供&lt;code&gt;doGet()&lt;/code&gt;方法。&lt;br&gt;哪些是&lt;code&gt;get&lt;/code&gt;方式呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;form&lt;/code&gt;默认的提交方式&lt;/li&gt;
&lt;li&gt;如果通过一个超链访问某个地址&lt;/li&gt;
&lt;li&gt;如果在地址栏直接输入某个地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ajax&lt;/code&gt;指定使用&lt;code&gt;get&lt;/code&gt;方式的时候
    
    </summary>
    
    
      <category term="ssm" scheme="http://www.sanstylemc.cn/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>tmall_ssm之数据库</title>
    <link href="http://www.sanstylemc.cn/2018/05/10/tmall-ssm%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://www.sanstylemc.cn/2018/05/10/tmall-ssm之数据库/</id>
    <published>2018-05-10T02:23:41.000Z</published>
    <updated>2018-05-10T02:25:08.168Z</updated>
    
    <content type="html"><![CDATA[<p>在需求分析结束之后，接下来要做的不是马上开发功能，而是进行表结构的设计。只有把表结构设计正确了，才能支撑软件后续的功能开发，这一步是非常重要的。<br><a id="more"></a></p>
<h2 id="数据库的创建"><a href="#数据库的创建" class="headerlink" title="数据库的创建"></a>数据库的创建</h2><p>创建数据库<code>tmall_ssm</code>。<br>并将数据库的编码格式设置为<code>utf8</code>，便于存放中文。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tmall_ssm;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> tmall_ssm DEFUALT <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/sunstady/hexo/blob/master/tmall_ssm%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/1.jpg?raw=true" alt="1"></p>
<h2 id="表关系图"><a href="#表关系图" class="headerlink" title="表关系图"></a>表关系图</h2><p>在这张表关系图上，列出了模仿天猫整站一共需要用到的9张表，以及表之间的关系。<br><img src="https://github.com/sunstady/hexo/blob/master/tmall_ssm%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/2.jpg?raw=true" alt="2"></p>
<h3 id="表介绍"><a href="#表介绍" class="headerlink" title="表介绍"></a>表介绍</h3><table>
<thead>
<tr>
<th style="text-align:center">表名</th>
<th style="text-align:center">中文含义</th>
<th style="text-align:center">介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Category</td>
<td style="text-align:center">分类表</td>
<td style="text-align:center">存放分类信息，如女装，平板电视，沙发等</td>
</tr>
<tr>
<td style="text-align:center">Property</td>
<td style="text-align:center">属性表</td>
<td style="text-align:center">存放属性信息，如颜色，重量，品牌，厂商，型号等</td>
</tr>
<tr>
<td style="text-align:center">Product</td>
<td style="text-align:center">产品表</td>
<td style="text-align:center">存放产品信息，如LED40EC平板电视机，海尔EC6005热水器</td>
</tr>
<tr>
<td style="text-align:center">PropertyValue</td>
<td style="text-align:center">属性值表</td>
<td style="text-align:center">存放属性值信息，如重量是900g,颜色是粉红色</td>
</tr>
<tr>
<td style="text-align:center">ProductImage</td>
<td style="text-align:center">产品图片表</td>
<td style="text-align:center">存放产品图片信息，如产品页显示的5个图片</td>
</tr>
<tr>
<td style="text-align:center">Review</td>
<td style="text-align:center">评论表</td>
<td style="text-align:center">存放评论信息，如买回来的蜡烛很好用，么么哒</td>
</tr>
<tr>
<td style="text-align:center">User</td>
<td style="text-align:center">用户表</td>
<td style="text-align:center">存放用户信息，如斩手狗，千手小粉红</td>
</tr>
<tr>
<td style="text-align:center">Order</td>
<td style="text-align:center">订单表</td>
<td style="text-align:center">存放订单信息，包括邮寄地址，电话号码等信息</td>
</tr>
<tr>
<td style="text-align:center">OrderItem</td>
<td style="text-align:center">订单项表</td>
<td style="text-align:center">存放订单项信息，包括购买产品种类，数量等</td>
</tr>
</tbody>
</table>
<h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>在建表过程中，会设置外键约束，所以表和表之间有依赖关系。因此会先建立被外键指向的表，比如<code>User</code>，<code>Category</code>，然后再是其他表。</p>
<h3 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE user(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">password varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY (id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<h3 id="分类表"><a href="#分类表" class="headerlink" title="分类表"></a>分类表</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE category(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY (id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<h3 id="属性表"><a href="#属性表" class="headerlink" title="属性表"></a>属性表</h3><p>从这个表开始，就有外键约束了。<br>本表的外<code>cid</code>，指向分类表的id字段。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE property(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">cid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY (id),</div><div class="line">CONSTRAINT fk_property_category FOREIGN KEY (cid) REFERENCES category (id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<h3 id="产品表"><a href="#产品表" class="headerlink" title="产品表"></a>产品表</h3><p>产品表字段稍多，介绍下。<br><code>name</code>: 产品名称<br><code>subTitle</code>: 小标题<br><code>originalPrice</code>: 原始价格<br><code>promotePrice</code>: 优惠价格<br><code>stock</code>: 库存<br><code>createDate</code>: 创建日期<br>本表的外键<code>cid</code>，指向分类表的<code>id</code>字段。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE product(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">subTitle varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">originalPrice float<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">promotePrice float<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">stock int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">cid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">createDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY(id),</div><div class="line">CONSTRAINT fk_product_category FOREIGN KEY (cid) REFERENCES category(id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<h3 id="属性值表"><a href="#属性值表" class="headerlink" title="属性值表"></a>属性值表</h3><p>本表有两个外键。<br>外键<code>ptid</code>，指向属性表的<code>id</code>字段。<br>外键<code>pid</code>，指向产品表的<code>id</code>字段。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE propertyvalue(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">ptid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">value varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY(id),</div><div class="line">CONSTRAINT fk_propertyvalue_property FOREIGN KEY(ptid) REFERENCES property(id),</div><div class="line">CONSTRAINT fk_propertyvalue_product FOREIGN KEY(pid) REFERENCES product(id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<h3 id="产品图片表"><a href="#产品图片表" class="headerlink" title="产品图片表"></a>产品图片表</h3><p><code>type</code>表示类型，产品图片分<code>单个</code>图片和<code>详情</code>图片两种。<br>本表的外键<code>pid</code>，指向产品表的<code>id</code>字段。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE productimage(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">type varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY(id),</div><div class="line">CONSTRATINT fk_productimage_product FOREIGN KEY(pid) REFERENCES product (id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<h3 id="评价表"><a href="#评价表" class="headerlink" title="评价表"></a>评价表</h3><p>外键<code>pid</code>，指向产品表的<code>id</code>字段。<br>外键<code>uid</code>，指向用户表的<code>id</code>字段。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE review(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">content varchar(4000)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">uid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">createDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY(id),</div><div class="line">CONSTRAINT fk_review_product FOREIGN KEY(pid) REFERENCES product(id),</div><div class="line">CONSTRAINT fk_review_user FOREIGN KEY(uid) REFERENCES user(id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<h3 id="订单表"><a href="#订单表" class="headerlink" title="订单表"></a>订单表</h3><p>订单表的字段也比较多，说明一下。<br><code>orderCode</code>: 订单号<br><code>address</code>: 收货地址<br><code>post</code>: 邮编<br><code>receiver</code>: 收货人信息<br><code>mobile</code>: 手机号码<br><code>userMessage</code>: 用户备注信息<br><code>createDate</code>: 订单创建日期<br><code>payDate</code>: 支付日期<br><code>deliveryDate</code>: 发货日期<br><code>confirmDate</code>: 确认收货日期<br><code>status</code>: 订单状态<br>外键<code>uid</code>，指向用户表<code>id</code>字段<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE order_(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">orderCode varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">address varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">post varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">receiver varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">mobile varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">userMessage varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">createDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">payDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">deliveryDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">confirmDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">uid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">status varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY(id),</div><div class="line">CONSTRAINT fk_order_user FOREIGN KEY(uid) REFERENCES user(id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<h3 id="订单项表"><a href="#订单项表" class="headerlink" title="订单项表"></a>订单项表</h3><p>这个表是外键最多的一个表。<br>外键<code>pid</code>，指向产品表<code>id</code>字段。<br>外键<code>oid</code>，指向订单表<code>id</code>字段。<br>外键<code>uid</code>，指向用户表<code>id</code>字段。<br><code>number</code>字段表示购买数量。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE orderitem(</div><div class="line">id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">oid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">uid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">number int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">PRIMARY KEY(id),</div><div class="line">CONSTRAINT fk_orderitem_user FOREIGN KEY(uid) REFERENCES user(id),</div><div class="line">CONSTRAINT fk_orderitem_product FOREIGN KEY(pid) REFERENCES product(id),</div><div class="line">CONSTRAINT fk_orderitem_order FOREIGN KEY(oid) REFERENCES order_(id)</div><div class="line">)<span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
<h2 id="整理表"><a href="#整理表" class="headerlink" title="整理表"></a>整理表</h2><p>一般来说，对于一个新项目，建表的时候，会把sql语句都准备好，一次性执行。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">DROP DATABASE <span class="keyword">IF</span> EXISTS tmall_ssm;</div><div class="line">CREATE DATABASE tmall_ssm<span class="built_in"> DEFAULT </span>CHARACTER <span class="builtin-name">SET</span> utf8;</div><div class="line">USE tmall_ssm;</div><div class="line"> </div><div class="line">CREATE TABLE<span class="built_in"> user </span>(</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  password varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE category (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE property (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  cid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id),</div><div class="line">  CONSTRAINT fk_property_category FOREIGN KEY (cid) REFERENCES category (id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE product (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  name varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  subTitle varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  originalPrice float<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  promotePrice float<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  stock int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  cid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  createDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id),</div><div class="line">  CONSTRAINT fk_product_category FOREIGN KEY (cid) REFERENCES category (id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE propertyvalue (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  ptid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  value varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id),</div><div class="line">  CONSTRAINT fk_propertyvalue_property FOREIGN KEY (ptid) REFERENCES property (id),</div><div class="line">  CONSTRAINT fk_propertyvalue_product FOREIGN KEY (pid) REFERENCES product (id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE productimage (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line"> <span class="built_in"> type </span>varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id),</div><div class="line">  CONSTRAINT fk_productimage_product FOREIGN KEY (pid) REFERENCES product (id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE review (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  content varchar(4000)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  uid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  createDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id),</div><div class="line">  CONSTRAINT fk_review_product FOREIGN KEY (pid) REFERENCES product (id),</div><div class="line">    CONSTRAINT fk_review_user FOREIGN KEY (uid) REFERENCES<span class="built_in"> user </span>(id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE order_ (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  orderCode varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line"> <span class="built_in"> address </span>varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  post varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  receiver varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  mobile varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  userMessage varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  createDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  payDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  deliveryDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  confirmDate datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  uid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  status varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id),</div><div class="line">  CONSTRAINT fk_order_user FOREIGN KEY (uid) REFERENCES<span class="built_in"> user </span>(id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div><div class="line"> </div><div class="line">CREATE TABLE orderitem (</div><div class="line">  id int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  pid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  oid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  uid int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  number int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</div><div class="line">  PRIMARY KEY (id),</div><div class="line">  CONSTRAINT fk_orderitem_user FOREIGN KEY (uid) REFERENCES<span class="built_in"> user </span>(id),</div><div class="line">  CONSTRAINT fk_orderitem_product FOREIGN KEY (pid) REFERENCES product (id),</div><div class="line">  CONSTRAINT fk_orderitem_order FOREIGN KEY (oid) REFERENCES order_ (id)</div><div class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在需求分析结束之后，接下来要做的不是马上开发功能，而是进行表结构的设计。只有把表结构设计正确了，才能支撑软件后续的功能开发，这一步是非常重要的。&lt;br&gt;
    
    </summary>
    
    
      <category term="ssm" scheme="http://www.sanstylemc.cn/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>抽象类和接口的区别</title>
    <link href="http://www.sanstylemc.cn/2018/05/10/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.sanstylemc.cn/2018/05/10/抽象类和接口的区别/</id>
    <published>2018-05-10T01:47:15.000Z</published>
    <updated>2018-05-10T01:48:06.026Z</updated>
    
    <content type="html"><![CDATA[<p>区别一：</p>
<ul>
<li>子类只能继承一个抽象类，不能继承多个</li>
<li>子类可以实现多个接口</li>
</ul>
<p>区别二：</p>
<ul>
<li>抽象类可以定义<code>public</code>、<code>protected</code>、<code>package</code>、<code>private</code>。<br><code>静态</code>、<code>非静态</code><br><code>final</code>、<code>非final属性</code></li>
<li>但是接口中声明的属性，只能是<code>public</code>、<code>静态</code>、<code>final</code></li>
</ul>
<blockquote>
<p>抽象类和接口都可以有实体方法。接口中的实体方法，叫做默认方法。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AP</span> </span>&#123;</div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> resistPhysic = <span class="number">100</span>;</div><div class="line">     </div><div class="line">    <span class="comment">//resistMagic即便没有显式的声明为 public static final</span></div><div class="line">    <span class="comment">//但依然默认为public static final</span></div><div class="line">    <span class="keyword">int</span> resistMagic = <span class="number">0</span>;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;区别一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子类只能继承一个抽象类，不能继承多个&lt;/li&gt;
&lt;li&gt;子类可以实现多个接口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;区别二：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象类可以定义&lt;code&gt;public&lt;/code&gt;、&lt;code&gt;protected&lt;/code&gt;、&lt;code&gt;package&lt;/code&gt;、&lt;code&gt;private&lt;/code&gt;。&lt;br&gt;&lt;code&gt;静态&lt;/code&gt;、&lt;code&gt;非静态&lt;/code&gt;&lt;br&gt;&lt;code&gt;final&lt;/code&gt;、&lt;code&gt;非final属性&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;但是接口中声明的属性，只能是&lt;code&gt;public&lt;/code&gt;、&lt;code&gt;静态&lt;/code&gt;、&lt;code&gt;final&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;抽象类和接口都可以有实体方法。接口中的实体方法，叫做默认方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="Skill" scheme="http://www.sanstylemc.cn/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>将jdk9版本写的项目转换成jdk1.8</title>
    <link href="http://www.sanstylemc.cn/2018/05/05/%E5%B0%86jdk9%E7%89%88%E6%9C%AC%E5%86%99%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%BD%AC%E6%8D%A2%E6%88%90jdk1-8/"/>
    <id>http://www.sanstylemc.cn/2018/05/05/将jdk9版本写的项目转换成jdk1-8/</id>
    <published>2018-05-05T01:43:58.000Z</published>
    <updated>2018-05-05T01:44:52.115Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;将jdk9版本写的项目转换成jdk1.8:<br><code>右键项目名</code>–&gt;<code>Properties</code>–&gt;<code>Project Facets</code>–&gt;<code>Java</code><br>选择右边的1.8就OK了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;将jdk1.8设为默认:<br><code>Window</code>–&gt;<code>Preferences</code>–&gt;<code>Java</code>–&gt;<code>Installed JREs</code>–&gt;<code>add选择需要添加的jdk1.8版本位置</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;将jdk9版本写的项目转换成jdk1.8:&lt;br&gt;&lt;code&gt;右键项目名&lt;/code&gt;–&amp;gt;&lt;code&gt;Properties&lt;/code&gt;–&amp;gt;&lt;code&gt;Project Facets&lt;/code&gt;–&amp;gt;&lt;code
    
    </summary>
    
    
      <category term="Skill" scheme="http://www.sanstylemc.cn/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>拦截器</title>
    <link href="http://www.sanstylemc.cn/2018/05/05/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://www.sanstylemc.cn/2018/05/05/拦截器/</id>
    <published>2018-05-05T00:18:42.000Z</published>
    <updated>2018-05-05T00:19:16.793Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;SpringMVC的所有请求都要通过<code>Dispatherservlet</code>来接收，然后通过<code>Handlermapping</code>来决定使用哪个控制器，再根据<code>ViewResolver</code>来决定返回哪个视图，从流程来看，<code>Handlermapping</code>就是我们可以实现拦截器的第一种方法，另外还有一种是实现<code>WebRequestInterceptor</code>接口，或者继承其子类。<br><a id="more"></a></p>
<h2 id="实现HandlerInterceptor接口"><a href="#实现HandlerInterceptor接口" class="headerlink" title="实现HandlerInterceptor接口"></a>实现HandlerInterceptor接口</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;实现<code>HandlerInterceptor</code>接口或者继承<code>HandlerInterceptor</code>的子类，比如<code>Spring</code>已经提供的实现了<code>HandlerInterceptor</code>接口的抽象类<code>HandlerInterceptorAdapter</code>，下面讲实现其接口的写法。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.<span class="keyword">handler</span>.HandlerInterceptorAdapter;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;  </div><div class="line"></div><div class="line">	 <span class="comment">/**  </span></div><div class="line"><span class="comment">     * preHandler方法是进行处理器拦截用的，在业务处理器处理请求之前被调用  </span></div><div class="line"><span class="comment">     * SpringMVC中的Interceptor拦截器是链式的，可以同时存在</span></div><div class="line"><span class="comment">     * 如果返回false  </span></div><div class="line"><span class="comment">     *     从当前的拦截器往回执行所有拦截器的afterCompletion(),再退出拦截器链</span></div><div class="line"><span class="comment">     * 如果返回true  </span></div><div class="line"><span class="comment">     *    执行下一个拦截器,直到所有的拦截器都执行完毕  </span></div><div class="line"><span class="comment">     *    再执行被拦截的Controller  </span></div><div class="line"><span class="comment">     *    然后进入拦截器链,  </span></div><div class="line"><span class="comment">     *    从最后一个拦截器往回执行所有的postHandle()  </span></div><div class="line"><span class="comment">     *    接着再从最后一个拦截器往回执行所有的afterCompletion()  </span></div><div class="line"><span class="comment">     */</span>    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> preHandle(HttpServletRequest request,    </div><div class="line">            HttpServletResponse response, Object <span class="keyword">handler</span>) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        System.out.println(<span class="string">"preHandle(), 在访问Controller之前被调用"</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="comment">/** 这个方法只会在当前这个Interceptor的preHandle方法返回值为true的时候才会执行。</span></div><div class="line"><span class="comment">     * 在业务处理器处理请求执行完成后,生成视图之前执行的动作 </span></div><div class="line"><span class="comment">     * 它会在DispatcherServlet进行视图的渲染之前执行，也就是说在这个方法中你可以对ModelAndView进行操作。</span></div><div class="line"><span class="comment">     * 这个方法的链式结构跟正常访问的方向是相反的，也就是说先声明的Interceptor拦截器该方法反而会后调用。</span></div><div class="line"><span class="comment">     * 可在modelAndView中加入数据，比如当前时间 </span></div><div class="line"><span class="comment">     */</span>  </div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> postHandle(HttpServletRequest request,    </div><div class="line">            HttpServletResponse response, Object <span class="keyword">handler</span>,    </div><div class="line">            ModelAndView modelAndView) <span class="keyword">throws</span> Exception &#123;  </div><div class="line">    	System.out.println(<span class="string">"postHandle(), 在访问Controller之后，访问视图之前被调用,这里可以注入一个时间到modelAndView中，用于后续视图显示"</span>);</div><div class="line">    	modelAndView.addObject(<span class="string">"date"</span>,<span class="string">"由拦截器生成的时间:"</span> + <span class="keyword">new</span> Date());</div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="comment">/**  该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行。</span></div><div class="line"><span class="comment">     * 该方法将在整个请求完成之后，也就是DispatcherServlet渲染了视图执行。</span></div><div class="line"><span class="comment">     * 在DispatcherServlet完全处理完请求后被调用,可用于清理资源等 </span></div><div class="line"><span class="comment">     * 当有拦截器抛出异常时,会从当前拦截器往回执行所有的拦截器的afterCompletion()  </span></div><div class="line"><span class="comment">     */</span> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> afterCompletion(HttpServletRequest request,    </div><div class="line">            HttpServletResponse response, Object <span class="keyword">handler</span>, Exception ex)  </div><div class="line">    <span class="keyword">throws</span> Exception &#123;  </div><div class="line">        System.out.println(<span class="string">"afterCompletion(), 在访问视图之后被调用"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="实现WebRequestInterceptor接口"><a href="#实现WebRequestInterceptor接口" class="headerlink" title="实现WebRequestInterceptor接口"></a>实现WebRequestInterceptor接口</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>WebRequestInterceptor</code>中定义了三个方法，我们也是通过这三个方法来实现拦截的。这三个方法都传递了同一个参数<code>WebRequest</code>，那么这个<code>WebRequest</code>是什么呢？这个<code>WebRequest</code>是<code>Spring</code>定义的一个接口，它里面的方法定义都基本跟<code>HttpServletRequest</code>一样，在<code>WebRequestInterceptor</code>中对<code>WebRequest</code>进行的所有操作都同步到<code>HttpServletRequest</code>中，然后在当前请求中一直传递。</p>
<ul>
<li>方法<code>preHandle</code>: 方法将在请求处理之前进行调用，也就是说会在<code>Controller</code>方法调用之前被调用。这个方法跟<code>HandlerInterceptor</code>中的<code>preHandle</code>是不同的，主要区别在于该方法的返回值是<code>void</code>，也就是没有返回值，所以我们一般主要用它来进行资源的准备工作，比如我们在使用<code>Hibernate</code>的时候可以在这个方法中准备一个<code>Hibernate</code>的<code>Session</code>对象，然后利用<code>WebRequest</code>的<code>setAttribute(name, value, scope)</code>把它放到<code>WebRequest</code>的属性中。这里可以说说这个<code>setAttribute方法的第三个参数</code>scope<code>，该参数是一个</code>Integer<code>类型的。在</code>WebRequest<code>的父层接口</code>RequestAttributes<code>中对它定义了三个常量:</code>SCOPE_REQUEST<code>: 它的值是0，代表只有在</code>request<code>中可以访问。</code>SCOPE_SESSION<code>: 它的值是1，如果环境允许的话它代表的是一个局部的隔离的</code>session<code>，否则就代表普通的</code>session<code>，并且在该</code>session<code>范围内可以访问。</code>SCOPE_GLOBAL_SESSION<code>: 它的值是2，如果环境允许的话，它代表的是一个全局共享的</code>session<code>，否则就代表普通的</code>session<code>，并且在该</code>session`范围内可以访问。</li>
<li>方法<code>postHandle</code>: 该方法将在请求处理之后，也就是在<code>Controller</code>方法调用之后被调用，但是会在视图返回被渲染之前被调用，所以可以在这个方法里面通过改变数据模型<code>ModelMap</code>来改变数据的展示。该方法有两个参数，<code>WebRequest</code>对象是用于传递整个请求数据的，比如在<code>preHandle</code>中准备的数据都可以通过<code>WebRequest</code>来传递和访问；<code>ModelMap</code>就是<code>Controller</code>处理之后返回的<code>Model</code>对象，我们可以通过改变它的属性来改变返回的<code>Model</code>模型。</li>
<li>方法<code>afterCompletion</code>: 该方法会在整个请求处理完成，也就是在视图返回并被渲染之后执行。所以在该方法中可以进行资源的释放操作。而<code>WebRequest</code>参数就可以把我们在<code>preHandle</code>中准备的资源传递到这里进行释放。<code>Exception</code>参数表示的是当前请求的异常对象，如果在<code>Controller</code>中抛出的异常已经被<code>Spring</code>的异常处理器给处理了的话，那么这个异常对象就是是<code>null</code>。</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.WebRequest;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.WebRequestInterceptor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class AllInterceptor implements WebRequestInterceptor &#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 在请求处理之前执行，该方法主要是用于准备资源数据的，然后可以把它们当做请求属性放到WebRequest中</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> preHandle(WebRequest request) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"AllInterceptor..............................."</span>);</div><div class="line">        request.setAttribute(<span class="string">"request"</span>, <span class="string">"request"</span>, WebRequest.SCOPE_REQUEST);<span class="comment">//这个是放到request范围内的，所以只能在当前请求中的request中获取到</span></div><div class="line">        request.setAttribute(<span class="string">"session"</span>, <span class="string">"session"</span>, WebRequest.SCOPE_SESSION);<span class="comment">//这个是放到session范围内的，如果环境允许的话它只能在局部的隔离的会话中访问，否则就是在普通的当前会话中可以访问</span></div><div class="line">        request.setAttribute(<span class="string">"globalSession"</span>, <span class="string">"globalSession"</span>, WebRequest.SCOPE_GLOBAL_SESSION);<span class="comment">//如果环境允许的话，它能在全局共享的会话中访问，否则就是在普通的当前会话中访问</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 该方法将在Controller执行之后，返回视图之前执行，ModelMap表示请求Controller处理之后返回的Model对象，所以可以在</span></div><div class="line"><span class="comment">     * 这个方法中修改ModelMap的属性，从而达到改变返回的模型的效果。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> postHandle(WebRequest request, ModelMap <span class="built_in">map</span>) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">String</span> <span class="built_in">key</span>:<span class="built_in">map</span>.keySet())</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="built_in">key</span> + <span class="string">"-------------------------"</span>);;</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"name3"</span>, <span class="string">"value3"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"name1"</span>, <span class="string">"name1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 该方法将在整个请求完成之后，也就是说在视图渲染之后进行调用，主要用于进行一些资源的释放</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> afterCompletion(WebRequest request, Exception exception)</div><div class="line">    <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        System.out.<span class="built_in">println</span>(exception + <span class="string">"-=-=--=--=-=-=-=-=-=-=-=-==-=--=-=-=-="</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="拦截器的配置"><a href="#拦截器的配置" class="headerlink" title="拦截器的配置"></a>拦截器的配置</h2><p><code>mvc:interceptors标签来声明需要加入到SpringMVC拦截器链中的拦截器</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.host.app.web.interceptor.AllInterceptor"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/test/number.do"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.host.app.web.interceptor.LoginInterceptor"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;由上面的示例可以看出可以利用<code>mvc:interceptors</code>标签声明一系列的拦截器，然后它们就可以形成一个拦截器链，拦截器的执行顺序是按声明的先后顺序执行的，先声明的拦截器中的<code>preHandle</code>方法会先执行，然而它的<code>postHandle</code>方法和<code>afterCompletion</code>方法却会后执行。<br>&nbsp;&nbsp;&nbsp;&nbsp;在<code>mvc:interceptors</code>标签下声明<code>interceptor</code>主要有两种方式：<br>1) 直接定义一个<code>Interceptor</code>实现类的bean对象。使用这种方式声明的<code>Interceptor</code>拦截器将会对所有的请求进行拦截。<br>2) 使用<code>mvc:interceptor</code>标签进行声明。使用这种方式进行声明的<code>Interceptor</code>可以通过<code>mvc:mapping</code>子标签来定义需要进行拦截的请求路径。<br>&nbsp;&nbsp;&nbsp;&nbsp;经过上述两步之后，定义的拦截器就会发生作用对特定的请求进行拦截了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SpringMVC的所有请求都要通过&lt;code&gt;Dispatherservlet&lt;/code&gt;来接收，然后通过&lt;code&gt;Handlermapping&lt;/code&gt;来决定使用哪个控制器，再根据&lt;code&gt;ViewResolver&lt;/code&gt;来决定返回哪个视图，从流程来看，&lt;code&gt;Handlermapping&lt;/code&gt;就是我们可以实现拦截器的第一种方法，另外还有一种是实现&lt;code&gt;WebRequestInterceptor&lt;/code&gt;接口，或者继承其子类。&lt;br&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://www.sanstylemc.cn/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>log4j总结</title>
    <link href="http://www.sanstylemc.cn/2018/05/03/log4j%E6%80%BB%E7%BB%93/"/>
    <id>http://www.sanstylemc.cn/2018/05/03/log4j总结/</id>
    <published>2018-05-03T00:52:32.000Z</published>
    <updated>2018-05-03T00:53:04.278Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;Log4j是apache的一个开源项目，用来操作程序日志信息的框架。因便于管理，在工程中用来代替System.out打印语句。通过配置Log4j中的log4j.properties，可以指定日志信息的级别，输出地点，输出格式。<br><a id="more"></a></p>
<h2 id="LOG4J组成"><a href="#LOG4J组成" class="headerlink" title="LOG4J组成"></a>LOG4J组成</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Log4j有3大主要组件: </p>
<ul>
<li>Logger: 记录器，决定什么日志信息应该被输出、什么日志信息应该被忽略。</li>
<li>Appender: 存放器，指定日志信息应该输出到什么地方，可以是控制台、文件、网络设备。</li>
<li>Layout: 布局格式，指定日志信息的输出格式。</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;一个logger可以用多个appender，也就是说日志信息可以同时输出到多个设备上，每个appender对应一种layout。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以，记录器用来整合日志信息，一个日志信息调整好以后，交给记录器的所有存放器，每一个存放器根据自己的格式输出日志信息。</p>
<h2 id="记录器组件Logger"><a href="#记录器组件Logger" class="headerlink" title="记录器组件Logger"></a>记录器组件Logger</h2><p>1、<code>根记录器： rootLogger</code><br>配置语法: log4j.rootLogger=[日志级别], 存放器名1, 存放器名2, … , 存放器名N。<br>日志级别: 级别由高到低依次是: fatal、error、warn、info、debug。<br>项目中的代码: log4j.rootLogger=INFO, stdout, logfile<br>跟记录器的日志级别是info，所以debug, info, warn, error, fatal均会被执行。stdout, logfile是存放器。<br>2、<code>在配置文件中配置Logger组件</code><br>可在Log4J配置文件中配置自己的Logger组件<br>项目中代码:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">log4j<span class="selector-class">.logger</span><span class="selector-class">.Application</span>=INFO,Application</div><div class="line">log4j<span class="selector-class">.logger</span><span class="selector-class">.Service</span>=DEBUG,Service</div><div class="line">log4j<span class="selector-class">.logger</span><span class="selector-class">.jdbc</span>=INFO,jdbc</div><div class="line">log4j<span class="selector-class">.logger</span><span class="selector-class">.Action</span>=INFO,Action</div></pre></td></tr></table></figure></p>
<p>定义了application, service, jdbc, action四个自己的logger组件，并分别配置了级别和存放器。</p>
<h2 id="存放器组件Appender"><a href="#存放器组件Appender" class="headerlink" title="存放器组件Appender"></a>存放器组件Appender</h2><p>配置语法:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">log4j<span class="selector-class">.appender</span>.存放器名=存放类</div><div class="line">log4j<span class="selector-class">.appender</span>.存放器名.option1=value1</div></pre></td></tr></table></figure></p>
<p>存放类:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.ConsoleAppender</span></div><div class="line">控制台输出</div><div class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.FileAppender</span>          </div><div class="line">文件</div><div class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.DailyRollingFileAppender</span> 每天产生一个日志文件</div><div class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.RollingFileAppender</span>  文件大小到达指定尺寸的时候产生一个新的文件</div><div class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.WriterAppender</span>   将日志信息以流格式发送到任意指定的地方</div></pre></td></tr></table></figure></p>
<p>项目中代码:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Application记录器: </div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Application</span>=org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.RollingFileAppender</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Application</span><span class="selector-class">.encoding</span>=UTF-<span class="number">8</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Application</span><span class="selector-class">.File</span>=/imagesys/logs/ImageCreditServer/ApplicationLog.log</div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Service</span><span class="selector-class">.MaxFileSize</span>=<span class="number">10240</span>KB</div></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Service记录器: </div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Service</span>=org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.RollingFileAppender</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Service</span><span class="selector-class">.encoding</span>=UTF-<span class="number">8</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Service</span><span class="selector-class">.File</span>=/imagesys/logs/ImageCreditServer/ServiceLog.log</div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Service</span><span class="selector-class">.MaxFileSize</span>=<span class="number">10240</span>KB</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jdbc记录器: </div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.jdbc</span>=org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.RollingFileAppender</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.jdbc</span><span class="selector-class">.encoding</span>=UTF-<span class="number">8</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.jdbc</span><span class="selector-class">.File</span>=/imagesys/logs/ImageCreditServer/jdbcLog<span class="selector-class">.log</span> </div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.jdbc</span><span class="selector-class">.MaxFileSize</span>=<span class="number">1024</span>KB</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">action记录器: </div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Action</span>=org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.RollingFileAppender</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Action</span><span class="selector-class">.encoding</span>=UTF-<span class="number">8</span></div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Action</span><span class="selector-class">.File</span>=/imagesys/logs/ImageCreditServer/ActionLog.log</div><div class="line">log4j<span class="selector-class">.appender</span><span class="selector-class">.Action</span><span class="selector-class">.MaxFileSize</span>=<span class="number">10240</span>KB</div></pre></td></tr></table></figure>
<p>分别制定了输出文件的存放类、编码方式、文件路径、文件大小。</p>
<h2 id="格式化组件Layout"><a href="#格式化组件Layout" class="headerlink" title="格式化组件Layout"></a>格式化组件Layout</h2><p>配置语法:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">log4j<span class="selector-class">.appender</span>.存放器名<span class="selector-class">.layout</span> = 格式类</div><div class="line">log4j<span class="selector-class">.appender</span>.存放器名<span class="selector-class">.layout</span><span class="selector-class">.option1</span> = value1</div><div class="line">… …</div><div class="line">log4j<span class="selector-class">.appender</span>.存放器名<span class="selector-class">.layout</span><span class="selector-class">.optionN</span> = valueN</div></pre></td></tr></table></figure></p>
<p>输出格式类型:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">. <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.HTMLLayout</span>(以<span class="selector-tag">HTML</span>表格形式布局);</div><div class="line">. <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.PatternLayout</span>(可以灵活地指定布局模式);</div><div class="line">. <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.SimpleLayout</span>(包含日志信息的级别和信息字符串);</div><div class="line">. <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.TTCCLayout</span>(包含日志产生的时间、线程和类别等信息);</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>%r</code></td>
<td style="text-align:center">自程序开始后消耗的毫秒数</td>
</tr>
<tr>
<td style="text-align:center"><code>%t</code></td>
<td style="text-align:center">表示日志记录请求生成的线程</td>
</tr>
<tr>
<td style="text-align:center"><code>%p</code></td>
<td style="text-align:center">表示日志语句的优先级</td>
</tr>
<tr>
<td style="text-align:center"><code>%r</code></td>
<td style="text-align:center">与日志请求相关的类别名称</td>
</tr>
<tr>
<td style="text-align:center"><code>%c</code></td>
<td style="text-align:center">日志信息所在的类名</td>
</tr>
<tr>
<td style="text-align:center"><code>%m%n</code></td>
<td style="text-align:center">表示日志信息的内容</td>
</tr>
</tbody>
</table>
<p>项目中代码:<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">log4j.appender.Application.<span class="keyword">layout</span>=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.Application.<span class="keyword">layout</span>.ConversionPattern=%d %p [%c] - %m%n</div></pre></td></tr></table></figure></p>
<p>以自定义的格式输出日志信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Log4j是apache的一个开源项目，用来操作程序日志信息的框架。因便于管理，在工程中用来代替System.out打印语句。通过配置Log4j中的log4j.properties，可以指定日志信息的级别，输出地点，输出格式。&lt;br&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://www.sanstylemc.cn/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis配置文件基本结构</title>
    <link href="http://www.sanstylemc.cn/2018/04/25/MyBatis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/"/>
    <id>http://www.sanstylemc.cn/2018/04/25/MyBatis配置文件基本结构/</id>
    <published>2018-04-25T13:16:28.000Z</published>
    <updated>2018-04-25T13:46:34.910Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;在使用mybatis框架时，首先导入其对应的jar包，并进行相应的配置，所以得对配置文件的每个参数都得了解。一个完全的mybatis配置文件结构如下:<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> <span class="meta">?&gt;</span></span></div><div class="line"><span class="comment">&lt;!-- xml的版本：1.0 和编码：utf8 --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" </span></div><div class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>   <span class="comment">&lt;!-- 配置文件的根元素 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span>   <span class="comment">&lt;!-- 属性：定义配置外在化 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">settings</span>&gt;</span>   <span class="comment">&lt;!-- 设置：定义mybatis的一些全局性设置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>= <span class="string">""</span> <span class="attr">value</span>= <span class="string">""</span> /&gt;</span>   <span class="comment">&lt;!-- 具体的参数名和参数值 --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span>   <span class="comment">&lt;!-- 类型名称：为一些类定义别名 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span>   <span class="comment">&lt;!-- 类型处理器：定义Java类型与数据库中的数据类型之间的转换关系 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">objectFactory</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">objectFactory</span>&gt;</span>   <span class="comment">&lt;!-- 对象工厂 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span>   <span class="comment">&lt;!-- 插件，mybatis的插件，插件可以修改mybatis的内部运行规则 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>   </div><div class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">""</span>&gt;</span>   <span class="comment">&lt;!-- 环境变量：可以配置多个环境变量，比如使用多数据源时，就需要配置多个环境变量 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- default指现在默认使用什么环境，default的值必须是id对应的值 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span>   </div><div class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span>   <span class="comment">&lt;!-- 事务管理器  --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>   <span class="comment">&lt;!-- 数据源 --&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span>   <span class="comment">&lt;!-- 数据库厂商标识 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>   <span class="comment">&lt;!-- 映射器: 指定映射文件或者映射类 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在使用mybatis框架时，首先导入其对应的jar包，并进行相应的配置，所以得对配置文件的每个参数都得了解。一个完全的mybatis配置文件结构如下:&lt;br&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://www.sanstylemc.cn/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Edraw激活</title>
    <link href="http://www.sanstylemc.cn/2018/04/21/Edraw%E6%BF%80%E6%B4%BB/"/>
    <id>http://www.sanstylemc.cn/2018/04/21/Edraw激活/</id>
    <published>2018-04-20T23:24:19.000Z</published>
    <updated>2018-04-20T23:24:43.574Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>请在<code>断网</code>的情况下激活，选择<code>手动激活</code>。</p>
</blockquote>
<p>用户名:<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GUA<span class="symbol">NTAO2008</span></div></pre></td></tr></table></figure></p>
<p>产品密钥:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">0711</span><span class="number">-8621</span><span class="number">-3000</span><span class="number">-8217</span><span class="number">-5433</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;请在&lt;code&gt;断网&lt;/code&gt;的情况下激活，选择&lt;code&gt;手动激活&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用户名:&lt;br&gt;&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
    
      <category term="软件" scheme="http://www.sanstylemc.cn/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>导包错误</title>
    <link href="http://www.sanstylemc.cn/2018/04/19/%E5%AF%BC%E5%8C%85%E9%94%99%E8%AF%AF/"/>
    <id>http://www.sanstylemc.cn/2018/04/19/导包错误/</id>
    <published>2018-04-19T01:27:27.000Z</published>
    <updated>2018-04-19T01:28:05.773Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The package javax.servlet is accessible from more than one <span class="class"><span class="keyword">module</span>: &lt;unnamed&gt;, <span class="title">jstl</span>, <span class="title">servlet</span>.<span class="title">api</span></span></div></pre></td></tr></table></figure>
<p>今天导入包的时候出现这个错误，后来发现是导入位置错误。<br><a id="more"></a><br><img src="https://github.com/sunstady/hexo/blob/master/JavaWeb%E9%94%99%E8%AF%AF/1.jpg?raw=true" alt="1"><br><code>解决方法:</code></p>
<blockquote>
<p>1、Remove the external jars from the node “modulepath”.<br>2、Select the node “Classpath” then add the external jars.<br>3、Review that all the jars are under the node “Classpath”.<br><img src="https://github.com/sunstady/hexo/blob/master/JavaWeb%E9%94%99%E8%AF%AF/2.jpg?raw=true" alt="2"></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;The package javax.servlet is accessible from more than one &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;: &amp;lt;unnamed&amp;gt;, &lt;span class=&quot;title&quot;&gt;jstl&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;servlet&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;api&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;今天导入包的时候出现这个错误，后来发现是导入位置错误。&lt;br&gt;
    
    </summary>
    
    
      <category term="失误锦集" scheme="http://www.sanstylemc.cn/tags/%E5%A4%B1%E8%AF%AF%E9%94%A6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>FIRST、FOLLOW、SELECT</title>
    <link href="http://www.sanstylemc.cn/2018/04/18/FIRST%E3%80%81FOLLOW%E3%80%81SELECT/"/>
    <id>http://www.sanstylemc.cn/2018/04/18/FIRST、FOLLOW、SELECT/</id>
    <published>2018-04-18T08:23:53.000Z</published>
    <updated>2018-04-18T08:49:19.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h2><blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;遍历所有表达式，取具有相同左部的表达式的select集合，将这些具有相同左部表达式的select集合取交集。<br>&nbsp;&nbsp;&nbsp;&nbsp;只要有一组相同左部表达式交集不为空，则该文法非LL1文法。<br>&nbsp;&nbsp;&nbsp;&nbsp;只有所有相同左部表达式交集都不为空，则为LL1文法。<br><a id="more"></a></p>
</blockquote>
<h2 id="FIRST"><a href="#FIRST" class="headerlink" title="FIRST"></a>FIRST</h2><p>S-&gt;AB|bC<br>A-&gt;ε|b<br>B-&gt;ε|aD<br>C-&gt;AD|b<br>D-&gt;aS|c</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml">FIRST(S)= (FIRST(A)-</span><span class="template-variable">&#123;ε&#125;</span><span class="xml">)∪(FIRST(B)- </span><span class="template-variable">&#123;ε&#125;</span><span class="xml">)∪</span><span class="template-variable">&#123;ε&#125;</span><span class="xml">∪</span><span class="template-variable">&#123;b&#125;</span><span class="xml">=</span><span class="template-variable">&#123;a,b,ε&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">因为A的first有ε，B的first有ε，S-&gt;AB，所以是(FIRST(A)-</span><span class="template-variable">&#123;ε&#125;</span><span class="xml">)∪(FIRST(B)- </span><span class="template-variable">&#123;ε&#125;</span><span class="xml">)，然后S-&gt;bC，所以再加一个b，就是(FIRST(A)-</span><span class="template-variable">&#123;ε&#125;</span><span class="xml">)∪(FIRST(B)- </span><span class="template-variable">&#123;ε&#125;</span><span class="xml">)∪</span><span class="template-variable">&#123;b&#125;</span><span class="xml">。</span></div></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">First</span>(A= &#123;b, ε&#125;</div><div class="line">没什么好解释的</div></pre></td></tr></table></figure>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">First(B)=&#123;a</span><span class="string">,</span><span class="comment">ε&#125;</span></div><div class="line"><span class="comment">ε不用解释，就是B</span><span class="literal">-</span>&gt;<span class="comment">ε，所以有它，a就是因为B</span><span class="literal">-</span>&gt;<span class="comment">aD，第一个非终结符是a所以有a，那要不要加上D的first呢，就是a和c，答案是不用，就只要aD里面的a就可以。</span></div></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">First</span>(<span class="keyword">C</span>)=&#123;a,b,c&#125;</div><div class="line"><span class="keyword">C</span>-&gt;AD这一句，AD都是非终结符，所以要找A和<span class="keyword">D</span>的first集。<span class="keyword">D</span>的是a，c。A的是b，ε。因为不是AD同时都能推出ε，所以<span class="keyword">C</span>的first是A和<span class="keyword">D</span>的first的并集减去ε，还要加上b，因为有<span class="keyword">C</span>-&gt;b这一句。</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">First</span><span class="params">(D)</span></span>=&#123;<span class="selector-tag">a</span>,c&#125;</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">First</span><span class="params">(AB)</span></span>=&#123;<span class="selector-tag">a</span>,<span class="selector-tag">b</span>,ε&#125;</div><div class="line">AB同时能够推出ε，所以First(AB)就是A和B的First的并集减去ε再并上ε。</div></pre></td></tr></table></figure>
<blockquote>
<p>两个非终结符的要看是不是他们两个同时能推出ε，能就有ε；要是有一个不能推出ε，那First集就没有ε。</p>
</blockquote>
<h2 id="FOLLOW"><a href="#FOLLOW" class="headerlink" title="FOLLOW"></a>FOLLOW</h2><p>从开始符号S开始推导，开始符号的follow里面一定要有#。<br>所以开始符号的S的follow集要有#。<br>follow是找-&gt;后面的。<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">比如找S的<span class="function"><span class="title">follow</span>，就要看谁的-&gt;</span>后面有S。</div><div class="line">D-&gt;<span class="function"><span class="title">aS</span>里面有S，然后再看D-&gt;</span><span class="function"><span class="title">aS</span>的S后面有没有别的符号，没有就加上D的follow集。如果有，就加上后面那个字母的first集里面除了ε以外的符号，再看这个字母能不能推出ε，如果能，就再加上-&gt;</span>左边的那个字母的follow。</div><div class="line">F<span class="function"><span class="title">ollow</span>(S)-&gt;</span>Follow(D)=&#123;#&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">Follow</span><span class="params">(A)</span></span>=&#123;<span class="selector-tag">a</span>,c,#&#125;</div><div class="line">看A的follow，首先找所有-&gt;后面有A的，找到了S-&gt;AB，C-&gt;AD。先看S-&gt;AB，A后面有B，所以要加上B的first集里面除了ε的其他符号，再看B能不能在有限的步骤里推出ε，有B-&gt;ε这句，所以能，就要再加上-&gt;左边的S的follow集，所以目前的A的follow集里面有<span class="selector-tag">a</span>,和follow(S)，再看C-&gt;AD这一句，A后面有D，所以要加上D的first集里面除了ε的其他的，再看D能不能在有限的步骤里推出ε，D不能，所以不用加-&gt;左边的C的follow，所以A的follow就是<span class="selector-tag">a</span>,Follow(S),<span class="selector-tag">a</span>,c，但是如果有重复的，就只要一个，所以最终就是<span class="selector-tag">a</span>,c,follow(S)，这个follow(S)到后面还有算出来，不能就这么写。</div></pre></td></tr></table></figure>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Follow(B)=&#123;#&#125;</div><div class="line">看B的follow，找所有-&gt;后面有B的，找到了S-&gt;AB，看B后面有字母吗？没有，就加上-&gt;左边的S的follow，所以Follow(B)=Follow(S)</div></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Follow(<span class="keyword">C</span>)=&#123;#&#125;</div><div class="line">看<span class="keyword">C</span>的follow，找所有-&gt;后面有<span class="keyword">C</span>的，找到了S-&gt;bC，看<span class="keyword">C</span>后面有字母吗？没有，就加上-&gt;左边的S的follow集，所以Follow(<span class="keyword">C</span>)=Follow(S)</div></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Follow(<span class="keyword">D</span>)=&#123;#&#125;</div><div class="line">看<span class="keyword">D</span>的follow，找所有-&gt;后面有<span class="keyword">D</span>的，找到了B-&gt;aD，<span class="keyword">C</span>-&gt;AD，这两句<span class="keyword">D</span>后面都没有字母，所以加上-&gt;左边的B和<span class="keyword">C</span>的follow，所以Follow(<span class="keyword">D</span>)=Follow(B)∪Flollow(<span class="keyword">C</span>)</div></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Follow(S)=&#123;#&#125;∪Follow(<span class="keyword">D</span>)，Follow(<span class="keyword">D</span>)=Follow(B)+ Follow(<span class="keyword">C</span>)，所以Follow(S)=&#123;#&#125;∪Follow(B)∪Follow(<span class="keyword">C</span>)，Follow(B)= Follow(S)，Follow(<span class="keyword">C</span>)= Follow(S)，所以Follow(S)=&#123;#&#125;，Follow(B)=&#123;#&#125;，Follow(<span class="keyword">C</span>)=&#123;#&#125;，Follow(<span class="keyword">D</span>)=&#123;#&#125;，Follow(A)=&#123;a,c,#&#125;。</div></pre></td></tr></table></figure>
<p>##SELECT<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">SELECT</span><span class="params">(S-&gt;AB)</span></span>，AB都能推出ε，所以SELECT(S-&gt;AB)=First(AB)-ε+Follow(S)，所以SELECT(S-&gt;AB)=&#123;<span class="selector-tag">a</span>,<span class="selector-tag">b</span>,#&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">SELECT</span><span class="params">(S-&gt;bC)</span></span>，bC不能推出ε，所以是First(bC)，结果是&#123;b&#125;</div></pre></td></tr></table></figure>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT<span class="comment">(A-&gt;ε)</span>，A能推出ε所以是First<span class="comment">(ε)</span>-ε+Follow<span class="comment">(A)</span>，结果是&#123;a,c,<span class="attr">#&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT<span class="comment">(A-&gt;b)</span>，这里的A是推出ｂ，不是ε所以是first<span class="comment">(b)</span>，结果是&#123;b&#125;</div></pre></td></tr></table></figure>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT<span class="comment">(B-&gt;ε)</span>，B能推出ε，所以是First<span class="comment">(ε)</span>-ε+Follow<span class="comment">(B)</span>，结果是&#123;<span class="attr">#&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">SELECT</span><span class="params">(B-&gt;aD)</span></span>，这里B不能推出ε，所以是First(aD)，结果是&#123;a&#125;</div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">SELECT</span><span class="params">(C-&gt;AD)</span></span>，这里D不能推出ε，所以算AD不能推出ε，就是First(AD)，结果是&#123;<span class="selector-tag">a</span>,<span class="selector-tag">b</span>,c&#125;</div></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT(<span class="keyword">C</span>-&gt;b)，<span class="keyword">C</span>退不出ε，所以是<span class="keyword">First</span>(b)，结果是&#123;b&#125;</div></pre></td></tr></table></figure>
<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span>(D-&gt;<span class="keyword">aS</span>)，这里不能推出ε，所以是<span class="keyword">First</span>(<span class="keyword">aS</span>)，结果是&#123;a&#125;</div></pre></td></tr></table></figure>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT(<span class="keyword">D</span>-&gt;c)，这里<span class="keyword">D</span>不能推出ε，所以是<span class="keyword">First</span>(c)，结果是&#123;c&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LL-1-文法&quot;&gt;&lt;a href=&quot;#LL-1-文法&quot; class=&quot;headerlink&quot; title=&quot;LL(1)文法&quot;&gt;&lt;/a&gt;LL(1)文法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;遍历所有表达式，取具有相同左部的表达式的select集合，将这些具有相同左部表达式的select集合取交集。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;只要有一组相同左部表达式交集不为空，则该文法非LL1文法。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;只有所有相同左部表达式交集都不为空，则为LL1文法。&lt;br&gt;
    
    </summary>
    
    
      <category term="编译原理" scheme="http://www.sanstylemc.cn/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>坦白说</title>
    <link href="http://www.sanstylemc.cn/2018/04/17/%E5%9D%A6%E7%99%BD%E8%AF%B4/"/>
    <id>http://www.sanstylemc.cn/2018/04/17/坦白说/</id>
    <published>2018-04-17T12:50:31.000Z</published>
    <updated>2018-04-17T12:51:10.832Z</updated>
    
    <content type="html"><![CDATA[<p>来自Github上某大佬的作品，借鉴一下。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"><span class="keyword">from</span> prettytable <span class="keyword">import</span> PrettyTable</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">QQ扫码登陆部分参考：</span></div><div class="line"><span class="string">1.fuck-login: https://github.com/xchaoinfo/fuck-login/blob/master/005%20webQQ/webQQ.py</span></div><div class="line"><span class="string">2.QQ-Groups-Spider:https://github.com/caspartse/QQ-Groups-Spider/blob/98b61bd0eb4e3fc70dd1cae1864018b9d5cf6bcf/app.py</span></div><div class="line"><span class="string">QQ好友昵称获取：https://kylingit.com/blog/qq-%E7%A9%BA%E9%97%B4%E7%88%AC%E8%99%AB%E4%B9%8B%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/</span></div><div class="line"><span class="string">QQ号解密：QQ坦白说有什么bug吗？或者可以通过怎样方式去看见谁发的坦白说？ - 爱打伞的网瘾少女的回答 - 知乎</span></div><div class="line"><span class="string">https://www.zhihu.com/question/270498914/answer/355413819</span></div><div class="line"><span class="string">'''</span></div><div class="line">QRImgPath = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>] + os.sep + <span class="string">'webQQqr.png'</span></div><div class="line"><span class="comment">#os.path.realpath(__file__)获取当前执行脚本的绝对路径</span></div><div class="line"><span class="comment">#split()拆分字符串，通过指定分隔符对字符串进行切片，并返回分割后的字符串列表</span></div><div class="line"><span class="comment">#os.path.split()将文件名和路径分割开</span></div><div class="line">sess = requests.Session()</div><div class="line">sourceURL = <span class="string">'https://ti.qq.com/cgi-node/honest-say/receive/mine'</span></div><div class="line">js_ver = <span class="string">'10226'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">genqrtoken</span><span class="params">(qrsig)</span>:</span></div><div class="line">        e = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(qrsig)):</div><div class="line">            e += (e &lt;&lt; <span class="number">5</span>) + ord(qrsig[i])</div><div class="line">        qrtoken = (e &amp; <span class="number">2147483647</span>)</div><div class="line">        <span class="keyword">return</span> str(qrtoken)</div><div class="line"><span class="comment">#ord()返回值是对应的十进制整数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">genbkn</span><span class="params">(skey)</span>:</span></div><div class="line">        b = <span class="number">5381</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(skey)):</div><div class="line">            b += (b &lt;&lt; <span class="number">5</span>) + ord(skey[i])</div><div class="line">        bkn = (b &amp; <span class="number">2147483647</span>)</div><div class="line">        <span class="keyword">return</span> str(bkn)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">genqq</span><span class="params">(qq)</span>:</span></div><div class="line">    qq = qq.replace(<span class="string">'4'</span>,<span class="string">'a'</span>).replace(<span class="string">'6'</span>,<span class="string">'b'</span>).replace(<span class="string">'5'</span>,<span class="string">'d'</span>).replace(<span class="string">'7i'</span>,<span class="string">'l'</span>).replace(<span class="string">'7z'</span>,<span class="string">'l'</span>).replace(<span class="string">'7z'</span>,<span class="string">'l'</span>)</div><div class="line">    en = (<span class="string">'oe'</span>,<span class="string">'oK'</span>,<span class="string">'ow'</span>,<span class="string">'oi'</span>,<span class="string">'7e'</span>,<span class="string">'7K'</span>,<span class="string">'7w'</span>,<span class="string">'7i'</span>,<span class="string">'Ne'</span>,<span class="string">'NK'</span>,</div><div class="line">		<span class="string">'on'</span>,<span class="string">'ov'</span>,<span class="string">'oc'</span>,<span class="string">'oz'</span>,<span class="string">'7n'</span>,<span class="string">'7v'</span>,<span class="string">'7c'</span>,<span class="string">'7z'</span>,<span class="string">'Nn'</span>,<span class="string">'Nv'</span>,</div><div class="line">		<span class="string">'n'</span>,<span class="string">'b'</span>,<span class="string">'-'</span>,<span class="string">'o'</span>,<span class="string">'v'</span>,<span class="string">'a'</span>,<span class="string">'C'</span>,<span class="string">'S'</span>,<span class="string">'c'</span>,<span class="string">'E'</span>,</div><div class="line">		<span class="string">'z'</span>,<span class="string">'d'</span>,<span class="string">'A'</span>,<span class="string">'i'</span>,<span class="string">'P'</span>,<span class="string">'k'</span>,<span class="string">'s'</span>,<span class="string">'l'</span>,<span class="string">'F'</span>,<span class="string">'q'</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(en)) :</div><div class="line">    	qq = qq.replace(en[i], str(i%<span class="number">10</span>), <span class="number">10</span>)</div><div class="line">    <span class="keyword">return</span> qq</div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">url = <span class="string">'http://ui.ptlogin2.qq.com/cgi-bin/login'</span></div><div class="line">params = &#123;</div><div class="line">                <span class="string">'appid'</span>: <span class="string">'715030901'</span>,</div><div class="line">                <span class="string">'daid'</span>: <span class="string">'73'</span>,</div><div class="line">                <span class="string">'pt_no_auth'</span>: <span class="string">'1'</span>,</div><div class="line">            &#125;</div><div class="line">loginresp = sess.get(url, params=params, timeout=<span class="number">1000</span>)</div><div class="line">sess.headers.update(&#123;<span class="string">'Referer'</span>: url&#125;)</div><div class="line">url = <span class="string">'http://ptlogin2.qq.com/ptqrshow'</span></div><div class="line">params = &#123;</div><div class="line">                <span class="string">'appid'</span>: <span class="string">'715030901'</span>,</div><div class="line">                <span class="string">'e'</span>: <span class="string">'2'</span>,</div><div class="line">                <span class="string">'l'</span>: <span class="string">'M'</span>,</div><div class="line">                <span class="string">'s'</span>: <span class="string">'3'</span>,</div><div class="line">                <span class="string">'d'</span>: <span class="string">'72'</span>,</div><div class="line">                <span class="string">'v'</span>: <span class="string">'4'</span>,</div><div class="line">                <span class="string">'t'</span>: <span class="string">'%.17f'</span> % (random()),</div><div class="line">                <span class="string">'daid'</span>: <span class="string">'73'</span></div><div class="line">            &#125;</div><div class="line">qrresp = sess.get(url, params=params, timeout=<span class="number">1000</span>)</div><div class="line"><span class="keyword">with</span> open(QRImgPath, <span class="string">'wb'</span>) <span class="keyword">as</span> f :</div><div class="line">        f.write(qrresp.content)</div><div class="line">        f.close()</div><div class="line"></div><div class="line"><span class="keyword">if</span> sys.platform.find(<span class="string">'darwin'</span>) &gt;= <span class="number">0</span>:</div><div class="line">    subprocess.call([<span class="string">'open'</span>, QRImgPath])</div><div class="line"><span class="keyword">elif</span> sys.platform.find(<span class="string">'linux'</span>) &gt;= <span class="number">0</span>:</div><div class="line">    subprocess.call([<span class="string">'xdg-open'</span>, QRImgPath])</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    os.startfile(QRImgPath)</div><div class="line">print(<span class="string">'请使用手机 QQ 扫描二维码以登录'</span>)</div><div class="line"></div><div class="line"></div><div class="line">status = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span> :</div><div class="line">        <span class="comment">#login_sig = sess.cookies['pt_login_sig']</span></div><div class="line">        qrsig = sess.cookies[<span class="string">'qrsig'</span>]</div><div class="line">        errorMsg = <span class="string">''</span></div><div class="line">        url = <span class="string">'http://ptlogin2.qq.com/ptqrlogin'</span></div><div class="line">        params = &#123;</div><div class="line">                <span class="string">'u1'</span>: sourceURL,</div><div class="line">                <span class="string">'ptqrtoken'</span>: genqrtoken(qrsig),</div><div class="line">                <span class="string">'ptredirect'</span>: <span class="string">'1'</span>,</div><div class="line">                <span class="string">'h'</span>: <span class="string">'1'</span>,</div><div class="line">                <span class="string">'t'</span>: <span class="string">'1'</span>,</div><div class="line">                <span class="string">'g'</span>: <span class="string">'1'</span>,</div><div class="line">                <span class="string">'from_ui'</span>: <span class="string">'1'</span>,</div><div class="line">                <span class="string">'ptlang'</span>: <span class="string">'2052'</span>,</div><div class="line">                <span class="string">'action'</span>: <span class="string">'0-0-%d'</span> % (time.time() * <span class="number">1000</span>),</div><div class="line">                <span class="string">'js_ver'</span>: js_ver,</div><div class="line">                <span class="string">'js_type'</span>: <span class="string">'1'</span>,</div><div class="line">                <span class="comment">#'login_sig': login_sig,</span></div><div class="line">                <span class="string">'pt_uistyle'</span>: <span class="string">'40'</span>,</div><div class="line">                <span class="string">'aid'</span>: <span class="string">'715030901'</span>,</div><div class="line">                <span class="string">'daid'</span>: <span class="string">'73'</span></div><div class="line">                &#125;</div><div class="line">        resp = sess.get(url, params=params, timeout=<span class="number">1000</span>,headers = headers)</div><div class="line">        code = re.findall(<span class="string">r'(?&lt;=ptuiCB\(\').*?(?=\',)'</span>,resp.text)[<span class="number">0</span>]</div><div class="line">        <span class="keyword">if</span> code == <span class="string">'67'</span> <span class="keyword">and</span> status == <span class="number">0</span>:</div><div class="line">            print(<span class="string">'扫码成功，请确认登录'</span>)</div><div class="line">            status = <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> code == <span class="string">'0'</span> :</div><div class="line">            print(<span class="string">'确认登陆成功'</span>)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">elif</span> code == <span class="string">'65'</span> :</div><div class="line">            print(<span class="string">'二维码失效, 请重新启动程序'</span>)</div><div class="line"></div><div class="line">os.remove(QRImgPath)</div><div class="line">qq = re.findall(<span class="string">r'(?&lt;=uin=).*?(?=&amp;service)'</span>,resp.text)[<span class="number">0</span>]</div><div class="line">print(qq,<span class="string">'登陆成功'</span>)</div><div class="line">skey = sess.cookies[<span class="string">'skey'</span>]</div><div class="line">print(<span class="string">'正在获取坦白说...'</span>)</div><div class="line"></div><div class="line">tanbai_url = sourceURL + <span class="string">'?_client_version=0.0.79&amp;token='</span> + genbkn(skey)</div><div class="line">tanbai = sess.get(tanbai_url,headers = headers,timeout=<span class="number">1000</span>)</div><div class="line">tanbai_EncodeUin = re.findall(<span class="string">r'(?&lt;=fromEncodeUin\":\").*?(?=\",\"fromFaceUrl)'</span>,tanbai.text)</div><div class="line">tanbai_topicName = re.findall(<span class="string">r'(?&lt;=topicName\":\").*?(?=\",\"timestamp)'</span>,tanbai.text)</div><div class="line"></div><div class="line">row = PrettyTable()</div><div class="line">row.field_names = [<span class="string">"QQ"</span>,<span class="string">"备注"</span>,<span class="string">"坦白说"</span>]</div><div class="line">i = <span class="number">0</span></div><div class="line">qzone_url = <span class="string">'https://h5.qzone.qq.com/proxy/domain/r.qzone.qq.com/cgi-bin/user/cgi_personal_card?uin='</span></div><div class="line"><span class="keyword">while</span> i&lt;len(tanbai_EncodeUin):</div><div class="line">    friendrealqq = genqq(tanbai_EncodeUin[i].replace(<span class="string">'*S1*'</span>,<span class="string">''</span>))</div><div class="line">    tanbai = tanbai_topicName[i]</div><div class="line">    user_qzone = qzone_url + friendrealqq + <span class="string">'&amp;g_tk='</span> + genbkn(skey)</div><div class="line">    resp = sess.get(user_qzone,headers = headers)</div><div class="line">    nick =  re.findall(<span class="string">r'(?&lt;=realname\":\").*?(?=\",)'</span>,resp.text)[<span class="number">0</span>]</div><div class="line">    row.add_row([friendrealqq,nick,tanbai])</div><div class="line">    i = i + <span class="number">1</span></div><div class="line">print(row)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自Github上某大佬的作品，借鉴一下。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Java基础题</title>
    <link href="http://www.sanstylemc.cn/2018/04/17/Java%E5%9F%BA%E7%A1%80%E9%A2%98/"/>
    <id>http://www.sanstylemc.cn/2018/04/17/Java基础题/</id>
    <published>2018-04-17T12:28:59.000Z</published>
    <updated>2018-04-26T05:27:22.901Z</updated>
    
    <content type="html"><![CDATA[<p>1、下面哪个是Java语言中正确的标识符（<strong>B</strong>）<br>A、3com&nbsp;&nbsp;&nbsp;&nbsp;B、import&nbsp;&nbsp;&nbsp;&nbsp;C、that&nbsp;&nbsp;&nbsp;&nbsp;D、this</p>
<blockquote>
<p>标识符是以字母开头的字母数字序列。字母通常指大小写英文字母，下划线<code>_</code>、美元符<code>&amp;</code>等，也可以是Unicode字符集中的字符，如汉字等；数字通常指0-9，可以是字母数字的任意组合但不能包含(如<code>+</code>，<code>-</code>)等，不能使用关键字但长度不受限制。<br><a id="more"></a></p>
</blockquote>
<p>2、下面哪个语句(初始化数组)是不正确的（<strong>B</strong>）<br>A、int x[]={1,2,3};&nbsp;&nbsp;&nbsp;&nbsp;B、int x[3]={1,2,3}<br>C、int[] x={1,2,3};&nbsp;&nbsp;&nbsp;&nbsp;D、int x[]= new int[]{1,2,3};</p>
<blockquote>
<p><code>int x[]={1,2,3};</code>数组直接赋初值可以不标数组元素个数，会根据后面赋值个数自动分配空间。<br><code>int[] x={1,2,3};</code>这种方式等价于使用new来进行存储空间分配，即：<code>int x[]= new int[]{1,2,3};</code></p>
</blockquote>
<p>3、下述概念中不属于面向对象方法的是（<strong>D</strong>）<br>A、对象&nbsp;&nbsp;&nbsp;&nbsp;B、继承、多态&nbsp;&nbsp;&nbsp;&nbsp;C、类、封装&nbsp;&nbsp;&nbsp;&nbsp;D、过程调用</p>
<blockquote>
<p>面向对象=对象+类+继承+通过消息的通信<br><code>对象</code>: 一组属性及其上的操作的封装体<br><code>类</code>: 一组有相同属性和操作的对象的集合<br><code>继承</code>: 一个类为另一个类上的扩充的方式，子类继承父类，主要目的是代码服用<br><code>消息</code>: 对象间通信的手段</p>
</blockquote>
<p>4、下面的代码段中，执行之后，i和j的值是什么？（<strong>B</strong>）<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int <span class="built_in">i</span>= <span class="number">1</span>; int <span class="built_in">j</span>;</div><div class="line"><span class="built_in">j</span>= <span class="built_in">i</span>++* <span class="number">2</span>+ <span class="number">3</span>* --<span class="built_in">i</span>;</div></pre></td></tr></table></figure></p>
<p>A、1，2&nbsp;&nbsp;&nbsp;&nbsp;B、1，5&nbsp;&nbsp;&nbsp;&nbsp;C、2，1&nbsp;&nbsp;&nbsp;&nbsp;D、2，2</p>
<blockquote>
<p><code>i++</code>: 先运算再赋值，例如: a= i++，先运算a= i;再运算i= i+ 1;所以结果是a= 1；<br><code>--i</code>: 先赋值再运算，例如: a= –i;先运算i= i- 1;再运算a= i，所以结果是a= 2；<br>本题中<code>i++* 2+ 3* --i</code>也可写为<code>1* 2+ 3* 1</code>。</p>
</blockquote>
<p>5、java.lang包的（）方法比较两个对象是否相等，相等返回 true。（<strong>B</strong>）<br>A、toString()&nbsp;&nbsp;&nbsp;&nbsp;B、equals()&nbsp;&nbsp;&nbsp;&nbsp;C、compare()&nbsp;&nbsp;&nbsp;&nbsp;D、全错</p>
<blockquote>
<p><code>toString</code>: 返回该对象的字符串表示。<br><code>equals</code>: 此方法一般用于比较的是对象的内容但是也有的情况下也会去比较两个对象的地址。<br><code>compare()</code>: 此方法可以用来比较 两个基本类型值的大小，同时也可以用来比较两个Boolean类型值。</p>
</blockquote>
<p>6、使用 ___（）方法可以获得 Calendar类的实例（<strong>D</strong>）<br>A、get()&nbsp;&nbsp;&nbsp;&nbsp;B、equals()&nbsp;&nbsp;&nbsp;&nbsp;C、getTime()&nbsp;&nbsp;&nbsp;&nbsp;D、getInstance()</p>
<blockquote>
<p><code>Calendar</code>提供了一个类方法<code>getInstance</code>，以获得此类型的一个通用的对象，<code>getInstance</code>方法返回一个<code>Calendar</code>对象（该对象为Calendar的子类对象）</p>
</blockquote>
<p>7、给出下面代码:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> arr[]= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String a[]</span>)</span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(arr[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面哪个语句是正确的？（<strong>B</strong>）<br>A、编译时将产生错误;&nbsp;&nbsp;&nbsp;&nbsp;B、输出零;<br>C、编译时正确，运行时将产生错误;&nbsp;&nbsp;&nbsp;&nbsp;D、输出空</p>
<blockquote>
<p>arr[]为整型数组，分配地址后默认值为0，所以创建数组时也是对每个数组元素赋初值0。</p>
</blockquote>
<p>8、下面关于java中类的说法哪个是不正确的 ?（<strong>C</strong>）<br>A、类体中只能有变量定义和成员方法的定义，不能有其他语句。<br>B、构造函数是类中的特殊方法。<br>C、类一定要声明为 public 的，才可以执行。<br>D、一个 java文件中可以有多个 class定义。</p>
<blockquote>
<p>class前的修饰符是用来控制访问权限的，public表示在任何包里都可访问，protected表示同一包和子类可访问，package(缺省不写时就是这个）表示在同一包内可访问，private表示只有当前类可访问。</p>
</blockquote>
<p>9、在 Java中如果要在字符串类型对象 s=“ JAVA”，中找出, V出现的<br>位置可使用下面哪个方法：（<strong>C</strong>）<br>A、mid(2, s);&nbsp;&nbsp;&nbsp;&nbsp;B、charAt(2); &nbsp;&nbsp;&nbsp;&nbsp; C、s.indexOf(“V”); &nbsp;&nbsp;&nbsp;&nbsp;D、indexOf(s, V);</p>
<blockquote>
<p><code>mid()</code>: 从一个字符串中截取出指定数量的字符。<br><code>charAt()</code>: 返回指定索引位置的char值。检索范围是<code>0~length()-1</code>。<br><code>indexOf()</code>: 返回某个指定的字符串值在字符串中首次出现的位置。</p>
</blockquote>
<p>10、A 派生出子类 B， B 派生出子类 C，并且在 Java源代码中有如下<br>声明:<br>1) A a0=new A();<br>2) A a1=new B();<br>3) A a2=new C();<br>问以下哪个说法是正确的？（<strong>D</strong>）<br>A、只有第 1 行能通过编译<br>B、第 1、 2 行能通过编译，但第 3 行编译出错<br>C、第 1、 2、 3 行能通过编译，但第 2、 3 行运行时出错<br>D、第 1 行、第 2 行和第 3 行的声明都是正确的</p>
<blockquote>
<p>子类继承父类的所有属性和方法，B为A的子类，用A可以去实例B；C为B的子类，用B去实例C，也可以；间接的，C也是A的子类，可以用A去实例C</p>
</blockquote>
<p>11、下面说法正确的是（<strong>A</strong>）<br>A、final可修饰类、属性、方法。<br>B、abstract可修饰类、属性、方法<br>C、定义抽象方法需有方法的返回类型、名称、参数列表和方法体。<br>D、用final修饰的变量，在程序中可对这个变量的值进行更改。</p>
<blockquote>
<p><code>final</code>为最终的 可以修饰类、属性、方法。<br><code>abstract</code>为抽象的 可以修饰类、方法，但是不能修饰属性。<br>定义抽象方法不能有方法体。<br>既然final为最终的，就不能更改。</p>
</blockquote>
<p>12、Java中main()函数的值是什么？（<strong>D</strong>）<br>A、String&nbsp;&nbsp;&nbsp;&nbsp;B、int&nbsp;&nbsp;&nbsp;&nbsp;C、char&nbsp;&nbsp;&nbsp;&nbsp;D、void</p>
<p>13、已知表达式 int m[] = {0, 1, 2, 3, 4, 5, 6 }; 下面表达式的<br>值与数组下标量总数相等。（<strong>B</strong>）<br>A、m.length()&nbsp;&nbsp;&nbsp;&nbsp;B、m.length- 1&nbsp;&nbsp;&nbsp;&nbsp; C、m.length()+ 1&nbsp;&nbsp;&nbsp;&nbsp;D、m.length+ 1</p>
<blockquote>
<p>数组的下标是从0开始的，所以数组下标最大为6。而<code>m.length</code>得值为7,所以<code>m.length- 1</code>。<br><code>length</code>用于求<code>String</code>字符串<code>数组</code>的长度；<code>length()</code>用于求<code>String</code>字符串<code>对象</code>的长度。</p>
</blockquote>
<p>14、以下（<strong>C</strong>）方法用于定义线程的执行体。<br>A、start()&nbsp;&nbsp;&nbsp;&nbsp;B、init()&nbsp;&nbsp;&nbsp;&nbsp;C、run()&nbsp;&nbsp;&nbsp;&nbsp;D、main()</p>
<blockquote>
<p><code>run()</code>方法是用来定义这个线程在启动的时候需要做什么。但是，直接执行run()方法那就不是线程，必须使用start()启动，那样才是线程。</p>
</blockquote>
<p>15、当浏览器返回到新URL的包含applet 的页面时调用以下哪个函数（<strong>B</strong>）<br>A、init()&nbsp;&nbsp;&nbsp;&nbsp;B、start()&nbsp;&nbsp;&nbsp;&nbsp;C、stop()&nbsp;&nbsp;&nbsp;&nbsp;D、destory()</p>
<p>16、下列方法与Applet显示无关的是（<strong>D</strong>）<br>A、paint&nbsp;&nbsp;&nbsp;&nbsp;B、update&nbsp;&nbsp;&nbsp;&nbsp;C、repaint()&nbsp;&nbsp;&nbsp;&nbsp;D、draw</p>
<blockquote>
<p>Applet显示相关的方法主要有3个。<code>paint()</code>方法，具体执行Applet的绘制，定义为: <code>public void paint(Graphics g)</code>。<code>update()</code>方法，定义为: <code>public void update(Graphics g)</code>，主要用于更新Applet的显示。<code>repaint()</code>方法，定义为: <code>public void repaint()</code>，主要用于Applet的重新显示，它调用<code>update()</code>方法实现对Applet的更新。而<code>draw()</code>方法与显示无关。</p>
</blockquote>
<p>17、请问如下（<strong>D</strong>）方法可以将 MenuBar 加入 Frame 中。<br>A、setMenu()&nbsp;&nbsp;&nbsp;&nbsp;B、setMenuBar()&nbsp;&nbsp;&nbsp;&nbsp;C、add()&nbsp;&nbsp;&nbsp;&nbsp;D、addMenuBar()</p>
<p>18、下面（<strong>B、E</strong>）不是Java中的容器。<br>A、ScrollPane&nbsp;&nbsp;&nbsp;&nbsp;B、Canvas&nbsp;&nbsp;&nbsp;&nbsp;C、Dialog&nbsp;&nbsp;&nbsp;&nbsp;D、Applet&nbsp;&nbsp;&nbsp;&nbsp;E、Scrollbar</p>
<blockquote>
<p>Canvas只是画布，是游戏中所有UI组件的”容器”。Scrollbar是滚动条，它是一个构件。<br>常用的容器由Frame(窗口容器)，Panel(画板容器)，Applet(Java小程序的容器)，Dialog(对话框容器)等。</p>
</blockquote>
<p>19、下面的程序段创建了 BufferedReader 类的对象in，以便读取本机d盘my 文件夹下的文件1.txt。File构造函数中正确的路径和文件名的表示是 （<strong>C</strong>）。<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">File</span> f=<span class="keyword">new</span> <span class="keyword">File</span>( 填代码处 );</div><div class="line"><span class="keyword">file</span>=<span class="keyword">new</span> FileReader(f);</div><div class="line"><span class="keyword">in</span>=<span class="keyword">new</span> BufferedReader(<span class="keyword">file</span>);</div></pre></td></tr></table></figure></p>
<p>A、”1.txt”&nbsp;&nbsp;&nbsp;&nbsp;B、”d:\my\1”&nbsp;&nbsp;&nbsp;&nbsp; C、”d:\my\1.txt”&nbsp;&nbsp;&nbsp;&nbsp;D、”my\1.txt”</p>
<p>20、有整型数组：<code>int[] x={12,35,8,7,2};</code>, 则 调 用 方 法<br>Arrays.sort(x) 后，数组 x 中的元素值依次是（<strong>A</strong>）<br>A、2 7 8 12 35&nbsp;&nbsp;&nbsp;&nbsp;B、12 35 8 7 2<br>C、35 12 8 7 2&nbsp;&nbsp;&nbsp;&nbsp;D、8 7 12 35 2</p>
<p>21、下面（<strong>A</strong>）赋值语句是不合法的。<br>A 、float a= 2.0&nbsp;&nbsp;&nbsp;&nbsp;B、double b = 2.0<br>C、int c = 2&nbsp;&nbsp;&nbsp;&nbsp;D、long d = 2L</p>
<p>22、下面（<strong>C</strong>）语句不是创建数组的正确语句。<br>A、float f[][] = new float[6][6];<br>B、float []f[] = new float[6][6];<br>C、float f[][] = new float[][6];<br>D、float [][]f = new float[6][6];<br>E、float f[][] = new float[6][];<br>F、float [][]f = new float[6][];</p>
<blockquote>
<p>行不能为空</p>
</blockquote>
<p>23、Java中如下（<strong>A、B、C</strong>）约束符是正确的。<br>A、private&nbsp;&nbsp;&nbsp;&nbsp;B、public&nbsp;&nbsp;&nbsp;&nbsp;C、protected&nbsp;&nbsp;&nbsp;&nbsp;D、protect&nbsp;&nbsp;&nbsp;&nbsp;E、final</p>
<p>24、下面（<strong>C、D</strong>）事件监听器在Java中没有事件适配器。<br>A、MouseListener<br>B、KeyListener<br>C、ActionListener<br>D、ItemListener<br>E、WindowListener</p>
<blockquote>
<p>这两个借口中都只有一个abstract方法。java中只要该接口中包含了两个或以上abstract方法的接口都有适配器。<br>Java语言为一些Listener接口提供了适配器(Adapter)类。可以通过继承事件所对应的Adapter类，重写重要的方法，无关方法不用实现。<br>java.awt,enent包中定义的事件适配器类包括以下几个:<br>1、ComponentAdapter，构件适配器。<br>2、ContainerAdapter，容器适配器。<br>3、FocusAdapter，焦点适配器。<br>4、KeyAdapter，键盘适配器。<br>5、MouseMotionAdapter，鼠标运动适配器。<br>6、MouseAdapter，鼠标适配器。<br>7、WindowAdapter，窗口适配器。</p>
</blockquote>
<p>25、已知如下的命令执行java MyTest a b c，（<strong>C、D</strong>）语句是正确的。<br>A、 args[0] = “MyTest a b c”<br>B、 args[0] = “MyTest”<br>C、 args[0] = “a”<br>D、 args[1]= ‘b’</p>
<p>26、下列特点中，（<strong>A</strong>）是Java虚拟机执行的特点之一。<br>A、字节代码&nbsp;&nbsp;&nbsp;&nbsp;B、多进程&nbsp;&nbsp;&nbsp;&nbsp;C、静态链接&nbsp;&nbsp;&nbsp;&nbsp;D、编译</p>
<blockquote>
<p>Java语言的执行模式是半编译和半解释型。Java编写好的程序首先由编译器转换为标准字节代码，然后由Java虚拟机去解释执行。字节代码也是一种二进制文件，但不能直接在操作系统上运行，它可看作虚拟机的机器码。虚拟机把字节代码程序与各操作系统和硬件分开，使Java程序独立于平台。</p>
</blockquote>
<p>27、对于catch字句的排列，下列（<strong>A</strong>）是正确的。<br>A、父类在先，子类在后&nbsp;&nbsp;&nbsp;&nbsp;B、子类在先，父类在后<br>C、有继承关系的异常不能在同一个try程序段内<br>D、先有子类，其他如何排列都无关</p>
<blockquote>
<p>在Java中提供了结构化的异常处理功能，其主要是通过<code>try...catch</code>语句来实现的。在Java中可以将可能产生异常的代码放入到try子句中，如果产生异常，将会执行catch子句。如果有多个异常，则应先处理父类异常，再处理子类异常，否则后面的异常处理，将得不到执行。</p>
</blockquote>
<p>28、以下（<strong>B</strong>）表达式是不合法的。<br>A、String x=”Hello”; int y=9; x+=y;<br>B、String x=”Hello”; int y=9; if(x==y) { }<br>C、String x=”Hello”; int y=9; x=x+y;<br>D、String x=null; int y=(x!=null)&amp;&amp;(x.length()&gt;0) ? x.length() : 0</p>
<blockquote>
<p>Java对”+”进行了扩展，不仅可以连接字符串，而且还能将字符串与其他类型数据进行连接，结果是字符串。<br>若”+”的第一个操作数是字符串，Java会自动将后面的操作数类型转换成字符串类型。例如本题选项A中，x+= y即x= x+ y，则计算结果x的值为字符串Hello9；选项C与此类似，故此选项也是正确的；选项D主要考查的是条件运算符”?:”，即把表达式<code>(x!=null)&amp;&amp;(x.length()&gt;0) ? x.length() : 0</code>的值赋给整型变量y，运算结果y的值是0；而选项B是因为<code>==</code>两边的类型不匹配，无法比较，所以此表达式是错误的。</p>
</blockquote>
<p>29、在程序读入字符文件时，能够以该文件作为直接参数的类是（<strong>A</strong>）。<br>A、FileReader&nbsp;&nbsp;&nbsp;&nbsp;B、BufferedReader<br>C、FileInputStream&nbsp;&nbsp;&nbsp;&nbsp;D、ObjectInputStream</p>
<blockquote>
<p>FileReader、BufferedReader是字符类输入流。FileInputStream是字节输入流。对象串行化时，需要使用ObjectInputStream类中提供的方法从对象流中读取对象。所以，在程序读入字符文件时，要使用字符流FileReader或BufferedReader。但是FileReader的参数是读入的文件，而BufferedReader的参数是FileReader流的一个对象。</p>
</blockquote>
<p>30、在Java中，线程是（<strong>B</strong>）。<br>A、分时的&nbsp;&nbsp;&nbsp;&nbsp;B、抢占式的<br>C、非抢占式的&nbsp;&nbsp;&nbsp;&nbsp;D、非分时的</p>
<blockquote>
<p>Java的线程调度策略是一种基于优先级的抢占式调度。Java这种抢占式调度可以是分时的，即每个等待池中的线程轮流执行，也可以不是，即线程逐个运行。具体待用哪种方式，由具体JVM而定。线程一般通过使用sleep()等方法保证其他线程运行时间。</p>
</blockquote>
<p>31、数据库设计中，用E-R图来描述信息结构但不涉及信息在计算机中的表示，它属于数据库设计的（<strong>C</strong>）。<br>A．需求分析阶段<br>B．逻辑设计阶段<br>C．概念设计阶段<br>D．物理设计阶段</p>
<blockquote>
<p>E-R图是E-R模型的一种非常直观的图的形式表示，它描述信息结构但不涉及信息在计算机中的表示，它是数据库概念设计阶段的工具。</p>
</blockquote>
<p>32、下列关于Java布尔类型的描述中，正确的是（<strong>A</strong>）。<br>A．一种基本的数据类型，它的类型名称为boolean<br>B．用int表示类型<br>C．其值可以赋给int类型的变量<br>D．有两个值，1代表真，0代表假</p>
<blockquote>
<p>Java语言中boolean型数据只有两个值：true(真)和false(假)。它不对应任何数值，也不能与数字进行相互转换。</p>
</blockquote>
<p>33、在文件类提供的方法中，用于创建目录的方法是（<strong>A</strong>）。<br>A．mkdir()&nbsp;&nbsp;&nbsp;&nbsp;B．mkdirs()<br>C．list()&nbsp;&nbsp;&nbsp;&nbsp;D．listRoots()</p>
<blockquote>
<p>mkdir()是为目录操作提供的方法，用来创建目录；mkdirs()也是为目录操作提供的方法，创建包含父目录的目录；list()是对文件名操作提供的方法，返回一个字符串数组，为该文件所在目录下的所有文件名列表；listRoots是为目录提供的方法，返回根目录结构。</p>
</blockquote>
<p>34、下列能够正确创建线程的方法是（<strong>D</strong>）。<br>Ⅰ．继承java．1ang．Thread类，并重写run()方法<br>Ⅱ．继承java．1ang．Runnable类，并重写start()方法<br>Ⅲ．实现java．1ang．Thread接口，并实现run()方法<br>IV．实现java．1ang．Runable接口，并实现run()方法<br>A、I，Ⅲ&nbsp;&nbsp;&nbsp;&nbsp;B、Ⅱ，IV<br>C、Ⅱ，Ⅲ&nbsp;&nbsp;&nbsp;&nbsp;D、I，IV</p>
<blockquote>
<p>用Thread类的构造方法Thread(Runnabletarget)创建线程对象时，构造方法中的参数必须是一个具体的对象，该对象称作线程的目标对象，创建目标对象的类必须要实现Runnable接口。</p>
</blockquote>
<p>35、下列有关数组的叙述中，错误的是（<strong>A</strong>）。<br>A、在同一个环境下，数组与内存变量可以同名，两者互不影响<br>B、可以用一维数组的形式访问二维数组<br>C、在可以使用简单内存变量的地方都可以使用数组元素<br>D、一个数组中各元素的数据类型可以相同，也可以不同</p>
<blockquote>
<p>整个数组的数据类型为A(Array)，而各个数组元素可以分别存放不同类型的数据。在使用数组和数组元素时，应注意如下问题：1) 在任何能使用简单内存变量的地方都可以使用数组元素；2) 在同一个环境下，数组名不能与简单变量名重复；3) 可以用一维数组的形式访问二维数组。</p>
</blockquote>
<p>36、下列关于构造方法的叙述中，错误的是（<strong>C</strong>）。<br>A、Java语言规定构造方法名与类名必须相同<br>B、Java语言规定构造方法没有返回值，但不用void声明<br>C、Java语言规定构造方法不可以重载<br>D、Java语言规定构造方法只能通过new自动调用</p>
<blockquote>
<p>构造方法是类中的一种特殊方法，是为对象初始化操作编写的方法，用它来定义对象的初始状态。构造方法名必须与类名相同，它没有返回值，用户不能直接调用它，只能通过new自动调用。构造方法具有下列特点：①因为构造方法与类名必须相同，所以方法首字母小写规则对它不适用。②构造方法是给对象赋初值，所以没有返回值，但不要void来声明。③构造方法不能被程序调用。④构造方法可由编程人员在类中定义，默认时由Java语言自动生成。⑤构造方法可以重载实现不同的初始化方法，调用时按参数决定调用哪个方法。</p>
</blockquote>
<p>37、用来导入已定义好的类或包的语句是（<strong>B</strong>）。<br>A、main<br>B、import<br>C、public class<br>D、ClaSS</p>
<blockquote>
<p>Java中使用import语句来导入已定义好的类或包，需要注意Java语言的java．1ang包是编译器自动导入的，编程时如果使用该包中的类，可省去import导入，如果要使用其他包中的类，必须用import导入。</p>
</blockquote>
<p>38、Java程序的执行过程中用到一套JDK工具，其中java.exe是指（<strong>B</strong>）<br>A、Java文档生成器<br>B、Java解释器<br>C、Java编译器<br>D、Java类分解器</p>
<blockquote>
<p>javac是编译器，Java是运行Java程序的，也就是启动虚拟机，把.class字节码文件解释成机器码，然后运行</p>
</blockquote>
<p>39、Java编程所必须的默认引用包为（<strong>A</strong>）<br>A、java.sys包<br>B、java.lang包<br>C、java.new包<br>D、以上都不是</p>
<p>40、定义一个类名为“ MyClass.java ”的类，并且该类可被<br>一 个 工 程 中 的 所 有 类 访 问 ， 那 么 该 类 的 正 确 声 明 应<br>为（<strong>C</strong>）<br>A、private class MyClass extends Object<br>B、class MyClass extends Object<br>C、public class MyClass<br>D、private class MyClass extends Object</p>
<p>41、Java程序经常用到”递归”，”递归”的基本思想是（<strong>C</strong>）<br>A、”让别人反复调用自己”<br>B、”自己反复调用别人”<br>C、”自己反复调用自己”<br>D、以上说法都不对</p>
<p>42、Applet类的直接父类是（<strong>D</strong>）<br>A、Component类<br>B、Container类<br>C、Frame类<br>D、Panel类</p>
<p>43、Frame的默认的布局管理器是下列哪一个（<strong>B</strong>）<br>A、FlowLayout&nbsp;&nbsp;&nbsp;&nbsp;B、BorderLayout<br>C、GridLayout&nbsp;&nbsp;&nbsp;&nbsp;D、CardLayout</p>
<p>44、下列说法不正确的是（<strong>C</strong>）<br>A、IOException 必须被捕获或抛出<br>B、java 语言会自动初始化变量的值<br>C、java 语言不允许同时继承一个类并实现一个接口<br>D、java 语言会自动回收内存中的垃圾</p>
<p>45、下面的说法正确的是（<strong>A、B、C、D</strong>）。<br>A、Java 语言是面向对象的、解释执行的网络编程语言。<br>B、Java 语言具有可移植性，是与平台无关的编程语言。<br>C、Java 语言可对内存垃圾自动收集。<br>D、Java 语言编写的程序虽然是“一次编译，到处运行” ，但必须要 java 的运行环境。</p>
<p>46、定义变量如下:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">char c</span>= <span class="string">'w'</span>;</div><div class="line"><span class="attribute">int i</span>= 8; </div><div class="line"><span class="attribute">long l</span>= 15;</div><div class="line"><span class="attribute">float f</span>= 8.9f;</div></pre></td></tr></table></figure></p>
<p>以下赋值语句不正确的是（<strong>B、C</strong>）<br>A、i= c+ i;<br>B、c= c+ i;<br>C、l= f+ l;<br>D、f= i+ l+ f;</p>
<blockquote>
<p><code>double</code>&gt; <code>float</code>&gt; <code>long</code>&gt; <code>int</code>&gt; <code>short</code>&gt; <code>char</code></p>
</blockquote>
<p>47、下列哪一种叙述是正确的（<strong>D</strong>）<br>A、abstract 修饰符可修饰字段、方法和类<br>B、抽象方法的 body 部分必须用一对大括号{ }包住<br>C、声明抽象方法，大括号可有可无<br>D、声明抽象方法不可写出大括号</p>
<blockquote>
<p><code>abstract</code>不能修饰字段。既然是抽象方法，当然是没有实现的方法，根本就没有<code>body</code>部分。</p>
</blockquote>
<p>48、下列说法正确的有 （<strong>C</strong>）<br>A、class 中的 constructor 不可省略<br>B、constructor 必须与 class 同名，但方法不能与 class同名<br>C、constructor 在一个对象被 new 时执行<br>D、一个 class 只能定义一个 constructor<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">见代码，很明显方法是可以和类名同名的，和构造方法唯一的区别就是，构造方法没有返回值。</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">long1_1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	System.<span class="keyword">out</span>.println(<span class="string">"1"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">long1_1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	System.<span class="keyword">out</span>.println(<span class="string">"2"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String a[]</span>)</span>&#123;</div><div class="line">	long1_1 aLong1_1= <span class="keyword">new</span> long1_1();</div><div class="line">	System.<span class="keyword">out</span>.println(<span class="string">"3"</span>);</div><div class="line">	aLong1_1.long1_1();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果为: </p>
<blockquote>
<p>1<br>3<br>2</p>
</blockquote>
<p>49、下列关于修饰符混用的说法，错误的是（<strong>D</strong>）<br>A、abstract不能与 final 并列修饰同一个类<br>B、abstract类中不可以有 private 的成员<br>C、abstract方法必须在 abstract 类中<br>D、static 方法中能处理非 static 的属性</p>
<p>50、（<strong>B</strong>）修饰符允许对类成员的访问不依赖于该类的任何对象<br>A、 abstract<br>B、 static<br>C、 return<br>D、 public</p>
<p>51、关于被私有访问控制符private修饰的成员变量，以下说法正确的是（<strong>C</strong>）<br>A、可以被三种类所引用：该类自身、与它在同一个包中的其他类、在其他包中的该类的子类<br>B、可以被两种类访问和引用：该类本身、该类的所有子类<br>C、只能被该类自身所访问和修改<br>D、只能被同一个包中的类访问</p>
<p>52、下面的集合中，（<strong>C</strong>）不可以存储重复元素。<br>A、Set<br>B、Collection<br>C、Map<br>D、List</p>
<p>53、关于 Map 和 List，下面说法正确的是（<strong>D</strong>）。<br>A、Map 继承 List<br>B、List 中可以保存 Map 或 List<br>C、Map 和 List 只能保存从数据库中取出的数据<br>D、Map 的 value 可以是 List 或 Map</p>
<p>54、给定Java代码如下，编译运行后，结果是（<strong>B</strong>）<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">long1_1</span>&#123;</div><div class="line">    <span class="keyword">static</span> String <span class="keyword">string</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">		<span class="keyword">char</span> c= <span class="keyword">string</span>.charAt(<span class="number">0</span>);</div><div class="line">		System.<span class="keyword">out</span>.println(c);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>A、编译错误<br>B、运行期异常，异常类型为<code>NullPointerException</code><br>C、运行期异常，异常类型为<code>ArithmeticException</code><br>D、正确运行，但无输出内容</p>
<p>55、给定Java代码如下，关于super的用法，以下描述正确的是（<strong>C</strong>）<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</div><div class="line">    	public <span class="type">C</span>() &#123;</div><div class="line">    		<span class="keyword">super</span>();</div><div class="line">    	&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>A、用来调用类B中定义的super()方法<br>B、用来调用类C中定义的super()方法<br>C、用来调用类B的无参构造方法<br>D、用来调用类B中第一个出现的构造方法</p>
<p>56、给定Java代码如下，编译运行，结果是（<strong>A</strong>）<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">long1_1</span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">		<span class="keyword">int</span> i;</div><div class="line">		System.<span class="keyword">out</span>.println(<span class="string">"i= "</span>+ i);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>A、编译错误<br>B、运行时出现例外<br>C、正常运行，输出i= -1;<br>D、正常运行，输出i= 0;</p>
<blockquote>
<p>编译一下会出现这个错误<code>The local variable i may not have been initialized</code>。意思是没有对该变量进行初始化。</p>
</blockquote>
<p>57、下面的Java代码，当x= 2时，运行结果是（<strong>C</strong>）<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">switch (x) &#123;</div><div class="line">		<span class="attribute">case 1</span>:</div><div class="line">			System<span class="variable">.out</span><span class="variable">.println</span>(1);</div><div class="line">		<span class="attribute">case 2</span>:</div><div class="line">		case 3:</div><div class="line">			System<span class="variable">.out</span><span class="variable">.println</span>(3);</div><div class="line">		<span class="attribute">case 4</span>:</div><div class="line">			System<span class="variable">.out</span><span class="variable">.println</span>(4);</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<p>A、没有输出任何结果<br>B、输出结果为3<br>C、输出结果是3和4<br>D、输出结果是1、3和4</p>
<p>58、分析如下Java代码片段，输出结果为（<strong>A</strong>）<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">int</span> money= <span class="number">0</span>;</div><div class="line"><span class="built_in">int</span> price= <span class="number">10</span>;</div><div class="line"><span class="built_in">int</span> <span class="keyword">number</span>= <span class="number">0</span>;</div><div class="line">for(<span class="built_in">int</span> i= <span class="number">0</span>; i&lt; <span class="number">2</span>; i++) &#123;</div><div class="line">	<span class="keyword">number</span>++;</div><div class="line">	//System.<span class="keyword">out</span>.println(<span class="keyword">number</span>);</div><div class="line">	--price;</div><div class="line">	//System.<span class="keyword">out</span>.println(price);</div><div class="line">	money+= <span class="keyword">number</span>* price;</div><div class="line">&#125;</div><div class="line">System.<span class="keyword">out</span>.println(money);</div></pre></td></tr></table></figure></p>
<p>A、25&nbsp;&nbsp;&nbsp;&nbsp;B、28<br>C、31&nbsp;&nbsp;&nbsp;&nbsp;D、30</p>
<p>59、给定如下Java代码，编译运行时，结果是（<strong>C</strong>）<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		<span class="keyword">String</span> <span class="keyword">string</span>= <span class="string">"123456789"</span>;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="keyword">string</span>.indexOf(<span class="string">"5"</span>));</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>A、6&nbsp;&nbsp;&nbsp;&nbsp;B、5&nbsp;&nbsp;&nbsp;&nbsp;C、4&nbsp;&nbsp;&nbsp;&nbsp;D、-1</p>
<p>60、下列哪一个操作不能使线程从等待阻塞状态进入对象阻塞状态（<strong>D</strong>）<br>A、等待阻塞状态下的线程被notify()唤醒<br>B、等待阻塞状态下的纯种被interrput()中断<br>C、等待时间到<br>D、等待阻塞状态下的线程调用wait()方法</p>
<p>61、在Java中，下列（<strong>D</strong>）类不能派生出子类。<br>A、public class MyClass{}<br>B、class MyClass{}<br>C、abstract class MyClass{}<br>D、final class MyClass{}</p>
<p>62、在Java中，要判断D盘下是否存在文件abc.txt，应该使用以下（<strong>C</strong>）判断语句。<br>A、if(new File(“d:abc.txt”).exists()== 1)<br>B、if(File.exists(“d:abc.txt”)== 1)<br>C、if(new File(“d:/abc.txt”).exists())<br>D、if(File.exists(“d:/abc.txt”))</p>
<p>63、在Java中，关于HashMap类的描述，以下说法错误的是（<strong>B</strong>）<br>A、HashMap使用键/值的形式保存数据<br>B、HashMap能够保证其中元素的顺序<br>C、HashMap允许将null用作键<br>D、HashMap允许将null用作值</p>
<p>64、在Java中，下面关于变量及其作用域的描述错误的是（<strong>A、B</strong>）<br>A、实例变量是存放在方法区中<br>B、实例变量用关键字static声明<br>C、在方法中定义的局部变量在该方法被执行时创建<br>D、局部变量在使用前必须被初始化</p>
<blockquote>
<p>对象的所有数据成员都在堆中。实例变量在栈中，实例在堆中。<br>定义该成员变量时没有使用static修饰，该成员变量又被称为非静态变量或实例变量；如果使用了static修饰，则该成员变量又可被称为静态变量或类变量。</p>
</blockquote>
<p>65、给定Java代码，如下:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>要创建Shape类的子类Circle，以下代码正确的是（<strong>B、D</strong>）<br>A、class Circle extends Shape{int draw(){}}<br>B、abstract class Circle extends Shape{}<br>C、class Circle extends Shape{void draw()}<br>D、class Circle extends Shape{void draw(){}}</p>
<p>66、给定一个Java程序的方法结构如下，以下方法体实现语句正确的是（<strong>B、C</strong>）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">change</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>A、Integer int= new Integer(i); return int;<br>B、Integer t= Integer.valueOf(i); return t;<br>C、return new Integer(i);<br>D、return i;</p>
<p>67、给定一段Java代码如下，要打印出list中存储的内容，以下语句正确的是（<strong>A、B</strong>）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ArrayList <span class="built_in">list</span>= <span class="keyword">new</span> ArrayList();</div><div class="line">		<span class="built_in">list</span>.add(<span class="string">"a"</span>);</div><div class="line">		<span class="built_in">list</span>.add(<span class="string">"b"</span>);</div><div class="line">		Iterator iterator= <span class="built_in">list</span>.iterator();</div></pre></td></tr></table></figure></p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A、</div><div class="line"><span class="keyword">while</span>(<span class="keyword">iterator</span>.hasNext()) &#123;</div><div class="line">	<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="keyword">iterator</span>.next());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">B、</div><div class="line"><span class="built_in">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>; i&lt; list.<span class="built_in">size</span>(); i++) &#123;</div><div class="line">	System.out.<span class="built_in">println</span>(list.<span class="built_in">get</span>(i));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight golo"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">C、</div><div class="line"><span class="keyword">while</span>(<span class="keyword">list</span>.hasNext()) &#123;</div><div class="line">	System.out.<span class="keyword">println</span>(<span class="keyword">list</span>.next());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">D、</div><div class="line"><span class="keyword">for</span>(int <span class="built_in">i</span>= <span class="number">0</span>; <span class="built_in">i</span>&lt; list.<span class="built_in">size</span>(); <span class="built_in">i</span>++) &#123;</div><div class="line">	System.out.println(iterator(i));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>68、在Java中，下面（<strong>C、D</strong>）是不合法的声明。<br>A、short x[]<br>B、short[] y<br>C、short[5] x2<br>D、short z2[5]</p>
<p>69、以下（<strong>B、C</strong>）不是Java的原始数据类型。<br>A、short<br>B、Booleam<br>C、unit<br>D、float</p>
<blockquote>
<p>Java的原始数据类型一共就8个，分别是: <code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>boolean</code>、<code>char</code>、<code>float</code>、<code>double</code>。注意这些都是大小写敏感的，而<code>Booleanm</code>是<code>boolean</code>的封装类(Wrapper class)。</p>
</blockquote>
<p>70、给定如下Java代码，编译运行时，以下（<strong>A、C</strong>）语句的值是true。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">String</span> <span class="keyword">string</span>= <span class="string">"Hello"</span>;</div><div class="line"><span class="keyword">String</span> t= <span class="string">"Hello"</span>;</div><div class="line"><span class="keyword">String</span> e= <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"Hello"</span>);</div><div class="line"><span class="keyword">char</span> c[]= &#123;<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">"G"</span>&#125;;</div></pre></td></tr></table></figure></p>
<p>A、string.equals(t);<br>B、t.equals(c);<br>C、t.equals(e);<br>D、t== c;</p>
<blockquote>
<p><code>==</code>操作符所比较的是操作符两端的操作数是否是同一个对象，而<code>String</code>的<code>`equals()</code>方法所比较的是两个<code>String</code>对象的内容是否一样，其参数是一个<code>String</code>对象时才有可能返回<code>true</code>，其他对象都返回false。<br>定义<code>char</code>时候，字符必须用单引号，字符串用双引号。例如，在char c= ‘a’中，’a’是字符常量，必须用单引号。”a”表示字符串，包含两个字符，一个是’a’，一个是’\0’。</p>
</blockquote>
<p>71、在Java中，下面关于抽象类的描述正确的是（<strong>B、D</strong>）<br>A、抽象类可以被实例化<br>B、如果一个类中有一个方法被声明为抽象的，那么这个类必须是抽象类<br>C、抽象类中的方法必须都是抽象的<br>D、声明抽象类必须带有关键字abstract</p>
<p>72、以下代码运行输出的是（<strong>C</strong>）<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="type">String</span> name= <span class="string">"Person"</span>;</div><div class="line">	int age= <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">long1_1</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;	</div><div class="line">	public <span class="type">String</span> grade;</div><div class="line">	public static void main(<span class="type">String</span>[] args) &#123;</div><div class="line">		<span class="type">Person</span> person= <span class="keyword">new</span> <span class="type">Person</span>();</div><div class="line">		<span class="type">System</span>.out.println(person.name);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>A、输出: Person<br>B、没有输出<br>C、编译错误<br>D、运行出错</p>
<p>73、在使用 super 和 this关键字时，以下描述正确的是（<strong>A</strong>）<br>A、在子类构造方法中使用super()显示调用父类的构造方法，super()必须写在子类构造方法的第一行，否则编译不通过<br>B、super()和this()不一定要放在构造方法内第一行<br>C、this()和super()可以同时出现在一个构造函数中<br>D、this()和super()可以在static环境中使用，包括static方法和static语句块</p>
<blockquote>
<p>1、调用super()必须写在子类构造方法的第一行，否则编译不通过。每个子类构造方法的第一条语句，都是隐含地调用super()，如果父类没有这种形式的构造函数，那么在编译的时候就会报错。<br>2、super()和this()类似。区别是：super()从子类中调用父类的构造方法，this()在同一类内调用其它方法。<br>3、super()和this()均需放在构造方法内第一行。<br>4、尽管可以用this()调用一个构造器，但却不能调用两个。<br>5、this()和super()不能同时出现在一个构造函数里面，因为this()必然会调用其它的构造函数，其它的构造函数必然也会有super()语句的存在，所以在同一个构造函数里面有相同的语句，就失去了语句的意义，编译器也不会通过。<br>6、this()和super()都指的是对象，所以，均不可以在static环境中使用。包括：static变量，static方法，static语句块。<br>7、从本质上讲，this()是一个指向本对象的指针,然而super()是一个Java关键字。</p>
</blockquote>
<p>74、以下对封装的描述正确的是（<strong>D</strong>）<br>A、只能对一个类中的方法进行封装，不能对属性进行封装<br>B、如果子类继承了父类，对于父类中进行封装的方法，子类仍然可以直接调用<br>C、封装的意义不大，因此在编码时尽量不要使用<br>D、封装的主要作用在于对外隐藏内部实现细节，增强程序的安全性</p>
<p>75、以下对继承的描述错误的是（<strong>A</strong>）<br>A、Java 中的继承允许一个子类继承多个父类<br>B、父类更具有通用性，子类更具体<br>C、Java 中的继承存在着传递性<br>D、当实例化子类时会递归调用父类中的构造方法</p>
<p>76、Java提供哪几种运算符（<strong>A、B、C、D</strong>）<br>A、算数运算符<br>B、位运算符<br>C、关系运算符<br>D、逻辑运算符<br>E、条件运算符</p>
<p>77、以下说法错误的是（<strong>D</strong>）<br>A. super.方法()可以调用父类的所有非私有方法<br>B. super()可以调用父类的所有非私有构造函数<br>C. super.属性可以调用父类的所有非私有属性<br>D. this和super关键字可以出现在同一个构造函数中</p>
<p>78、访问修饰符作用范围由大到小是（<strong>D</strong>）<br>A、private-default-protected-public<br>B、public-default-protected-private<br>C、private-protected-default-public<br>D、public-protected-default-private</p>
<p>79、多态的表现形式有（<strong>A</strong>）<br>A、重写<br>B、抽象<br>C、继承<br>D、封装</p>
<p>80、以下对重载描述错误的是（<strong>B</strong>） overload(重载 ) override(重写)<br>A、方法重载多发生在一个类的内部<br>B、构造方法不能重载<br>C、重载要求方法名相同，参数列表不同<br>D、方法的返回值类型不是区分方法重载的条件</p>
<p>81、以下对抽象类的描述正确的是（<strong>C</strong>）<br>A、抽象类没有构造方法<br>B、抽象类必须提供抽象方法<br>C、有抽象方法的类一定是抽象类<br>D、抽象类可以通过 new 关键字直接实例化</p>
<p>82、以下对接口描述错误的有（<strong>D</strong>）<br>A、接口没有提供构造方法<br>B、接口中的方法默认使用 public、 abstract 修饰<br>C、接口中的属性默认使用 public、 static、 final 修饰<br>D、接口不允许多继承</p>
<p>83、以下代码，描述正确的有（<strong>A</strong>）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IDemo</span></span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String name;   <span class="comment">//1</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;   <span class="comment">//2</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>;   <span class="comment">//3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">long1_1</span> <span class="keyword">implements</span> <span class="title">IDemo</span></span>&#123;   <span class="comment">//4</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>A、第1行错误，没有给变量赋值<br>B、第2行错误，方法没有修饰符<br>C、第4行错误，没有实现接口的全部方法<br>D、第3行错误，没有方法的实现</p>
<p>84、以下描述错误的有（<strong>C</strong>）<br>A、abstract 可以修饰类、接口、方法<br>B、abstract 修饰的类主要用于被继承<br>C、abstract 可以修饰变量<br>D、abstract 修饰的类，其子类也可以是 abstract修饰的</p>
<p>85、以下描述正确的有（<strong>B</strong>）<br>A、方法的重写应用在一个类的内部<br>B、方法的重载与返回值类型无关<br>C、构造方法不能重载<br>D、构造方法可以重写</p>
<p>86、以下对异常的描述不正确的有（<strong>C</strong>）<br>A、异常分为 Error 和 Exception<br>B、Throwable 是所有异常类的父类<br>C、Exception 是所有异常类父类<br>D、Exception 包括 RuntimeException 和 RuntimeException 之外的异常</p>
<p>87、下面代码的运行结果是（<strong>B</strong>）<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">long1_1</span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>) </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">return</span> a+ b;</div><div class="line">		&#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">			System.<span class="keyword">out</span>.println(<span class="string">"catch语句块"</span>);</div><div class="line">		&#125;<span class="keyword">finally</span> &#123;</div><div class="line">			System.<span class="keyword">out</span>.println(<span class="string">"finally语句块"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">		long1_1 long1_1= <span class="keyword">new</span> long1_1();</div><div class="line">		System.<span class="keyword">out</span>.println(<span class="string">"和是: "</span>+ long1_1.<span class="keyword">add</span>(<span class="number">9</span>,  <span class="number">34</span>));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>A、编译异常<br>B、finally语句块和是: 43<br>C、和是: 43finally语句块<br>D、catch语句块和是: 43</p>
<p>88、以下对自定义异常描述正确的是（<strong>C</strong>）<br>A、自定义异常必须继承 Exception<br>B、自定义异常可以继承自 Error<br>C、自定义异常可以更加明确定位异常出错的位置和给出详细出错信息<br>D、程序中已经提供了丰富的异常类，使用自定义异常没有意义</p>
<p>89、Java中的集合类包括 ArrayList 、 LinkedList 、 HashMap 等类，下列关于集合类描述错误的是（<strong>C</strong>）<br>A、ArrayList 和 LinkedList 均实现了 List 接口<br>B、ArrayList 的访问速度比 LinkedList 快<br>C、添加和删除元素时， ArrayList 的表现更佳<br>D、HashMap实现Map接口，它允许任何类型的键和值对象，并允许将null用作键或值</p>
<p>90、在Java中开发JDBC应用程序时，使用DriverManager类的getConnection（）方法建立与数据源的连接语句为：Connection con= DriverManager.getConnection( “ jdbc:odbc:news ” ); URL连接中的”news”表示的是（<strong>C</strong>）<br>A、数据库中表的名称<br>B、数据库服务器的机器名<br>C、数据源的名称<br>D、用户名</p>
<p>91、获取 ResutlSet对象 rst 的第一行数据，以下正确的是（<strong>B</strong>）<br>A、rst.hashNext();<br>B、rst.next();<br>C、rst.first();<br>D、rst.nextRow();</p>
<blockquote>
<p>first()：移动到第一条记录，并未读取。</p>
</blockquote>
<p>92、以下哪个方法用于定义线程的执行体？（<strong>C</strong>）<br>A、start()<br>B、init()<br>C、run()<br>D、synchronized()</p>
<blockquote>
<p>创建线程有两种方法：实现java.lang.Runnable接口和继承Thread类并重写run()方法。无论通过哪种方式创建线程，都必须通过run()方法定义线程体，因为一个线程在开始执行时，就是通过从其run()方法开始执行的。Runnable接口中定义了抽象run()方法，而Thread类本身也实现了Runnable接口。</p>
</blockquote>
<p>93、下面哪个流类属于面向字符的输入流（<strong>D</strong>）<br>A、BufferedWriter<br>B、FileInputStream<br>C、ObjectInputStream<br>D、InputStreamReader</p>
<blockquote>
<p>字节输入流: <code>InputStream</code><br>FileInputStream、ByteArrayInputStream、PipedInputStream、BufferedInputStream、ObjectInputStream、FilterInputStream、PushbackInputStream、DataInputStream<br>字节输出流: <code>OutputStream</code><br>FileOutputStream、ByteArrayOutputStream、PipedOutputStream、BufferedOutputStream、ObjectOutputStream、FilterOutputStream、PrintStream、DataOutputStream<br>字符输入流: <code>Reader</code><br>FileReader、CharArrayReader、PipedReader、StringReader、BufferedReader、InputStreamReader、FilterReader、PushbackReader<br>字符输出流: <code>Writer</code><br>FileWriter、CharArrayWriter、PipedWriter、StringWriter、BufferedWriter、OutputStreamWriter、FilterWriter、PrintWriter</p>
</blockquote>
<p>94、一个线程在任何时刻都处于某种线程状态（thread state）,例如创建状态、运行状态、阻塞状态、就绪状态等。一个线程可以由选项中的哪种线程状态直接到达运行状态？（<strong>D</strong>）<br>A、死亡状态<br>B、阻塞状态（对象 lock 池内）<br>C、阻塞状态（对象 wait 池内）<br>D、就绪状态</p>
<p>95、选项中哪一行代码可以替换题目中<code>//add code here</code>而不产生编译错误？（<strong>A</strong>）<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">long1_1</span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> constInt= <span class="number">5</span>;</div><div class="line">	<span class="comment">//add code here</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>A、public abstract void method(int a);<br>B、constInt= constInt+ 5;<br>C、public int method();<br>D、public abstract void anotherMethod() {}</p>
<p>96、下列哪种说法是正确的（<strong>D</strong>）<br>A、实例方法可直接调用超类的实例方法<br>B、实例方法可直接调用超类的类方法<br>C、实例方法可直接调用其他类的实例方法<br>D、实例方法可直接调用本类的类方法</p>
<blockquote>
<p>类方法即用static修饰的方法，不能使用this，super关键字，不能调用非static的成员变量，非static的成员方法，只能访问static修饰的成员变量，成员方法<br>类方法指的是用static关键字修饰的方法，而实例方法就是相对于类方法的其它方法。<br>当类的字节码文件被加载到内存时，类的实例方法不会被分配入口地址，当该类创建对象后，类中的实例方法才分配入口地址，从而实例方法可以被类创建的任何对象调用执行。需要注意的是，当我们创建第一个对象时，类中的实例方法就分配了入口地址，当再创建对象时，不再分配入口地址，也就是说，方法的入口地址被所有的对象共享，当所有的对象都不存在时，方法的入口地址才被取消。<br>对于类中的类方法，在该类被加载到内存时，就分配了相应的入口地址。从而类方法不仅可以被类创建的任何对象调用执行，也可以直接通过类名调用。类方法的入口地址直到程序退出才被取消。<br>对于A,不可以调用父类的private实例方法。因为private修饰的方法只有本类对象才可以调用<br>对于B,类方法只有本类才可以调用<br>对于C,跟A相同，比A更离谱</p>
</blockquote>
<p>97、用于调用存储过程的对象是（<strong>C</strong>）<br>A、ResultSet<br>B、DriverManager<br>C、CallableStatemet<br>D、PreparedStatement</p>
<p>98、按照 MVC 设计模式， JSP 用于实现（B）<br>A、Model<br>B、View<br>C、Controller<br>D、容器</p>
<p>99、在什么时候Float对象会被垃圾回收（<strong>C</strong>）<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">Object</span> m() &#123;</div><div class="line">    <span class="keyword">Object</span> o = <span class="keyword">new</span> Float(<span class="number">3.14</span>F);</div><div class="line">    <span class="keyword">Object</span>[] oa = <span class="keyword">new</span> <span class="keyword">Object</span>[<span class="number">1</span>];</div><div class="line">    oa[<span class="number">0</span>] = o;</div><div class="line">    o = <span class="keyword">null</span>;</div><div class="line">    oa[<span class="number">0</span>] = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>A、在“oa[0] = o;”之后<br>B、在“o = null;”之后<br>C、在“oa[0] = null;”之后<br>D、在“return o;”之后 </p>
<blockquote>
<p>垃圾回收的判断条件是对象不可达，上面代码中与Float对象可达的有对象o和oa[0]，所以在这两个对象都为空之后就可以回收了</p>
</blockquote>
<p>100、下面代码的输出结果是（<strong>B</strong>）<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="type">Base</span>() &#123;</div><div class="line">        <span class="type">System</span>.out.print(<span class="string">"Base"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Alpha</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    public static void main(<span class="type">String</span>[] args) &#123;</div><div class="line">        <span class="keyword">new</span> <span class="type">Alpha</span>();</div><div class="line">        <span class="keyword">new</span> <span class="type">Base</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>A、Base<br>B、BaseBase<br>C、代码运行但没有输出<br>D、运行时抛出异常 </p>
<blockquote>
<p>子类如果没有构造方法，默认调用父类的无参的构造方法</p>
</blockquote>
<p>101、在Servlet的生命周期中，容器只调用一次的方法是（<strong>C、D</strong>）<br>A、service<br>B、getServletConfig<br>C、init<br>D、destroy </p>
<blockquote>
<p>init() 和destroy() 即 初始化 和 销毁 只执行一次</p>
</blockquote>
<p>102、在一个线程中Sleep（1000）方法，将使得该线程在多少时间后获得对CPU的控制（假设睡眠过程中不会有其他事件唤醒该线程）（<strong>C</strong>）<br>Ａ、正好1000毫秒<br>Ｂ、1000毫秒不到<br>Ｃ、=&gt;1000毫秒<br>Ｄ、不一定 </p>
<blockquote>
<p>因为在1000ms之后，只是让线程重新回到队列中，如果还有其它线程在执行，还会继续等待，不会立即取得CPU的控制</p>
</blockquote>
<p>103、下面关于垃圾收集的说法正确的是（<strong>D</strong>）<br>Ａ、一旦一个对象成为垃圾，就立刻被收集掉。<br>Ｂ、对象空间被收集掉之后，会执行该对象的finalize方法<br>Ｃ、finalize方法和C++的析构函数是完全一回事情<br>Ｄ、一个对象成为垃圾是因为不再有引用指着它，但是线程并非如此。</p>
<blockquote>
<p>只要JVM还没有快到耗尽内存的地步，它是不会浪费时间进行垃圾回收的；垃圾回收器准备释放内存的时候，会先调用finalize()；如果你为某个对象定义了finalize() 方法，JVM 可能不会调用它，因为垃圾回收器不曾释放过那些对象的内，调用System.gc() 也不会起作用，因为它仅仅是给 JVM 一个建议而不是命令。</p>
</blockquote>
<p>104、下面的语句会产生什么样的输出？（<strong>A</strong>）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(4&amp;7);</div></pre></td></tr></table></figure></p>
<p>A、4&nbsp;&nbsp;&nbsp;&nbsp;B、5<br>C、6&nbsp;&nbsp;&nbsp;&nbsp;D、7</p>
<blockquote>
<p>0100 &amp; 1111= 0100即为4</p>
</blockquote>
<p>105、下列关于构造方法的叙述中，错误的（<strong>C</strong>）<br>A、Java语言规定构造方法名与类名必须相同<br>B、Java语言规定构造方法没有返回值，但不用void声明<br>C、Java语言规定构造方法不可以重载<br>D、Java语言规定构造方法只能通过new自动调用</p>
<blockquote>
<p>当不声明构造函数时，默认有一个无参数的构造方法；构造函数不能有返回类型；构造函数可以是私有的，这样外部就无法由私有的构造函数创建对象，如单例模式</p>
</blockquote>
<p>106、在接口中以下哪条定义是正确的?（<strong>A、B</strong>）<br>A、void methoda();<br>B、public double methoda();<br>C、public final double methoda();<br>D、static void methoda(double d1);<br>E、protected void methoda(double d1);</p>
<blockquote>
<p>接口only public, abstract, default, static and strictfp are permitted，而且只有default, static修饰的方法才能有方法体，而且必须有方法体，也就是方法后面得有大括号</p>
</blockquote>
<p>107、如下代码<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</div><div class="line"></div><div class="line">public <span class="type">X</span> aMethod() &#123; <span class="keyword">return</span> <span class="keyword">this</span>;&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Y</span> <span class="keyword">extends</span> <span class="title">X</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>哪两个方法能加到Y类的定义中（<strong>C、E</strong>）<br>A、public void aMethod() {}<br>B、private void aMethod() {}<br>C、public void aMethod(String s) {}<br>D、private Y aMethod() { return null; }<br>E、public X aMethod() { return new Y(); } </p>
<blockquote>
<p>C属于重载，其实跟父类的同名方法没什么关系，E属于重写，覆盖父类的同名方法</p>
</blockquote>
<p>108、写一个SIngleton（单例模式）出来<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;  </div><div class="line">    private static Singleton<span class="built_in"> instance </span>= new Singleton();  </div><div class="line">    private Singleton ()&#123;&#125;  </div><div class="line">    public static Singleton getInstance() &#123;  </div><div class="line">    return<span class="built_in"> instance; </span> </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>109、垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？</p>
<blockquote>
<p>对于GC来说，当程序员创建对象时，GC就开始监控这个对象的地址、大小以及使用情况。通常，GC采用有向图的方式记录和管理堆(heap)中的所有对象。通过这种方式确定哪些对象是”可达的”，哪些对象是”不可达的”。当GC确定一些对象为”不可达”时，GC就有责任回收这些内存空间。可以。程序员可以手动执行System.gc()，通知GC运行，但是Java语言规范并不保证GC一定会执行。</p>
</blockquote>
<p>110、描述forward和redirect的区别</p>
<blockquote>
<p>forward是服务器请求资源，服务器直接访问目标地址的URL，目标地址可以接收request 请求参数，然后把结果发给浏览器，浏览器根本不知道服务器发送的内容是从哪儿来的，所以它的地址栏中还是原来的地址。redirect就是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求哪个地址，浏览器会重新进行请求，此时不能用request传值，浏览器的地址栏会变成新的地址。</p>
</blockquote>
<p>111、数据连接池的工作机制是什么？</p>
<blockquote>
<p>J2EE服务器启动时会建立一定数量的池连接，并一直维持不少于此数目的池连接。客户端程序需要连接时，池驱动程序会返回一个未使用的池连接并将其标记为忙。如果当前没有空闲连接，池驱动程序就新建一定数量的连接，新建连接的数量由配置参数决定。当使用的池连接调用完成后，池驱动程序将此连接表记为空闲，其他调用就可以使用这个连接。</p>
</blockquote>
<p>112、swtich是否能作用在byte上，是否能作用在long上，是否能作用在String上?</p>
<blockquote>
<p>switch（expr1）中，expr1是一个整数表达式。因此传递给 switch 和 case 语句的参数应该是 int、 short、 char 或者 byte。long,string 都不能作用于swtich。</p>
</blockquote>
<p>113、JSP和Servlet有哪些相同点和不同点，他们之间的联系是什么？</p>
<blockquote>
<p>JSP是Servlet技术的扩展，本质上是Servlet的简易方式，更强调应用的外表表达。JSP编译后是”类servlet”。Servlet和JSP最主要的不同点在于，Servlet的应用逻辑是在Java文件中，并且完全从表示层中的HTML里分离开来。而JSP的情况是Java和HTML可以组合成一个扩展名为.jsp的文件。JSP侧重于视图，Servlet主要用于控制逻辑。</p>
</blockquote>
<p>114、jsp 指令中 isELIgnored=”boolean” 的意思是（<strong>C</strong>）<br>A、决定是否实现 Servler 的单线程模式，<br>B、决定改页面是否是一个错误处理页面，<br>C、决定是否支持 EL表示，<br>D、没有具体的含义</p>
<p>115、下面关于 Java 的引用，说法正确的是（<strong>B</strong>）<br>A、应用实际上就是指针<br>B、应用本身是 Primitive<br>C、引用就是对象本身<br>D、一个对象只能被一个引用所指引</p>
<p>116、用于调用存储过程的对象是（<strong>C</strong>）<br>A、ResultSet<br>B、DriverManager<br>C、CallableStatement<br>D、PreparedStatement</p>
<p>117、对于 import java.util 包，以下那种说法是错误的（<strong>C</strong>）<br>A、Vector 类属于 java.util 包<br>B、Vector 类放在 … ／ java/util/ 目录下<br>C、Vector 类放在 java.util 文件中<br>D、Vector 类是 Sun 公司的产品</p>
<p>118、下面关于垃圾收集的说法正确的是（<strong>D</strong>）<br>A、一旦一个对象成为垃圾，就立刻被收集掉。<br>B、对象空间被收集掉之后，会执行该对象的 finalize 方法<br>C、finalize 方法和 C++的析构函数是完全一回事情<br>D、一个对象成为垃圾是因为不再有引用指着它，但是线程并非如此。</p>
<p>119、下列标识符（名字）命名原则中，正确的是（<strong>D</strong>）<br>A、类名的首字母小写<br>B、变量和方法名的首写字母大写<br>C、接口名的首写字母小写<br>D、常量完全大写</p>
<p>120、类 Test1定义如下：<br>1． public class Test1{<br>2． public float aMethod （ float a， float b ） { return 0;}<br>3．<br>4． }<br>将以下哪种方法插入行 3 是不合法的。（<strong>B</strong>）<br>A、public float aMethod （ float a， float b ， float c） { return 0;}<br>B、public float aMethod （ float c ， float d ） { return 0;}<br>C、public intaMethod （ int a， int b） { return 0;}<br>D、private float aMethod （ int a， int b ， int c） { return 0;}</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、下面哪个是Java语言中正确的标识符（&lt;strong&gt;B&lt;/strong&gt;）&lt;br&gt;A、3com&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;B、import&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;C、that&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;D、this&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;标识符是以字母开头的字母数字序列。字母通常指大小写英文字母，下划线&lt;code&gt;_&lt;/code&gt;、美元符&lt;code&gt;&amp;amp;&lt;/code&gt;等，也可以是Unicode字符集中的字符，如汉字等；数字通常指0-9，可以是字母数字的任意组合但不能包含(如&lt;code&gt;+&lt;/code&gt;，&lt;code&gt;-&lt;/code&gt;)等，不能使用关键字但长度不受限制。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java基础题" scheme="http://www.sanstylemc.cn/tags/Java%E5%9F%BA%E7%A1%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Selenium的使用</title>
    <link href="http://www.sanstylemc.cn/2018/04/12/Selenium%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.sanstylemc.cn/2018/04/12/Selenium的使用/</id>
    <published>2018-04-12T13:18:21.000Z</published>
    <updated>2018-04-12T13:19:10.169Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;Selenium是一个自动化测试工具，利用它可以驱动浏览器执行特定的动作，如点击、下拉等操作，同时还可以获取浏览器当前呈现的页面的源代码，做到可见即可爬。对于一些JavaScript动态渲染的页面来说，此种抓取方式非常有效。<br><a id="more"></a></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;确保已经正确安装好了Chrome浏览器并配置好了ChromeDriver。另外，还需要正确安装好Python的Selenium库。<br>&nbsp;&nbsp;&nbsp;&nbsp;准备工作做好之后，首先来大体看一下Selenium有一些怎样的功能。示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line">from selenium<span class="selector-class">.webdriver</span><span class="selector-class">.common</span><span class="selector-class">.by</span> import By</div><div class="line">from selenium<span class="selector-class">.webdriver</span><span class="selector-class">.common</span><span class="selector-class">.keys</span> import Keys</div><div class="line">from selenium<span class="selector-class">.webdriver</span><span class="selector-class">.support</span> import expected_conditions as EC</div><div class="line">from selenium<span class="selector-class">.webdriver</span><span class="selector-class">.support</span><span class="selector-class">.wait</span> import WebDriverWait</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">try:</div><div class="line">    browser.get(<span class="string">'https://www.baidu.com'</span>)</div><div class="line">    <span class="selector-tag">input</span> = browser.find_element_by_id(<span class="string">'kw'</span>)</div><div class="line">    <span class="selector-tag">input</span>.send_keys(<span class="string">'Python'</span>)</div><div class="line">    <span class="selector-tag">input</span>.send_keys(Keys.ENTER)</div><div class="line">    wait = WebDriverWait(browser, <span class="number">10</span>)</div><div class="line">    wait.until(EC.presence_of_element_located((By<span class="selector-class">.ID</span>, <span class="string">'content_left'</span>)))</div><div class="line">    print(browser.current_url)</div><div class="line">    print(browser.get_cookies())</div><div class="line">    print(browser.page_source)</div><div class="line">finally:</div><div class="line">    browser.close()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行代码后发现，会自动弹出一个<code>Chrome</code>浏览器。浏览器首先会跳转到百度，然后在搜索框中输入<code>Python</code>，接着跳转到搜索结果页，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/Selenium%E7%9A%84%E4%BD%BF%E7%94%A8/1.png?raw=true" alt="1"><br>&nbsp;&nbsp;&nbsp;&nbsp;搜索结果加载出来后，控制台分别会输出当前的<code>URL</code>、当前的<code>Cookies</code>和网页源代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">https:<span class="comment">//www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=1&amp;tn=baidu&amp;wd=Python&amp;rsv_pq=c94d0df9000a72d0&amp;rsv_t=07099xvun1ZmC0bf6eQvygJ43IUTTUOl5FCJVPgwG2YREs70GplJjH2F%2BCQ&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=6&amp;rsv_sug2=0&amp;inputT=87&amp;rsv_sug4=87</span></div><div class="line">[&#123;<span class="string">'secure'</span>: False, <span class="string">'value'</span>: <span class="string">'B490B5EBF6F3CD402E515D22BCDA1598'</span>, <span class="string">'domain'</span>: <span class="string">'.baidu.com'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'httpOnly'</span>: False, <span class="string">'name'</span>: <span class="string">'BDORZ'</span>, <span class="string">'expiry'</span>: <span class="number">1491688071.707553</span>&#125;, &#123;<span class="string">'secure'</span>: False, <span class="string">'value'</span>: <span class="string">'22473_1441_21084_17001'</span>, <span class="string">'domain'</span>: <span class="string">'.baidu.com'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'httpOnly'</span>: False, <span class="string">'name'</span>: <span class="string">'H_PS_PSSID'</span>&#125;, &#123;<span class="string">'secure'</span>: False, <span class="string">'value'</span>: <span class="string">'12883875381399993259_00_0_I_R_2_0303_C02F_N_I_I_0'</span>, <span class="string">'domain'</span>: <span class="string">'.www.baidu.com'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'httpOnly'</span>: False, <span class="string">'name'</span>: <span class="string">'__bsi'</span>, <span class="string">'expiry'</span>: <span class="number">1491601676.69722</span>&#125;]</div><div class="line">&lt;!DOCTYPE html&gt;<span class="xml"><span class="comment">&lt;!--STATUS OK--&gt;</span>...<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;源代码过长，在此省略。可以看到，我们得到的当前<code>URL</code>、<code>Cookies</code>和源代码都是浏览器中的真实内容。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以说，如果用<code>Selenium</code>来驱动浏览器加载网页的话，就可以直接拿到<code>JavaScript</code>渲染的结果了，不用担心使用的是什么加密系统。</p>
<h2 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>Selenium</code>支持非常多的浏览器，如<code>Chrome</code>、<code>Firefox</code>、<code>Edge</code>等，还有<code>Android</code>、<code>BlackBerry</code>等手机端的浏览器。另外，也支持无界面浏览器<code>PhantomJS</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;此外，我们可以用如下方式初始化:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">browser = webdriver.Firefox()</div><div class="line">browser = webdriver.Edge()</div><div class="line">browser = webdriver.PhantomJS()</div><div class="line">browser = webdriver.Safari()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样就完成了浏览器对象的初始化并将其赋值为<code>browser</code>对象。接下来，我们要做的就是调用`browser对象，让其执行各个动作以模拟浏览器操作。</p>
<h2 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们可以用<code>get()</code>方法来请求网页，参数传入链接<code>URL</code>即可。比如，这里用<code>get()</code>方法访问淘宝，然后打印出源代码，代码如下:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from selenium <span class="keyword">import</span> webdriver</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">browser.<span class="built_in">get</span>(<span class="string">'https://www.taobao.com'</span>)</div><div class="line"><span class="built_in">print</span>(browser.page_source)</div><div class="line">browser.<span class="built_in">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行后发现，弹出了<code>Chrome</code>浏览器并且自动访问了淘宝，然后控制台输出了淘宝页面的源代码，随后浏览器关闭。<br>&nbsp;&nbsp;&nbsp;&nbsp;通过这几行简单的代码，我们可以实现浏览器的驱动并获取网页源码，非常便捷。</p>
<h2 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>Selenium</code>可以驱动浏览器完成各种操作，比如填充表单、模拟点击等。比如，我们想要完成向某个输入框输入文字的操作，总需要知道这个输入框在哪里吧？而<code>Selenium</code>提供了一系列查找节点的方法，我们可以用这些方法来获取想要的节点，以便下一步执行一些动作或者提取信息。</p>
<h3 id="单个节点"><a href="#单个节点" class="headerlink" title="单个节点"></a>单个节点</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;比如，想要从淘宝页面中提取搜索框这个节点，首先要观察它的源代码，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/Selenium%E7%9A%84%E4%BD%BF%E7%94%A8/2.png?raw=true" alt="2"><br>&nbsp;&nbsp;&nbsp;&nbsp;可以发现，它的<code>id</code>是<code>q</code>，<code>name</code>也是<code>q</code>。此外，还有许多其他属性，此时我们就可以用多种方式获取它了。比如，<code>find_element_by_name()</code>是根据<code>name</code>值获取，<code>find_element_by_id()</code>是根据<code>id</code>获取。另外，还有根据<code>XPath</code>、<code>CSS选择器</code>等获取的方式。<br>&nbsp;&nbsp;&nbsp;&nbsp;我们用代码实现以下:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line"><span class="section">browser.get('https://www.taobao.com')</span></div><div class="line">input_first = browser.find_element_by_id('q')</div><div class="line">input_second = browser.find_element_by_css_selector('<span class="comment">#q')</span></div><div class="line">input_third = browser.find_element_by_xpath('//*[@id=<span class="string">"q"</span>]')</div><div class="line">print(input_first, input_second, input_third)</div><div class="line">browser.close()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们使用3种方式获取输入框，分别是根据<code>ID</code>、<code>CSS选择器</code>和<code>XPath</code>获取，它们返回的结果完全一致。运行结果如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"5e53d9e1c8646e44c14c1c2880d424af"</span>, element=<span class="string">"0.5649563096161541-1"</span>)&gt; </div><div class="line">&lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"5e53d9e1c8646e44c14c1c2880d424af"</span>, element=<span class="string">"0.5649563096161541-1"</span>)&gt; </div><div class="line">&lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"5e53d9e1c8646e44c14c1c2880d424af"</span>, element=<span class="string">"0.5649563096161541-1"</span>)&gt;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，这3个节点都是<code>WebElement</code>类型，是完全一致的。<br>&nbsp;&nbsp;&nbsp;&nbsp;这里列出所有获取单个节点的方法:<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>id</div><div class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_n</span>ame</div><div class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>xpath</div><div class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>link<span class="number">_</span>text</div><div class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_p</span>artial<span class="number">_</span>link<span class="number">_</span>text</div><div class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>tag<span class="number">_n</span>ame</div><div class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span><span class="keyword">class</span><span class="number">_n</span>ame</div><div class="line">find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>css<span class="number">_</span>selector</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;另外，<code>Selenium</code>还提供了通用方法<code>find_element()</code>，它需要传入两个参数：查找方式<code>By</code>和值。实际上，它就是<code>find_element_by_id()</code>这种方法的通用函数版本，比如<code>find_element_by_id(id)</code>就等价于<code>find_element(By.ID, id)</code>，二者得到的结果完全一致。我们用代码实现一下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line">from selenium<span class="selector-class">.webdriver</span><span class="selector-class">.common</span><span class="selector-class">.by</span> import By</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</div><div class="line">input_first = browser.find_element(By<span class="selector-class">.ID</span>, <span class="string">'q'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(input_first)</span></span></div><div class="line">browser.close()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;实际上，这种查找方式的功能和上面列举的查找函数完全一致，不过参数更加灵活。</p>
<h3 id="多个节点"><a href="#多个节点" class="headerlink" title="多个节点"></a>多个节点</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;如果查找的目标在网页中只有一个，那么完全可以用<code>find_element()</code>方法。但如果有多个节点，再用<code>find_element()</code>方法查找，就只能得到第一个节点了。如果要查找所有满足条件的节点，需要用<code>find_elements()</code>这样的方法。注意，在这个方法的名称中，<code>element</code>多了一个<code>s</code>，注意区分。<br>&nbsp;&nbsp;&nbsp;&nbsp;比如，要查找淘宝左侧导航条的所有条目，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/Selenium%E7%9A%84%E4%BD%BF%E7%94%A8/3.png?raw=true" alt="3"><br>&nbsp;&nbsp;&nbsp;&nbsp;就可以这样来实现:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">browser.<span class="built_in">get</span>('https:<span class="comment">//www.taobao.com')</span></div><div class="line"><span class="keyword">lis</span> = browser.find_elements_by_css_selector('.service-bd <span class="keyword">li</span>')</div><div class="line"><span class="keyword">print</span>(<span class="keyword">lis</span>)</div><div class="line">browser.<span class="keyword">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"c26290835d4457ebf7d96bfab3740d19"</span>, element=<span class="string">"0.09221044033125603-1"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"c26290835d4457ebf7d96bfab3740d19"</span>, element=<span class="string">"0.09221044033125603-2"</span>)&gt;, &lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"c26290835d4457ebf7d96bfab3740d19"</span>, element=<span class="string">"0.09221044033125603-3"</span>)&gt;...&lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"c26290835d4457ebf7d96bfab3740d19"</span>, element=<span class="string">"0.09221044033125603-16"</span>)&gt;]</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里简化了输出结果，中间部分省略。<br>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，得到的内容变成了列表类型，列表中的每个节点都是<code>WebElement</code>类型。<br>&nbsp;&nbsp;&nbsp;&nbsp;也就是说，如果我们用<code>find_element()</code>方法，只能获取匹配的第一个节点，结果是<code>WebElement</code>类型。如果用<code>find_elements()</code>方法，则结果是列表类型，列表中的每个节点是<code>WebElement</code>类型。<br>&nbsp;&nbsp;&nbsp;&nbsp;这里列出所有获取多个节点的方法:<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">find<span class="number">_</span>elements<span class="number">_</span><span class="meta">by</span><span class="number">_</span>id</div><div class="line">find<span class="number">_</span>elements<span class="number">_</span><span class="meta">by</span><span class="number">_n</span>ame</div><div class="line">find<span class="number">_</span>elements<span class="number">_</span><span class="meta">by</span><span class="number">_</span>xpath</div><div class="line">find<span class="number">_</span>elements<span class="number">_</span><span class="meta">by</span><span class="number">_</span>link<span class="number">_</span>text</div><div class="line">find<span class="number">_</span>elements<span class="number">_</span><span class="meta">by</span><span class="number">_p</span>artial<span class="number">_</span>link<span class="number">_</span>text</div><div class="line">find<span class="number">_</span>elements<span class="number">_</span><span class="meta">by</span><span class="number">_</span>tag<span class="number">_n</span>ame</div><div class="line">find<span class="number">_</span>elements<span class="number">_</span><span class="meta">by</span><span class="number">_</span><span class="keyword">class</span><span class="number">_n</span>ame</div><div class="line">find<span class="number">_</span>elements<span class="number">_</span><span class="meta">by</span><span class="number">_</span>css<span class="number">_</span>selector</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;当然，我们也可以直接用<code>find_elements()</code>方法来选择，这时可以这样写:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">lis</span> = browser.find_elements(By.CSS_SELECTOR, <span class="string">'.service-bd li'</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;结果是完全一致的。</p>
<h2 id="节点交互"><a href="#节点交互" class="headerlink" title="节点交互"></a>节点交互</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>Selenium</code>可以驱动浏览器来执行一些操作，也就是说可以让浏览器模拟执行一些动作。比较常见的用法有：输入文字时用<code>send_keys()</code>方法，清空文字时用<code>clear()</code>方法，点击按钮时用<code>click()</code>方法。示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line">import time</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</div><div class="line"><span class="selector-tag">input</span> = browser.find_element_by_id(<span class="string">'q'</span>)</div><div class="line"><span class="selector-tag">input</span>.send_keys(<span class="string">'iPhone'</span>)</div><div class="line"><span class="selector-tag">time</span>.sleep(<span class="number">1</span>)</div><div class="line"><span class="selector-tag">input</span>.<span class="attribute">clear</span>()</div><div class="line"><span class="selector-tag">input</span>.send_keys(<span class="string">'iPad'</span>)</div><div class="line"><span class="selector-tag">button</span> = browser.find_element_by_class_name(<span class="string">'btn-search'</span>)</div><div class="line"><span class="selector-tag">button</span>.click()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里首先驱动浏览器打开淘宝，然后用<code>find_element_by_id()</code>方法获取输入框，然后用<code>send_keys()</code>方法输入<code>iPhone</code>文字，等待一秒后用<code>clear()</code>方法清空输入框，再次调用<code>send_keys()</code>方法输入<code>iPad</code>文字，之后再用<code>find_element_by_class_name()</code>方法获取搜索按钮，最后调用<code>click()</code>方法完成搜索动作。</p>
<h2 id="动作链"><a href="#动作链" class="headerlink" title="动作链"></a>动作链</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在上面的实例中，一些交互动作都是针对某个节点执行的。比如，对于输入框，我们就调用它的输入文字和清空文字方法；对于按钮，就调用它的点击方法。其实，还有另外一些操作，它们没有特定的执行对象，比如鼠标拖曳、键盘按键等，这些动作用另一种方式来执行，那就是动作链。<br>&nbsp;&nbsp;&nbsp;&nbsp;比如，现在实现一个节点的拖曳操作，将某个节点从一处拖曳到另外一处，可以这样实现:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line">from selenium.webdriver import ActionChains</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">url = 'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</div><div class="line">browser.get(url)</div><div class="line">browser.switch_to.frame('iframeResult')</div><div class="line">source = browser.find_element_by_css_selector('<span class="comment">#draggable')</span></div><div class="line">target = browser.find_element_by_css_selector('<span class="comment">#droppable')</span></div><div class="line">actions = ActionChains(browser)</div><div class="line">actions.drag_and_drop(source, target)</div><div class="line">actions.perform()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;首先，打开网页中的一个拖曳实例，然后依次选中要拖曳的节点和拖曳到的目标节点，接着声明<code>ActionChains</code>对象并将其赋值为<code>actions</code>变量，然后通过调用<code>actions</code>变量的<code>drag_and_drop()</code>方法，再调用<code>perform()</code>方法执行动作，此时就完成了拖曳操作，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/Selenium%E7%9A%84%E4%BD%BF%E7%94%A8/4.png?raw=true" alt="4"><br>&nbsp;&nbsp;&nbsp;&nbsp;拖拽后的页面。<br><img src="https://github.com/sunstady/hexo/blob/master/Selenium%E7%9A%84%E4%BD%BF%E7%94%A8/5.png?raw=true" alt="5"></p>
<h2 id="执行JavaScript"><a href="#执行JavaScript" class="headerlink" title="执行JavaScript"></a>执行JavaScript</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;对于某些操作，Selenium API并没有提供。比如，下拉进度条，它可以直接模拟运行JavaScript，此时使用<code>execute_script()</code>方法即可实现，代码如下:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">from</span> <span class="keyword">selenium </span><span class="meta">import</span> webdriver</div><div class="line"> </div><div class="line"><span class="keyword">browser </span>= webdriver.Chrome()</div><div class="line"><span class="keyword">browser.get('https://www.zhihu.com/explore')</span></div><div class="line"><span class="keyword">browser.execute_script('window.scrollTo(0, </span>document.<span class="keyword">body.scrollHeight)')</span></div><div class="line"><span class="keyword">browser.execute_script('alert("To </span><span class="keyword">Bottom")')</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里就利用<code>execute_script()</code>方法将进度条下拉到最底部，然后弹出<code>alert</code>提示框。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以说有了这个方法，基本上API没有提供的所有功能都可以用执行JavaScript的方式来实现了。</p>
<h2 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;前面说过，通过<code>page_source</code>属性可以获取网页的源代码，接着就可以使用解析库（如正则表达式、Beautiful Soup、pyquery等）来提取信息了。<br>&nbsp;&nbsp;&nbsp;&nbsp;不过，既然<code>Selenium</code>已经提供了选择节点的方法，返回的是<code>WebElement</code>类型，那么它也有相关的方法和属性来直接提取节点信息，如属性、文本等。这样的话，我们就可以不用通过解析源代码来提取信息了，非常方便。</p>
<h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我们可以使用get_attribute()方法来获取节点的属性，但是其前提是先选中这个节点，示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line">from selenium<span class="selector-class">.webdriver</span> import ActionChains</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></div><div class="line">browser.get(url)</div><div class="line">logo = browser.find_element_by_id(<span class="string">'zh-top-link-logo'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(logo)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(logo.get_attribute(<span class="string">'class'</span>)</span></span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行之后，程序便会驱动浏览器打开知乎页面，然后获取知乎的<code>logo</code>节点，最后打印出它的<code>class</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;控制台的输出结果如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"e08c0f28d7f44d75ccd50df6bb676104"</span>, element=<span class="string">"0.7236390660048155-1"</span>)&gt;</div><div class="line">zu-<span class="attribute">top</span>-link-logo</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;通过<code>get_attribute()</code>方法，然后传入想要获取的属性名，就可以得到它的值了。</p>
<h3 id="获取文本值"><a href="#获取文本值" class="headerlink" title="获取文本值"></a>获取文本值</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;每个<code>WebElement</code>节点都有<code>text</code>属性，直接调用这个属性就可以得到节点内部的文本信息，这相当于<code>Beautiful Soup</code>的<code>get_text()</code>方法、<code>pyquery</code>的<code>text()</code>方法，示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></div><div class="line">browser.get(url)</div><div class="line"><span class="selector-tag">input</span> = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(input.text)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里依然先打开知乎页面，然后获取“提问”按钮这个节点，再将其文本值打印出来。<br>&nbsp;&nbsp;&nbsp;&nbsp;控制台的输出结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">提问</div></pre></td></tr></table></figure></p>
<h3 id="获取id、位置、标签名和大小"><a href="#获取id、位置、标签名和大小" class="headerlink" title="获取id、位置、标签名和大小"></a>获取id、位置、标签名和大小</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;另外，<code>WebElement</code>节点还有一些其他属性，比如id属性可以获取节点<code>id</code>，<code>location</code>属性可以获取该节点在页面中的相对位置，<code>tag_name</code>属性可以获取标签名称，<code>size</code>属性可以获取节点的大小，也就是宽高，这些属性有时候还是很有用的。示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></div><div class="line">browser.get(url)</div><div class="line"><span class="selector-tag">input</span> = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(input.id)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(input.location)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(input.tag_name)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(input.size)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里首先获得“提问”按钮这个节点，然后调用其<code>id</code>、<code>location</code>、<code>tag_name</code>、<code>size</code>属性来获取对应的属性值。</p>
<h2 id="切换Frame"><a href="#切换Frame" class="headerlink" title="切换Frame"></a>切换Frame</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们知道网页中有一种节点叫作<code>iframe</code>，也就是子<code>Frame</code>，相当于页面的子页面，它的结构和外部网页的结构完全一致。<code>Selenium</code>打开页面后，它默认是在父级<code>Frame</code>里面操作，而此时如果页面中还有子<code>Frame</code>，它是不能获取到子<code>Frame</code>里面的节点的。这时就需要使用<code>switch_to.frame()</code>方法来切换<code>Frame</code>。示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line">from selenium import webdriver</div><div class="line">from selenium<span class="selector-class">.common</span><span class="selector-class">.exceptions</span> import NoSuchElementException</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">url = <span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span></div><div class="line">browser.get(url)</div><div class="line">browser<span class="selector-class">.switch_to</span><span class="selector-class">.frame</span>(<span class="string">'iframeResult'</span>)</div><div class="line">try:</div><div class="line">    logo = browser.find_element_by_class_name(<span class="string">'logo'</span>)</div><div class="line">except NoSuchElementException:</div><div class="line">    print(<span class="string">'NO LOGO'</span>)</div><div class="line">browser<span class="selector-class">.switch_to</span><span class="selector-class">.parent_frame</span>()</div><div class="line">logo = browser.find_element_by_class_name(<span class="string">'logo'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(logo)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(logo.text)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;控制台的输出如下:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="literal">NO</span> LOGO</div><div class="line">&lt;selenium.webdriver.remote.webelement.WebElement (<span class="attribute">session</span>=<span class="string">"4bb8ac03ced4ecbdefef03ffdc0e4ccd"</span>, <span class="attribute">element</span>=<span class="string">"0.13792611320464965-2"</span>)&gt;</div><div class="line">RUNOOB.COM</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里还是以前面演示动作链操作的网页为实例，首先通过<code>switch_to.frame()</code>方法切换到子<code>Frame</code>里面，然后尝试获取父级<code>Frame</code>里的<code>logo</code>节点（这是不能找到的），如果找不到的话，就会抛出<code>NoSuchElementException</code>异常，异常被捕捉之后，就会输出<code>NO LOGO</code>。接下来，重新切换回父级<code>Frame</code>，然后再次重新获取节点，发现此时可以成功获取了。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以，当页面中包含子<code>Frame</code>时，如果想获取子<code>Frame</code>中的节点，需要先调用<code>switch_to.frame()</code>方法切换到对应的<code>Frame</code>，然后再进行操作。</p>
<h2 id="延时等待"><a href="#延时等待" class="headerlink" title="延时等待"></a>延时等待</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在<code>Selenium</code>中，<code>get()</code>方法会在网页框架加载结束后结束执行，此时如果获取<code>page_source</code>，可能并不是浏览器完全加载完成的页面，如果某些页面有额外的Ajax请求，我们在网页源代码中也不一定能成功获取到。所以，这里需要延时等待一定时间，确保节点已经加载出来。<br>&nbsp;&nbsp;&nbsp;&nbsp;这里等待的方式有两种：一种是隐式等待，一种是显式等待。</p>
<h3 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;当使用隐式等待执行测试的时候，如果<code>Selenium</code>没有在DOM中找到节点，将继续等待，超出设定时间后，则抛出找不到节点的异常。换句话说，当查找节点而节点并没有立即出现的时候，隐式等待将等待一段时间再查找DOM，默认的时间是0。示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">browser.implicitly_wait(<span class="number">10</span>)</div><div class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</div><div class="line"><span class="selector-tag">input</span> = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(input)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们用<code>implicitly_wait()</code>方法实现了隐式等待。</p>
<h3 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;隐式等待的效果其实并没有那么好，因为我们只规定了一个固定时间，而页面的加载时间会受到网络条件的影响。<br>&nbsp;&nbsp;&nbsp;&nbsp;这里还有一种更合适的显式等待方法，它指定要查找的节点，然后指定一个最长等待时间。如果在规定时间内加载出来了这个节点，就返回查找的节点；如果到了规定时间依然没有加载出该节点，则抛出超时异常。示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line">from selenium<span class="selector-class">.webdriver</span><span class="selector-class">.common</span><span class="selector-class">.by</span> import By</div><div class="line">from selenium<span class="selector-class">.webdriver</span><span class="selector-class">.support</span><span class="selector-class">.ui</span> import WebDriverWait</div><div class="line">from selenium<span class="selector-class">.webdriver</span><span class="selector-class">.support</span> import expected_conditions as EC</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">browser.get(<span class="string">'https://www.taobao.com/'</span>)</div><div class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</div><div class="line"><span class="selector-tag">input</span> = wait.until(EC.presence_of_element_located((By<span class="selector-class">.ID</span>, <span class="string">'q'</span>)))</div><div class="line"><span class="selector-tag">button</span> = wait.until(EC.element_to_be_clickable((By<span class="selector-class">.CSS_SELECTOR</span>, <span class="string">'.btn-search'</span>)))</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(input, button)</span></span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里首先引入<code>WebDriverWait</code>这个对象，指定最长等待时间，然后调用它的<code>until()</code>方法，传入要等待条件<code>expected_conditions</code>。比如，这里传入了<code>presence_of_element_located</code>这个条件，代表节点出现的意思，其参数是节点的定位元组，也就是ID为<code>q</code>的节点搜索框。<br>&nbsp;&nbsp;&nbsp;&nbsp;这样可以做到的效果就是，在10秒内如果ID为<code>q</code>的节点（即搜索框）成功加载出来，就返回该节点；如果超过10秒还没有加载出来，就抛出异常。<br>&nbsp;&nbsp;&nbsp;&nbsp;对于按钮，可以更改一下等待条件，比如改为<code>element_to_be_clickable</code>，也就是可点击，所以查找按钮时查找CSS选择器为<code>.btn-search</code>的按钮，如果10秒内它是可点击的，也就是成功加载出来了，就返回这个按钮节点；如果超过10秒还不可点击，也就是没有加载出来，就抛出异常。<br>&nbsp;&nbsp;&nbsp;&nbsp;运行代码，在网速较佳的情况下是可以成功加载出来的。<br>&nbsp;&nbsp;&nbsp;&nbsp;控制台的输出如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"07dd2fbc2d5b1ce40e82b9754aba8fa8"</span>, element=<span class="string">"0.5642646294074107-1"</span>)&gt;</div><div class="line">&lt;selenium<span class="selector-class">.webdriver</span><span class="selector-class">.remote</span><span class="selector-class">.webelement</span><span class="selector-class">.WebElement</span> (session=<span class="string">"07dd2fbc2d5b1ce40e82b9754aba8fa8"</span>, element=<span class="string">"0.5642646294074107-2"</span>)&gt;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，控制台成功输出了两个节点，它们都是<code>WebElement</code>类型。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果网络有问题，10秒内没有成功加载，那就抛出<code>TimeoutException</code>异常，此时控制台的输出如下:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">TimeoutException Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>)</div><div class="line">&lt;ipython-<span class="keyword">input</span><span class="number">-4</span>-f3d73973b223&gt; <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;()</div><div class="line">      <span class="number">7</span> browser.get(<span class="string">'https://www.taobao.com/'</span>)</div><div class="line">      <span class="number">8</span> <span class="keyword">wait</span> = WebDriverWait(browser, <span class="number">10</span>)</div><div class="line"><span class="comment">----&gt; 9 input = wait.until(EC.presence_of_element_located((By.ID, 'q')))</span></div></pre></td></tr></table></figure></p>
<h2 id="前进和后退"><a href="#前进和后退" class="headerlink" title="前进和后退"></a>前进和后退</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;平常使用浏览器时都有前进和后退功能，<code>Selenium</code>也可以完成这个操作，它使用<code>back()</code>方法后退，使用<code>forward()</code>方法前进。示例如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import <span class="built_in">time</span></div><div class="line"><span class="built_in">from</span> selenium import webdriver</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">browser.<span class="built_in">get</span>(<span class="string">'https://www.baidu.com/'</span>)</div><div class="line">browser.<span class="built_in">get</span>(<span class="string">'https://www.taobao.com/'</span>)</div><div class="line">browser.<span class="built_in">get</span>(<span class="string">'https://www.python.org/'</span>)</div><div class="line">browser.back()</div><div class="line"><span class="built_in">time</span>.sleep(<span class="number">1</span>)</div><div class="line">browser.forward()</div><div class="line">browser.<span class="built_in">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们连续访问3个页面，然后调用<code>back()</code>方法回到第二个页面，接下来再调用<code>forward()</code>方法又可以前进到第三个页面。</p>
<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;使用<code>Selenium</code>，还可以方便地对<code>Cookies</code>进行操作，例如获取、添加、删除<code>Cookies</code>等。示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(browser.get_cookies()</span></span>)</div><div class="line">browser.add_cookie(&#123;<span class="string">'name'</span>: <span class="string">'name'</span>, <span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'value'</span>: <span class="string">'germey'</span>&#125;)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(browser.get_cookies()</span></span>)</div><div class="line">browser.delete_all_cookies()</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(browser.get_cookies()</span></span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;首先，我们访问了知乎。加载完成后，浏览器实际上已经生成<code>Cookies</code>了。接着，调用<code>get_cookies()</code>方法获取所有的<code>Cookies</code>。然后，我们添加一个<code>Cookie</code>，这里传入一个字典，有<code>name</code>、<code>domain</code>和<code>value</code>等内容。接下来，再次获取所有的<code>Cookies</code>。可以发现，结果就多了这一项新加的<code>Cookie</code>。最后，调用<code>delete_all_cookies()</code>方法删除所有的<code>Cookies</code>。再重新获取，发现结果就为空了。<br>&nbsp;&nbsp;&nbsp;&nbsp;控制台的输出如下:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[&#123;<span class="symbol">'secure</span><span class="symbol">':</span> False, <span class="symbol">'value</span><span class="symbol">':</span> '<span class="string">"NGM0ZTM5NDAwMWEyNDQwNDk5ODlkZWY3OTkxY2I0NDY=|1491604091|236e34290a6f407bfbb517888849ea509ac366d0"</span>', <span class="symbol">'domain</span><span class="symbol">':</span> <span class="symbol">'.zhihu.com</span>', <span class="symbol">'path</span><span class="symbol">':</span> <span class="symbol">'/</span>', <span class="symbol">'httpOnly</span><span class="symbol">':</span> False, <span class="symbol">'name</span><span class="symbol">':</span> <span class="symbol">'l_cap_id</span>', <span class="symbol">'expiry</span><span class="symbol">':</span> <span class="number">1494196091.403418</span>&#125;]</div><div class="line">[&#123;<span class="symbol">'secure</span><span class="symbol">':</span> False, <span class="symbol">'value</span><span class="symbol">':</span> <span class="symbol">'germey</span>', <span class="symbol">'domain</span><span class="symbol">':</span> <span class="symbol">'.www.zhihu.com</span>', <span class="symbol">'path</span><span class="symbol">':</span> <span class="symbol">'/</span>', <span class="symbol">'httpOnly</span><span class="symbol">':</span> False, <span class="symbol">'name</span><span class="symbol">':</span> <span class="symbol">'name</span>'&#125;, &#123;<span class="symbol">'secure</span><span class="symbol">':</span> False, <span class="symbol">'value</span><span class="symbol">':</span> '<span class="string">"NGM0ZTM5NDAwMWEyNDQwNDk5ODlkZWY3OTkxY2I0NDY=|1491604091|236e34290a6f407bfbb517888849ea509ac366d0"</span>', <span class="symbol">'domain</span><span class="symbol">':</span> <span class="symbol">'.zhihu.com</span>', <span class="symbol">'path</span><span class="symbol">':</span> <span class="symbol">'/</span>', <span class="symbol">'httpOnly</span><span class="symbol">':</span> False, <span class="symbol">'name</span><span class="symbol">':</span> <span class="symbol">'l_cap_id</span>', <span class="symbol">'expiry</span><span class="symbol">':</span> <span class="number">1494196091.403418</span>&#125;]</div><div class="line">[]</div></pre></td></tr></table></figure></p>
<h2 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在访问网页的时候，会开启一个个选项卡。在<code>Selenium</code>中，我们也可以对选项卡进行操作。示例如下:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line">from selenium import webdriver</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</div><div class="line">browser.execute_script(<span class="string">'window.open()'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(browser.window_handles)</span></span></div><div class="line">browser.switch_to_window(browser<span class="selector-class">.window_handles</span>[<span class="number">1</span>])</div><div class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</div><div class="line"><span class="selector-tag">time</span>.sleep(<span class="number">1</span>)</div><div class="line">browser.switch_to_window(browser<span class="selector-class">.window_handles</span>[<span class="number">0</span>])</div><div class="line">browser.get(<span class="string">'https://python.org'</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;控制台的输出如下:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">['CDwindow<span class="number">-4</span>f58e3a7<span class="number">-7167</span><span class="number">-4587</span>-bedf<span class="number">-9</span>cd8c867f435', 'CDwindow<span class="number">-6e05</span>f076<span class="number">-6</span>d77<span class="number">-453</span>a-a36c<span class="number">-32</span>baacc447df']</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;首先访问了百度，然后调用了<code>execute_script()</code>方法，这里传入<code>window.open()</code>这个<code>JavaScript</code>语句新开启一个选项卡。接下来，我们想切换到该选项卡。这里调用<code>window_handles</code>属性获取当前开启的所有选项卡，返回的是选项卡的代号列表。要想切换选项卡，只需要调用<code>switch_to_window()</code>方法即可，其中参数是选项卡的代号。这里我们将第二个选项卡代号传入，即跳转到第二个选项卡，接下来在第二个选项卡下打开一个新页面，然后切换回第一个选项卡重新调用<code>switch_to_window()</code>方法，再执行其他操作即可。</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在使用<code>Selenium</code>的过程中，难免会遇到一些异常，例如超时、节点未找到等错误，一旦出现此类错误，程序便不会继续运行了。这里我们可以使用<code>try except</code>语句来捕获各种异常。<br>&nbsp;&nbsp;&nbsp;&nbsp;首先，演示一下节点未找到的异常，示例如下:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from selenium <span class="keyword">import</span> webdriver</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line">browser.<span class="built_in">get</span>(<span class="string">'https://www.baidu.com'</span>)</div><div class="line">browser.find_element_by_id(<span class="string">'hello'</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里首先打开百度页面，然后尝试选择一个并不存在的节点，此时就会遇到异常。<br>&nbsp;&nbsp;&nbsp;&nbsp;运行之后控制台的输出如下:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NoSuchElementException Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>)</div><div class="line">&lt;ipython-<span class="keyword">input</span><span class="number">-23</span><span class="number">-978945848</span>a1b&gt; <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;()</div><div class="line">      <span class="number">3</span> browser = webdriver.Chrome()</div><div class="line">      <span class="number">4</span> browser.get(<span class="string">'https://www.baidu.com'</span>)</div><div class="line"><span class="comment">----&gt; 5 browser.find_element_by_id('hello')</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，这里抛出了<code>NoSuchElementException</code>异常，这通常是节点未找到的异常。为了防止程序遇到异常而中断，我们需要捕获这些异常，示例如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException, NoSuchElementException</div><div class="line"> </div><div class="line">browser = webdriver.Chrome()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    browser.get(<span class="string">'https://www.baidu.com'</span>)</div><div class="line"><span class="keyword">except</span> TimeoutException:</div><div class="line">    print(<span class="string">'Time Out'</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    browser.find_element_by_id(<span class="string">'hello'</span>)</div><div class="line"><span class="keyword">except</span> NoSuchElementException:</div><div class="line">    print(<span class="string">'No Element'</span>)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    browser.close()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们使用<code>try except</code>来捕获各类异常。比如，我们对<code>find_element_by_id()</code>查找节点的方法捕获<code>NoSuchElementException</code>异常，这样一旦出现这样的错误，就进行异常处理，程序也不会中断了。<br>&nbsp;&nbsp;&nbsp;&nbsp;控制台的输出如下:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">No</span> <span class="string">Element</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Selenium是一个自动化测试工具，利用它可以驱动浏览器执行特定的动作，如点击、下拉等操作，同时还可以获取浏览器当前呈现的页面的源代码，做到可见即可爬。对于一些JavaScript动态渲染的页面来说，此种抓取方式非常有效。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>分析Ajax爬取头条街拍美图</title>
    <link href="http://www.sanstylemc.cn/2018/04/11/%E5%88%86%E6%9E%90Ajax%E7%88%AC%E5%8F%96%E5%A4%B4%E6%9D%A1%E8%A1%97%E6%8B%8D%E7%BE%8E%E5%9B%BE/"/>
    <id>http://www.sanstylemc.cn/2018/04/11/分析Ajax爬取头条街拍美图/</id>
    <published>2018-04-11T10:36:52.000Z</published>
    <updated>2018-04-12T10:21:40.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="抓取分析"><a href="#抓取分析" class="headerlink" title="抓取分析"></a>抓取分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在抓取之前，首先要分析抓取的逻辑。打开<a href="https://www.toutiao.com/" target="_blank" rel="external">今日头条</a>的首页。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/1.png?raw=true" alt="1"><br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;在右上角的搜索入口处输入”街拍”二字搜索一下。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/2.png?raw=true" alt="2"><br>&nbsp;&nbsp;&nbsp;&nbsp;这时打开开发者工具，查看所有的网络请求。首先，打开第一个网络请求，这个请求的URL就是当前的<a href="https://www.toutiao.com/search/?keyword=%E8%A1%97%E6%8B%8D" target="_blank" rel="external">街拍</a>链接。打开<code>Preview</code>选项卡查看<code>Response Body</code>。如果页面中的内容是根据第一个请求得到的结果渲染出来的，那么第一个请求的源代码中必然会包含页面结果中的文字。为了验证，我们可以尝试搜索一下搜索结果的标题，比如”路人”二字，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/3.png?raw=true" alt="3"><br>&nbsp;&nbsp;&nbsp;&nbsp;我们发现，网页源代码中并没有包含这两个字，搜索匹配结果数目为0。因此，可以初步判断这些内容是由<code>Ajax</code>加载，然后用<code>Javascript</code>渲染出来的。接下来，我们可以切换到<code>XHR</code>过滤选项卡，查看一下有没有<code>Ajax</code>请求。<br>&nbsp;&nbsp;&nbsp;&nbsp;不出所料，此处出现了一个比较常规的<code>Ajax</code>请求，看看它的结果是否包含了页面中的相关数据。<br>&nbsp;&nbsp;&nbsp;&nbsp;点击<code>data</code>字段展开，发现这里有许多条数据。点击第一条展开，可以发现有一个<code>title</code>字段，它的值正好就是页面中第一条数据的标题。再检查一下其他数据，也正好是一一对应的，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/4.png?raw=true" alt="4"><br>&nbsp;&nbsp;&nbsp;&nbsp;这就确定了这些数据确实是由<code>Ajax</code>加载的。<br>&nbsp;&nbsp;&nbsp;&nbsp;我们的目的是要抓取其中的美图，这里一组图就对应前面<code>data</code>字段中的一条数据。每条数据还有一个<code>image_detail</code>字段，它是列表形式，这其中就包含了组图的所有图片列表，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/5.png?raw=true" alt="5"><br>&nbsp;&nbsp;&nbsp;&nbsp;因此，我们只需要将列表中的<code>url</code>字段提取出来并下载下来就好了。每一组图都建立一个文件夹，文件夹的名称就为组图的标题。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，就可以直接用<code>Python</code>来模拟这个<code>Ajax</code>请求，然后提取出相关美图链接并下载。但是在这之前，我们还需要分析一下<code>URL</code>的规律。<br>&nbsp;&nbsp;&nbsp;&nbsp;切换回<code>Headers</code>选项卡，观察一下它的请求<code>URL</code>和<code>Headers</code>信息，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/6.png?raw=true" alt="6"><br>&nbsp;&nbsp;&nbsp;&nbsp;可以看到，这是一个GET请求，请求URL的参数有<code>offset</code>、<code>format</code>、<code>keyword</code>、<code>autoload</code>、<code>count</code>和<code>cur_tab</code>。我们需要找出这些参数的规律，因为这样才可以方便地用程序构造出来。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，可以滑动页面，多加载一些新结果。在加载的同时可以发现，<code>Network</code>中又出现了许多<code>Ajax</code>请求，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/7.png?raw=true" alt="7"><br>&nbsp;&nbsp;&nbsp;&nbsp;这里观察一下后续链接的参数，发现变化的参数只有<code>offset</code>，其他参数都没有变化，而且第二次请求的<code>offset</code>值为20，第三次为40，第四次为60，所以可以发现规律，这个<code>offset</code>值就是偏移量，进而可以推断出<code>count</code>参数就是一次性获取的数据条数。因此，我们可以用<code>offset</code>参数来控制数据分页。这样一来，我们就可以通过接口批量获取数据了，然后将数据解析，将图片下载下来即可。</p>
<h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，实现方法<code>get_page()</code>来加载单个<code>Ajax</code>请求的结果。其中唯一变化的参数就是<code>offset</code>，所以我们将它当作参数传递，实现如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(offset)</span>:</span></div><div class="line">    params = &#123;</div><div class="line">        <span class="string">'offset'</span>: offset,</div><div class="line">        <span class="string">'format'</span>: <span class="string">'json'</span>,</div><div class="line">        <span class="string">'keyword'</span>: <span class="string">'街拍'</span>,</div><div class="line">        <span class="string">'autoload'</span>: <span class="string">'true'</span>,</div><div class="line">        <span class="string">'count'</span>: <span class="string">'20'</span>,</div><div class="line">        <span class="string">'cur_tab'</span>: <span class="string">'1'</span>,</div><div class="line">    &#125;</div><div class="line">    url = <span class="string">'http://www.toutiao.com/search_content/?'</span> + urlencode(params)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        response = requests.get(url)</div><div class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</div><div class="line">            <span class="keyword">return</span> response.json()</div><div class="line">    <span class="keyword">except</span> requests.ConnectionError:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们用<code>urlencode()</code>方法构造请求的GET参数，然后用<code>requests</code>请求这个链接，如果返回状态码为200，则调用<code>response</code>的<code>json()</code>方法将结果转为<code>JSON</code>格式，然后返回。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，再实现一个解析方法：提取每条数据的<code>image_detail</code>字段中的每一张图片链接，将图片链接和图片所属的标题一并返回，此时可以构造一个生成器。实现代码如下:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">def get_images(json):</div><div class="line">    <span class="built_in">if</span> json.<span class="built_in">get</span>(<span class="string">'data'</span>):</div><div class="line">        <span class="built_in">for</span> item in json.<span class="built_in">get</span>(<span class="string">'data'</span>):</div><div class="line">            title = item.<span class="built_in">get</span>(<span class="string">'title'</span>)</div><div class="line">            images = item.<span class="built_in">get</span>(<span class="string">'image_detail'</span>)</div><div class="line">            <span class="built_in">for</span> <span class="built_in">image</span> in images:</div><div class="line">                <span class="built_in">yield</span> &#123;</div><div class="line">                    <span class="string">'image'</span>: <span class="built_in">image</span>.<span class="built_in">get</span>(<span class="string">'url'</span>),</div><div class="line">                    <span class="string">'title'</span>: title</div><div class="line">                &#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;接下来，实现一个保存图片的方法<code>save_image()</code>，其中<code>item</code>就是前面<code>get_images()</code>方法返回的一个字典。在该方法中，首先根据<code>item</code>的<code>title</code>来创建文件夹，然后请求这个图片链接，获取图片的二进制数据，以二进制的形式写入文件。图片的名称可以使用其内容的MD5值，这样可以去除重复。相关代码如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line"><span class="built_in">from</span> hashlib import md5</div><div class="line"> </div><div class="line">def save_image(<span class="keyword">item</span>):</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="keyword">item</span>.<span class="built_in">get</span>(<span class="string">'title'</span>)):</div><div class="line">        os.mkdir(<span class="keyword">item</span>.<span class="built_in">get</span>(<span class="string">'title'</span>))</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        response = requests.<span class="built_in">get</span>(<span class="keyword">item</span>.<span class="built_in">get</span>(<span class="string">'image'</span>))</div><div class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</div><div class="line">            file_path = <span class="string">'&#123;0&#125;/&#123;1&#125;.&#123;2&#125;'</span>.<span class="built_in">format</span>(<span class="keyword">item</span>.<span class="built_in">get</span>(<span class="string">'title'</span>), md5(response.content).hexdigest(), <span class="string">'jpg'</span>)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</div><div class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">                    f.<span class="built_in">write</span>(response.content)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">'Already Downloaded'</span>, file_path)</div><div class="line">    except requests.ConnectionError:</div><div class="line">        print(<span class="string">'Failed to Save Image'</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;最后，只需要构造一个<code>offset</code>数组，遍历<code>offset</code>，提取图片链接，并将其下载即可:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">from</span> multiprocessing.pool import Pool</div><div class="line"> </div><div class="line">def main(<span class="built_in">offset</span>):</div><div class="line">    json = get_page(<span class="built_in">offset</span>)</div><div class="line">    <span class="keyword">for</span> <span class="keyword">item</span> <span class="keyword">in</span> get_images(json):</div><div class="line">        print(<span class="keyword">item</span>)</div><div class="line">        save_image(<span class="keyword">item</span>)</div><div class="line"> </div><div class="line"> </div><div class="line">GROUP_START = <span class="number">1</span></div><div class="line">GROUP_END = <span class="number">20</span></div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pool = Pool()</div><div class="line">    groups = ([x * <span class="number">20</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(GROUP_START, GROUP_END + <span class="number">1</span>)])</div><div class="line">    pool.map(main, groups)</div><div class="line">    pool.<span class="built_in">close</span>()</div><div class="line">    pool.join()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里定义了分页的起始页数和终止页数，分别为<code>GROUP_START</code>和<code>GROUP_END</code>，还利用了多线程的线程池，调用其<code>map()</code>方法实现多线程下载。<br>&nbsp;&nbsp;&nbsp;&nbsp;这样整个程序就完成了，运行之后可以发现街拍美图都分文件夹保存下来了，如图所示。<br><img src="https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/8.png?raw=true" alt="8"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;抓取分析&quot;&gt;&lt;a href=&quot;#抓取分析&quot; class=&quot;headerlink&quot; title=&quot;抓取分析&quot;&gt;&lt;/a&gt;抓取分析&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在抓取之前，首先要分析抓取的逻辑。打开&lt;a href=&quot;https://www.toutiao.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;今日头条&lt;/a&gt;的首页。&lt;br&gt;&lt;img src=&quot;https://github.com/sunstady/hexo/blob/master/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1/1.png?raw=true&quot; alt=&quot;1&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL存储</title>
    <link href="http://www.sanstylemc.cn/2018/04/11/MySQL%E5%AD%98%E5%82%A8/"/>
    <id>http://www.sanstylemc.cn/2018/04/11/MySQL存储/</id>
    <published>2018-04-11T05:03:18.000Z</published>
    <updated>2018-04-11T05:04:04.184Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;在Python 2中，连接MySQL的库大多是使用MySQLdb，但是此库的官方并不支持Python 3，所以这里使用的库是PyMySQL。<br><a id="more"></a></p>
<h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> PyMySQL</div></pre></td></tr></table></figure>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;首先尝试连接一下数据库。假设当前的MySQL运行在本地，用户名为<code>root</code>，密码为<code>123123</code>，运行端口为<code>3306</code>。这里利用<code>PyMySQL</code>先连接<code>MySQL</code>，然后创建一个新的数据库，名字叫作<code>spiders</code>，代码如下:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"> </div><div class="line">db = pymysql.<span class="built_in">connect</span>(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>, password=<span class="string">'123123'</span>, port=<span class="number">3306</span>)</div><div class="line"><span class="built_in">cursor</span> = db.<span class="built_in">cursor</span>()</div><div class="line"><span class="built_in">cursor</span>.execute(<span class="string">'SELECT VERSION()'</span>)</div><div class="line">data = <span class="built_in">cursor</span>.fetchone()</div><div class="line"><span class="built_in">print</span>(<span class="string">'Database version:'</span>, data)</div><div class="line"><span class="built_in">cursor</span>.execute(<span class="string">"CREATE DATABASE spiders DEFAULT CHARACTER SET utf8"</span>)</div><div class="line">db.<span class="built_in">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Database <span class="string">version:</span> (<span class="string">'5.5.53'</span>,)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里通过<code>PyMySQL</code>的<code>connect()</code>方法声明一个<code>MySQL</code>连接对象<code>db</code>，此时需要传入<code>MySQL</code>运行的<code>host</code>（即IP）。由于<code>MySQL</code>在本地运行，所以传入的是<code>localhost</code>。如果<code>MySQL</code>在远程运行，则传入其公网<code>IP</code>地址。后续的参数<code>user</code>即用户名，<code>password</code>即密码，<code>port</code>即端口（默认为3306）。<br>&nbsp;&nbsp;&nbsp;&nbsp;连接成功后，需要再调用<code>cursor()</code>方法获得<code>MySQL</code>的操作游标，利用游标来执行<code>SQL</code>语句。这里我们执行了两句<code>SQL</code>，直接用<code>execute()</code>方法执行即可。第一句<code>SQL</code>用于获得<code>MySQL</code>的当前版本，然后调用<code>fetchone()</code>方法获得第一条数据，也就得到了版本号。第二句<code>SQL</code>执行创建数据库的操作，数据库名叫作<code>spiders</code>，默认编码为<code>UTF-8</code>。由于该语句不是查询语句，所以直接执行后就成功创建了数据库<code>spiders</code>。接着，再利用这个数据库进行后续的操作。</p>
<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;一般来说，创建数据库的操作只需要执行一次就好了。当然，我们也可以手动创建数据库。以后，我们的操作都在spiders数据库上执行。<br>&nbsp;&nbsp;&nbsp;&nbsp;创建数据库后，在连接时需要额外指定一个参数<code>db</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，新创建一个数据表<code>students</code>，此时执行创建表的<code>SQL</code>语句即可。这里指定3个字段，结构如表所示。</p>
<table>
<thead>
<tr>
<th style="text-align:center">字段名</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>id</code></td>
<td style="text-align:center">学号</td>
<td style="text-align:center"><code>varchar</code></td>
</tr>
<tr>
<td style="text-align:center"><code>name</code></td>
<td style="text-align:center">姓名</td>
<td style="text-align:center"><code>varchar</code></td>
</tr>
<tr>
<td style="text-align:center"><code>age</code></td>
<td style="text-align:center">年龄</td>
<td style="text-align:center"><code>int</code></td>
</tr>
</tbody>
</table>
<p>&nbsp;&nbsp;&nbsp;&nbsp;创建该表的示例代码如下:<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"> </div><div class="line"><span class="title">db</span> = pymysql.connect(host='localhost', user='root', password='<span class="number">123123</span>', <span class="keyword">port</span>=3306, db='spiders')</div><div class="line">cursor = db.cursor()</div><div class="line">sql = 'CREATE TABLE IF NOT EXISTS students (id <span class="type">VARCHAR(255)</span> <span class="type">NOT</span> <span class="type">NULL</span>, name <span class="type">VARCHAR(255)</span> <span class="type">NOT</span> <span class="type">NULL</span>, age <span class="type">INT</span> <span class="type">NOT</span> <span class="type">NULL</span>, <span class="type">PRIMARY</span> <span class="type">KEY</span> (id))'</div><div class="line">cursor.execute(sql)</div><div class="line">db.close()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行之后，我们便创建了一个名为<code>students</code>的数据表。</p>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;下一步就是向数据库中插入数据了。例如，这里爬取了一个学生信息，学号为<code>20120001</code>，名字为<code>Bob</code>，年龄为<code>20</code>，那么如何将该条数据插入数据库呢？示例代码如下:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"> </div><div class="line">id = <span class="string">'20120001'</span></div><div class="line">user = <span class="string">'Bob'</span></div><div class="line">age = <span class="number">20</span></div><div class="line"> </div><div class="line">db = pymysql.<span class="built_in">connect</span>(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'123123'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</div><div class="line"><span class="built_in">cursor</span> = db.<span class="built_in">cursor</span>()</div><div class="line">sql = <span class="string">'INSERT INTO students(id, name, age) values(%s, %s, %s)'</span></div><div class="line"><span class="built_in">try</span>:</div><div class="line">    <span class="built_in">cursor</span>.execute(sql, (id, user, age))</div><div class="line">    db.commit()</div><div class="line">except:</div><div class="line">    db.rollback()</div><div class="line">db.<span class="built_in">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里首先构造了一个<code>SQL</code>语句，其<code>Value</code>值没有用字符串拼接的方式来构造，如:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sql = '<span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(<span class="keyword">id</span>, <span class="keyword">name</span>, age) <span class="keyword">values</span>(<span class="string">' + id + '</span>, <span class="string">' + name + '</span>, <span class="string">' + age + '</span>)<span class="string">'</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样的写法烦琐而且不直观，所以我们选择直接用格式化符<code>%s</code>来实现。有几个<code>Value</code>写几个<code>%s</code>，我们只需要在<code>execute()</code>方法的第一个参数传入该<code>SQL</code>语句，<code>Value</code>值用统一的元组传过来就好了。这样的写法既可以避免字符串拼接的麻烦，又可以避免引号冲突的问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;之后值得注意的是，需要执行<code>db</code>对象的<code>commit()</code>方法才可实现数据插入，这个方法才是真正将语句提交到数据库执行的方法。对于数据插入、更新、删除操作，都需要调用该方法才能生效。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，我们加了一层异常处理。如果执行失败，则调用<code>rollback()</code>执行数据回滚，相当于什么都没有发生过。<br>&nbsp;&nbsp;&nbsp;&nbsp;这里涉及事务的问题。事务机制可以确保数据的一致性，也就是这件事要么发生了，要么没有发生。比如插入一条数据，不会存在插入一半的情况，要么全部插入，要么都不插入，这就是事务的原子性。另外，事务还有3个属性——一致性、隔离性和持久性。这4个属性通常称为<code>ACID</code>特性，具体如表所示。事务详情可看<a href="https://sanstylemc.cn/2018/04/01/MySQL%E4%BA%8B%E5%8A%A1%E5%8F%8A%E5%85%B6%E5%9B%9B%E4%B8%AA%E7%89%B9%E6%80%A7/" target="_blank" rel="external">此博文</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>原子性(atomicity)</code></td>
<td style="text-align:center">事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做</td>
</tr>
<tr>
<td style="text-align:center"><code>一致性（consistency）</code></td>
<td style="text-align:center">事务必须使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的</td>
</tr>
<tr>
<td style="text-align:center"><code>隔离性（isolation）</code></td>
<td style="text-align:center">一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰</td>
</tr>
<tr>
<td style="text-align:center"><code>持久性（durability）</code></td>
<td style="text-align:center">持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响</td>
</tr>
</tbody>
</table>
<p>&nbsp;&nbsp;&nbsp;&nbsp;插入、更新和删除操作都是对数据库进行更改的操作，而更改操作都必须为一个事务，所以这些操作的标准写法就是:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql)</div><div class="line">    db.commit()</div><div class="line">excep<span class="variable">t:</span></div><div class="line">    db.rollback()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样便可以保证数据的一致性。这里的commit()和rollback()方法就为事务的实现提供了支持。<br>&nbsp;&nbsp;&nbsp;&nbsp;上面数据插入的操作是通过构造SQL语句实现的，但是很明显，这有一个极其不方便的地方，比如突然增加了性别字段gender，此时SQL语句就需要改成:<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT INTO students(id, name, age, gender) <span class="built_in">values</span>(<span class="built_in">%s</span>, <span class="built_in">%s</span>, <span class="built_in">%s</span>, <span class="built_in">%s</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;相应的元组参数则需要改成:<br><figure class="highlight hy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">id</span></span>, name, age, gender)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这显然不是我们想要的。在很多情况下，我们要达到的效果是插入方法无需改动，做成一个通用方法，只需要传入一个动态变化的字典就好了。比如，构造这样一个字典:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    'id': '<span class="number">20120001</span>',</div><div class="line">    'name': 'Bob',</div><div class="line">    'age': <span class="number">20</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;然后<code>SQL</code>语句会根据字典动态构造，元组也动态构造，这样才能实现通用的插入方法。所以，这里我们需要改写一下插入方法:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">data = &#123;</div><div class="line">    <span class="string">'id'</span>: <span class="string">'20120001'</span>,</div><div class="line">    <span class="string">'name'</span>: <span class="string">'Bob'</span>,</div><div class="line">    <span class="string">'age'</span>: <span class="number">20</span></div><div class="line">&#125;</div><div class="line">table = <span class="string">'students'</span></div><div class="line"><span class="built_in">keys</span> = <span class="string">', '</span>.<span class="keyword">join</span>(data.<span class="built_in">keys</span>())</div><div class="line"><span class="built_in">values</span> = <span class="string">', '</span>.<span class="keyword">join</span>([<span class="string">'%s'</span>] * <span class="built_in">len</span>(data))</div><div class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;)'</span>.format(table=table, <span class="built_in">keys</span>=<span class="built_in">keys</span>, <span class="built_in">values</span>=<span class="built_in">values</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">   <span class="keyword">if</span> <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql, tuple(data.<span class="built_in">values</span>())):</div><div class="line">       <span class="keyword">print</span>(<span class="string">'Successful'</span>)</div><div class="line">       db.commit()</div><div class="line">excep<span class="variable">t:</span></div><div class="line">    <span class="keyword">print</span>(<span class="string">'Failed'</span>)</div><div class="line">    db.rollback()</div><div class="line">db.<span class="keyword">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们传入的数据是字典，并将其定义为<code>data</code>变量。表名也定义成变量<code>table</code>。接下来，就需要构造一个动态的<code>SQL</code>语句了。<br>&nbsp;&nbsp;&nbsp;&nbsp;首先，需要构造插入的字段<code>id</code>、<code>name</code>和<code>age</code>。这里只需要将<code>data</code>的键名拿过来，然后用逗号分隔即可。所以<code>&#39;, &#39;.join(data.keys())</code>的结果就是<code>id</code>, <code>name</code>, <code>age</code>，然后需要构造多个<code>%s</code>当作占位符，有几个字段构造几个即可。比如，这里有三个字段，就需要构造<code>%s</code>, <code>%s</code>, <code>%s</code>。这里首先定义了长度为<code>1</code>的数组<code>[&#39;%s&#39;]</code>，然后用乘法将其扩充为<code>[&#39;%s&#39;, &#39;%s&#39;, &#39;%s&#39;]</code>，再调用<code>join()</code>方法，最终变成<code>%s, %s, %s</code>。最后，我们再利用字符串的<code>format()</code>方法将表名、字段名和占位符构造出来。最终的<code>SQL</code>语句就被动态构造成了:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(<span class="keyword">id</span>, <span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (%s, %s, %s)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;最后，为<code>execute()</code>方法的第一个参数传入<code>sql</code>变量，第二个参数传入<code>data</code>的键值构造的元组，就可以成功插入数据了。<br>&nbsp;&nbsp;&nbsp;&nbsp;如此以来，我们便实现了传入一个字典来插入数据的方法，不需要再去修改SQL语句和插入操作了。</p>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;数据更新操作实际上也是执行SQL语句，最简单的方式就是构造一个SQL语句，然后执行:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">'UPDATE students SET age = %s WHERE name = %s'</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">   <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql, (<span class="number">25</span>, <span class="string">'Bob'</span>))</div><div class="line">   db.commit()</div><div class="line">excep<span class="variable">t:</span></div><div class="line">   db.rollback()</div><div class="line">db.<span class="keyword">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里同样用占位符的方式构造SQL，然后执行<code>execute()</code>方法，传入元组形式的参数，同样执行<code>commit()</code>方法执行操作。如果要做简单的数据更新的话，完全可以使用此方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;但是在实际的数据抓取过程中，大部分情况下需要插入数据，但是我们关心的是会不会出现重复数据，如果出现了，我们希望更新数据而不是重复保存一次。另外，就像前面所说的动态构造SQL的问题，所以这里可以再实现一种去重的方法，如果数据存在，则更新数据；如果数据不存在，则插入数据。另外，这种做法支持灵活的字典传值。示例如下:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">data = &#123;</div><div class="line">    <span class="string">'id'</span>: <span class="string">'20120001'</span>,</div><div class="line">    <span class="string">'name'</span>: <span class="string">'Bob'</span>,</div><div class="line">    <span class="string">'age'</span>: <span class="number">21</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line">table = <span class="string">'students'</span></div><div class="line"><span class="built_in">keys</span> = <span class="string">', '</span>.<span class="keyword">join</span>(data.<span class="built_in">keys</span>())</div><div class="line"><span class="built_in">values</span> = <span class="string">', '</span>.<span class="keyword">join</span>([<span class="string">'%s'</span>] * <span class="built_in">len</span>(data))</div><div class="line"> </div><div class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;) ON DUPLICATE KEY UPDATE'</span>.format(table=table, <span class="built_in">keys</span>=<span class="built_in">keys</span>, <span class="built_in">values</span>=<span class="built_in">values</span>)</div><div class="line"><span class="keyword">update</span> = <span class="string">','</span>.<span class="keyword">join</span>([<span class="string">" &#123;key&#125; = %s"</span>.format(key=key) <span class="keyword">for</span> key in data])</div><div class="line">sql += <span class="keyword">update</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">if</span> <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql, tuple(data.<span class="built_in">values</span>())*<span class="number">2</span>):</div><div class="line">        <span class="keyword">print</span>(<span class="string">'Successful'</span>)</div><div class="line">        db.commit()</div><div class="line">excep<span class="variable">t:</span></div><div class="line">    <span class="keyword">print</span>(<span class="string">'Failed'</span>)</div><div class="line">    db.rollback()</div><div class="line">db.<span class="keyword">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里构造的SQL语句其实是插入语句，但是我们在后面加了<code>ON DUPLICATE KEY UPDATE</code>。这行代码的意思是如果主键已经存在，就执行更新操作。比如，我们传入的数据<code>id</code>仍然为<code>20120001</code>，但是年龄有所变化，由<code>20</code>变成了<code>21</code>，此时这条数据不会被插入，而是直接更新<code>id</code>为<code>20120001</code>的数据。完整的SQL构造出来是这样的:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students(<span class="keyword">id</span>, <span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (%s, %s, %s) <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> <span class="keyword">id</span> = %s, <span class="keyword">name</span> = %s, age = %s</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里就变成了6个<code>%s</code>。所以在后面的<code>execute()</code>方法的第二个参数元组就需要乘以2变成原来的2倍。<br>&nbsp;&nbsp;&nbsp;&nbsp;如此一来，我们就可以实现主键不存在便插入数据，存在则更新数据的功能了。</p>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;删除操作相对简单，直接使用<code>DELETE</code>语句即可，只是需要指定要删除的目标表名和删除条件，而且仍然需要使用<code>db</code>的<code>commit()</code>方法才能生效。示例如下:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">table</span> = <span class="string">'students'</span></div><div class="line">condition = <span class="string">'age &gt; 20'</span></div><div class="line"> </div><div class="line">sql = <span class="string">'DELETE FROM  &#123;table&#125; WHERE &#123;condition&#125;'</span>.<span class="built_in">format</span>(<span class="built_in">table</span>=<span class="built_in">table</span>, condition=condition)</div><div class="line">try:</div><div class="line">    cursor.<span class="built_in">execute</span>(sql)</div><div class="line">    db.commit()</div><div class="line">except:</div><div class="line">    db.rollback()</div><div class="line"> </div><div class="line">db.<span class="built_in">close</span>()</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;因为删除条件有多种多样，运算符有<code>大于</code>、<code>小于</code>、<code>等于</code>、<code>LIKE</code>等，条件连接符有<code>AND</code>、<code>OR</code>等，所以不再继续构造复杂的判断条件。这里直接将条件当作字符串来传递，以实现删除操作。</p>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;说完插入、修改和删除等操作，还剩下非常重要的一个操作，那就是查询。查询会用到<code>SELECT</code>语句，示例如下:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">'SELECT * FROM students WHERE age &gt;= 20'</span></div><div class="line"> </div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql)</div><div class="line">    <span class="keyword">print</span>(<span class="string">'Count:'</span>, <span class="built_in">cursor</span>.rowcount)</div><div class="line">    one = <span class="built_in">cursor</span>.fetchone()</div><div class="line">    <span class="keyword">print</span>(<span class="string">'One:'</span>, one)</div><div class="line">    results = <span class="built_in">cursor</span>.fetchall()</div><div class="line">    <span class="keyword">print</span>(<span class="string">'Results:'</span>, results)</div><div class="line">    <span class="keyword">print</span>(<span class="string">'Results Type:'</span>, <span class="built_in">type</span>(results))</div><div class="line">    <span class="keyword">for</span> row in result<span class="variable">s:</span></div><div class="line">        <span class="keyword">print</span>(row)</div><div class="line">excep<span class="variable">t:</span></div><div class="line">    <span class="keyword">print</span>(<span class="string">'Error'</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Count: <span class="number">4</span></div><div class="line">One: ('<span class="number">20120001</span>', 'Bob', <span class="number">25</span>)</div><div class="line">Results: (('<span class="number">20120011</span>', 'Mary', <span class="number">21</span>), ('<span class="number">20120012</span>', 'Mike', <span class="number">20</span>), ('<span class="number">20120013</span>', 'James', <span class="number">22</span>))</div><div class="line">Results Type: &lt;class 'tuple'&gt;</div><div class="line">('<span class="number">20120011</span>', 'Mary', <span class="number">21</span>)</div><div class="line">('<span class="number">20120012</span>', 'Mike', <span class="number">20</span>)</div><div class="line">('<span class="number">20120013</span>', 'James', <span class="number">22</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这里我们构造了一条SQL语句，将年龄<code>20</code>岁及以上的学生查询出来，然后将其传给<code>execute()</code>方法。注意，这里不再需要<code>db</code>的<code>commit()</code>方法。接着，调用<code>cursor</code>的<code>rowcount</code>属性获取查询结果的条数，当前示例中是4条。<br>&nbsp;&nbsp;&nbsp;&nbsp;然后我们调用了<code>fetchone()</code>方法，这个方法可以获取结果的第一条数据，返回结果是元组形式，元组的元素顺序跟字段一一对应，即第一个元素就是第一个字段<code>id</code>，第二个元素就是第二个字段<code>name</code>，以此类推。随后，我们又调用了<code>fetchall()</code>方法，它可以得到结果的所有数据。然后将其结果和类型打印出来，它是二重元组，每个元素都是一条记录，我们将其遍历输出出来。<br>&nbsp;&nbsp;&nbsp;&nbsp;但是这里需要注意一个问题，这里显示的是3条数据而不是4条，<code>fetchall()</code>方法不是获取所有数据吗？这是因为它的内部实现有一个偏移指针用来指向查询结果，最开始偏移指针指向第一条数据，取一次之后，指针偏移到下一条数据，这样再取的话，就会取到下一条数据了。我们最初调用了一次<code>fetchone()</code>方法，这样结果的偏移指针就指向下一条数据，<code>fetchall()</code>方法返回的是偏移指针指向的数据一直到结束的所有数据，所以该方法获取的结果就只剩3个了。<br>&nbsp;&nbsp;&nbsp;&nbsp;此外，我们还可以用<code>while</code>循环加<code>fetchone()</code>方法来获取所有数据，而不是用<code>fetchall()</code>全部一起获取出来。<code>fetchall()</code>会将结果以元组形式全部返回，如果数据量很大，那么占用的开销会非常高。因此，推荐使用如下方法来逐条取数据:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sql = <span class="string">'SELECT * FROM students WHERE age &gt;= 20'</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql)</div><div class="line">    <span class="keyword">print</span>(<span class="string">'Count:'</span>, <span class="built_in">cursor</span>.rowcount)</div><div class="line">    row = <span class="built_in">cursor</span>.fetchone()</div><div class="line">    <span class="keyword">while</span> ro<span class="variable">w:</span></div><div class="line">        <span class="keyword">print</span>(<span class="string">'Row:'</span>, row)</div><div class="line">        row = <span class="built_in">cursor</span>.fetchone()</div><div class="line">excep<span class="variable">t:</span></div><div class="line">    <span class="keyword">print</span>(<span class="string">'Error'</span>)</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这样每循环一次，指针就会偏移一条数据，随用随取，简单高效。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在Python 2中，连接MySQL的库大多是使用MySQLdb，但是此库的官方并不支持Python 3，所以这里使用的库是PyMySQL。&lt;br&gt;
    
    </summary>
    
    
      <category term="存储" scheme="http://www.sanstylemc.cn/tags/%E5%AD%98%E5%82%A8/"/>
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
</feed>
