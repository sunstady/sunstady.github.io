<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sanstyle</title>
  <subtitle>功有所不全 才有所不任 力有所不足</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sanstylemc.cn/"/>
  <updated>2018-07-25T02:02:10.010Z</updated>
  <id>http://www.sanstylemc.cn/</id>
  
  <author>
    <name>MC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>触发器</title>
    <link href="http://www.sanstylemc.cn/2018/07/25/%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <id>http://www.sanstylemc.cn/2018/07/25/触发器/</id>
    <published>2018-07-25T02:01:33.000Z</published>
    <updated>2018-07-25T02:02:10.010Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;触发器是与表有关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性。<br><a id="more"></a></p>
<h2 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h2><p>创建触发器的语法如下:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name trigger_time trigger_event <span class="keyword">ON</span> tb_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> trigger_stmt</div><div class="line">trigger_name：触发器的名称</div><div class="line">tirgger_time：触发时机，为<span class="keyword">BEFORE</span>或者<span class="keyword">AFTER</span></div><div class="line">trigger_event：触发事件，为<span class="keyword">INSERT</span>、<span class="keyword">DELETE</span>或者<span class="keyword">UPDATE</span></div><div class="line">tb_name：表示建立触发器的表明，就是在哪张表上建立触发器</div><div class="line">trigger_stmt：触发器的程序体，可以是一条<span class="keyword">SQL</span>语句或者是用<span class="keyword">BEGIN</span>和<span class="keyword">END</span>包含的多条语句</div><div class="line">所以可以说MySQL创建以下六种触发器：</div><div class="line"><span class="keyword">BEFORE</span> <span class="keyword">INSERT</span>,<span class="keyword">BEFORE</span> <span class="keyword">DELETE</span>,<span class="keyword">BEFORE</span> <span class="keyword">UPDATE</span></div><div class="line"><span class="keyword">AFTER</span> <span class="keyword">INSERT</span>,<span class="keyword">AFTER</span> <span class="keyword">DELETE</span>,<span class="keyword">AFTER</span> <span class="keyword">UPDATE</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;其中，触发器名参数指要创建的触发器的名字。<br>&nbsp;&nbsp;&nbsp;&nbsp;对同一个表相同触发时间的相同触发事件，只能定义一个触发器。<br>&nbsp;&nbsp;&nbsp;&nbsp;触发器只能创建在永久表上，不能对临时表创建触发器。</p>
<p>创建有多个执行语句的触发器<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> 触发器名 <span class="keyword">BEFORE</span>|<span class="keyword">AFTER</span> 触发事件</div><div class="line"><span class="keyword">ON</span> 表名 <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    执行语句列表</div><div class="line"><span class="keyword">END</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;其中，BEGIN与END之间的执行语句列表参数表示需要执行的多个语句，不同语句用分号隔开。</p>
<blockquote>
<p>tips: 一般情况下，MySQL默认是以 ; 作为结束执行语句，与触发器中需要的分行起冲突。为解决此问题可用DELIMITER，如：DELIMITER ||, 可以将结束符号变成 || 。当触发器创建完成后，可以用DELIMITER; 来将结束符变成 ; 。</p>
</blockquote>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mysql&gt; DELIMITER ||</div><div class="line">mysql&gt; CREATE TRIGGER demo BEFORE DELETE</div><div class="line">    -<span class="ruby">&gt; ON users FOR EACH ROW</span></div><div class="line"><span class="ruby">    -&gt; <span class="keyword">BEGIN</span></span></div><div class="line"><span class="ruby">    -&gt; INSERT INTO logs VALUES(NOW());</span></div><div class="line"><span class="ruby">    -&gt; INSERT INTO logs VALUES(NOW());</span></div><div class="line"><span class="ruby">    -&gt; <span class="keyword">END</span></span></div><div class="line"><span class="ruby">    -&gt; <span class="params">||</span></span></div><div class="line"><span class="ruby">Query OK, <span class="number">0</span> rows affected (<span class="number">0</span>.<span class="number">06</span> sec)</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby">mysql&gt; DELIMITER ;</span></div></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;上面的语句中，开头将结束符号定义为||，中间定义一个触发器，一旦有满足条件的删除操作，就会执行BEGIN和END中的语句，接着用||结束。最后使用DELIMITER ; 将结束符号还原。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>现有表如下：<br>用户users表<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">create table users(</div><div class="line">id int(11) unsigned <span class="keyword">not</span> <span class="literal">null</span> auto_increment;</div><div class="line">name varchar(255)<span class="built_in"> default </span><span class="literal">null</span>,</div><div class="line">add_time int(11)<span class="built_in"> default </span><span class="literal">null</span>,</div><div class="line">primary key(id),</div><div class="line">key name(name(250)) using btree</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>日志logs表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">logs</span>(</div><div class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment;</div><div class="line">log varchar(255) default null <span class="keyword">comment</span> <span class="string">'日志说明'</span>,</div><div class="line">primary <span class="keyword">key</span>(<span class="keyword">id</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;需求是：当在users中插入一条数据，就会在logs中生成一条日志信息。<br>创建触发器：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DELIMITER $</div><div class="line">CREATE TRIGGER user_log AFTER INSERT ON<span class="built_in"> users </span><span class="keyword">FOR</span> EACH ROW</div><div class="line">BEGIN</div><div class="line">DECLARE s1 VARCHAR(40) character <span class="builtin-name">set</span> utf8;</div><div class="line">DECLARE s2 VARCHAR(20) character <span class="builtin-name">set</span> utf8;#后面发现中文字符编码出现乱码，这里设置字符集</div><div class="line"><span class="builtin-name">SET</span> s2 = <span class="string">" is created"</span>;</div><div class="line"><span class="builtin-name">SET</span> s1 = CONCAT(NEW.name,s2);     #函数CONCAT可以将字符串连接</div><div class="line">INSERT INTO logs(log) values(s1);</div><div class="line">END $</div><div class="line">DELIMITER ;</div></pre></td></tr></table></figure></p>
<h2 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h2><p>show triggers语句查看触发器信息。</p>
<blockquote>
<p>show triggers无法查询指定的触发器。</p>
</blockquote>
<p>在triggers表中查看触发器信息<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.triggers;</div></pre></td></tr></table></figure></p>
<p>同时该方法可以查询制定触发器的详细信息<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.triggers <span class="keyword">where</span> trigger_name= <span class="string">'user_log'</span>;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>tips: 所有的触发器信息都存储在information_schema数据库下的triggers表中，可以使用select语句查询，如果触发器信息过多，最好通过t字段指定查询。</p>
</blockquote>
<h2 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;一次可以删除一个触发程序，如果没有指定schema_name, 默认为当前数据库，具体语法如下:<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [schema_name.] trigger_name;</div></pre></td></tr></table></figure></p>
<p>例如，要删除users表上的触发器user_log，可以使用如下命令:<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> user_log;</div></pre></td></tr></table></figure></p>
<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;触发器会有以下两种限制：<br>1、触发程序不能调用将数据返回客户端的存储程序，也不能使用采用CALL语句的动态SQL语句，但是允许存储程序通过参数将数据返回触发程序，也就是存储过程或者函数通过OUT或者INOUT类型的参数将数据返回触发器是可以的，但是不能调用直接返回数据的过程。<br>2、不能在触发器中使用以显示或隐藏方式开始或结束事务的语句，如STAERT TRANS-ACTION,COMMIT或ROLLBACK。<br>&nbsp;&nbsp;&nbsp;&nbsp;注意事项：MySQL的触发器是按照BEFORE触发器、行操作、AFTER触发器是顺序执行的，其中任何一步发生错误都不会继续执行剩下的操作，如果对事务表进行的操作，如果出现错误，那么将会被回滚，如果是对非事务表进行操作，那么就无法回滚了，数据可能会出错。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;触发器是基于行触发的，所以删除、新增或者修改操作可能都会激活触发器，所以不要编写过于复杂的触发器，也不要增加过得的触发器，这样会对数据的插入、修改或者删除带来比较严重的影响，同时也会带来可移植性差的后果，所以在设计触发器的时候一定要有所考虑。<br>&nbsp;&nbsp;&nbsp;&nbsp;触发器是一种特殊的存储过程，它在插入，删除或修改特定表中的数据时触发执行，它比数据库本身标准的功能有更精细和更复杂的数据控制能力。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;数据库触发器有以下的作用：<br>1、安全性。可以基于数据库的值使用户具有操作数据库的某种权利。</p>
<ul>
<li>可以基于时间限制用户的操作，例如不允许下班后和节假日修改数据库数据。</li>
<li>可以基于数据库中的数据限制用户的操作，例如不允许股票的价格的升幅一次超过10%。</li>
</ul>
<p>2、审计。可以跟踪用户对数据库的操作。</p>
<ul>
<li>审计用户操作数据库的语句</li>
<li>把用户对数据库的更新写入审计表</li>
</ul>
<p>3、实现复杂的数据完整性规则。</p>
<ul>
<li>实现非标准的数据完整性检查和约束。触发器可产生比规则更为复杂的限制。与规则不同，触发器可以引用列或数据库对象，例如，触发器可回退任何企图吃进超过自己保证金的期货。</li>
</ul>
<p>4、实现复杂的非标准的数据库相关完整性规则。触发器可以对数据库中相关的表进行连环更新。例如，在auths表author_code列上的删除触发器可导致相应删除在其它表中的与之匹配的行。</p>
<p>5、同步实时地复制表中的数据。</p>
<p>6、自动计算数据值，如果数据的值达到了一定的要求，则进行特定的处理。例如，如果公司的账号上的资金低于5万元则立即给财务人员发送警告数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;触发器是与表有关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>获取无线局域网适配器IP</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/%E8%8E%B7%E5%8F%96%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%E9%80%82%E9%85%8D%E5%99%A8IP/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/获取无线局域网适配器IP/</id>
    <published>2018-07-24T11:30:20.000Z</published>
    <updated>2018-07-24T11:30:51.891Z</updated>
    
    <content type="html"><![CDATA[<p>如题，嗯!<br><a id="more"></a></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.net.InetAddress;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.net.NetworkInterface;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.ArrayList;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Enumeration;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.List;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mc_07241</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">		getLocalIP();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; getLocalIP() &#123;</div><div class="line">		List&lt;String&gt; ipList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		InetAddress ip = <span class="literal">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Enumeration&lt;NetworkInterface&gt; netInterfaces = (Enumeration&lt;NetworkInterface&gt;) NetworkInterface</div><div class="line">					.getNetworkInterfaces();</div><div class="line">			<span class="keyword">while</span> (netInterfaces.hasMoreElements()) &#123;</div><div class="line">				NetworkInterface ni = (NetworkInterface) netInterfaces.nextElement();</div><div class="line">				<span class="keyword">if</span> (ni.getName().indexOf(<span class="string">"wlan"</span>) == <span class="number">-1</span>)</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				<span class="comment">// 遍历所有ip</span></div><div class="line">				Enumeration&lt;InetAddress&gt; ips = ni.getInetAddresses();</div><div class="line">				<span class="keyword">while</span> (ips.hasMoreElements()) &#123;</div><div class="line">					ip = (InetAddress) ips.nextElement();</div><div class="line">					<span class="keyword">if</span> (<span class="literal">null</span> == ip || <span class="string">""</span>.equals(ip)) &#123;</div><div class="line">						<span class="keyword">continue</span>;</div><div class="line">					&#125;</div><div class="line">					String sIP = ip.getHostAddress();</div><div class="line">					<span class="keyword">if</span> (sIP == <span class="literal">null</span> || sIP.indexOf(<span class="string">":"</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">						<span class="keyword">continue</span>;</div><div class="line">					&#125;</div><div class="line">					ipList.add(sIP);</div><div class="line">					System.out.println(sIP);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> ipList;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题，嗯!&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java执行输入的js代码</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/Java%E6%89%A7%E8%A1%8C%E8%BE%93%E5%85%A5%E7%9A%84js%E4%BB%A3%E7%A0%81/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/Java执行输入的js代码/</id>
    <published>2018-07-24T08:25:32.000Z</published>
    <updated>2018-07-24T08:28:55.123Z</updated>
    
    <content type="html"><![CDATA[<p>JDK1.6版添加了新的ScriptEngine类，允许用户直接执行js代码。<br><a id="more"></a><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Scanner;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.script.ScriptEngine;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.script.ScriptEngineManager;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.script.ScriptException;</span>  <span class="comment">/*直接调用js代码*/</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mc_07241</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args)&#123;</div><div class="line">		ScriptEngineManager manager = <span class="keyword">new</span> ScriptEngineManager();</div><div class="line">		ScriptEngine engine = manager.getEngineByName(<span class="string">"javascript"</span>);</div><div class="line">		<span class="comment">/*通过脚本名称获取脚本引擎*/</span></div><div class="line">		Scanner sc= <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			System.out.println(engine.eval(sc.nextLine()));</div><div class="line">			<span class="comment">/*不能调用浏览器中定义的js函数。 错误，会抛出alert等引用不存在的异常*/</span></div><div class="line">		&#125; <span class="keyword">catch</span> (ScriptException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JDK1.6版添加了新的ScriptEngine类，允许用户直接执行js代码。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>索引</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/%E7%B4%A2%E5%BC%95/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/索引/</id>
    <published>2018-07-24T06:29:27.000Z</published>
    <updated>2018-07-24T06:41:03.555Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</p>
<p><code>创建索引时，需要确保索引是应用在SQL查询语句的条件(一般作为WHERE子句的条件)</code></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p>
<p><code>缺点</code>: 虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行<code>INSERT</code>、<code>UPDATE</code>和<code>DELETE</code>。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。</p>
<h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><p>1、创建索引<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">index</span> indexName <span class="keyword">on</span> mytable(username(<span class="built_in">length</span>));</div></pre></td></tr></table></figure></p>
<p>如果是char、varchar类型，length可以小于字段实际长度；如果是blob和text类型，必须指定length。<br>2、修改表结构(添加索引)<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tableName <span class="keyword">add</span> <span class="keyword">index</span> indexName(columnName);</div></pre></td></tr></table></figure></p>
<p>3、创建表的时候直接指定<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytable(</div><div class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">username <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line"><span class="keyword">index</span> [indexName] (username(<span class="keyword">length</span>))</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>4、删除索引的语法<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">index</span> [indexName] <span class="keyword">on</span> mytable;</div></pre></td></tr></table></figure></p>
<h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。<br>1、创建索引<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> indexName <span class="keyword">on</span> mytable(username(<span class="built_in">length</span>));</div></pre></td></tr></table></figure></p>
<p>2、修改表结构<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> mytable <span class="keyword">add</span> <span class="keyword">unique</span> [indexName] (username(<span class="keyword">length</span>));</div></pre></td></tr></table></figure></p>
<p>3、创建表的时候直接指定<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytable(</div><div class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="literal">null</span>,</div><div class="line">username <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line"><span class="keyword">unique</span> [indexName] (username(<span class="keyword">length</span>))</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h2 id="使用alter命令添加和删除索引"><a href="#使用alter命令添加和删除索引" class="headerlink" title="使用alter命令添加和删除索引"></a>使用alter命令添加和删除索引</h2><p>有四种方式来添加数据表的索引：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> primary <span class="keyword">key</span>(column_list);</div></pre></td></tr></table></figure></p>
<p>该语句添加一个主键，这意味着索引值必须是唯一的，且不能为null。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> <span class="keyword">unique</span> index_name(column_list);</div></pre></td></tr></table></figure></p>
<p>这条语句创建索引的值必须是唯一的(除了null，外，null可能会出现多次)。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> <span class="keyword">index</span> index_name(column_list);</div></pre></td></tr></table></figure></p>
<p>添加普通索引，索引值可出现多次。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> fulltext index_name(column_list);</div></pre></td></tr></table></figure></p>
<p>该语句指定了索引为fulltext，用于全文索引。</p>
<h2 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h2><p>可以使用show index命令来列出表中的相关的索引信息。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> table_name;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>TIMESTAMP和DATETIME</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/TIMESTAMP%E5%92%8CDATETIME/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/TIMESTAMP和DATETIME/</id>
    <published>2018-07-24T03:03:43.000Z</published>
    <updated>2018-07-24T03:04:21.827Z</updated>
    
    <content type="html"><![CDATA[<p>TIMESTAMP和DATETIME的表示方法非常类似，区别主要有以下几点。<br><a id="more"></a></p>
<p>1、TIMESTAMP支持的时间范围比较小，其取值范围从19700101080001到2038年的某个时间，而DATETIME是从1000-01-01 00:00:00 到 9999-12-31 23:59:59，范围更大。<br>2、表中的第一个TIMESTAMP列自动设置为系统时间。如果在一个TIMESTAMP列中插入NULL，则该列值将自动设置为当前的日期和时间。在插入或更新一行但不明确给TIMESTAMP列赋值时也会自动设置该列的值为当前的日期和时间，当插入的值超出取值范围时，MySQL认为该值溢出，使用”0000-00-00 00:00:00”进行填补。<br>3、TIMESTAMP的插入和查询都受当地时区的影响，更能反应出实际的日期。而DATETIME则只能反应出插入时当地的时区，其他时区的人查看数据必然会有误差的。<br>4、TIMESTAMP的属性受MySQL版本和服务器SQLMode的影响很大。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TIMESTAMP和DATETIME的表示方法非常类似，区别主要有以下几点。&lt;br&gt;
    
    </summary>
    
    
      <category term="失误锦集" scheme="http://www.sanstylemc.cn/tags/%E5%A4%B1%E8%AF%AF%E9%94%A6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>rpm命令</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/rpm%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/rpm命令/</id>
    <published>2018-07-24T01:17:49.000Z</published>
    <updated>2018-07-24T01:19:32.582Z</updated>
    
    <content type="html"><![CDATA[<p>对于一个rpm包来说，都是有”-“和”.”构成的，基本上有以下几部分组成：<code>包名</code>、<code>版本信息</code>、<code>发布版本号</code>、<code>运行平台</code>，当出现noarch, 代表的是软件可以平台兼容。<br><a id="more"></a></p>
<h2 id="查询系统已经安装的软件信息"><a href="#查询系统已经安装的软件信息" class="headerlink" title="查询系统已经安装的软件信息"></a>查询系统已经安装的软件信息</h2><p>1、查询系统中已经安装的软件<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm -qa</span></div></pre></td></tr></table></figure></p>
<p>2、查询一个已经安装的文件属于哪个软件包<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qf 文件名的绝对路径</div></pre></td></tr></table></figure></p>
<p>3、查询已安装软件包都安装到何处<br><figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm -ql 软件名</span></div><div class="line"><span class="attribute">软件名定义</span>: rpm包去除平台信息和后缀后的信息</div></pre></td></tr></table></figure></p>
<p>4、查询一个已安装软件包的信息<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qi 软件名</div></pre></td></tr></table></figure></p>
<p>5、查看一下已安装软件的配置文件<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rom</span> -qc 软件名</div></pre></td></tr></table></figure></p>
<p>6、查看一个已安装软件的文档安装位置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qd 软件名</div></pre></td></tr></table></figure></p>
<p>7、查看一下已安装软件所依赖的软件包及文件<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -<span class="built_in">qR</span> 软件名</div></pre></td></tr></table></figure></p>
<h2 id="对于未安装的软件包信息查询"><a href="#对于未安装的软件包信息查询" class="headerlink" title="对于未安装的软件包信息查询"></a>对于未安装的软件包信息查询</h2><p>1、查看一个软件包的用途、版本等信息<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpi rpm文件</div></pre></td></tr></table></figure></p>
<p>2、查看软件包的文档所在的位置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpl rpm文件</div></pre></td></tr></table></figure></p>
<p>3、查看软件包的文档所在的位置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpd rpm文件</div></pre></td></tr></table></figure></p>
<p>4、查看一个软件包的配置文件<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpc rpm文件</div></pre></td></tr></table></figure></p>
<p>5、查看一个软件包的依赖关系<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpR rpm文件</div></pre></td></tr></table></figure></p>
<h2 id="软件包的安装、升级、删除等"><a href="#软件包的安装、升级、删除等" class="headerlink" title="软件包的安装、升级、删除等"></a>软件包的安装、升级、删除等</h2><p>1、安装或者升级一个rpm包<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -ivh rpm文件 <span class="string">[安装]</span></div><div class="line">rpm -Uvh rpm文件 <span class="string">[更新]</span></div></pre></td></tr></table></figure></p>
<p>2、删除一个rpm包<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -e 软件名</div></pre></td></tr></table></figure></p>
<p>如果需要不管依赖问题，强制删除软件，在如上命令后加上<code>--nodeps</code>。</p>
<h2 id="签名导入"><a href="#签名导入" class="headerlink" title="签名导入"></a>签名导入</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm --<span class="keyword">import</span> 签名文件</div><div class="line">rpm --<span class="keyword">import</span> RPM-GPG-KEY</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于一个rpm包来说，都是有”-“和”.”构成的，基本上有以下几部分组成：&lt;code&gt;包名&lt;/code&gt;、&lt;code&gt;版本信息&lt;/code&gt;、&lt;code&gt;发布版本号&lt;/code&gt;、&lt;code&gt;运行平台&lt;/code&gt;，当出现noarch, 代表的是软件可以平台兼容。&lt;br&gt;
    
    </summary>
    
    
      <category term="Skill" scheme="http://www.sanstylemc.cn/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>Linux笔记一</title>
    <link href="http://www.sanstylemc.cn/2018/07/19/Linux%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://www.sanstylemc.cn/2018/07/19/Linux笔记一/</id>
    <published>2018-07-19T02:41:30.000Z</published>
    <updated>2018-07-19T02:43:03.619Z</updated>
    
    <content type="html"><![CDATA[<p>鸟哥私房菜学习一。<br><a id="more"></a></p>
<h2 id="计量单位"><a href="#计量单位" class="headerlink" title="计量单位"></a>计量单位</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;电脑对数据的判断主要依据有没有通电来记录信息，所以理论上对于每一个记录单位而言，它只认识0与1而已。0/1这个二进制的单位我们成为bit。但bit太小，所以在储存数据时每份简单的数据都会使用到8个bit的大小来记录，因此定义出Byte这个单位，关系为<code>1 Byte = 8 bits</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:center">进位制</th>
<th style="text-align:center">Kilo</th>
<th style="text-align:center">Mega</th>
<th style="text-align:center">Giga</th>
<th style="text-align:center">Tera</th>
<th style="text-align:center">Peta</th>
<th style="text-align:center">Exa</th>
<th style="text-align:center">Zetta</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">二进制</td>
<td style="text-align:center">1024</td>
<td style="text-align:center">1024K</td>
<td style="text-align:center">1024M</td>
<td style="text-align:center">1024G</td>
<td style="text-align:center">1024T</td>
<td style="text-align:center">1024P</td>
<td style="text-align:center">1024E</td>
</tr>
<tr>
<td style="text-align:center">十进制</td>
<td style="text-align:center">1000</td>
<td style="text-align:center">1000K</td>
<td style="text-align:center">1000M</td>
<td style="text-align:center">1000G</td>
<td style="text-align:center">1000T</td>
<td style="text-align:center">1000P</td>
<td style="text-align:center">1000E</td>
</tr>
</tbody>
</table>
<p><code>例题</code>: 假设有500GB硬盘一个，但是格式化完毕后却只剩下460GB左右的容量，这是什么原因？</p>
<blockquote>
<p>答: 因为一般硬盘制造商会使用十进制的单位，所以500GByte代表为<code>500*1000*1000*1000Byte</code>之意。转成文件的容量单位时使用二进制(1024为底)，所以就成为460GB左右的容量了。</p>
</blockquote>
<h2 id="电脑架构与设备元件"><a href="#电脑架构与设备元件" class="headerlink" title="电脑架构与设备元件"></a>电脑架构与设备元件</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;早期的芯片组通常分为两个桥接器来控制各元件的沟通，分别是：<br>(1) 北桥：负责连接速度较快的CPU、内存与显卡接口等元件；<br>(2) 南桥：负责连接速度较慢的设备接口，包括硬盘、USB、网卡等。<br>目前的主流架构中，大多将北桥内存控制器整合到CPU封装当中了。</p>
<h2 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h2><h3 id="设备I-O位址与IRQ中断信道"><a href="#设备I-O位址与IRQ中断信道" class="headerlink" title="设备I/O位址与IRQ中断信道"></a>设备I/O位址与IRQ中断信道</h3><p>不能有两个设备使用同一个I/O位址，否则系统就会不晓得该如何运行这两个设备了。<br>IRQ中断信道。</p>
<h3 id="CMOS和BIOS"><a href="#CMOS和BIOS" class="headerlink" title="CMOS和BIOS"></a>CMOS和BIOS</h3><p><code>CMOS</code>：主要的功能为记录主板上面的重要参数，包括系统时间、CPU电压与频率、各项设备的I/O位址与IRQ等，由于这些数据的记录要花费电力，因此主板上面才有电池。<br><code>BIOS</code>：为写入到主板上某一块flash或EEPROM的程序，他可以在开机的时候执行，以载入CMOS当中的参数，并尝试调用储存设备中的开机程序，进一步进入操作系统当中。BIOS也可以修改CMOS中的数据。</p>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">计算机的定义为: 接受使用者输入指令与数据，经由中央处理器的数学与逻辑单元运算处理后，以产生储存成有用的信息。</div><div class="line"><span class="string">`电脑的五大单元包括`</span>：输入单元、输出单元、控制单元、算术逻辑单元、存储单元五大部分。其中<span class="meta">CPU</span>占有控制、算术逻辑单元，存储单元又包含内存与辅助内存。</div><div class="line">数据会流进/流出内存是<span class="meta">CPU</span>所发布的控制命令，而<span class="meta">CPU</span>实际要处理的数据则完全来自于内存。</div><div class="line"><span class="string">`CPU设计理念主要分为`</span>：精简指令集(RISC)与复杂指令集(CISC)系统。</div><div class="line"><span class="string">`关于CPU的频率部分`</span>：外频指的是<span class="meta">CPU</span>与外部元件进行数据传输时的速度，倍频则是<span class="meta">CPU</span>内部用来加速工作性能的一个倍数，两者相乘才是<span class="meta">CPU</span>的频率速度。</div><div class="line">新的<span class="meta">CPU</span>设计中，已经将北桥的内存控制芯片整合到<span class="meta">CPU</span>中，而<span class="meta">CPU</span>与内存、显卡沟通的总线通常称为系统总线。南桥就是所谓的输入输出(I/O)总线，主要在联系硬盘、USB、网卡等周边设备。</div><div class="line"><span class="meta">CPU</span>每次能够处理的数据量称为字组大小，字组大小依据<span class="meta">CPU</span>的设计而有<span class="number">32</span>位与<span class="number">64</span>位。我们现在所称的电脑是<span class="number">32</span>或<span class="number">64</span>位主要是依据这个<span class="meta">CPU</span>解析的字组大小而来的。</div><div class="line">个人电脑的内存主要元件为动态随机存取内存，至于<span class="meta">CPU</span>内部的第二层高速缓存则使用静态随机存取内存。</div><div class="line">BIOS是一套程序，这套程序是写死到主板上面的一个内存芯片中，这个内存芯片在没有通电时也能够将数据记录下来，那就是只读存储器(ROM)。</div><div class="line">操作系统(OS)其实也是一组程序，这组程序的重点在于管理电脑的所有活动以及驱动系统中的所有硬件。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鸟哥私房菜学习一。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.sanstylemc.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>判断本网段有多少可用的IP地址</title>
    <link href="http://www.sanstylemc.cn/2018/07/18/%E5%88%A4%E6%96%AD%E6%9C%AC%E7%BD%91%E6%AE%B5%E6%9C%89%E5%A4%9A%E5%B0%91%E5%8F%AF%E7%94%A8%E7%9A%84IP%E5%9C%B0%E5%9D%80/"/>
    <id>http://www.sanstylemc.cn/2018/07/18/判断本网段有多少可用的IP地址/</id>
    <published>2018-07-18T07:44:23.000Z</published>
    <updated>2018-07-18T07:45:49.649Z</updated>
    
    <content type="html"><![CDATA[<p>首先获取本机IP地址和网段。再使用Java执行ping命令，判断这些IP地址是否能用，把能用的打印出来。<br><a id="more"></a><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="keyword">BufferedReader</span>;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</div><div class="line">    </div><div class="line"><span class="keyword">public</span> class TestSocket &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">        InetAddress host = InetAddress.getLocalHost();</div><div class="line">        <span class="keyword">String</span> ip = host.getHostAddress();</div><div class="line">        <span class="keyword">String</span> ipRange = ip.substring(<span class="number">0</span>, ip.lastIndexOf(<span class="string">'.'</span>));</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"本机ip地址："</span> + ip);</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"网段是: "</span> + ipRange);</div><div class="line">    </div><div class="line">        List&lt;<span class="keyword">String</span>&gt; ips = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</div><div class="line">        ThreadPoolExecutor threadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">10</span>, <span class="number">15</span>, <span class="number">60</span>, TimeUnit.SECONDS,</div><div class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">        AtomicInteger number = <span class="keyword">new</span> AtomicInteger();</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++) &#123;</div><div class="line">            <span class="keyword">String</span> testIP = ipRange + <span class="string">"."</span> + (i + <span class="number">1</span>);</div><div class="line">            threadPool.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                @Override</div><div class="line">                <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</div><div class="line">                    <span class="built_in">boolean</span> reachable = isReachable(testIP);</div><div class="line">                    <span class="keyword">if</span> (reachable)</div><div class="line">                        <span class="comment">// System.out.println("找到可连接的ip地址：" + testIP);</span></div><div class="line">                        ips.<span class="built_in">add</span>(testIP);</div><div class="line">    </div><div class="line">                    <span class="keyword">synchronized</span> (number) &#123;</div><div class="line">                        System.out.<span class="built_in">println</span>(<span class="string">"已经完成:"</span> + number.incrementAndGet() + <span class="string">" 个 ip 测试"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">    </div><div class="line">            &#125;);</div><div class="line">    </div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        <span class="comment">// 等待所有线程结束的时候，就关闭线程池</span></div><div class="line">        threadPool.shutdown();</div><div class="line">        <span class="comment">//等待线程池关闭，但是最多等待1个小时</span></div><div class="line">        <span class="keyword">if</span> (threadPool.awaitTermination(<span class="number">1</span>, TimeUnit.HOURS)) &#123;</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="string">"如下ip地址可以连接"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">String</span> theip : ips) &#123;</div><div class="line">                System.out.<span class="built_in">println</span>(theip);</div><div class="line">            &#125;</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="string">"总共有:"</span> + ips.<span class="built_in">size</span>() + <span class="string">" 个地址"</span>);</div><div class="line">    </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">boolean</span> isReachable(<span class="keyword">String</span> ip) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="built_in">boolean</span> reachable = <span class="keyword">false</span>;</div><div class="line">    </div><div class="line">            Process p = Runtime.getRuntime().exec(<span class="string">"ping -n 1 "</span> + ip);</div><div class="line">            <span class="keyword">BufferedReader</span> br = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(<span class="keyword">new</span> InputStreamReader(p.getInputStream()));</div><div class="line">            <span class="keyword">String</span> <span class="built_in">line</span> = <span class="keyword">null</span>;</div><div class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">            <span class="keyword">while</span> ((<span class="built_in">line</span> = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">line</span>.length() != <span class="number">0</span>)</div><div class="line">                    sb.<span class="built_in">append</span>(<span class="built_in">line</span> + <span class="string">"\r\n"</span>);</div><div class="line">            &#125;</div><div class="line">    </div><div class="line">            <span class="comment">//当有TTL出现的时候，就表示连通了</span></div><div class="line">            reachable = sb.toString().contains(<span class="string">"TTL"</span>);</div><div class="line">            br.close();</div><div class="line">            <span class="keyword">return</span> reachable;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先获取本机IP地址和网段。再使用Java执行ping命令，判断这些IP地址是否能用，把能用的打印出来。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>文件夹复制进度条</title>
    <link href="http://www.sanstylemc.cn/2018/07/18/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%8D%E5%88%B6%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <id>http://www.sanstylemc.cn/2018/07/18/文件夹复制进度条/</id>
    <published>2018-07-18T07:00:40.000Z</published>
    <updated>2018-07-18T07:02:37.948Z</updated>
    
    <content type="html"><![CDATA[<p>使用Java写出的简陋GUI，显示文件夹复制的进度条。<br><a id="more"></a><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.Dimension;</div><div class="line"><span class="keyword">import</span> java.awt.FlowLayout;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.io.<span class="built_in">File</span>;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JLabel;</div><div class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</div><div class="line"><span class="keyword">import</span> javax.swing.JProgressBar;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> class TestGUI &#123;</div><div class="line"> </div><div class="line">    <span class="keyword">static</span> <span class="keyword">long</span> allFileSize = <span class="number">0</span>; <span class="comment">// 所有需要复制的文件大小</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">long</span> currentFileSizeCopied = <span class="number">0</span>;<span class="comment">// 已复制的文件总大小</span></div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 遍历文件夹获取文件夹内容总大小</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * @param file</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> calclateAllFilesize(<span class="built_in">File</span> file) &#123;</div><div class="line"> </div><div class="line">        <span class="built_in">if</span> (file.isFile()) &#123;</div><div class="line">            allFileSize += file.length();</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">if</span> (file.<span class="built_in">isDirectory</span>()) &#123;</div><div class="line">            <span class="built_in">File</span>[] fs = file.listFiles();</div><div class="line">            <span class="built_in">for</span> (<span class="built_in">File</span> f : fs) &#123;</div><div class="line">                calclateAllFilesize(f);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line"> </div><div class="line">        JFrame f = <span class="keyword">new</span> JFrame(<span class="string">"带进度条的文件夹复制"</span>);</div><div class="line">        f.setSize(<span class="number">450</span>, <span class="number">140</span>);</div><div class="line">        f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">        f.setLayout(<span class="keyword">new</span> FlowLayout());</div><div class="line"> </div><div class="line">        <span class="comment">// 文件地址</span></div><div class="line">        JLabel lStr = <span class="keyword">new</span> JLabel(<span class="string">"源文件地址："</span>);</div><div class="line">        JTextField strTf = <span class="keyword">new</span> JTextField(<span class="string">""</span>);</div><div class="line">        strTf.setText(<span class="string">"e:/JDK"</span>);</div><div class="line">        strTf.setPreferredSize(<span class="keyword">new</span> Dimension(<span class="number">100</span>, <span class="number">30</span>));</div><div class="line">        JLabel lDest = <span class="keyword">new</span> JLabel(<span class="string">"复制到："</span>);</div><div class="line">        JTextField destTf = <span class="keyword">new</span> JTextField(<span class="string">""</span>);</div><div class="line">        destTf.setText(<span class="string">"e:/JDK2"</span>);</div><div class="line">        destTf.setPreferredSize(<span class="keyword">new</span> Dimension(<span class="number">100</span>, <span class="number">30</span>));</div><div class="line"> </div><div class="line">        f.add(lStr);</div><div class="line">        f.add(strTf);</div><div class="line">        f.add(lDest);</div><div class="line">        f.add(destTf);</div><div class="line"> </div><div class="line">        JButton bStartCopy = <span class="keyword">new</span> JButton(<span class="string">"开始复制"</span>);</div><div class="line">        bStartCopy.setPreferredSize(<span class="keyword">new</span> Dimension(<span class="number">100</span>, <span class="number">30</span>));</div><div class="line"> </div><div class="line">        JLabel l = <span class="keyword">new</span> JLabel(<span class="string">"文件复制进度："</span>);</div><div class="line">        JProgressBar pb = <span class="keyword">new</span> JProgressBar();</div><div class="line">        pb.setMaximum(<span class="number">100</span>);</div><div class="line">        pb.setStringPainted(true);</div><div class="line"> </div><div class="line">        f.add(bStartCopy);</div><div class="line">        f.add(l);</div><div class="line">        f.add(pb);</div><div class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line"> </div><div class="line">        f.setVisible(true);</div><div class="line"> </div><div class="line">        <span class="comment">// 计算需要复制的文件的总大小</span></div><div class="line">        <span class="keyword">String</span> srcPath = strTf.getText();</div><div class="line">        <span class="built_in">File</span> folder = <span class="keyword">new</span> <span class="built_in">File</span>(srcPath);</div><div class="line">        calclateAllFilesize(folder);</div><div class="line"> </div><div class="line">        <span class="comment">// 点击开始复制</span></div><div class="line">        bStartCopy.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> actionPerformed(ActionEvent e) &#123;</div><div class="line">                currentFileSizeCopied = <span class="number">0</span>;</div><div class="line">                <span class="keyword">String</span> srcPath = strTf.getText();</div><div class="line">                <span class="keyword">String</span> destPath = destTf.getText();</div><div class="line">                <span class="keyword">new</span> Thread(() -&gt; copyFolder(srcPath, destPath)).start();</div><div class="line">                bStartCopy.setEnabled(false);</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> copyFile(<span class="keyword">String</span> srcPath, <span class="keyword">String</span> destPath) &#123;</div><div class="line"> </div><div class="line">                <span class="built_in">File</span> srcFile = <span class="keyword">new</span> <span class="built_in">File</span>(srcPath);</div><div class="line">                <span class="built_in">File</span> destFile = <span class="keyword">new</span> <span class="built_in">File</span>(destPath);</div><div class="line"> </div><div class="line">                <span class="comment">// 缓存区，一次性读取1024字节</span></div><div class="line">                <span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line"> </div><div class="line">                <span class="built_in">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(srcFile);</div><div class="line">                        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);) &#123;</div><div class="line">                    <span class="built_in">while</span> (true) &#123;</div><div class="line">                        <span class="comment">// 实际读取的长度是 actuallyReaded,有可能小于1024</span></div><div class="line">                        <span class="keyword">int</span> actuallyReaded = fis.<span class="built_in">read</span>(<span class="built_in">buffer</span>);</div><div class="line">                        <span class="comment">// -1表示没有可读的内容了</span></div><div class="line">                        <span class="built_in">if</span> (<span class="number">-1</span> == actuallyReaded)</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                        fos.<span class="built_in">write</span>(<span class="built_in">buffer</span>, <span class="number">0</span>, actuallyReaded);</div><div class="line">                        fos.<span class="built_in">flush</span>();</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="built_in">catch</span> (FileNotFoundException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="built_in">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> copyFolder(<span class="keyword">String</span> srcPath, <span class="keyword">String</span> destPath) &#123;</div><div class="line">                <span class="built_in">File</span> srcFolder = <span class="keyword">new</span> <span class="built_in">File</span>(srcPath);</div><div class="line">                <span class="built_in">File</span> destFolder = <span class="keyword">new</span> <span class="built_in">File</span>(destPath);</div><div class="line"> </div><div class="line">                <span class="built_in">if</span> (!srcFolder.<span class="built_in">exists</span>())</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line"> </div><div class="line">                <span class="built_in">if</span> (!srcFolder.<span class="built_in">isDirectory</span>())</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line"> </div><div class="line">                <span class="built_in">if</span> (destFolder.isFile())</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line"> </div><div class="line">                <span class="built_in">if</span> (!destFolder.<span class="built_in">exists</span>())</div><div class="line">                    destFolder.mkdirs();</div><div class="line"> </div><div class="line">                <span class="built_in">File</span>[] files = srcFolder.listFiles();</div><div class="line">                <span class="built_in">for</span> (<span class="built_in">File</span> srcFile : files) &#123;</div><div class="line"> </div><div class="line">                    <span class="built_in">if</span> (!(srcFile.<span class="built_in">isDirectory</span>())) &#123;</div><div class="line">                        <span class="built_in">File</span> newDestFile = <span class="keyword">new</span> <span class="built_in">File</span>(destFolder, srcFile.getName());</div><div class="line">                        copyFile(srcFile.getAbsolutePath(), newDestFile.getAbsolutePath());</div><div class="line">                        currentFileSizeCopied += srcFile.length();</div><div class="line"> </div><div class="line">                        <span class="keyword">double</span> current = (<span class="keyword">double</span>) currentFileSizeCopied / (<span class="keyword">double</span>) allFileSize;</div><div class="line">                        <span class="keyword">int</span> progress = (<span class="keyword">int</span>) (current * <span class="number">100</span>);</div><div class="line">                        pb.setValue(progress);</div><div class="line">                        <span class="built_in">if</span> (progress == <span class="number">100</span>) &#123;</div><div class="line">                            JOptionPane.showMessageDialog(f, <span class="string">"复制完毕"</span>);</div><div class="line">                            bStartCopy.setEnabled(true);</div><div class="line">                        &#125;</div><div class="line"> </div><div class="line">                    &#125;</div><div class="line"> </div><div class="line">                    <span class="built_in">if</span> (srcFile.<span class="built_in">isDirectory</span>()) &#123;</div><div class="line">                        <span class="built_in">File</span> newDestFolder = <span class="keyword">new</span> <span class="built_in">File</span>(destFolder, srcFile.getName());</div><div class="line">                        copyFolder(srcFile.getAbsolutePath(), newDestFolder.getAbsolutePath());</div><div class="line">                    &#125;</div><div class="line"> </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Java写出的简陋GUI，显示文件夹复制的进度条。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="http://www.sanstylemc.cn/2018/07/13/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://www.sanstylemc.cn/2018/07/13/线程池/</id>
    <published>2018-07-13T09:15:15.000Z</published>
    <updated>2018-07-13T09:18:52.715Z</updated>
    
    <content type="html"><![CDATA[<p>每一个线程的启动和结束都是比较消耗时间和占用资源的。<br>如果在系统中用到了很多的线程，大量的启动和结束动作会导致系统的性能变卡，响应变慢。<br>为了解决这个问题，引入线程池这种设计思想。<br>线程池的模式很像生产者消费者模式，消费的对象是一个一个的能够运行的任务。<br><a id="more"></a></p>
<h2 id="线程池设计思路"><a href="#线程池设计思路" class="headerlink" title="线程池设计思路"></a>线程池设计思路</h2><p>线程池的思路和生产者消费者模型是很接近的。<br>1、准备一个任务容器<br>2、一次性启动10个消费者线程<br>3、刚开始任务容器时是空的，所以线程都wait在上面。<br>4、直到一个外部线程往这个任务容器中扔了一个”任务”，就会有一个消费者线程被唤醒<code>notify</code>。<br>5、这个消费者线程取出”任务”，并且执行这个任务，执行完毕后，继续等待下一次任务的到来。<br>6、如果短时间内，有较多的任务加入，那么就会有多个线程别唤醒，去执行这些任务。<br><img src="https://github.com/sunstady/hexo/blob/master/%E7%BA%BF%E7%A8%8B%E6%B1%A0/1.png?raw=true" alt="11"></p>
<h2 id="开发一个自定义的线程池"><a href="#开发一个自定义的线程池" class="headerlink" title="开发一个自定义的线程池"></a>开发一个自定义的线程池</h2><p>这是一个自定义的线程池，虽然不够完善和健壮，但是已经足以说明线程池的工作原理。<br>缓慢的给这个线程池添加任务，会看到有多条线程来执行这些任务。<br>线程7执行完毕任务后，又回到池子里，下一次任务来的时候，线程7又来执行新的任务。<br><code>ThreadPool.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</div><div class="line">  </div><div class="line">    <span class="comment">// 线程池大小</span></div><div class="line">    <span class="keyword">int</span> threadPoolSize;</div><div class="line">  </div><div class="line">    <span class="comment">// 任务容器</span></div><div class="line">    LinkedList&lt;Runnable&gt; tasks = <span class="keyword">new</span> LinkedList&lt;Runnable&gt;();</div><div class="line">  </div><div class="line">    <span class="comment">// 试图消费任务的线程</span></div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">        threadPoolSize = <span class="number">10</span>;</div><div class="line">  </div><div class="line">        <span class="comment">// 启动10个任务消费者线程</span></div><div class="line">        <span class="keyword">synchronized</span> (tasks) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadPoolSize; i++) &#123;</div><div class="line">                <span class="keyword">new</span> TaskConsumeThread(<span class="string">"任务消费者线程 "</span> + i).start();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (tasks) &#123;</div><div class="line">            tasks.add(r);</div><div class="line">            <span class="comment">// 唤醒等待的任务消费者线程</span></div><div class="line">            tasks.notifyAll();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TaskConsumeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TaskConsumeThread</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(name);</div><div class="line">        &#125;</div><div class="line">  </div><div class="line">        Runnable task;</div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"启动： "</span> + <span class="keyword">this</span>.getName());</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                <span class="keyword">synchronized</span> (tasks) &#123;</div><div class="line">                    <span class="keyword">while</span> (tasks.isEmpty()) &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            tasks.wait();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    task = tasks.removeLast();</div><div class="line">                    <span class="comment">// 允许添加任务的线程可以继续添加任务</span></div><div class="line">                    tasks.notifyAll();</div><div class="line">  </div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" 获取到任务，并执行"</span>);</div><div class="line">                task.run();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>TestThread.java</code><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestThread</span> &#123;</div><div class="line">       </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        ThreadPool pool = <span class="keyword">new</span> ThreadPool();</div><div class="line">  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">            Runnable task = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">                @Override</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="comment">//System.out.println("执行任务");</span></div><div class="line">                    <span class="comment">//任务可能是打印一句话</span></div><div class="line">                    <span class="comment">//可能是访问文件</span></div><div class="line">                    <span class="comment">//可能是做排序</span></div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">             </div><div class="line">            pool.<span class="keyword">add</span>(task);</div><div class="line">             </div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="测试线程池"><a href="#测试线程池" class="headerlink" title="测试线程池"></a>测试线程池</h2><p>创造一个情景，每个任务执行的时间都是1秒。<br>刚开始是间隔1秒钟向线程池中添加任务，<br>然后间隔时间越来越短，执行任务的线程还没有来得及结束，新的任务又来了。<br>就会观察到线程池里的其他线程被唤醒来执行这些任务。<br><code>TestThread.java</code><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestThread</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        ThreadPool pool= <span class="keyword">new</span> ThreadPool();</div><div class="line">        <span class="keyword">int</span> sleep=<span class="number">1000</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">            pool.<span class="keyword">add</span>(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">                @Override</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="comment">//System.out.println("执行任务");</span></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">1000</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(sleep);</div><div class="line">                sleep = sleep&gt;<span class="number">100</span>?sleep<span class="number">-100</span>:sleep;</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">              </div><div class="line">        &#125;</div><div class="line">          </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用Java自带的线程池"><a href="#使用Java自带的线程池" class="headerlink" title="使用Java自带的线程池"></a>使用Java自带的线程池</h2><p>Java提供自带的线程池，而不需要自己去开发一个自定义线程池。<br>线程池类<code>ThreadPoolExecutor</code>在包<code>java.util.concurrent</code>下<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ThreadPoolExecutor threadPool= <span class="keyword">new</span> <span class="type">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">15</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="type">LinkedBlockingQueue</span>&lt;Runnable&gt;());</div></pre></td></tr></table></figure></p>
<p>第一个参数<code>10</code>表示这个线程池<code>初始化了10</code>个线程在里面工作。<br>第二个参数<code>15</code>表示如果10个线程不够用了，就会自动增加到<code>最多15个线程</code>。<br>第三个参数<code>60</code>结合第四个参数<code>TimeUnit.SECONDS</code>，表示经过<code>60秒</code>,多出来的线程还没有接到活儿，就会回收，最后保持池子里就10个。<br>第四个参数<code>TimeUnit.SECONDS</code>如上。<br>第五个参数<code>new LinkedBlockingQueue()</code>用来放任务的集合。<br><code>execute</code>方法用于添加新的任务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line">   </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">           </div><div class="line">        ThreadPoolExecutor threadPool= <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">10</span>, <span class="number">15</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">           </div><div class="line">        threadPool.execute(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">   </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                System.out.println(<span class="string">"任务1"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="借助线程池同步查找文件内容"><a href="#借助线程池同步查找文件内容" class="headerlink" title="借助线程池同步查找文件内容"></a>借助线程池同步查找文件内容</h2><p>初始化一个大小是10的线程池<br>遍历所有文件，当遍历到文件是<code>.java</code>的时候，创建一个查找文件的任务，把这个任务扔进线程池去执行，继续遍历下一个文件。<br><code>SearchFileTask.java</code><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</div><div class="line"><span class="keyword">import</span> java.io.FileReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> SearchFileTask <span class="keyword">implements</span> Runnable&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">File</span> <span class="keyword">file</span>;</div><div class="line">    <span class="keyword">private</span> String search;</div><div class="line">    <span class="keyword">public</span> SearchFileTask(<span class="keyword">File</span> <span class="keyword">file</span>,String search) &#123;</div><div class="line">        <span class="keyword">this</span>.<span class="keyword">file</span> = <span class="keyword">file</span>;</div><div class="line">        <span class="keyword">this</span>.search= search;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> run()&#123;</div><div class="line">         </div><div class="line">        String fileContent = readFileConent(<span class="keyword">file</span>);</div><div class="line">        <span class="keyword">if</span>(fileContent.contains(search))&#123;</div><div class="line">            System.out.printf( <span class="string">"线程: %s 找到子目标字符串%s,在文件:%s%n"</span>,Thread.currentThread().getName(), search,<span class="keyword">file</span>);</div><div class="line">             </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">public</span> String readFileConent(<span class="keyword">File</span> <span class="keyword">file</span>)&#123;</div><div class="line">        <span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> FileReader(<span class="keyword">file</span>)) &#123;</div><div class="line">            <span class="keyword">char</span>[] all = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) <span class="keyword">file</span>.length()];</div><div class="line">            fr.<span class="keyword">read</span>(all);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(all);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>ThreadPool.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</div><div class="line">    <span class="comment">// 线程池大小</span></div><div class="line">    <span class="keyword">int</span> threadPoolSize;</div><div class="line">  </div><div class="line">    <span class="comment">// 任务容器</span></div><div class="line">    LinkedList&lt;Runnable&gt; tasks = <span class="keyword">new</span> LinkedList&lt;Runnable&gt;();</div><div class="line">  </div><div class="line">    <span class="comment">// 试图消费任务的线程</span></div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">        threadPoolSize = <span class="number">10</span>;</div><div class="line">  </div><div class="line">        <span class="comment">// 启动10个任务消费者线程</span></div><div class="line">        <span class="keyword">synchronized</span> (tasks) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadPoolSize; i++) &#123;</div><div class="line">                <span class="keyword">new</span> TaskConsumeThread(<span class="string">"任务消费者线程 "</span> + i).start();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (tasks) &#123;</div><div class="line">            tasks.add(r);</div><div class="line">            <span class="comment">// 唤醒等待的任务消费者线程</span></div><div class="line">            tasks.notifyAll();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TaskConsumeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TaskConsumeThread</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(name);</div><div class="line">        &#125;</div><div class="line">  </div><div class="line">        Runnable task;</div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                <span class="keyword">synchronized</span> (tasks) &#123;</div><div class="line">                    <span class="keyword">while</span> (tasks.isEmpty()) &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            tasks.wait();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    task = tasks.removeLast();</div><div class="line">                    <span class="comment">// 允许添加任务的线程可以继续添加任务</span></div><div class="line">                    tasks.notifyAll();</div><div class="line">  </div><div class="line">                &#125;</div><div class="line">                task.run();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>TestThread.java</code><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</div><div class="line">   </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestThread &#123;</div><div class="line">   </div><div class="line">    <span class="keyword">static</span> ThreadPool pool= <span class="keyword">new</span> ThreadPool();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> search(<span class="keyword">File</span> <span class="keyword">file</span>, String search) &#123;</div><div class="line">         </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">file</span>.isFile()) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">file</span>.getName().toLowerCase().endsWith(<span class="string">".java"</span>))&#123;</div><div class="line">                SearchFileTask <span class="keyword">task</span> = <span class="keyword">new</span> SearchFileTask(<span class="keyword">file</span>, search);</div><div class="line">                pool.add(<span class="keyword">task</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">file</span>.isDirectory()) &#123;</div><div class="line">            <span class="keyword">File</span>[] fs = <span class="keyword">file</span>.listFiles();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">File</span> f : fs) &#123;</div><div class="line">                search(f, search);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">       </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">        <span class="keyword">File</span> folder =<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"e:\\project"</span>);</div><div class="line">        search(folder,<span class="string">"Magic"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每一个线程的启动和结束都是比较消耗时间和占用资源的。&lt;br&gt;如果在系统中用到了很多的线程，大量的启动和结束动作会导致系统的性能变卡，响应变慢。&lt;br&gt;为了解决这个问题，引入线程池这种设计思想。&lt;br&gt;线程池的模式很像生产者消费者模式，消费的对象是一个一个的能够运行的任务。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>线程安全的类</title>
    <link href="http://www.sanstylemc.cn/2018/07/13/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E7%B1%BB/"/>
    <id>http://www.sanstylemc.cn/2018/07/13/线程安全的类/</id>
    <published>2018-07-13T08:11:00.000Z</published>
    <updated>2018-07-13T08:11:38.271Z</updated>
    
    <content type="html"><![CDATA[<p>常见的线程安全相关的面试题。<br><a id="more"></a></p>
<h2 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h2><p>HashMap和Hashtable都实现了Map接口，都是键值对保存数据的方式。<br>区别1：</p>
<ul>
<li>HashMap可以存放null</li>
<li>Hashtable不能存放null<br>区别2：</li>
<li>HashMap不是线程安全的类</li>
<li>Hashtable是线程安全的类</li>
</ul>
<h2 id="StringBuffer和StringBuilder的区别"><a href="#StringBuffer和StringBuilder的区别" class="headerlink" title="StringBuffer和StringBuilder的区别"></a>StringBuffer和StringBuilder的区别</h2><p>StringBuffer是线程安全的<br>StringBuilder是非线程安全的<br>所以当进行大量字符串拼接操作的时候，如果是单线程就用StringBuffer会更快些，如果是多线程，就需要用StringBuffer保证数据的安全性。</p>
<blockquote>
<p>非线程安全的为什么会比线程安全的快？因为不需要同步，省略了时间。</p>
</blockquote>
<h2 id="ArrayList和Vector的区别"><a href="#ArrayList和Vector的区别" class="headerlink" title="ArrayList和Vector的区别"></a>ArrayList和Vector的区别</h2><p>通过在eclipse中查看源代码可以得知：<br>ArrayList类的声明：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ArrayList&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractList&lt;E&gt;</span></span></div><div class="line"><span class="class">    <span class="title">implements</span> <span class="title">List&lt;E&gt;</span>, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></div></pre></td></tr></table></figure></p>
<p>Vector类的声明：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Vector&lt;E&gt;</span>    <span class="keyword">extends</span> <span class="title">AbstractList&lt;E&gt;</span></span></div><div class="line"><span class="class">    <span class="title">implements</span> <span class="title">List&lt;E&gt;</span>, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></div></pre></td></tr></table></figure></p>
<p>一模一样的~<br>他们的区别也在于，Vector是线程安全的类，而ArrayList是非线程安全的。</p>
<h2 id="把非线程安全的集合转换为线程安全"><a href="#把非线程安全的集合转换为线程安全" class="headerlink" title="把非线程安全的集合转换为线程安全"></a>把非线程安全的集合转换为线程安全</h2><p>ArrayList是非线程安全的，换句话说，多个线程可以同时进入一个ArrayList对象的add方法<br>借助<code>Collections.synchronizedList</code>，可以把ArrayList转换为线程安全的List。<br>与此类似的，还有HashSet, LinkedList, HashMap等等非线程安全的类，都通过工具类Collections转换为线程安全的。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package multiplethread;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.<span class="built_in">List</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</div><div class="line">    </div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        <span class="built_in">List</span>&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="built_in">List</span>&lt;Integer&gt; list2 = Collections.synchronizedList(list1);</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="线程安全的MyStack"><a href="#线程安全的MyStack" class="headerlink" title="线程安全的MyStack"></a>线程安全的MyStack</h2><p>把LinkedList通过<code>Collections.synchronizedList</code>转换成了一个线程安全的List。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List<span class="tag">&lt;<span class="name">Hero</span>&gt;</span> heros = (List<span class="tag">&lt;<span class="name">Hero</span>&gt;</span>) Collections.synchronizedList(new LinkedList<span class="tag">&lt;<span class="name">Hero</span>&gt;</span>());</div></pre></td></tr></table></figure></p>
<p>不需要在push上加synchronized修饰符<br>虽然多个线程可以同时进入push方法，但是调用heros.add方法的时候，同一时间，只有一个线程可以进入。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span>(<span class="params">Hero h</span>) </span>&#123;</div><div class="line">  heros.<span class="keyword">add</span>(h);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> collection;</div><div class="line">     </div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line">  </div><div class="line"><span class="keyword">import</span> charactor.Hero;</div><div class="line">     </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> <span class="keyword">implements</span> <span class="title">Stack</span></span>&#123;</div><div class="line">     </div><div class="line">    <span class="comment">//把LinkedList通过 Collections.synchronizedList转换成了一个线程安全的List</span></div><div class="line">    List&lt;Hero&gt; heros = (List&lt;Hero&gt;) Collections.synchronizedList(<span class="keyword">new</span> LinkedList&lt;Hero&gt;());</div><div class="line">  </div><div class="line">    <span class="comment">//不需要在push上加synchronized修饰符</span></div><div class="line">    <span class="comment">//虽然多个线程可以同时进入push方法，但是调用heros.add方法的时候</span></div><div class="line">    <span class="comment">//同一时间，只有一个线程可以进入</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Hero h)</span> </span>&#123;</div><div class="line">        heros.add(h);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> Hero <span class="title">pull</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> heros.remove(heros.size()-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> Hero <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> heros.get(heros.size()-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的线程安全相关的面试题。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>黑白棋子</title>
    <link href="http://www.sanstylemc.cn/2018/07/12/%E9%BB%91%E7%99%BD%E6%A3%8B%E5%AD%90/"/>
    <id>http://www.sanstylemc.cn/2018/07/12/黑白棋子/</id>
    <published>2018-07-12T01:03:11.000Z</published>
    <updated>2018-07-12T01:04:12.240Z</updated>
    
    <content type="html"><![CDATA[<p>黑白棋子Java版<br><a id="more"></a><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.Color;</div><div class="line"><span class="keyword">import</span> java.awt.Dimension;</div><div class="line"><span class="keyword">import</span> java.awt.Graphics;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</div><div class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</div><div class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JMenu;</div><div class="line"><span class="keyword">import</span> javax.swing.JMenuBar;</div><div class="line"><span class="keyword">import</span> javax.swing.JMenuItem;</div><div class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</div><div class="line"><span class="keyword">import</span> javax.swing.JPanel;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class mc_07116 &#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 控件属性</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> JFrame frame; <span class="comment">// 五子棋游戏的窗口框架</span></div><div class="line">	<span class="keyword">private</span> GameMap <span class="built_in">map</span>; <span class="comment">// 五子棋游戏的窗口容器</span></div><div class="line">	<span class="keyword">private</span> JMenuBar bar; <span class="comment">// 菜单</span></div><div class="line">	<span class="keyword">private</span> JMenu game; <span class="comment">// 菜单项</span></div><div class="line">	<span class="keyword">private</span> JMenuItem[] items; <span class="comment">// 菜单下拉项</span></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 静态数据属性</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> BOARD_SIZE = <span class="number">15</span>; <span class="comment">// 棋盘大小(15 * 15)</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> ROW_WIDTH = <span class="number">36</span>; <span class="comment">// 间距</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> SPACE = ROW_WIDTH / <span class="number">2</span>; <span class="comment">// 上下边间距</span></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 数据属性</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> <span class="built_in">boolean</span> player; <span class="comment">// true黑,false白</span></div><div class="line">	<span class="keyword">private</span> <span class="built_in">char</span>[][] board; <span class="comment">// 后台虚拟棋盘</span></div><div class="line"></div><div class="line">	<span class="keyword">public</span> mc_07116() &#123;</div><div class="line">		player = <span class="keyword">true</span>; <span class="comment">// 游戏先黑子下</span></div><div class="line">		board = <span class="keyword">new</span> <span class="built_in">char</span>[BOARD_SIZE][BOARD_SIZE]; <span class="comment">// 建立后台虚拟棋盘</span></div><div class="line">		clearMap();</div><div class="line">		createGUI();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 对GUI控件的创建</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">void</span> createGUI() &#123;</div><div class="line">		frame = <span class="keyword">new</span> JFrame(<span class="string">"五子棋"</span>); <span class="comment">// 实现五子棋游戏窗口框架</span></div><div class="line">		bar = <span class="keyword">new</span> JMenuBar(); <span class="comment">// 建立菜单栏</span></div><div class="line">		game = <span class="keyword">new</span> JMenu(<span class="string">"游戏"</span>); <span class="comment">// 建立名为“游戏”的菜单</span></div><div class="line">		items = <span class="keyword">new</span> JMenuItem[<span class="number">2</span>]; <span class="comment">// game菜单下创建2个子菜单项</span></div><div class="line">		game.<span class="built_in">add</span>(items[<span class="number">0</span>] = <span class="keyword">new</span> JMenuItem(<span class="string">"重新开始"</span>));<span class="comment">// 第一个子菜单为“重新开始”</span></div><div class="line">		game.<span class="built_in">add</span>(items[<span class="number">1</span>] = <span class="keyword">new</span> JMenuItem(<span class="string">"退出"</span>)); <span class="comment">// 第二个子菜单为“退出”</span></div><div class="line">		bar.<span class="built_in">add</span>(game);<span class="comment">// 菜单项加入菜单栏</span></div><div class="line">		<span class="built_in">map</span> = <span class="keyword">new</span> GameMap(); <span class="comment">// 实现五子棋游戏窗口容器</span></div><div class="line">		<span class="built_in">map</span>.setPreferredSize(</div><div class="line">				<span class="keyword">new</span> Dimension(ROW_WIDTH * (BOARD_SIZE - <span class="number">1</span>) + SPACE * <span class="number">2</span>, ROW_WIDTH * (BOARD_SIZE - <span class="number">1</span>) + SPACE * <span class="number">2</span>));<span class="comment">// 设置容器大小</span></div><div class="line">		frame.setJMenuBar(bar);</div><div class="line">		frame.<span class="built_in">add</span>(<span class="built_in">map</span>);</div><div class="line">		frame.pack();</div><div class="line">		frame.setLocation(<span class="number">450</span>, <span class="number">100</span>);</div><div class="line">		frame.setResizable(<span class="keyword">false</span>);</div><div class="line">		frame.setVisible(<span class="keyword">true</span>);</div><div class="line">		frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 清空棋子</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> clearMap() &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; BOARD_SIZE; i++) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; BOARD_SIZE; j++) &#123;</div><div class="line">				board[i][j] = <span class="string">'+'</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 运行游戏</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> start() &#123;</div><div class="line">		<span class="built_in">map</span>.addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;</div><div class="line">			<span class="comment">// 鼠标点击事件</span></div><div class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">mouseClicked</span>(MouseEvent e) &#123;</div><div class="line">				<span class="comment">// 将用户鼠标事件的座标转换成棋子数组的座标。</span></div><div class="line">				<span class="built_in">int</span> xPos = (<span class="built_in">int</span>) (e.getX() / ROW_WIDTH);</div><div class="line">				<span class="built_in">int</span> yPos = (<span class="built_in">int</span>) (e.getY() / ROW_WIDTH);</div><div class="line">				<span class="keyword">if</span> (board[xPos][yPos] == <span class="string">'+'</span>) &#123;<span class="comment">// 判断是否下过棋</span></div><div class="line">					board[xPos][yPos] = player ? <span class="string">'b'</span> : <span class="string">'w'</span>; <span class="comment">// 给虚拟键盘赋值</span></div><div class="line">					<span class="built_in">map</span>.repaint(); <span class="comment">// 通过读取board数组进行贴图</span></div><div class="line">					<span class="keyword">if</span> (isWin(xPos, yPos)) &#123;<span class="comment">// 如果有满足胜利条件的玩家了</span></div><div class="line">						<span class="built_in">map</span>.repaint(); <span class="comment">// 刷新图像</span></div><div class="line">						<span class="keyword">String</span> <span class="built_in">str</span> = player ? <span class="string">"黑方胜利"</span> : <span class="string">"白方胜利"</span>;</div><div class="line">						JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="built_in">str</span>, <span class="string">"游戏结束"</span>, JOptionPane.PLAIN_MESSAGE); <span class="comment">// 弹出消息框</span></div><div class="line">						clearMap(); <span class="comment">// 清空棋盘</span></div><div class="line">						<span class="built_in">map</span>.repaint(); <span class="comment">// 刷新棋盘</span></div><div class="line">						player = <span class="keyword">true</span>; <span class="comment">// 新一局继续黑子先下</span></div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						player = player ? <span class="keyword">false</span> : <span class="keyword">true</span>; <span class="comment">// 切换玩家</span></div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		<span class="comment">// 点击重新开始事件</span></div><div class="line">		items[<span class="number">0</span>].addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">			<span class="keyword">public</span> <span class="keyword">void</span> actionPerformed(ActionEvent e) &#123;</div><div class="line">				<span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"是否要重新开始游戏?"</span>;</div><div class="line">				<span class="comment">// 添加消息对话框</span></div><div class="line">				<span class="keyword">if</span> (JOptionPane.showConfirmDialog(<span class="keyword">null</span>, <span class="built_in">str</span>, <span class="string">"重新开始"</span>,</div><div class="line">						JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) &#123;</div><div class="line">					clearMap(); <span class="comment">// 清空棋盘</span></div><div class="line">					<span class="built_in">map</span>.repaint(); <span class="comment">// 刷新棋盘</span></div><div class="line">					player = <span class="keyword">true</span>; <span class="comment">// 玩家为黑棋</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		<span class="comment">// 点击退出事件</span></div><div class="line">		items[<span class="number">1</span>].addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">			<span class="keyword">public</span> <span class="keyword">void</span> actionPerformed(ActionEvent e) &#123;</div><div class="line">				<span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"是否要退出游戏?"</span>;</div><div class="line">				<span class="comment">// 添加消息对话框</span></div><div class="line">				<span class="keyword">if</span> (JOptionPane.showConfirmDialog(<span class="keyword">null</span>, <span class="built_in">str</span>, <span class="string">"重新开始"</span>,</div><div class="line">						JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) &#123;</div><div class="line">					System.<span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// 退出</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		<span class="comment">// 点关闭按钮事件</span></div><div class="line">		frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</div><div class="line">			<span class="keyword">public</span> <span class="keyword">void</span> windowClosing(WindowEvent e) &#123;</div><div class="line">				<span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"是否要退出游戏?"</span>;</div><div class="line">				<span class="comment">// 添加消息对话框</span></div><div class="line">				<span class="keyword">if</span> (JOptionPane.showConfirmDialog(<span class="keyword">null</span>, <span class="built_in">str</span>, <span class="string">"退出游戏"</span>,</div><div class="line">						JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) &#123;</div><div class="line">					System.<span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// 退出</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 纵向找</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">protected</span> <span class="built_in">boolean</span> find(<span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</div><div class="line">		<span class="built_in">int</span> i, num = <span class="number">1</span>;</div><div class="line">		<span class="built_in">char</span> temp = player ? <span class="string">'b'</span> : <span class="string">'w'</span>;</div><div class="line">		<span class="keyword">for</span> (i = x + <span class="number">1</span>; i &lt; <span class="number">15</span>; i++) &#123;<span class="comment">// 向下找</span></div><div class="line">			<span class="keyword">if</span> (board[i][y] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (i = x - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;<span class="comment">// 向上找</span></div><div class="line">			<span class="keyword">if</span> (board[i][y] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 横向找</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">protected</span> <span class="built_in">boolean</span> find2(<span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</div><div class="line">		<span class="built_in">int</span> i, num = <span class="number">1</span>;</div><div class="line">		<span class="built_in">char</span> temp = player ? <span class="string">'b'</span> : <span class="string">'w'</span>;</div><div class="line">		<span class="keyword">for</span> (i = y + <span class="number">1</span>; i &lt; <span class="number">15</span>; i++) &#123; <span class="comment">// 向右找</span></div><div class="line">			<span class="keyword">if</span> (board[x][i] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (i = y - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;<span class="comment">// 向左找</span></div><div class="line">			<span class="keyword">if</span> (board[x][i] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 方向</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">protected</span> <span class="built_in">boolean</span> find3(<span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</div><div class="line">		<span class="built_in">int</span> i, j, num = <span class="number">1</span>;</div><div class="line">		<span class="built_in">char</span> temp = player ? <span class="string">'b'</span> : <span class="string">'w'</span>;</div><div class="line">		<span class="keyword">for</span> (i = x + <span class="number">1</span>, j = y + <span class="number">1</span>; i &lt; <span class="number">15</span> &amp;&amp; j &lt; <span class="number">15</span>; i++, j++) &#123;<span class="comment">// 向下方</span></div><div class="line">			<span class="keyword">if</span> (board[i][j] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (i = x - <span class="number">1</span>, j = y - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i--, j--) &#123;<span class="comment">// 向上方</span></div><div class="line">			<span class="keyword">if</span> (board[i][j] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * /方向</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">protected</span> <span class="built_in">boolean</span> find4(<span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</div><div class="line">		<span class="built_in">int</span> i, j, num = <span class="number">1</span>;</div><div class="line">		<span class="built_in">char</span> temp = player ? <span class="string">'b'</span> : <span class="string">'w'</span>;</div><div class="line">		<span class="keyword">for</span> (i = x + <span class="number">1</span>, j = y - <span class="number">1</span>; i &lt; <span class="number">15</span> &amp;&amp; j &gt;= <span class="number">0</span>; i++, j--) &#123;<span class="comment">// 向下</span></div><div class="line">			<span class="keyword">if</span> (board[i][j] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (i = x - <span class="number">1</span>, j = y + <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; <span class="number">15</span>; i--, j++) &#123; <span class="comment">// 向上</span></div><div class="line">			<span class="keyword">if</span> (board[i][j] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 判断胜负</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">protected</span> <span class="built_in">boolean</span> isWin(<span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</div><div class="line">		<span class="keyword">return</span> (find(x, y) || find2(x, y) || find3(x, y) || find4(x, y));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 内部容器类，用于实现图像处理</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> class GameMap extends JPanel &#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">16578987565248</span>L;</div><div class="line"></div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> paintComponent(Graphics g) &#123;</div><div class="line">			<span class="keyword">super</span>.paintComponent(g);</div><div class="line">			<span class="comment">// 棋盘</span></div><div class="line">			g.setColor(<span class="keyword">new</span> Color(<span class="number">200</span>, <span class="number">100</span>, <span class="number">50</span>)); <span class="comment">// 设为桔黄色</span></div><div class="line">			g.fillRect(<span class="number">0</span>, <span class="number">0</span>, ROW_WIDTH * (BOARD_SIZE + <span class="number">1</span>), ROW_WIDTH * (BOARD_SIZE + <span class="number">1</span>)); <span class="comment">// 填充棋盘</span></div><div class="line">			g.setColor(Color.black); <span class="comment">// 设为黑色</span></div><div class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; BOARD_SIZE; i++) &#123;<span class="comment">// 画竖线</span></div><div class="line">				g.drawLine(SPACE + ROW_WIDTH * i, SPACE, SPACE + ROW_WIDTH * i, SPACE + ROW_WIDTH * (BOARD_SIZE - <span class="number">1</span>));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; BOARD_SIZE; i++) &#123;<span class="comment">// 画横线</span></div><div class="line">				g.drawLine(SPACE, SPACE + ROW_WIDTH * i, SPACE + ROW_WIDTH * (BOARD_SIZE - <span class="number">1</span>), SPACE + ROW_WIDTH * i);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 画点</span></div><div class="line">			g.fillOval(SPACE + <span class="number">3</span> * ROW_WIDTH - <span class="number">3</span>, SPACE + <span class="number">3</span> * ROW_WIDTH - <span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>);</div><div class="line">			g.fillOval(SPACE + <span class="number">11</span> * ROW_WIDTH - <span class="number">3</span>, SPACE + <span class="number">3</span> * ROW_WIDTH - <span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>);</div><div class="line">			g.fillOval(SPACE + <span class="number">3</span> * ROW_WIDTH - <span class="number">3</span>, SPACE + <span class="number">11</span> * ROW_WIDTH - <span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>);</div><div class="line">			g.fillOval(SPACE + <span class="number">7</span> * ROW_WIDTH - <span class="number">3</span>, SPACE + <span class="number">7</span> * ROW_WIDTH - <span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>);</div><div class="line">			g.fillOval(SPACE + <span class="number">11</span> * ROW_WIDTH - <span class="number">3</span>, SPACE + <span class="number">11</span> * ROW_WIDTH - <span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>);</div><div class="line">			<span class="comment">// 棋子</span></div><div class="line">			<span class="comment">// 遍历数组，绘制棋子。</span></div><div class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; BOARD_SIZE; i++) &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; BOARD_SIZE; j++) &#123;</div><div class="line">					<span class="keyword">if</span> (board[i][j] == <span class="string">'b'</span>) &#123;<span class="comment">// 绘制黑棋</span></div><div class="line">						g.setColor(Color.black);</div><div class="line">						g.fillOval(SPACE + i * ROW_WIDTH - ROW_WIDTH / <span class="number">2</span>, SPACE + j * ROW_WIDTH - ROW_WIDTH / <span class="number">2</span>,</div><div class="line">								ROW_WIDTH, ROW_WIDTH);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> (board[i][j] == <span class="string">'w'</span>) &#123;<span class="comment">// 绘制白棋</span></div><div class="line">						g.setColor(Color.white);</div><div class="line">						g.fillOval(SPACE + i * ROW_WIDTH - ROW_WIDTH / <span class="number">2</span>, SPACE + j * ROW_WIDTH - ROW_WIDTH / <span class="number">2</span>,</div><div class="line">								ROW_WIDTH, ROW_WIDTH);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		mc_07116 game = <span class="keyword">new</span> mc_07116();</div><div class="line">		game.start();</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"测试成功"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;黑白棋子Java版&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo文章设置密码</title>
    <link href="http://www.sanstylemc.cn/2018/07/09/Hexo%E6%96%87%E7%AB%A0%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81/"/>
    <id>http://www.sanstylemc.cn/2018/07/09/Hexo文章设置密码/</id>
    <published>2018-07-09T03:24:14.000Z</published>
    <updated>2018-07-09T03:33:56.882Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo文件是静态的，文章的所有信息都在页面中。加密需要用到js的阻塞机制，当页面中有调用<code>alert();</code>函数的时候，整个页面会停止运行，直到你点击确定之后，页面中的代码才会继续执行下去。<br><a id="more"></a><br>找到此路径下的文件：<br><code>themes--&gt;next--&gt;layout--&gt;_partials--&gt;head.swig</code> 。<br>将下方代码添加在<code>&lt;meta&gt;</code>标签之后。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">	<span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span></div><div class="line"><span class="actionscript">	    <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>,<span class="string">''</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span></div><div class="line"><span class="actionscript">		alert(<span class="string">'密码错误！'</span>);</span></div><div class="line"><span class="undefined">		history.back();</span></div><div class="line"><span class="undefined">	    &#125;</span></div><div class="line"><span class="undefined">	&#125;</span></div><div class="line"><span class="undefined">    &#125;)();</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>page</code>这个变量就是你在<code>hexo new</code>的时候生成文件中最顶部的东西。<br>修改文章头部标签文件：<br><code>hexo--&gt;scaffolds/post.md</code><br>可以参照如下模式。<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line"><span class="keyword">tags:</span> </div><div class="line">password: password</div></pre></td></tr></table></figure></p>
<p>这样我们就好像使用静态页面完成了部分只有动态页面能完成的东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo文件是静态的，文章的所有信息都在页面中。加密需要用到js的阻塞机制，当页面中有调用&lt;code&gt;alert();&lt;/code&gt;函数的时候，整个页面会停止运行，直到你点击确定之后，页面中的代码才会继续执行下去。&lt;br&gt;
    
    </summary>
    
    
      <category term="Skill" scheme="http://www.sanstylemc.cn/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>比较冒泡法、选择法以及二叉树排序的性能区别</title>
    <link href="http://www.sanstylemc.cn/2018/07/09/%E6%AF%94%E8%BE%83%E5%86%92%E6%B3%A1%E6%B3%95%E3%80%81%E9%80%89%E6%8B%A9%E6%B3%95%E4%BB%A5%E5%8F%8A%E4%BA%8C%E5%8F%89%E6%A0%91%E6%8E%92%E5%BA%8F%E7%9A%84%E6%80%A7%E8%83%BD%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.sanstylemc.cn/2018/07/09/比较冒泡法、选择法以及二叉树排序的性能区别/</id>
    <published>2018-07-09T02:15:02.000Z</published>
    <updated>2018-07-09T02:15:45.252Z</updated>
    
    <content type="html"><![CDATA[<p>创建4万个随机数，然后分别用冒泡法、选择法、二叉树3种排序算法进行排序，比较哪种更快。<br><a id="more"></a><br><code>mc_07093.java</code><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">    <span class="comment">//初始化随机数</span></div><div class="line">    <span class="keyword">int</span> total = <span class="number">40000</span>;</div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"初始化一个长度是"</span>+total+<span class="string">"的随机数字的数组"</span>);</div><div class="line">    <span class="keyword">int</span>[] originalNumbers = <span class="keyword">new</span> <span class="keyword">int</span>[total];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; originalNumbers.length; i++) &#123;</div><div class="line">        originalNumbers[i] = (<span class="keyword">int</span>)(Math.random()*total);</div><div class="line">    &#125;</div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"初始化完毕"</span>);</div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"接下来分别用3种算法进行排序"</span>);</div><div class="line">     </div><div class="line">    <span class="comment">//从初始化了的随机数组复制过来，以保证，每一种排序算法的目标数组，都是一样的</span></div><div class="line">    <span class="keyword">int</span>[] use4sort;</div><div class="line">     </div><div class="line">    use4sort= Arrays.copyOf(originalNumbers, originalNumbers.length);</div><div class="line">    <span class="keyword">int</span>[] sortedNumbersBySelection= performance(<span class="keyword">new</span> SelectionSort(use4sort),<span class="string">"选择法"</span>);</div><div class="line">     </div><div class="line">    use4sort= Arrays.copyOf(originalNumbers, originalNumbers.length);</div><div class="line">    <span class="keyword">int</span>[] sortedNumbersByBubbling=performance(<span class="keyword">new</span> BubblingSort(use4sort),<span class="string">"冒泡法"</span>);</div><div class="line">     </div><div class="line">    use4sort= Arrays.copyOf(originalNumbers, originalNumbers.length);</div><div class="line">    <span class="keyword">int</span>[] sortedNumbersByTree=performance(<span class="keyword">new</span> TreeSort(use4sort),<span class="string">"二叉树"</span>);</div><div class="line">     </div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"查看排序结果，是否是不同的数组对象"</span>);</div><div class="line">    System.<span class="keyword">out</span>.println(sortedNumbersBySelection);</div><div class="line">    System.<span class="keyword">out</span>.println(sortedNumbersByBubbling);</div><div class="line">    System.<span class="keyword">out</span>.println(sortedNumbersByTree);</div><div class="line">     </div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"查看排序结果，内容是否相同"</span>);</div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"比较 选择法 和 冒泡法  排序结果："</span>);</div><div class="line">    System.<span class="keyword">out</span>.println(Arrays.<span class="keyword">equals</span>(sortedNumbersBySelection, sortedNumbersByBubbling));</div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"比较 选择法 和 二叉树  排序结果："</span>);</div><div class="line">    System.<span class="keyword">out</span>.println(Arrays.<span class="keyword">equals</span>(sortedNumbersBySelection, sortedNumbersByTree));</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">interface</span> <span class="title">Sort</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span>(<span class="params"></span>)</span>;</div><div class="line">    <span class="function"><span class="keyword">int</span>[] <span class="title">values</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SelectionSort</span> <span class="title">implements</span> <span class="title">Sort</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> numbers[];</div><div class="line">    SelectionSort(<span class="keyword">int</span> [] numbers)&#123;</div><div class="line">        <span class="keyword">this</span>.numbers = numbers;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    @Override</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numbers.length<span class="number">-1</span>; j++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j+<span class="number">1</span>; i &lt; numbers.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(numbers[i]&lt;numbers[j])&#123;  </div><div class="line">                    <span class="keyword">int</span> temp = numbers[j];</div><div class="line">                    numbers[j] = numbers[i];</div><div class="line">                    numbers[i] = temp;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">values</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> numbers;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">BubblingSort</span> <span class="title">implements</span> <span class="title">Sort</span>&#123;</div><div class="line">    <span class="keyword">int</span> numbers[];</div><div class="line">    BubblingSort(<span class="keyword">int</span> [] numbers)&#123;</div><div class="line">        <span class="keyword">this</span>.numbers = numbers;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numbers.length; j++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length-j<span class="number">-1</span>; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(numbers[i]&gt;numbers[i+<span class="number">1</span>])&#123;  </div><div class="line">                    <span class="keyword">int</span> temp = numbers[i];</div><div class="line">                    numbers[i] = numbers[i+<span class="number">1</span>];</div><div class="line">                    numbers[i+<span class="number">1</span>] = temp;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">values</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> numbers;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">TreeSort</span> <span class="title">implements</span> <span class="title">Sort</span>&#123;</div><div class="line">    <span class="keyword">int</span> numbers[];</div><div class="line">    mc_07092 n;</div><div class="line">     </div><div class="line">    TreeSort(<span class="keyword">int</span> [] numbers)&#123;</div><div class="line">        n =<span class="keyword">new</span> mc_07092();</div><div class="line">        <span class="keyword">this</span>.numbers = numbers;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : numbers) &#123;</div><div class="line">            n.<span class="keyword">add</span>(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">values</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        List&lt;Object&gt; list = n.values();</div><div class="line">        <span class="keyword">int</span> sortedNumbers[] = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sortedNumbers.length; i++) &#123;</div><div class="line">            sortedNumbers[i] = Integer.parseInt(list.<span class="keyword">get</span>(i).toString());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sortedNumbers;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] <span class="title">performance</span>(<span class="params">Sort algorithm, String type</span>) </span>&#123;</div><div class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">    algorithm.sort();</div><div class="line">    <span class="keyword">int</span> sortedNumbers[] = algorithm.values();</div><div class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">    System.<span class="keyword">out</span>.printf(<span class="string">"%s排序，一共耗时 %d 毫秒%n"</span>,type,end-start);</div><div class="line">    <span class="keyword">return</span> sortedNumbers;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>mc_07092.java</code><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 左子节点</span></div><div class="line"><span class="keyword">public</span> mc_07092 leftNode;</div><div class="line"><span class="comment">// 右子节点</span></div><div class="line"><span class="keyword">public</span> mc_07092 rightNode;</div><div class="line"></div><div class="line"><span class="comment">// 值</span></div><div class="line"><span class="keyword">public</span> Object <span class="keyword">value</span>;</div><div class="line"></div><div class="line"><span class="comment">// 插入 数据</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>(<span class="params">Object v</span>) </span>&#123;</div><div class="line">    <span class="comment">// 如果当前节点没有值，就把数据放在当前节点上</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == <span class="keyword">value</span>)</div><div class="line">        <span class="keyword">value</span> = v;</div><div class="line"></div><div class="line">    <span class="comment">// 如果当前节点有值，就进行判断，新增的值与当前值的大小关系</span></div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 新增的值，比当前值小或者相同</span></div><div class="line">        <span class="keyword">if</span> ((Integer) v -((Integer)<span class="keyword">value</span>) &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == leftNode)</div><div class="line">                leftNode = <span class="keyword">new</span> mc_07092();</div><div class="line">            leftNode.<span class="keyword">add</span>(v);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 新增的值，比当前值大</span></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == rightNode)</div><div class="line">                rightNode = <span class="keyword">new</span> mc_07092();</div><div class="line">            rightNode.<span class="keyword">add</span>(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 中序遍历所有的节点</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">values</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    List&lt;Object&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">// 左节点的遍历结果</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != leftNode)</div><div class="line">        values.addAll(leftNode.values());</div><div class="line"></div><div class="line">    <span class="comment">// 当前节点</span></div><div class="line">    values.<span class="keyword">add</span>(<span class="keyword">value</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 右节点的遍历结果</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != rightNode)</div><div class="line"></div><div class="line">        values.addAll(rightNode.values());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> values;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> randoms[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">67</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">73</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">78</span>, <span class="number">81</span>, <span class="number">10</span>, <span class="number">74</span> &#125;;</div><div class="line"></div><div class="line">    mc_07092 roots = <span class="keyword">new</span> mc_07092();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> number : randoms) &#123;</div><div class="line">        roots.<span class="keyword">add</span>(number);</div><div class="line">    &#125;</div><div class="line">    System.<span class="keyword">out</span>.println(roots.values());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建4万个随机数，然后分别用冒泡法、选择法、二叉树3种排序算法进行排序，比较哪种更快。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>IO流</title>
    <link href="http://www.sanstylemc.cn/2018/07/08/IO%E6%B5%81/"/>
    <id>http://www.sanstylemc.cn/2018/07/08/IO流/</id>
    <published>2018-07-08T13:56:41.000Z</published>
    <updated>2018-07-09T02:46:02.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><p>需要留意的是，read会返回实际的读取数量，有可能实际的读取数量小于缓冲的大小，那么把缓冲中的数据写出到目标文件的时候，就只应该写出部分数据。<br><a id="more"></a><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* @param srcPath 源文件</span></div><div class="line"><span class="comment">* @param destPath 目标文件</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> copyFile(<span class="keyword">String</span> srcPath, <span class="keyword">String</span> destPath)&#123;</div><div class="line">     </div><div class="line">   <span class="built_in">File</span> srcFile = <span class="keyword">new</span> <span class="built_in">File</span>(srcPath);</div><div class="line">   <span class="built_in">File</span> destFile = <span class="keyword">new</span> <span class="built_in">File</span>(destPath);</div><div class="line">     </div><div class="line">   <span class="comment">//缓存区，一次性读取1024字节</span></div><div class="line">   <span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">   <span class="built_in">try</span> (</div><div class="line">           FileInputStream fis = <span class="keyword">new</span> FileInputStream(srcFile);</div><div class="line">           FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);             </div><div class="line">   )&#123;</div><div class="line">       <span class="built_in">while</span>(true)&#123;</div><div class="line">           <span class="comment">//实际读取的长度是 actuallyReaded,有可能小于1024</span></div><div class="line">           <span class="keyword">int</span> actuallyReaded = fis.<span class="built_in">read</span>(<span class="built_in">buffer</span>);</div><div class="line">           <span class="comment">//-1表示没有可读的内容了</span></div><div class="line">           <span class="built_in">if</span>(<span class="number">-1</span>==actuallyReaded)</div><div class="line">               <span class="built_in">break</span>;</div><div class="line">           fos.<span class="built_in">write</span>(<span class="built_in">buffer</span>, <span class="number">0</span>, actuallyReaded);</div><div class="line">           fos.<span class="built_in">flush</span>();</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="built_in">catch</span> (IOException e) &#123;</div><div class="line">       e.printStackTrace();</div><div class="line">   &#125;  </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* @param srcPath 源文件夹</span></div><div class="line"><span class="comment">* @param destPath 目标文件夹</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> copyFolder(<span class="keyword">String</span> srcPath, <span class="keyword">String</span> destPath)&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;  </div><div class="line">   copyFile(<span class="string">"C:\\Users\\12905\\Desktop\\xxx\\2.txt"</span>, <span class="string">"C:\\Users\\12905\\Desktop\\xxx\\3.txt"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="复制文件夹"><a href="#复制文件夹" class="headerlink" title="复制文件夹"></a>复制文件夹</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* @param srcPath 源文件</span></div><div class="line"><span class="comment">* @param destPath 目标文件</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> copyFile(<span class="keyword">String</span> srcPath, <span class="keyword">String</span> destPath)&#123;</div><div class="line">     </div><div class="line">   <span class="built_in">File</span> srcFile = <span class="keyword">new</span> <span class="built_in">File</span>(srcPath);</div><div class="line">   <span class="built_in">File</span> destFile = <span class="keyword">new</span> <span class="built_in">File</span>(destPath);</div><div class="line">     </div><div class="line">   <span class="comment">//缓存区，一次性读取1024字节</span></div><div class="line">   <span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">   <span class="built_in">try</span> (</div><div class="line">       FileInputStream fis = <span class="keyword">new</span> FileInputStream(srcFile);</div><div class="line">       FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</div><div class="line">   )&#123;</div><div class="line">       <span class="built_in">while</span>(true)&#123;</div><div class="line">           <span class="comment">//实际读取的长度是 actuallyReaded,有可能小于1024</span></div><div class="line">           <span class="keyword">int</span> actuallyReaded = fis.<span class="built_in">read</span>(<span class="built_in">buffer</span>);</div><div class="line">           <span class="comment">//-1表示没有可读的内容了</span></div><div class="line">           <span class="built_in">if</span>(<span class="number">-1</span>==actuallyReaded)</div><div class="line">               <span class="built_in">break</span>;</div><div class="line">           fos.<span class="built_in">write</span>(<span class="built_in">buffer</span>, <span class="number">0</span>, actuallyReaded);</div><div class="line">           fos.<span class="built_in">flush</span>();</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="built_in">catch</span> (FileNotFoundException e) &#123;</div><div class="line">       <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">       e.printStackTrace();</div><div class="line">   &#125; <span class="built_in">catch</span> (IOException e) &#123;</div><div class="line">       <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">       e.printStackTrace();</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* @param srcPath 源文件夹</span></div><div class="line"><span class="comment">* @param destPath 目标文件夹</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> copyFolder(<span class="keyword">String</span> srcPath, <span class="keyword">String</span> destPath)&#123;</div><div class="line">     </div><div class="line">   <span class="built_in">File</span> srcFolder = <span class="keyword">new</span> <span class="built_in">File</span>(srcPath);</div><div class="line">   <span class="built_in">File</span> destFolder = <span class="keyword">new</span> <span class="built_in">File</span>(destPath);</div><div class="line">   <span class="comment">//源文件夹不存在</span></div><div class="line">   <span class="built_in">if</span>(!srcFolder.<span class="built_in">exists</span>())</div><div class="line">       <span class="built_in">return</span>;</div><div class="line">   <span class="comment">//源文件夹不是一个文件夹</span></div><div class="line">   <span class="built_in">if</span>(!srcFolder.<span class="built_in">isDirectory</span>())</div><div class="line">       <span class="built_in">return</span>;</div><div class="line">   <span class="comment">//目标文件夹是一个文件</span></div><div class="line">   <span class="built_in">if</span>(destFolder.isFile())</div><div class="line">       <span class="built_in">return</span>;</div><div class="line">   <span class="comment">//目标文件夹不存在</span></div><div class="line">   <span class="built_in">if</span>(!destFolder.<span class="built_in">exists</span>())</div><div class="line">       destFolder.mkdirs();</div><div class="line"></div><div class="line">   <span class="comment">//遍历源文件夹</span></div><div class="line">   <span class="built_in">File</span>[] files=  srcFolder.listFiles();</div><div class="line">   <span class="built_in">for</span> (<span class="built_in">File</span> srcFile : files) &#123;</div><div class="line">       <span class="comment">//如果是文件，就复制</span></div><div class="line">       <span class="built_in">if</span>(srcFile.isFile())&#123;</div><div class="line">           <span class="built_in">File</span> newDestFile = <span class="keyword">new</span> <span class="built_in">File</span>(destFolder,srcFile.getName());</div><div class="line">           copyFile(srcFile.getAbsolutePath(), newDestFile.getAbsolutePath());</div><div class="line">       &#125;</div><div class="line">       <span class="comment">//如果是文件夹，就递归</span></div><div class="line">       <span class="built_in">if</span>(srcFile.<span class="built_in">isDirectory</span>())&#123;</div><div class="line">           <span class="built_in">File</span> newDestFolder = <span class="keyword">new</span> <span class="built_in">File</span>(destFolder,srcFile.getName());</div><div class="line">           copyFolder(srcFile.getAbsolutePath(),newDestFolder.getAbsolutePath());</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">   copyFolder(<span class="string">"C:\\Users\\12905\\Desktop\\xxx"</span>, <span class="string">"C:\\Users\\12905\\Desktop\\yyy"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="查找文件内容"><a href="#查找文件内容" class="headerlink" title="查找文件内容"></a>查找文件内容</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * @param file 查找的目录</span></div><div class="line"><span class="comment"> * @param search 查找的字符串</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> search(<span class="keyword">File</span> <span class="keyword">file</span>, String search) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">file</span>.isFile()) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">file</span>.getName().toLowerCase().endsWith(<span class="string">".java"</span>))&#123;</div><div class="line">            String fileContent = readFileConent(<span class="keyword">file</span>);</div><div class="line">            <span class="keyword">if</span>(fileContent.contains(search))&#123;</div><div class="line">                System.out.printf(<span class="string">"找到子目标字符串%s,在文件:%s%n"</span>,search,<span class="keyword">file</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">file</span>.isDirectory()) &#123;</div><div class="line">        <span class="keyword">File</span>[] fs = <span class="keyword">file</span>.listFiles();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">File</span> f : fs) &#123;</div><div class="line">            search(f, search);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String readFileConent(<span class="keyword">File</span> <span class="keyword">file</span>)&#123;</div><div class="line">    <span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> FileReader(<span class="keyword">file</span>)) &#123;</div><div class="line">        <span class="keyword">char</span>[] all = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) <span class="keyword">file</span>.length()];</div><div class="line">        fr.<span class="keyword">read</span>(all);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(all);</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">    <span class="keyword">File</span> folder =<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"e:\\project"</span>);</div><div class="line">    search(folder,<span class="string">"Magic"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="流关系图"><a href="#流关系图" class="headerlink" title="流关系图"></a>流关系图</h2><p><img src="https://github.com/sunstady/hexo/blob/master/IO%E6%B5%81/1.png?raw=true" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;复制文件&quot;&gt;&lt;a href=&quot;#复制文件&quot; class=&quot;headerlink&quot; title=&quot;复制文件&quot;&gt;&lt;/a&gt;复制文件&lt;/h2&gt;&lt;p&gt;需要留意的是，read会返回实际的读取数量，有可能实际的读取数量小于缓冲的大小，那么把缓冲中的数据写出到目标文件的时候，就只应该写出部分数据。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL非主键自增</title>
    <link href="http://www.sanstylemc.cn/2018/06/29/MySQL%E9%9D%9E%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E/"/>
    <id>http://www.sanstylemc.cn/2018/06/29/MySQL非主键自增/</id>
    <published>2018-06-29T05:07:37.000Z</published>
    <updated>2018-06-29T05:09:38.422Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL中，一张表只能有一个自增，但不一定是主键自增。<br><a id="more"></a><br>首先创建一个测试表。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</div><div class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) primary <span class="keyword">key</span>,</div><div class="line"><span class="keyword">sid</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</div><div class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line"><span class="keyword">key</span>(<span class="keyword">sid</span>));</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/sunstady/hexo/blob/master/MySQL%E9%9D%9E%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E/1.jpg?raw=true" alt="1"><br>接着插入一条语句。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span>(<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">'a'</span>);</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/sunstady/hexo/blob/master/MySQL%E9%9D%9E%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E/2.jpg?raw=true" alt="2"><br>发现sid非主键自增。</p>
<p><code>原理</code>:<br><img src="https://github.com/sunstady/hexo/blob/master/MySQL%E9%9D%9E%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E/3.jpg?raw=true" alt="3"><br><code>ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key</code><br>意思大义是：只能有一个自动列，并且必须被定义为键(key)。<br>翻译成白话文就是说，普通列是没办法创建自增长的。</p>
<p><code>结论</code>: MySQL中的每张表只能设置一个字段为自增长，这个字段可以是非主键，但必须是一种键(key)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL中，一张表只能有一个自增，但不一定是主键自增。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>员工部门表综合查询</title>
    <link href="http://www.sanstylemc.cn/2018/06/16/%E5%91%98%E5%B7%A5%E9%83%A8%E9%97%A8%E8%A1%A8%E7%BB%BC%E5%90%88%E6%9F%A5%E8%AF%A2/"/>
    <id>http://www.sanstylemc.cn/2018/06/16/员工部门表综合查询/</id>
    <published>2018-06-16T09:25:46.000Z</published>
    <updated>2018-06-16T09:26:22.095Z</updated>
    
    <content type="html"><![CDATA[<p>员工部门表综合查询<br><a id="more"></a></p>
<h2 id="创建员工部门表"><a href="#创建员工部门表" class="headerlink" title="创建员工部门表"></a>创建员工部门表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> oa;</div><div class="line"><span class="keyword">USE</span> oa;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept(</div><div class="line">deptno <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</div><div class="line">dname <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</div><div class="line">loc <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> emp</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</div><div class="line">empno <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</div><div class="line">ename <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">job <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">CHECK</span> (job <span class="keyword">IN</span> (<span class="string">'CLERK'</span>,<span class="string">'SALESMAN'</span>,<span class="string">'MANAGER'</span>,<span class="string">'SALESMAN'</span>,<span class="string">'ANALYST'</span>)),</div><div class="line">mgp <span class="built_in">INT</span> ,</div><div class="line">hiredate DATETIME ,</div><div class="line">sal <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</div><div class="line">comm <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</div><div class="line">DEPTNO <span class="built_in">INT</span> FOREIGN <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> dept(deptno)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept <span class="keyword">VALUES</span> (<span class="number">10</span>,<span class="string">'ACCOUNTING'</span>,<span class="string">'NEWTORK'</span>)</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept <span class="keyword">VALUES</span> (<span class="number">20</span>,<span class="string">'RESEARCH'</span>,<span class="string">'DALLAS'</span>)</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept <span class="keyword">VALUES</span> (<span class="number">30</span>,<span class="string">'SALES'</span>,<span class="string">'CHICAGO'</span>)</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept <span class="keyword">VALUES</span> (<span class="number">40</span>,<span class="string">'OPERATIONS'</span>,<span class="string">'BOSTON'</span>)</div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7369</span>,<span class="string">'SMITH'</span>,<span class="string">'CLERK'</span>,<span class="number">7902</span>,<span class="string">'1980-12-17'</span>,<span class="number">1640</span>,<span class="literal">NULL</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7499</span>,<span class="string">'ALLEN'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="string">'1981-2-20'</span>,<span class="number">11400</span>,<span class="number">300</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7521</span>,<span class="string">'WARD'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="string">'1981-2-22'</span>,<span class="number">5200</span>,<span class="number">500</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7566</span>,<span class="string">'JOENS'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="string">'1981-4-2'</span>,<span class="number">7015</span>,<span class="literal">NULL</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7654</span>,<span class="string">'MARTIN'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="string">'1981-9-28'</span>,<span class="number">5200</span>,<span class="number">1400</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7698</span>,<span class="string">'BLAKE'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="string">'1981-5-1'</span>,<span class="number">5900</span>,<span class="literal">NULL</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7782</span>,<span class="string">'CLARK'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="string">'1981-6-9'</span>,<span class="number">2470</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7788</span>,<span class="string">'SCOTT'</span>,<span class="string">'ANALYST'</span>,<span class="number">7566</span>,<span class="string">'1987-4-19'</span>,<span class="number">3040</span>,<span class="literal">NULL</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7844</span>,<span class="string">'TURNER'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="string">'1980-12-17'</span>,<span class="number">6200</span>,<span class="number">0</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7876</span>,<span class="string">'ADAMS'</span>,<span class="string">'CLERK'</span>,<span class="number">7788</span>,<span class="string">'1981-9-8'</span>,<span class="number">2240</span>,<span class="literal">NULL</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7900</span>,<span class="string">'JAMES'</span>,<span class="string">'CLERK'</span>,<span class="number">7698</span>,<span class="string">'1987-5-23'</span>,<span class="number">4000</span>,<span class="literal">NULL</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7902</span>,<span class="string">'FORD'</span>,<span class="string">'ANALYST'</span>,<span class="number">7566</span>,<span class="string">'1981-12-3'</span>,<span class="number">3040</span>,<span class="literal">NULL</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">7934</span>,<span class="string">'MILLER'</span>,<span class="string">'CLERK'</span>,<span class="number">7782</span>,<span class="string">'1982-12-3'</span>,<span class="number">2620</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</div></pre></td></tr></table></figure>
<h2 id="查询20部门的所有员工信息。"><a href="#查询20部门的所有员工信息。" class="headerlink" title="查询20部门的所有员工信息。"></a>查询20部门的所有员工信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">20</span>;</div></pre></td></tr></table></figure>
<h2 id="查询所有工种为CLERK的员工的员工号、员工名和部门号。"><a href="#查询所有工种为CLERK的员工的员工号、员工名和部门号。" class="headerlink" title="查询所有工种为CLERK的员工的员工号、员工名和部门号。"></a>查询所有工种为CLERK的员工的员工号、员工名和部门号。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> empno,ename,deptno <span class="keyword">from</span> emp <span class="keyword">where</span> job=<span class="string">'CLERK'</span>;</div></pre></td></tr></table></figure>
<h2 id="查询奖金（COMM）高于工资（SAL）的员工信息。"><a href="#查询奖金（COMM）高于工资（SAL）的员工信息。" class="headerlink" title="查询奖金（COMM）高于工资（SAL）的员工信息。"></a>查询奖金（COMM）高于工资（SAL）的员工信息。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">isnull</span>(comm,<span class="number">0</span>)&gt;sal</div></pre></td></tr></table></figure>
<h2 id="查询奖金高于工资的20-的员工信息。"><a href="#查询奖金高于工资的20-的员工信息。" class="headerlink" title="查询奖金高于工资的20%的员工信息。"></a>查询奖金高于工资的20%的员工信息。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">isnull</span>(comm,<span class="number">0</span>)&gt;sal*<span class="number">0.2</span></div></pre></td></tr></table></figure>
<h2 id="查询所有工种不是MANAGER和CLERK，且工资大于或等于2000的员工的详细信息。"><a href="#查询所有工种不是MANAGER和CLERK，且工资大于或等于2000的员工的详细信息。" class="headerlink" title="查询所有工种不是MANAGER和CLERK，且工资大于或等于2000的员工的详细信息。"></a>查询所有工种不是MANAGER和CLERK，且工资大于或等于2000的员工的详细信息。</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> job <span class="keyword">not</span> <span class="keyword">in</span>(<span class="string">'MANAGER'</span>,<span class="string">'CLERK'</span>) </div><div class="line"><span class="keyword">and</span> sal&gt;=<span class="number">2000</span></div></pre></td></tr></table></figure>
<h2 id="查询有奖金的员工的不同工种。"><a href="#查询有奖金的员工的不同工种。" class="headerlink" title="查询有奖金的员工的不同工种。"></a>查询有奖金的员工的不同工种。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> job <span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> comm <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></div></pre></td></tr></table></figure>
<h2 id="查询没有奖金或奖金低于100的员工信息。"><a href="#查询没有奖金或奖金低于100的员工信息。" class="headerlink" title="查询没有奖金或奖金低于100的员工信息。"></a>查询没有奖金或奖金低于100的员工信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * </div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> comm <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">or</span> comm&lt;<span class="number">100</span></div></pre></td></tr></table></figure>
<h2 id="查询各月倒数第3天-倒数第2天-入职的员工信息。"><a href="#查询各月倒数第3天-倒数第2天-入职的员工信息。" class="headerlink" title="查询各月倒数第3天(倒数第2天)入职的员工信息。"></a>查询各月倒数第3天(倒数第2天)入职的员工信息。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> <span class="keyword">DATENAME</span>(<span class="keyword">day</span>,hiredate+<span class="number">3</span>)=<span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="查询工龄大于或等于25年的员工信息。"><a href="#查询工龄大于或等于25年的员工信息。" class="headerlink" title="查询工龄大于或等于25年的员工信息。"></a>查询工龄大于或等于25年的员工信息。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename 姓名,hiredate 雇用日期,<span class="keyword">datediff</span>(<span class="keyword">year</span>,hiredate,<span class="keyword">getdate</span>()) 工资</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> <span class="keyword">datediff</span>(<span class="keyword">year</span>,hiredate,<span class="keyword">getdate</span>())&gt;=<span class="number">25</span></div></pre></td></tr></table></figure>
<h2 id="查询员工信息，要求以首字母大写的方式显示所有员工的姓名。"><a href="#查询员工信息，要求以首字母大写的方式显示所有员工的姓名。" class="headerlink" title="查询员工信息，要求以首字母大写的方式显示所有员工的姓名。"></a>查询员工信息，要求以首字母大写的方式显示所有员工的姓名。</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select upper(<span class="name">SUBSTRING</span>(<span class="name">ename</span>,<span class="number">1</span>,<span class="number">1</span>))+lower(<span class="name">substring</span>(<span class="name">ename</span>,<span class="number">2</span>,(<span class="name">len</span>(<span class="name">ename</span>)<span class="number">-1</span>)))</div><div class="line">from emp</div></pre></td></tr></table></figure>
<h2 id="查询员工名正好为6个字符的员工的信息。"><a href="#查询员工名正好为6个字符的员工的信息。" class="headerlink" title="查询员工名正好为6个字符的员工的信息。"></a>查询员工名正好为6个字符的员工的信息。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="title">len</span>(<span class="params">ename</span>)</span>=<span class="number">6</span></div></pre></td></tr></table></figure>
<h2 id="查询员工名字中不包含字母“S”的员工。"><a href="#查询员工名字中不包含字母“S”的员工。" class="headerlink" title="查询员工名字中不包含字母“Ｓ”的员工。"></a>查询员工名字中不包含字母“Ｓ”的员工。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">'%Ｓ%'</span></div></pre></td></tr></table></figure>
<h2 id="查询员工姓名的第二字母为“M”的员工信息。"><a href="#查询员工姓名的第二字母为“M”的员工信息。" class="headerlink" title="查询员工姓名的第二字母为“M”的员工信息。"></a>查询员工姓名的第二字母为“M”的员工信息。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'_M%'</span></div></pre></td></tr></table></figure>
<h2 id="查询所有员工姓名的前三个字符。"><a href="#查询所有员工姓名的前三个字符。" class="headerlink" title="查询所有员工姓名的前三个字符。"></a>查询所有员工姓名的前三个字符。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename 员工姓名,<span class="keyword">substring</span>(ename,<span class="number">1</span>,<span class="number">3</span>) 员工姓名的前三个字符</div><div class="line"><span class="keyword">from</span> emp</div></pre></td></tr></table></figure>
<h2 id="查询员工的姓名和入职日期，并按入职日期从先到后进行排序。"><a href="#查询员工的姓名和入职日期，并按入职日期从先到后进行排序。" class="headerlink" title="查询员工的姓名和入职日期，并按入职日期从先到后进行排序。"></a>查询员工的姓名和入职日期，并按入职日期从先到后进行排序。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename,hiredate</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> hiredate</div></pre></td></tr></table></figure>
<h2 id="显示所有员工的姓名、工种、工资和奖金，按工种降序排序，若工种相同则按工资升序排序。"><a href="#显示所有员工的姓名、工种、工资和奖金，按工种降序排序，若工种相同则按工资升序排序。" class="headerlink" title="显示所有员工的姓名、工种、工资和奖金，按工种降序排序，若工种相同则按工资升序排序。"></a>显示所有员工的姓名、工种、工资和奖金，按工种降序排序，若工种相同则按工资升序排序。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename,job,sal,comm</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> job <span class="keyword">desc</span></div></pre></td></tr></table></figure>
<h2 id="查询在2月份入职的所有员工信息。"><a href="#查询在2月份入职的所有员工信息。" class="headerlink" title="查询在2月份入职的所有员工信息。"></a>查询在2月份入职的所有员工信息。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp</div><div class="line"><span class="function"><span class="keyword">where</span> <span class="title">datename</span>(<span class="params">mm,hiredate</span>)</span>=<span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="查询至少有一个员工的部门信息。"><a href="#查询至少有一个员工的部门信息。" class="headerlink" title="查询至少有一个员工的部门信息。"></a>查询至少有一个员工的部门信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> d.dname,<span class="built_in">count</span>(empno) 部门人数</div><div class="line"><span class="keyword">from</span> emp <span class="built_in">e</span></div><div class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> d.deptno=<span class="built_in">e</span>.deptno</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.dname,<span class="built_in">e</span>.deptno</div><div class="line"><span class="keyword">having</span> <span class="built_in">count</span>(empno)&gt;=<span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="查询至少有两个员工的部门信息。"><a href="#查询至少有两个员工的部门信息。" class="headerlink" title="查询至少有两个员工的部门信息。"></a>查询至少有两个员工的部门信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> d.dname,<span class="built_in">count</span>(empno) 部门人数</div><div class="line"><span class="keyword">from</span> emp <span class="built_in">e</span></div><div class="line"><span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> d.deptno=<span class="built_in">e</span>.deptno</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.dname,<span class="built_in">e</span>.deptno</div><div class="line"><span class="keyword">having</span> <span class="built_in">count</span>(empno)&gt;<span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="查询工资比SMITH员工工资高的所有员工信息。"><a href="#查询工资比SMITH员工工资高的所有员工信息。" class="headerlink" title="查询工资比SMITH员工工资高的所有员工信息。"></a>查询工资比SMITH员工工资高的所有员工信息。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> sal&gt;(</div><div class="line"><span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">'SMITH'</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询所有员工的姓名及其直接上级的姓名。"><a href="#查询所有员工的姓名及其直接上级的姓名。" class="headerlink" title="查询所有员工的姓名及其直接上级的姓名。"></a>查询所有员工的姓名及其直接上级的姓名。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename 员工的姓名,(</div><div class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.empno=e1.mgp</div><div class="line">) 直接上级</div><div class="line"><span class="keyword">from</span> emp e1</div></pre></td></tr></table></figure>
<h2 id="查询入职日期早于其直接上级领导的所有员工信息。"><a href="#查询入职日期早于其直接上级领导的所有员工信息。" class="headerlink" title="查询入职日期早于其直接上级领导的所有员工信息。"></a>查询入职日期早于其直接上级领导的所有员工信息。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename 员工的姓名,hiredate 入职日期,(</div><div class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.empno=e1.mgp</div><div class="line">) 直接上级,(</div><div class="line"><span class="keyword">select</span> hiredate <span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.empno=e1.mgp</div><div class="line">) 直接上级入职日期</div><div class="line"><span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">where</span> e1.hiredate&lt;(<span class="keyword">select</span> hiredate </div><div class="line"><span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.empno=e1.mgp</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询所有部门及其员工信息，包括那些没有员工的部门。"><a href="#查询所有部门及其员工信息，包括那些没有员工的部门。" class="headerlink" title="查询所有部门及其员工信息，包括那些没有员工的部门。"></a>查询所有部门及其员工信息，包括那些没有员工的部门。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> dept.dname,emp.ename </div><div class="line"><span class="keyword">from</span> dept</div><div class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp <span class="keyword">on</span> emp.deptno=dept.deptno</div></pre></td></tr></table></figure>
<h2 id="查询所有员工及其部门信息，包括那些还不属于任何部门的员工。"><a href="#查询所有员工及其部门信息，包括那些还不属于任何部门的员工。" class="headerlink" title="查询所有员工及其部门信息，包括那些还不属于任何部门的员工。"></a>查询所有员工及其部门信息，包括那些还不属于任何部门的员工。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> dept.dname,emp.ename </div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.deptno=dept.deptno</div></pre></td></tr></table></figure>
<h2 id="查询所有工种为CLERK的员工的姓名及其部门名称。"><a href="#查询所有工种为CLERK的员工的姓名及其部门名称。" class="headerlink" title="查询所有工种为CLERK的员工的姓名及其部门名称。"></a>查询所有工种为CLERK的员工的姓名及其部门名称。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> dept.dname,emp.ename,emp.job </div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.deptno=dept.deptno</div><div class="line"><span class="keyword">where</span> job=<span class="string">'CLERK'</span></div></pre></td></tr></table></figure>
<h2 id="查询最低工资大于2500的各种工作。"><a href="#查询最低工资大于2500的各种工作。" class="headerlink" title="查询最低工资大于2500的各种工作。"></a>查询最低工资大于2500的各种工作。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> job,sal </div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> sal&gt;<span class="number">2500</span></div></pre></td></tr></table></figure>
<h2 id="查询平均工资低于2000的部门及其员工信息。"><a href="#查询平均工资低于2000的部门及其员工信息。" class="headerlink" title="查询平均工资低于2000的部门及其员工信息。"></a>查询平均工资低于2000的部门及其员工信息。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select *</div><div class="line"><span class="keyword">from</span> dept left outer join emp on dept.<span class="attribute">deptno</span>=emp.deptno</div><div class="line">where dept.deptno <span class="keyword">in</span> (</div><div class="line">select deptno <span class="keyword">from</span> emp</div><div class="line">group by deptno</div><div class="line">having avg(sal)&lt;2000)</div></pre></td></tr></table></figure>
<h2 id="查询在SALES部门工作的员工的姓名信息。"><a href="#查询在SALES部门工作的员工的姓名信息。" class="headerlink" title="查询在SALES部门工作的员工的姓名信息。"></a>查询在SALES部门工作的员工的姓名信息。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">表连接</div><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> dept <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp <span class="keyword">on</span> dept.deptno=emp.deptno</div><div class="line"><span class="keyword">where</span> dept.dname=<span class="string">'SALES'</span></div><div class="line">子查询</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp </div><div class="line"><span class="keyword">where</span> emp.deptno=(</div><div class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> dept <span class="keyword">where</span> dname=<span class="string">'SALES'</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询工资高于公司平均工资的所有员工信息。"><a href="#查询工资高于公司平均工资的所有员工信息。" class="headerlink" title="查询工资高于公司平均工资的所有员工信息。"></a>查询工资高于公司平均工资的所有员工信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> sal&gt;(</div><div class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(sal)</div><div class="line"><span class="keyword">from</span> emp)</div></pre></td></tr></table></figure>
<h2 id="查询出与SMITH员工从事相同工作的所有员工信息。"><a href="#查询出与SMITH员工从事相同工作的所有员工信息。" class="headerlink" title="查询出与SMITH员工从事相同工作的所有员工信息。"></a>查询出与SMITH员工从事相同工作的所有员工信息。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> job = (</div><div class="line"><span class="keyword">select</span> job </div><div class="line"><span class="keyword">from</span> emp </div><div class="line"><span class="keyword">where</span> ename=<span class="string">'SMITH'</span>)</div></pre></td></tr></table></figure>
<h2 id="列出工资等于30部门中某个员工的工资的所有员工的姓名和工资。"><a href="#列出工资等于30部门中某个员工的工资的所有员工的姓名和工资。" class="headerlink" title="列出工资等于30部门中某个员工的工资的所有员工的姓名和工资。"></a>列出工资等于30部门中某个员工的工资的所有员工的姓名和工资。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> sal <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> sal</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> deptno=<span class="number">30</span>) <span class="keyword">and</span> deptno!=<span class="number">30</span></div></pre></td></tr></table></figure>
<h2 id="查询工资高于30部门工作的所有员工的工资的员工姓名和工资。"><a href="#查询工资高于30部门工作的所有员工的工资的员工姓名和工资。" class="headerlink" title="查询工资高于30部门工作的所有员工的工资的员工姓名和工资。"></a>查询工资高于30部门工作的所有员工的工资的员工姓名和工资。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> sal &gt; <span class="keyword">all</span>(</div><div class="line"><span class="keyword">select</span> sal</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> deptno=<span class="number">30</span>)</div></pre></td></tr></table></figure>
<h2 id="查询每个部门中的员工数量、平均工资和平均工作年限。"><a href="#查询每个部门中的员工数量、平均工资和平均工作年限。" class="headerlink" title="查询每个部门中的员工数量、平均工资和平均工作年限。"></a>查询每个部门中的员工数量、平均工资和平均工作年限。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> dname 部门,<span class="keyword">count</span>(ename) 员工数量,<span class="keyword">isnull</span>(<span class="keyword">avg</span>(sal),<span class="number">0</span>) 平均工资,</div><div class="line"><span class="keyword">isnull</span>(<span class="keyword">avg</span>(<span class="keyword">datediff</span>(yy,hiredate,<span class="keyword">getdate</span>())),<span class="number">0</span>) 平均工作年限</div><div class="line"><span class="keyword">from</span> dept d </div><div class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> d.deptno=e.deptno</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.dname</div></pre></td></tr></table></figure>
<h2 id="查询从事同一种工作但不属于同一部门的员工信息。"><a href="#查询从事同一种工作但不属于同一部门的员工信息。" class="headerlink" title="查询从事同一种工作但不属于同一部门的员工信息。"></a>查询从事同一种工作但不属于同一部门的员工信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">where</span> e1.job <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> e2.job</div><div class="line"><span class="keyword">from</span> emp e2</div><div class="line"><span class="keyword">where</span> e2.deptno != e1.deptno </div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询各个部门的详细信息以及部门人数、部门平均工资。"><a href="#查询各个部门的详细信息以及部门人数、部门平均工资。" class="headerlink" title="查询各个部门的详细信息以及部门人数、部门平均工资。"></a>查询各个部门的详细信息以及部门人数、部门平均工资。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> d.dname 部门名称,d.deptno 部门编号,<span class="built_in">count</span>(<span class="built_in">e</span>.empno) 人数,<span class="built_in">avg</span>(<span class="built_in">e</span>.sal) 平均工资 </div><div class="line"><span class="keyword">from</span> dept d </div><div class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp <span class="built_in">e</span> <span class="keyword">on</span> d.deptno=<span class="built_in">e</span>.deptno</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.deptno,d.dname</div></pre></td></tr></table></figure>
<h2 id="查询各种工作的最低工资。"><a href="#查询各种工作的最低工资。" class="headerlink" title="查询各种工作的最低工资。"></a>查询各种工作的最低工资。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select job 工种,min(sal) 最低工资</div><div class="line"><span class="keyword">from</span> emp</div><div class="line">group by job</div></pre></td></tr></table></figure>
<h2 id="查询各个部门中不同工种的最高工资。"><a href="#查询各个部门中不同工种的最高工资。" class="headerlink" title="查询各个部门中不同工种的最高工资。"></a>查询各个部门中不同工种的最高工资。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select dname 部门名称,job 工种,max(isnull(sal,0)) 最高工资</div><div class="line"><span class="keyword">from</span> dept d left join emp e on d.<span class="attribute">deptno</span>=e.deptno</div><div class="line">group by job,dname</div></pre></td></tr></table></figure>
<h2 id="查询10号部门员工及其领导的信息。"><a href="#查询10号部门员工及其领导的信息。" class="headerlink" title="查询10号部门员工及其领导的信息。"></a>查询10号部门员工及其领导的信息。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> deptno 部门,ename 姓名 ,(<span class="keyword">select</span> e2.ename <span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.mgp=e1.empno) 上级领导</div><div class="line"><span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">where</span> deptno=<span class="number">10</span></div></pre></td></tr></table></figure>
<h2 id="查询各个部门的人数及平均工资。"><a href="#查询各个部门的人数及平均工资。" class="headerlink" title="查询各个部门的人数及平均工资。"></a>查询各个部门的人数及平均工资。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select dname 部门名称,count(ename) 部门人数,avg(isnull(sal,0)) 平均工资</div><div class="line"><span class="keyword">from</span> dept d left outer join emp e on d.<span class="attribute">deptno</span>=e.deptno</div><div class="line">group by d.dname</div></pre></td></tr></table></figure>
<h2 id="查询工资为某个部门平均工资的员工的信息。"><a href="#查询工资为某个部门平均工资的员工的信息。" class="headerlink" title="查询工资为某个部门平均工资的员工的信息。"></a>查询工资为某个部门平均工资的员工的信息。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select * <span class="keyword">from</span> emp</div><div class="line">where sal <span class="keyword">in</span>(</div><div class="line">select avg(sal)</div><div class="line"><span class="keyword">from</span> emp<span class="built_in"> group </span>by deptno</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询工资高于本部门平均工资的员工的信息。"><a href="#查询工资高于本部门平均工资的员工的信息。" class="headerlink" title="查询工资高于本部门平均工资的员工的信息。"></a>查询工资高于本部门平均工资的员工的信息。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">where</span> sal&gt;(</div><div class="line"><span class="function"><span class="keyword">select</span> <span class="title">avg</span>(<span class="params">sal</span>)</span></div><div class="line"><span class="function"><span class="keyword">from</span> emp e2</span></div><div class="line"><span class="function"><span class="keyword">where</span> e2.deptno</span>=e1.deptno</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询工资高于本部门平均工资的员工的信息及其部门的平均工资。"><a href="#查询工资高于本部门平均工资的员工的信息及其部门的平均工资。" class="headerlink" title="查询工资高于本部门平均工资的员工的信息及其部门的平均工资。"></a>查询工资高于本部门平均工资的员工的信息及其部门的平均工资。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *,(<span class="function"><span class="keyword">select</span> <span class="title">avg</span>(<span class="params">sal</span>) <span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.deptno</span>=e1.deptno) 部门平均工资</div><div class="line"><span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">where</span> sal&gt;(</div><div class="line"><span class="function"><span class="keyword">select</span> <span class="title">avg</span>(<span class="params">sal</span>) <span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.deptno</span>=e1.deptno</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询工资高于20号部门某个员工工资的员工的信息。"><a href="#查询工资高于20号部门某个员工工资的员工的信息。" class="headerlink" title="查询工资高于20号部门某个员工工资的员工的信息。"></a>查询工资高于20号部门某个员工工资的员工的信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">where</span> sal&gt; <span class="keyword">any</span>(</div><div class="line"><span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="built_in">e</span> <span class="keyword">where</span> deptno=<span class="number">20</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="统计各个工种的员工人数与平均工资。"><a href="#统计各个工种的员工人数与平均工资。" class="headerlink" title="统计各个工种的员工人数与平均工资。"></a>统计各个工种的员工人数与平均工资。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select job 工种,count(empno) 员工人数,avg(sal) 平均工资</div><div class="line"><span class="keyword">from</span> emp</div><div class="line">group by job</div></pre></td></tr></table></figure>
<h2 id="统计每个部门中各工种的人数与平均工资。"><a href="#统计每个部门中各工种的人数与平均工资。" class="headerlink" title="统计每个部门中各工种的人数与平均工资。"></a>统计每个部门中各工种的人数与平均工资。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select dname 部门,job 工种,count(empno) 人数,avg(isnull(sal,0)) 平均工资</div><div class="line"><span class="keyword">from</span> dept d left outer join emp e on d.<span class="attribute">deptno</span>=e.deptno</div><div class="line">group by job,dname</div></pre></td></tr></table></figure>
<h2 id="查询其他部门中工资、奖金与30号部门某员工工资、奖金都相同的员工的信息。没有查询结果"><a href="#查询其他部门中工资、奖金与30号部门某员工工资、奖金都相同的员工的信息。没有查询结果" class="headerlink" title="查询其他部门中工资、奖金与30号部门某员工工资、奖金都相同的员工的信息。没有查询结果"></a>查询其他部门中工资、奖金与30号部门某员工工资、奖金都相同的员工的信息。没有查询结果</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp <span class="built_in">e</span></div><div class="line"><span class="keyword">where</span> isnull(sal,<span class="number">0</span>)+isnull(comm,<span class="number">0</span>) <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> isnull(sal,<span class="number">0</span>)+isnull(comm,<span class="number">0</span>)</div><div class="line"><span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">where</span> e1.deptno=<span class="number">30</span> <span class="keyword">and</span> <span class="built_in">e</span>.sal=e1.sal <span class="keyword">and</span> <span class="built_in">e</span>.comm=e1.comm <span class="keyword">and</span> <span class="built_in">e</span>.deptno!=<span class="number">30</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询部门人数大于5的部门的员工信息。"><a href="#查询部门人数大于5的部门的员工信息。" class="headerlink" title="查询部门人数大于5的部门的员工信息。"></a>查询部门人数大于5的部门的员工信息。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select * <span class="keyword">from</span> emp </div><div class="line">where deptno <span class="keyword">in</span>(</div><div class="line">select deptno</div><div class="line"><span class="keyword">from</span> emp</div><div class="line">group by deptno</div><div class="line">having count(empno)&gt;5)</div></pre></td></tr></table></figure>
<h2 id="查询所有员工工资都大于1000的部门的信息。"><a href="#查询所有员工工资都大于1000的部门的信息。" class="headerlink" title="查询所有员工工资都大于1000的部门的信息。"></a>查询所有员工工资都大于1000的部门的信息。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">select *</div><div class="line"><span class="keyword">from</span> dept d</div><div class="line">where deptno <span class="keyword">in</span> (</div><div class="line">select deptno <span class="keyword">from</span> emp e</div><div class="line">group by deptno</div><div class="line">having min(sal)&gt;1000</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询所有员工工资都大于1000的部门的信息及其员工信息。"><a href="#查询所有员工工资都大于1000的部门的信息及其员工信息。" class="headerlink" title="查询所有员工工资都大于1000的部门的信息及其员工信息。"></a>查询所有员工工资都大于1000的部门的信息及其员工信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> dept d <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp <span class="built_in">e</span> <span class="keyword">on</span> d.deptno=<span class="built_in">e</span>.deptno</div><div class="line"><span class="keyword">where</span> <span class="built_in">e</span>.deptno <span class="keyword">in</span> (</div><div class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> emp e1</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno</div><div class="line"><span class="keyword">having</span> <span class="built_in">min</span>(sal)&gt;<span class="number">1000</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询所有员工工资都在900～3000之间的部门的信息。"><a href="#查询所有员工工资都在900～3000之间的部门的信息。" class="headerlink" title="查询所有员工工资都在900～3000之间的部门的信息。"></a>查询所有员工工资都在900～3000之间的部门的信息。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select * <span class="keyword">from</span> dept</div><div class="line">where deptno <span class="keyword">in</span>(</div><div class="line">select deptno <span class="keyword">from</span> emp </div><div class="line">group by deptno </div><div class="line">having min(sal)&gt;900 <span class="keyword">and</span> max(sal)&lt;3000</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询有工资在900～3000之间的员工所在部门的员工信息。"><a href="#查询有工资在900～3000之间的员工所在部门的员工信息。" class="headerlink" title="查询有工资在900～3000之间的员工所在部门的员工信息。"></a>查询有工资在900～3000之间的员工所在部门的员工信息。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select * <span class="keyword">from</span> emp</div><div class="line">where deptno <span class="keyword">in</span>(</div><div class="line">select deptno <span class="keyword">from</span> emp </div><div class="line">group by deptno </div><div class="line">having min(sal)&gt;900 <span class="keyword">and</span> max(sal)&lt;3000</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="查询每个员工的领导所在部门的信息。"><a href="#查询每个员工的领导所在部门的信息。" class="headerlink" title="查询每个员工的领导所在部门的信息。"></a>查询每个员工的领导所在部门的信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename 员工,(</div><div class="line"><span class="keyword">select</span> e1.ename <span class="keyword">from</span> emp e1 <span class="keyword">where</span> emp.mgp=e1.empno</div><div class="line">) 领导,(</div><div class="line"><span class="keyword">select</span> d.dname</div><div class="line"><span class="keyword">from</span> emp <span class="built_in">e</span> <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> <span class="built_in">e</span>.deptno=d.deptno</div><div class="line"><span class="keyword">where</span> emp.mgp=<span class="built_in">e</span>.empno </div><div class="line">) 领导所在部门</div><div class="line"><span class="keyword">from</span> emp</div></pre></td></tr></table></figure>
<h2 id="查询人数最多的部门信息。"><a href="#查询人数最多的部门信息。" class="headerlink" title="查询人数最多的部门信息。"></a>查询人数最多的部门信息。</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select * <span class="keyword">from</span> dept</div><div class="line">where deptno =(</div><div class="line">select top 1 deptno</div><div class="line"><span class="keyword">from</span> emp</div><div class="line">group by deptno</div><div class="line">order by -count(empno))</div></pre></td></tr></table></figure>
<h2 id="查询30号部门中工资排序前3名的员工信息。"><a href="#查询30号部门中工资排序前3名的员工信息。" class="headerlink" title="查询30号部门中工资排序前3名的员工信息。"></a>查询30号部门中工资排序前3名的员工信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> top <span class="number">3</span> *</div><div class="line"><span class="keyword">from</span> emp </div><div class="line"><span class="keyword">where</span> deptno=<span class="number">30</span> </div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> -sal</div></pre></td></tr></table></figure>
<h2 id="查询所有员工中工资排序在5到10名之间的员工信息。"><a href="#查询所有员工中工资排序在5到10名之间的员工信息。" class="headerlink" title="查询所有员工中工资排序在5到10名之间的员工信息。"></a>查询所有员工中工资排序在5到10名之间的员工信息。</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> top <span class="number">5</span> *</div><div class="line"><span class="keyword">from</span> (</div><div class="line"><span class="keyword">select</span> top <span class="number">10</span> *</div><div class="line"><span class="keyword">from</span> emp </div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> -sal) <span class="built_in">e</span></div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal</div></pre></td></tr></table></figure>
<h2 id="查询指定年份之间入职的员工信息。-1980-1985"><a href="#查询指定年份之间入职的员工信息。-1980-1985" class="headerlink" title="查询指定年份之间入职的员工信息。(1980-1985)"></a>查询指定年份之间入职的员工信息。(1980-1985)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> <span class="keyword">datename</span>(<span class="keyword">year</span>,hiredate) <span class="keyword">between</span> <span class="number">1980</span> <span class="keyword">and</span> <span class="number">1985</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;员工部门表综合查询&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL选择题</title>
    <link href="http://www.sanstylemc.cn/2018/06/06/MySQL%E9%80%89%E6%8B%A9%E9%A2%98/"/>
    <id>http://www.sanstylemc.cn/2018/06/06/MySQL选择题/</id>
    <published>2018-06-06T13:53:21.000Z</published>
    <updated>2018-06-07T02:37:17.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="向数据表中插入一条记录用以下哪一项-B"><a href="#向数据表中插入一条记录用以下哪一项-B" class="headerlink" title="向数据表中插入一条记录用以下哪一项(B)"></a>向数据表中插入一条记录用以下哪一项(<strong>B</strong>)</h2><p>A、CREATE<br>B、INSERT<br>C、SAVE<br>D、UPDATE<br><a id="more"></a></p>
<h2 id="如果只需要返回匹配的列，则应当使用哪种连接-A"><a href="#如果只需要返回匹配的列，则应当使用哪种连接-A" class="headerlink" title="如果只需要返回匹配的列，则应当使用哪种连接(A)"></a>如果只需要返回匹配的列，则应当使用哪种连接(<strong>A</strong>)</h2><p>A、内连接<br>B、交叉连接<br>C、左连接<br>D、全连接</p>
<h2 id="下聚合函数求数据总和的是-B"><a href="#下聚合函数求数据总和的是-B" class="headerlink" title="下聚合函数求数据总和的是(B)"></a>下聚合函数求数据总和的是(<strong>B</strong>)</h2><p>A、MAX<br>B、SUM<br>C、COUNT<br>D、AVG</p>
<h2 id="SQL语句中的条件用以下哪一项来表达-C"><a href="#SQL语句中的条件用以下哪一项来表达-C" class="headerlink" title="SQL语句中的条件用以下哪一项来表达(C)"></a>SQL语句中的条件用以下哪一项来表达(<strong>C</strong>)</h2><p>A、THEN<br>B、WHILE<br>C、WHERE<br>D、IF</p>
<h2 id="修改数据库表结构用以下哪一项-D"><a href="#修改数据库表结构用以下哪一项-D" class="headerlink" title="修改数据库表结构用以下哪一项(D)"></a>修改数据库表结构用以下哪一项(<strong>D</strong>)</h2><p>A、UPDATE<br>B、CREATE<br>C、UPDATED<br>D、ALTER</p>
<h2 id="SELECT语句的完整语法较复杂，但至少包括的部分是-B"><a href="#SELECT语句的完整语法较复杂，但至少包括的部分是-B" class="headerlink" title="SELECT语句的完整语法较复杂，但至少包括的部分是(B)"></a>SELECT语句的完整语法较复杂，但至少包括的部分是(<strong>B</strong>)</h2><p>A、仅SELECT<br>B、SELECT， FROM<br>C、SELECT， GROUP<br>D、SELECT，INTO</p>
<h2 id="以下语句错误的是-C"><a href="#以下语句错误的是-C" class="headerlink" title="以下语句错误的是(C)"></a>以下语句错误的是(<strong>C</strong>)</h2><p>A、select sal+1 from emp;<br>B、select sal<em>10, sal</em>deptno from emp;<br>C、不能使用运算符号<br>D、select sal<em>10, deptno</em>10 from emp;</p>
<h2 id="若想限定某列在表中不允许出现重复的数据且不能为空值，应当使用-B-约束完成。"><a href="#若想限定某列在表中不允许出现重复的数据且不能为空值，应当使用-B-约束完成。" class="headerlink" title="若想限定某列在表中不允许出现重复的数据且不能为空值，应当使用(B)约束完成。"></a>若想限定某列在表中不允许出现重复的数据且不能为空值，应当使用(<strong>B</strong>)约束完成。</h2><p>A、CHECK<br>B、PRIMARY KEY<br>C、FOREIGN KEY<br>D、UNIQUE</p>
<h2 id="查找条件为-姓名不是null的记录-C"><a href="#查找条件为-姓名不是null的记录-C" class="headerlink" title="查找条件为: 姓名不是null的记录(C)"></a>查找条件为: 姓名不是null的记录(<strong>C</strong>)</h2><p>A、WHERE NAME ! NULL<br>B、WHERE NAME NOT NULL<br>C、WHERE NAME IS NOT NULL<br>D、WHERE NAME!=NULL</p>
<h2 id="使用SQL语句进行分组检索时，为了去掉不满足条件的分组，应当-B"><a href="#使用SQL语句进行分组检索时，为了去掉不满足条件的分组，应当-B" class="headerlink" title="使用SQL语句进行分组检索时，为了去掉不满足条件的分组，应当(B)"></a>使用SQL语句进行分组检索时，为了去掉不满足条件的分组，应当(<strong>B</strong>)</h2><p>A、使用WHERE子句<br>B、在GROUP BY后面使用HAVING子句<br>C、先使用WHERE子句，再使用HAVING子句<br>D、先使用HAVING子句，再使用WHERE子句</p>
<h2 id="假设有scores表的设计如下"><a href="#假设有scores表的设计如下" class="headerlink" title="假设有scores表的设计如下:"></a>假设有scores表的设计如下:</h2><p>ID (编号，主键)<br>StudentID (学生编号)<br>CourseID (课程编号)<br>Score (分数)<br>现在要查询参加过至少两门课程考试的学生各门课程的平均成绩。以下SQL语句正确的是(<strong>A</strong>)<br>A、select StudentID,avg(score) from scores group by StudentID having count(studentID)&gt;1<br>B、select StudentID,avg(score) from scores group by StudentID where count(studentID)&gt;1<br>C、select StudentID,avg(score) from scores group by StudentID where count(studentID)&gt;1 group by StudentID<br>D、select StudentID,avg(score) from scores having count(studentID)&gt;1</p>
<h2 id="下列哪种操作能够实现实体完整性-D"><a href="#下列哪种操作能够实现实体完整性-D" class="headerlink" title="下列哪种操作能够实现实体完整性(D)"></a>下列哪种操作能够实现实体完整性(<strong>D</strong>)</h2><p>A、设置非空约束<br>B、设置外键<br>C、减少数据冗余<br>D、设置主键</p>
<h2 id="为了去除结果集中重复的行，可在SELECT语句中使用下列哪个关键字-B"><a href="#为了去除结果集中重复的行，可在SELECT语句中使用下列哪个关键字-B" class="headerlink" title="为了去除结果集中重复的行，可在SELECT语句中使用下列哪个关键字(B)"></a>为了去除结果集中重复的行，可在SELECT语句中使用下列哪个关键字(<strong>B</strong>)</h2><p>A、ALL<br>B、DISTINCT<br>C、UPDATE<br>D、MERGE</p>
<h2 id="下列-C-不属于连接种类"><a href="#下列-C-不属于连接种类" class="headerlink" title="下列(C)不属于连接种类"></a>下列(<strong>C</strong>)不属于连接种类</h2><p>A、左外连接<br>B、内连接<br>C、中间连接<br>D、交叉连接</p>
<h2 id="SQL语言中允许使用通配符进行字符串匹配的操作，其中’-’可以表示-D"><a href="#SQL语言中允许使用通配符进行字符串匹配的操作，其中’-’可以表示-D" class="headerlink" title="SQL语言中允许使用通配符进行字符串匹配的操作，其中’%’可以表示(D)"></a>SQL语言中允许使用通配符进行字符串匹配的操作，其中’%’可以表示(<strong>D</strong>)</h2><p>A、零个字符<br>B、1个字符<br>C、多个字符<br>D、以上都是</p>
<h2 id="若要查询成绩score为60-80分之间-包括60分，不包括80分-的学生信息，成绩字段查询准则应该设置为-B"><a href="#若要查询成绩score为60-80分之间-包括60分，不包括80分-的学生信息，成绩字段查询准则应该设置为-B" class="headerlink" title="若要查询成绩score为60-80分之间(包括60分，不包括80分)的学生信息，成绩字段查询准则应该设置为(B)"></a>若要查询成绩score为60-80分之间(包括60分，不包括80分)的学生信息，成绩字段查询准则应该设置为(<strong>B</strong>)</h2><p>A、score&gt;= 60 and &lt; 80<br>B、score&gt;= 60 and score&lt; 80<br>C、score between 60 and 80<br>D、score IN(60, 80)</p>
<h2 id="GROUP-BY-子句的作用是什么-A"><a href="#GROUP-BY-子句的作用是什么-A" class="headerlink" title="GROUP BY 子句的作用是什么(A)"></a>GROUP BY 子句的作用是什么(<strong>A</strong>)</h2><p>A、查询结果的分组条件<br>B、组的筛选条件<br>C、限定返回的行的判断条件<br>D、对结果集进行排序</p>
<h2 id="唯一约束与主键约束的一个区别是-D"><a href="#唯一约束与主键约束的一个区别是-D" class="headerlink" title="唯一约束与主键约束的一个区别是(D)"></a>唯一约束与主键约束的一个区别是(<strong>D</strong>)</h2><p>A、唯一约束的列的值不可以有重复值<br>B、唯一约束的列的值可以不是唯一的<br>C、唯一约束的列不可以为空值<br>D、唯一约束的列可以为空值</p>
<h2 id="在SQL语句中，子查询是-D"><a href="#在SQL语句中，子查询是-D" class="headerlink" title="在SQL语句中，子查询是(D)"></a>在SQL语句中，子查询是(<strong>D</strong>)</h2><p>A、选区单表中字段子集的查询语句<br>B、选取多表中字段子集的查询语句<br>C、返回单表中数据子集的查询语言<br>D、嵌入到另一个查询语句之中的查询语句</p>
<h2 id="查询员工工资信息时，结果按工资降序排列，正确的是-B"><a href="#查询员工工资信息时，结果按工资降序排列，正确的是-B" class="headerlink" title="查询员工工资信息时，结果按工资降序排列，正确的是(B)"></a>查询员工工资信息时，结果按工资降序排列，正确的是(<strong>B</strong>)</h2><p>A、ORDER BY 工资<br>B、ORDER BY 工资 desc<br>C、ORDER BY 工资 asc<br>D、ORDER BY 工资 dictinct</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;向数据表中插入一条记录用以下哪一项-B&quot;&gt;&lt;a href=&quot;#向数据表中插入一条记录用以下哪一项-B&quot; class=&quot;headerlink&quot; title=&quot;向数据表中插入一条记录用以下哪一项(B)&quot;&gt;&lt;/a&gt;向数据表中插入一条记录用以下哪一项(&lt;strong&gt;B&lt;/strong&gt;)&lt;/h2&gt;&lt;p&gt;A、CREATE&lt;br&gt;B、INSERT&lt;br&gt;C、SAVE&lt;br&gt;D、UPDATE&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>UML试题</title>
    <link href="http://www.sanstylemc.cn/2018/06/02/UML%E8%AF%95%E9%A2%98/"/>
    <id>http://www.sanstylemc.cn/2018/06/02/UML试题/</id>
    <published>2018-06-02T09:20:52.000Z</published>
    <updated>2018-06-02T09:21:28.036Z</updated>
    
    <content type="html"><![CDATA[<p>1、UML的全称是(<strong>B</strong>)<br>A、Unify Modeling Language<br>B、Unified Modeling Language<br>C、Unified Modem Language<br>D、Unified Making Language<br><a id="more"></a><br>2、执行者(Actor)与用例之间的关系是(<strong>C</strong>)<br>A、包含关系<br>B、泛化关系<br>C、关联关系<br>D、扩展关系</p>
<p>3、在类图中，”#”表示的可见性是(<strong>B</strong>)<br>A、Public<br>B、Protected<br>C、Private<br>D、Package</p>
<p>4、生命线是UML视图中哪个图形的组成部分(<strong>D</strong>)<br>A、类图<br>B、状态图<br>C、活动图<br>D、顺序图(序列图/时序图)</p>
<p>5、在类图中，哪种关系表达总体与局部的关系(<strong>D</strong>)<br>A、泛化<br>B、实现<br>C、依赖<br>D、聚合</p>
<p>6、哪个UML视图是描述一个对象的声明周期的(<strong>B</strong>)<br>A、类图<br>B、状态图<br>C、协作图<br>D、顺序图</p>
<p>7、下面哪个视图属于UML语言的交互图(<strong>D</strong>)<br>A、行为图<br>B、状态图<br>C、实现图<br>D、顺序图(序列图/时序图)</p>
<p>8、在UML协作图中，有多少种关联角色的构造型(<strong>C</strong>)<br>A、1<br>B、3<br>C、5<br>D、7</p>
<p>9、下面哪些图形可以清楚地表达并发行为(<strong>CD</strong>)<br>A、类图<br>B、状态体<br>C、活动图<br>D、顺序图</p>
<p>10、下面哪些元素构成了组件图形(<strong>ACD</strong>)<br>A、组件<br>B、转换<br>C、关系<br>D、接口</p>
<p>11、部署图中的节点具有以下哪些方面的内容(<strong>ABC</strong>)<br>A、计算能力<br>B、基本内存<br>C、位置<br>D、接口</p>
<p>12、顺序图的用途包括(<strong>ABCD</strong>)<br>A、显示并发进程和激活<br>B、当不同的类之间存在多个简短的方法时，描述控制流的整体序列<br>C、显示在协作图中难于描述的事件序列<br>D、显示涉及类交互而与对象无关的一般形式</p>
<p>13、常见的UML工具有哪些?(<strong>ABCD</strong>)<br>A、Rational Rose<br>B、Power Designer<br>C、Visio<br>D、Visual UML</p>
<p>14、UML提供了一系列的图支持面向对象的分析与设计，其中<code>类图</code>给出系统的静态设计视图；<code>用例图</code>对系统的行为进行组织和建模是非常重要的；<code>序列图</code>和<code>协作图</code>都是描述系统动态视图的交互图，其中<code>序列图</code>描述了以时间顺序组织的对象之间的交互活动，<code>协作图</code>强调收发消息的对象的组织结构。</p>
<p>15、UML提供了4种结构图用于对系统的静态方面进行可视化、详述、构造和文档化。其中<code>类图</code>是面向对象系统规模中最常用的图，用于说明系统的静态设计视图；当需要说明系统的静态实现视图时，应该选择<code>组件图</code>；当需要说明体系结构的静态实施视图时，应该选择<code>部署图</code>。</p>
<p>16、UML语言包含几大类图形(<strong>B</strong>)<br>A、3<br>B、5<br>C、7<br>D、9</p>
<p>17、OMT方法是由下面哪位科学家提出的(<strong>B</strong>)<br>A、Booch<br>B、Rumbaugh<br>C、Coad<br>D、Jacobson</p>
<p>18、什么概念被认为是第二代面向对象技术的标志(<strong>A</strong>)<br>A、用例<br>B、UML语言<br>C、活动图<br>D、组件图</p>
<p>19、在UML的顺序图中，通常由左向右分层排列各个对象，正确的排列方法是(<strong>A</strong>)<br>A、执行者角色、控制类、用户接口、业务层、后台数据库<br>B、执行者角色、用户接口、控制类、业务层、后台数据库<br>C、执行者角色、控制类、用户接口、后台数据库、业务层<br>D、执行者角色、用户接口、业务层、控制类、后台数据库</p>
<p>20、多对象是UML哪个视图中的概念(<strong>C</strong>)<br>A、类图<br>B、状态图<br>C、协作图<br>D、组件图</p>
<p>21、在UML中，接口有几种表达方式(<strong>A</strong>)<br>A、2<br>B、4<br>C、6<br>D、8</p>
<p>22、顺序图由类角色，生命线，激活期和(<strong>B</strong>)组成。<br>A、关系<br>B、消息<br>C、用例<br>D、实体</p>
<p>23、UML中关联的多重度是指(<strong>B</strong>)<br>A、一个类有多个方法被另一个类调用<br>B、一个类的实类能够与另一个类的多个实类相关联<br>C、一个类的某个方法被另一个类调用的次数<br>D、两个类所具有的相同的方法和属性</p>
<p>24、具有多重属性值的UML图形包括(<strong>AE</strong>)<br>A、类图<br>B、对象图<br>C、状态图<br>D、活动图<br>E、部署图</p>
<p>25、在UML的状态图中，转换通常由以下哪些部分构成(<strong>ABCDE</strong>)<br>A、动作<br>B、触发事件<br>C、源状态<br>D、目标状态<br>E、监护条件</p>
<p>26、软件工程的三要素是(<strong>ABD</strong>)<br>A、方法<br>B、工具<br>C、模型<br>D、过程<br>E、语言</p>
<p>27、可能具有状态机的对象包括(<strong>ABCDE</strong>)<br>A、类<br>B、子系统<br>C、用例<br>D、接口<br>E、协议</p>
<p>28、UML中，类的主要版型有(<strong>CDE</strong>)<br>A、角色类<br>B、业务类<br>C、边界类<br>D、控制类<br>E、实体类</p>
<p>29、UML的类图包含哪些抽象的层次(<strong>ABC</strong>)<br>A、概念层<br>B、说明层<br>C、实现层<br>D、业务层<br>E、控制层</p>
<p>30、下面哪一项不是包图中的关系(<strong>D</strong>)<br>A、《use》<br>B、《access》<br>C、《trace》<br>D、《stub》</p>
<p>31、RUP中有(<strong>C</strong>)个核心过程工作流。<br>A、1<br>B、3<br>C、6<br>D、9</p>
<p>32、部署图的组成不包括(<strong>C</strong>)<br>A、处理器<br>B、设备<br>C、构件<br>D、连接</p>
<p>33、顺序图由对象，生命线，控制焦点和(<strong>B</strong>)组成。<br>A、关系<br>B、消息<br>C、用例<br>D、实体</p>
<p>34、组成UML有三种基本的建筑块是: (<strong>A</strong>)、事物和图。<br>A、关系<br>B、类<br>C、用例<br>D、实体</p>
<p>35、UML体系包括三个部分：UML基本构造块、(<strong>A</strong>)和UML公共机制。<br>A、UML规则<br>B、UML命名<br>C、UML模型<br>D、UML约束</p>
<p>36、(<strong>A</strong>)模型的缺点是缺乏灵活性，特别是无法解决软件需求不明确或不准确的问题。<br>A、瀑布模型<br>B、原型模型<br>C、增量模型<br>D、螺旋模型</p>
<p>37、下面哪个不是UML中的静态视图(<strong>A</strong>)<br>A、状态图<br>B、用例图<br>C、对象图<br>D、类图</p>
<p>38、对反应型对象建模一般使用(<strong>A</strong>)图。<br>A、状态图<br>B、顺序图<br>C、活动图<br>D、类图</p>
<p>39、类图应该画在Rose的哪种(<strong>B</strong>)视图中。<br>A、Use CaseView<br>B、Logic View<br>C、ComponentView<br>D、Deployment View</p>
<p>40、(<strong>D</strong>)是可复用的，提供明确接口完成特定功能的程序代码块。<br>A、模块<br>B、函数<br>C、用例<br>D、软件构件</p>
<p>41、(<strong>A</strong>)是用于把元素组织成组的通用机制。<br>A、包<br>B、类<br>C、接口<br>D、组件</p>
<p>42、(<strong>B</strong>)是被节点执行的事物体。<br>A、包<br>B、组件<br>C、接口<br>D、节点</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、UML的全称是(&lt;strong&gt;B&lt;/strong&gt;)&lt;br&gt;A、Unify Modeling Language&lt;br&gt;B、Unified Modeling Language&lt;br&gt;C、Unified Modem Language&lt;br&gt;D、Unified Making Language&lt;br&gt;
    
    </summary>
    
    
      <category term="UML" scheme="http://www.sanstylemc.cn/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>tmall_ssm项目结构</title>
    <link href="http://www.sanstylemc.cn/2018/05/30/tmall-ssm%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://www.sanstylemc.cn/2018/05/30/tmall-ssm项目结构/</id>
    <published>2018-05-30T02:10:25.000Z</published>
    <updated>2018-05-30T03:01:46.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h3 id="项目名称"><a href="#项目名称" class="headerlink" title="项目名称"></a>项目名称</h3><p><code>tmall_ssm</code></p>
<h3 id="java源代码包结构"><a href="#java源代码包结构" class="headerlink" title="java源代码包结构"></a>java源代码包结构</h3><p><code>pojo</code> 实体类<br><code>mapper</code> Mapper类<br><code>interceptor</code> 拦截器<br><code>controller</code> 控制层<br><code>service</code> Service层<br><code>test</code> 测试类<br><code>util</code> 工具类<br><code>comparator</code> 比较类<br><a id="more"></a></p>
<h3 id="web目录"><a href="#web目录" class="headerlink" title="web目录"></a>web目录</h3><p><code>css</code> css文件<br><code>img</code> 图片资源<br><code>js</code> js文件<br><code>admin</code> 后台管理用到的jsp文件<br><code>fore</code> 前台展示用到的jsp文件<br><code>include</code> 被包含的jsp文件</p>
<h2 id="典型场景"><a href="#典型场景" class="headerlink" title="典型场景"></a>典型场景</h2><h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><h4 id="立即购买"><a href="#立即购买" class="headerlink" title="立即购买"></a>立即购买</h4><h5 id="购买流程"><a href="#购买流程" class="headerlink" title="购买流程"></a>购买流程</h5><p>点击购买，会在OrderItem表中插入一条数据，这条数据会表示:<br>1、<code>pid</code> 购买的商品id<br>2、<code>oid</code> 这个订单项还没有生成对应的订单，即还在购物车中<br>3、<code>uid</code> 用户uid<br>4、<code>number</code> 购买了几件产品</p>
<p>如果未登录，点击购买之前会弹出模态登录窗口。<br>登录之后，点击立即购买，会访问<code>tmall_ssm/forebuyone?pid=&amp;num=</code>，并带上了产品id和购买数量。</p>
<p>为<code>OrderItemService</code>新增方法<code>listByUser</code>。<br>为<code>OrderItemServiceImpl</code>新增方法<code>listByUser</code>的实现。<br>通过上个步骤访问地址<code>forebuyone</code>，调用<code>ForeController.buyone()</code>。<br>获取参数pid、num，根据pid获取产品对象p，从session中获取用户对象user。<br>接下来就是新增订单项<code>OrderItem</code>，新增订单项要考虑两个情况。<br>1、如果已经存在这个产品对应的OrderItem,并且还没有生成订单，即还在购物车中。那么就应该在对应的OrderItem基础上，调整数量。</p>
<blockquote>
<p>1) 基于用户对象user，查询没有生成订单的订单项集合。<br>2) 遍历这个集合。<br>3) 如果产品是一样的话，就进行数量追加<br>4）获取这个订单项的id</p>
</blockquote>
<p>2、如果不存在对应的OrderItem，那么就新增一个订单项OrderItem</p>
<blockquote>
<p>1) 生成新的订单项<br>2）设置数量，用户和产品<br>3）插入到数据库<br>4）获取这个订单项的id</p>
</blockquote>
<p>最后，基于这个订单项id，客户端跳转到<code>结算页面/forebuy</code>。</p>
<h5 id="模态登录窗口"><a href="#模态登录窗口" class="headerlink" title="模态登录窗口"></a>模态登录窗口</h5><p>立即购买和加入购物车这两个按钮的监听是放在imgAngInfo.jsp页面中。<br>这两个按钮都会通过JQuery的<code>.get</code>方法，用异步Ajax的方式访问<code>forecheckLogin</code>，获取当前是否登录状态，如果返回的不是<code>success</code>即表明是未登录状态，那么就会打开登录的模态窗口: <code>$(&quot;#loginModal&quot;).modal(&#39;show&#39;);</code></p>
<p>在上一步的Ajax访问路径<code>/forecheckLogin</code>会导致<code>ForeController.checkLogin()</code>方法被调用。获取session中的<code>user</code>对象，如果不为空，即表示已经登录，返回字符串<code>success</code>；如果为空，即表示未登录，返回字符串<code>fail</code>。</p>
<p><code>modal.jsp</code>页面被<code>footer.jsp</code>所包含，所以每个页面都是加载了的。通过<code>imgAndInfo.jsp</code>页面中的购买按钮或者加入购物车按钮显示出来。点击登录按钮时，使用<code>imgAndInfo.jsp</code>页面中的Ajax代码进行登录验证。</p>
<p>在上一步<code>modal.jsp</code>中，点击了登录按钮之后，访问路径<code>/foreloginAjax</code>，导致<code>ForeController.loginAjax()</code>方法被调用。获取账号密码，通过账号密码获取User对象，如果User对象为空，那么就返回<code>fail</code>字符串，如果User对象不为空，那么就把User对象放在session中，并返回<code>success</code>字符串。</p>
<h4 id="结算页面"><a href="#结算页面" class="headerlink" title="结算页面"></a>结算页面</h4><h5 id="结算流程"><a href="#结算流程" class="headerlink" title="结算流程"></a>结算流程</h5><p>在购买页面中，客户端跳转到路径<code>/forebuy?oiid=</code>，导致<code>ForeController.buy</code>方法被调用。<br>1、通过字符串数组获取参数oiid。<br>为社么为什么这里要用字符串数组试图获取多个oiid，而不是int类型仅仅获取一个oiid? 因为根据购物流程环节与表关系，结算页面还需要显示在购物车中选中的多条OrderItem数据，所以为了兼容从购物车页面跳转过来的需求，要用字符串数组获取多个oiid。<br>2、准备一个泛型是OrderItem的集合ois<br>3、根据前面步骤获取的oiids，从数据库中取出OrderItem对象，并放入ois集合中<br>4、累计这些ois的价格总数，赋值在total上<br>5、把订单项集合放在session的属性 “ois” 上<br>6、把总价格放在 model的属性 “total” 上<br>7、服务端跳转到buy.jsp<br><img src="https://github.com/sunstady/hexo/blob/master/%E6%B5%81%E7%A8%8B/1.png?raw=true" alt="1"></p>
<p>在<code>buyPage.jsp</code>中，遍历出订单项集合<code>ois</code>中的订单项数据，显示总金额。</p>
<h4 id="加入购物车"><a href="#加入购物车" class="headerlink" title="加入购物车"></a>加入购物车</h4><h5 id="加入购物车流程"><a href="#加入购物车流程" class="headerlink" title="加入购物车流程"></a>加入购物车流程</h5><p>在产品页面点击加入购物车时，在<code>OrderItem</code>表中插入一条数据，把界面上的<code>加入购物车</code>按钮变成灰色并且不可点击。</p>
<p>如果未登录，那么点击加入购物车会弹出<code>模态登陆窗口</code>，登录之后，点击加入购物车，会使用Ajax一步访问地址<code>/foreaddCart?pid=&amp;num=</code>，并带上了产品id和购买数量num。</p>
<p>上一步访问地址<code>/foreaddCart</code>调用<code>ForeController.addCart()</code>。<code>addCart()</code>方法和立即购买中的<code>ForeController.buyone()</code>步骤做的事情是一样的，区别在于返回不一样。<br>1、获取参数pid,num。<br>2、根据pid获取产品对象p<br>3、从session中获取用户对象user</p>
<p>接下来就是新增订单项OrderItem, 新增订单项要考虑两个情况:<br>1、如果已经存在这个产品对应的OrderItem,并且还没有生成订单，即还在购物车中。那么就应该在对应的OrderItem基础上，调整数量。</p>
<blockquote>
<p>1) 基于用户对象user，查询没有生成订单的订单项集合。<br>2) 遍历这个集合。<br>3) 如果产品是一样的话，就进行数量追加<br>4）获取这个订单项的id</p>
</blockquote>
<p>2、如果不存在对应的OrderItem，那么就新增一个订单项OrderItem</p>
<blockquote>
<p>1) 生成新的订单项<br>2）设置数量，用户和产品<br>3）插入到数据库<br>4）获取这个订单项的id</p>
</blockquote>
<p>与<code>ForeController.buyone()</code>客户端跳转到<code>结算页面</code>不同的是，最后返回字符串”success”, 表示添加成功。</p>
<h4 id="查看购物车页面"><a href="#查看购物车页面" class="headerlink" title="查看购物车页面"></a>查看购物车页面</h4><p>访问地址<code>/forecart</code>调用<code>ForeController.cart()</code>方法。<br>1、通过session获取当前用户， 所以一定要登录才能访问，否则拿不到用户对象，会报错。<br>2、获取为这个用户关联的订单集合ois<br>3、把ois放在model中<br>4、服务端跳转到<code>cart.jsp</code></p>
<p>与<code>register.jsp相仿</code>， <code>cart.jsp</code>也包含了<code>header.jsp</code>, <code>top.jsp</code>, <code>simpleSearch.jsp</code>, <code>footer.jsp</code>等公共页面。中间是产品业务页面<code>cartPage.jsp</code></p>
<p>在<code>cartPage.jsp</code>中遍历订单项集合<code>ois</code>，即可。</p>
<h4 id="购物车页面操作"><a href="#购物车页面操作" class="headerlink" title="购物车页面操作"></a>购物车页面操作</h4><p>购物车页面和服务端的交互主要是三个<br>1、增加、减少某种产品的数量<br>2、删除某种产品<br>3、选中产品后，提交到结算页面</p>
<h5 id="调整订单数量"><a href="#调整订单数量" class="headerlink" title="调整订单数量"></a>调整订单数量</h5><p>点击增加或者减少按钮后，根据<code>cartPage.jsp</code> 中的js代码，会通过Ajax访问<code>/forechangeOrderItem</code>路径，导致<code>ForeController.changeOrderItem()</code>方法被调用<br>1、判断用户是否登录<br>2、获取pid和number<br>3、遍历出用户当前所有的未生成订单的OrderItem<br>4、根据pid找到匹配的OrderItem，并修改数量后更新到数据库<br>5、返回字符串”success”</p>
<h5 id="删除订单项"><a href="#删除订单项" class="headerlink" title="删除订单项"></a>删除订单项</h5><p>点击删除按钮后，根据 cartPage.jsp 中的js代码，会通过Ajax访问/foredeleteOrderItem路径，导致ForeController.deleteOrderItem方法被调用<br>1、判断用户是否登录<br>2、获取oiid<br>3、删除oiid对应的OrderItem数据<br>4、返回字符串”success”</p>
<h5 id="提交到结算页面"><a href="#提交到结算页面" class="headerlink" title="提交到结算页面"></a>提交到结算页面</h5><p>在选中了购物车中的任意商品之后，结算按钮呈现可点击状态。<br>点击之后，提交到结算页面，并带上(多个)被选中的OrderItem对象的id<code>/forebuy?oiid=&amp;oiid=</code><br>之后的流程就进入了前面的<code>结算页面</code>。</p>
<h3 id="订单状态流转"><a href="#订单状态流转" class="headerlink" title="订单状态流转"></a>订单状态流转</h3><h4 id="生成订单"><a href="#生成订单" class="headerlink" title="生成订单"></a>生成订单</h4><p>通过<code>立即购买</code>或者<code>购物车的提交到结算页面</code>进入<code>结算页面</code>，然后点击提交订单。<br>提交订单后，在数据库中生成一条Order记录。不仅如此，订单项的oid字段也会被设置为这条Order记录的id。</p>
<p>在applicationContext.xml最后增加事务管理配置。<br>因为增加订单行为需要同时修改两个表<br>1、为Order表新增数据<br>2、修改OrderItem表<br>所以需要进行事务管理，否则当新增了Order表的数据，还没来得及修改OrderItem的时候出问题，比如突然断电，那么OrderItem的数据就会是脏数据了。</p>
<p>在OrderService中新增方法add(Order c, List<orderitem> ois)<br>在OrderServiceImpl中实现add(Order o, List<orderitem> ois)方法，该方法通过注解进行事务管理。<code>@Transactional(propagation= Propagation.REQUIRED,rollbackForClassName=&quot;Exception&quot;)</code></orderitem></orderitem></p>
<p>提交订单访问路径<code>/forecreateOrder</code>, 在<code>ForeController</code>中调用<code>createOrder</code><br>1、从session中获取user对象<br>2、通过参数Order接受地址，邮编，收货人，用户留言等信息<br>3、根据当前时间加上一个4位随机数生成订单号<br>4、根据上述参数，创建订单对象<br>5、把订单状态设置为等待支付<br>6、从session中获取订单项集合 ( 在结算功能的ForeController.buy() 13行，订单项集合被放到了session中 )<br>7、把订单加入到数据库，并且遍历订单项集合，设置每个订单项的order，更新到数据库<br>8、统计本次订单的总金额<br>9、客户端跳转到确认支付页forealipay，并带上订单id和总金额</p>
<h4 id="确认支付"><a href="#确认支付" class="headerlink" title="确认支付"></a>确认支付</h4><p>1、在上一步客户端跳转到路径<code>/forealipay</code>方法，导致<code>PageController.alipay()</code>方法被调用。 <code>alipay()</code>没做什么事情，就是服务端跳转到了<code>alipay.jsp</code>页面。<br>2、<code>alipay.jsp</code> :<br>与 <code>register.jsp</code> 相仿，<code>alipay.jsp</code>也包含了<code>header.jsp</code>, <code>top.jsp</code>， <code>footer.jsp</code> 等公共页面。<br>中间是确认支付业务页面 <code>alipayPage.jsp</code><br>3、<code>alipayPage.jsp</code>:<br>显示总金额，并且让确认支付按钮跳转到页面 <code>/forepayed</code>页面，并带上oid和金额</p>
<h4 id="支付成功页"><a href="#支付成功页" class="headerlink" title="支付成功页"></a>支付成功页</h4><p>1、在上一步确认访问按钮提交数据到<code>/forepayed</code>,导致<code>ForeController.payed</code>方法被调用<br>1.1 获取参数<code>oid</code><br>1.2 根据<code>oid</code>获取到订单对象<code>order</code><br>1.3 修改订单对象的状态和支付时间<br>1.4 更新这个订单对象到数据库<br>1.5 把这个订单对象放在model的属性”o”上<br>1.6 服务端跳转到<code>payed.jsp</code><br>2、<code>payed.jsp</code><br>与 <code>register.jsp</code> 相仿，<code>payed.jsp</code>也包含了<code>header.jsp</code>, <code>top.jsp</code>, <code>simpleSearch.jsp</code>， <code>footer.jsp</code> 等公共页面。<br>中间是支付成功业务页面 <code>payedPage.jsp</code><br>3、<code>payedPage.jsp</code><br>显示订单中的地址，邮编，收货人，手机号码等等</p>
<h4 id="后台发货"><a href="#后台发货" class="headerlink" title="后台发货"></a>后台发货</h4><p>当订单状态是waitDelivery的时候，就会出现发货按钮<br>1、发货按钮链接跳转到<code>admin_order_delivery</code><br>2、<code>OrderController.delivery()</code>方法被调用<br>2.1 注入订单对象<br>2.2 修改发货时间，设置发货状态<br>2.3 更新到数据库<br>2.4 客户端跳转到<code>admin_order_list</code>页面</p>
<h4 id="确认收货"><a href="#确认收货" class="headerlink" title="确认收货"></a>确认收货</h4><p>1、点击确认收货后，访问地址<code>/foreconfirmPay</code><br>2、<code>ForeController.confirmPay()</code>方法被调用<br>2.1 获取参数oid<br>2.2 通过oid获取订单对象o<br>2.3 为订单对象填充订单项<br>2.4 把订单对象放在<code>request</code>的属性”o”上<br>2.5 服务端跳转到 <code>confirmPay.jsp</code></p>
<p>3、<code>confirmPay.jsp</code><br>与 <code>register.jsp</code> 相仿，<code>confirmPay.jsp</code>也包含了<code>header.jsp</code>, <code>top.jsp</code>, <code>simpleSearch.jsp</code>，<code>footer.jsp</code> 等公共页面。<br>中间是订单确认业务页面 <code>confirmPayPage.jsp</code><br>4、<code>confirmPayPage.jsp</code><br>显示订单的创建时间，付款时间和发货时间，以及订单号，收款人信息等<br>遍历订单项集合，显示其中的产品图片，产品标题，价格，数量，小计，总结信息<br>最后提供确认支付按钮，提交到<code>/foreorderconfirmed</code>路径</p>
<h4 id="确认收货成功"><a href="#确认收货成功" class="headerlink" title="确认收货成功"></a>确认收货成功</h4><p>通过上一步最后的确认支付按钮，提交到路径<code>/foreorderConfirmed</code>，导致<code>ForeController.orderConfirmed()</code>方法被调用<br>1、<code>ForeController.orderConfirmed()</code> 方法<br>1.1 获取参数oid<br>1.2 根据参数oid获取Order对象o<br>1.3 修改对象o的状态为等待评价，修改其确认支付时间<br>1.4 更新到数据库<br>1.5 服务端跳转到<code>orderConfirmed.jsp</code>页面<br>2、<code>orderConfirmed.jsp</code><br>与 <code>register.jsp</code> 相仿，<code>orderConfirmed.jsp</code>也包含了<code>header.jsp</code>, <code>top.jsp</code>, <code>simpleSearch.jsp</code>， <code>footer.jsp</code> 等公共页面。<br>中间是确认收货成功业务页面 <code>orderConfirmedPage.jsp</code><br>3、<code>orderConfirmedPage.jsp</code><br>显示”交易已经成功，卖家将收到您的货款。”</p>
<h4 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h4><h5 id="评价产品页面"><a href="#评价产品页面" class="headerlink" title="评价产品页面"></a>评价产品页面</h5><p>通过点击评价按钮，来到路径<code>/forereview</code>，导致<code>ForeController.review()</code>方法被调用<br>1、<code>ForeController.review()</code><br>1.1 获取参数oid<br>1.2 根据oid获取订单对象o<br>1.3 为订单对象填充订单项<br>1.4 获取第一个订单项对应的产品,因为在评价页面需要显示一个产品图片，那么就使用这第一个产品的图片了<br>1.5 获取这个产品的评价集合<br>1.6 为产品设置评价数量和销量<br>1.7 把产品，订单和评价集合放在request上<br>1.8 服务端跳转到 <code>review.jsp</code><br>2、<code>review.jsp</code><br>与 <code>register.jsp</code> 相仿，<code>review.jsp</code>也包含了<code>header.jsp</code>, <code>top.jsp</code>, <code>simpleSearch.jsp</code>，<br><code>footer.jsp</code> 等公共页面。<br>中间是产品业务页面 <code>reviewPage.jsp</code><br>3、<code>reviewPage.jsp</code><br>在<code>reviewPage.jsp</code>中显示产品图片，产品标题，价格，产品销量，产品评价数量，以及订单信息等。<br>同时还显示出了该产品所有的评价，但是默认是隐藏的</p>
<h5 id="提交评价"><a href="#提交评价" class="headerlink" title="提交评价"></a>提交评价</h5><p>在评价产品页面点击提交评价，就把数据提交到了<code>/foredoreview</code>路径，导致<code>ForeController.doreview</code>方法被调用<br>1、<code>ForeController.doreview()</code><br>1.1 获取参数oid<br>1.2 根据oid获取订单对象o<br>1.3 修改订单对象状态<br>1.4 更新订单对象到数据库<br>1.5 获取参数pid<br>1.6 根据pid获取产品对象<br>1.7 获取参数content (评价信息)<br>1.8 对评价信息进行转义，道理同注册<code>ForeController.register()</code><br>1.9 从session中获取当前用户<br>1.10 创建评价对象review<br>1.11 为评价对象review设置 评价信息，产品，时间，用户<br>1.12 增加到数据库<br>1.13.客户端跳转到<code>/forereview</code>： 评价产品页面，并带上参数<code>showonly=true</code><br>2、<code>reviewPage.jsp</code><br>在<code>reviewPage.jsp</code>中，当参数<code>showonly==true</code>，那么就显示当前产品的所有评价信息</p>
<h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><h4 id="增加-create"><a href="#增加-create" class="headerlink" title="增加(create)"></a>增加(create)</h4><h4 id="读取查询-Retrieve"><a href="#读取查询-Retrieve" class="headerlink" title="读取查询(Retrieve)"></a>读取查询(Retrieve)</h4><p>1、首先浏览器上访问路径 /admin_category_list<br>2、tomcat根据web.xml上的配置信息，拦截到了/admin_category_list，并将其交由DispatcherServlet处理。<br>3、DispatcherServlet 根据springMVC的配置，将这次请求交由CategoryController类进行处理，所以需要进行这个类的实例化<br>4、在实例化CategoryController的时候，注入CategoryServiceImpl<br>5、在实例化CategoryServiceImpl的时候，又注入CategoryMapper<br>6、根据ApplicationContext.xml中的配置信息，将CategoryMapper和CategoryMapper.xml关联起来了。<br>7、这样就拿到了实例化好了的CategoryController,并调用list方法<br>8、在list方法中，访问CategoryService,并获取数据，并把数据放在”cs”上，接着服务端跳转到listCategory.jsp去<br>9、最后在listCategory.jsp 中显示数据<br><img src="https://github.com/sunstady/hexo/blob/master/%E6%B5%81%E7%A8%8B/2.png?raw=true" alt="2"></p>
<h4 id="更新-update"><a href="#更新-update" class="headerlink" title="更新(update)"></a>更新(update)</h4><h4 id="删除-delete"><a href="#删除-delete" class="headerlink" title="删除(delete)"></a>删除(delete)</h4><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>新增Page这个类专门为分页提供必要信息<br>属性：<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>int start;</code> 开始位置<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>int count;</code> 每页显示的数量<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>int total;</code> 总共有多少条数据<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>String param;</code> 参数<br>方法:<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>getTotalPage</code>根据每页显示的数量count以及总共有多少条数据total，计算出总共有多少页<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>getLast</code>计算出最后一页的数值是多少<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>isHasPreviouse</code>判断是否有前一页<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>isHasNext</code>判断是否有后一页</p>
<p>CategoryMapper.xml中，提供带分页的查询语句和获取总数的sql语句<br>CategoryMapper.java中提供一个支持分页的查询方法list(Page page)和获取总数的方法total<br>CategoryService.java中，提供一个支持分页的查询方法list(Page page)和获取总数的方法list<br>CategoryService.java中，提供一个支持分页的查询方法list(Page page)和获取总数的方法total<br>CategoryController.java中，为方法list增加参数Page用于获取浏览器传递过来的分页信息<br>1、categoryService.list(page); 获取当前页的分类集合<br>2、通过categoryService.total(); 获取分类总数<br>3、通过page.setTotal(total); 为分页对象设置总数<br>4、把分类集合放在”cs”中<br>5、把分页对象放在 “page“ 中<br>6、跳转到listCategory.jsp页面</p>
<p>在listCategory.jsp中加入adminPage.jsp</p>
<p>adminPage.jsp中，分页超链的效果，用的Bootstrap的分页效果来制作。<br>对边界进行了处理，没有上一页或下一页的时候，对应超链处于不可点击状态。hasPreviouse会导致isHasPreviouse()方法被调用。</p>
<h3 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h3><p>MybatisGenerator插件是Mybatis官方提供的，这个插件存在一个BUG，即第一次生成了CategoryMapper.xml后，再次运行会导致CategoryMapper.xml生成重复内容，而影响正常的运行。<br>在<code>resouces</code>下创建<code>generatorConfig.xml</code>文件，其目的就是为了正确使用本插件而提供必要的配置信息。<br>1、使用<code>OverlsMergeablePlugin</code>插件<code>&lt;plugin type=&quot;com.how2java.tmall.util.OverIsMergeablePlugin&quot; /&gt;</code><br>2、在生成的代码中，不提供注释。如果提供注释，生成出来的代码，看上去乱。<br>3、指定链接数据库的账号和密码，既然是逆向工程，肯定要先链接到数据库。<code>&lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost/tmall_ssm&quot; userId=&quot;root&quot; password=&quot;admin&quot;&gt;</code><br>4、指定生成的pojo, mapper, xml文件的存放位置。<br>5、生成对应表及类名。</p>
<p>在generatorConfig.xml中，加入所有的table表，运行MybatisGenerator，需要把today变量修改为今天。<br>和手动编写的区别在于id类型 从基本类型id变成了Integer。<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">id:</span> 基本类型</div><div class="line"><span class="symbol">Integer:</span> 引用类型</div></pre></td></tr></table></figure></p>
<h3 id="属性管理"><a href="#属性管理" class="headerlink" title="属性管理"></a>属性管理</h3><h4 id="属性管理流程"><a href="#属性管理流程" class="headerlink" title="属性管理流程"></a>属性管理流程</h4><p>Property.java实体类已经和其他所有的实体类一起，在逆向工程这个环节就一起自动生成好了。不过仅仅有自动生成的实体类代码，还不足以支撑业务需要，所以在Property基础上增加了一个Category字段。</p>
<p>PropertyService.java中，提供CRUD一套。因为在业务上需要查询某个分类下的属性，所以list方法会带上对应分类的id。</p>
<p>新增PropertyService.xml实现PropertyService对应的方法。通过调用自动生成的PropertyMapper就可以实现大部分方法。值得注意的是查询的时候用到了辅助查询类: PropertyExample。这一行表示查询cid字段<code>example.createCriteria().andCidEqualTo(cid);</code></p>
<p>控制器类PropertyController.java用于映射不同路径的访问。</p>
<p>查询页面<code>listProperty.jsp</code><br>编辑页面<code>editProperty.jsp</code></p>
<h4 id="查询功能"><a href="#查询功能" class="headerlink" title="查询功能"></a>查询功能</h4><p>查询地址<code>admin_property_list</code>映射的是<code>PropertyController</code>的list()方法。<br>1、获取分类 cid,和分页对象page<br>2、通过PageHelper设置分页参数<br>3、基于cid，获取当前分类下的属性集合<br>4、通过PageInfo获取属性总数<br>5、把总数设置给分页page对象<br>6、拼接字符串”&amp;cid=”+c.getId()，设置给page对象的Param值。 因为属性分页都是基于当前分类下的分页，所以分页的时候需要传递这个cid<br>7、把属性集合设置到 request的 “ps” 属性上<br>8、把分类对象设置到 request的 “c” 属性上。 ( 这个c有什么用呢？ 在后面步骤的 其他-面包屑导航 中会用于显示分类名称)<br>9、把分页对象设置到 request的 “page” 对象上<br>10、服务端跳转到admin/listProperty.jsp页面<br>11、在listProperty.jsp页面上使用c:forEach 遍历ps集合，并显示</p>
<h4 id="增加功能"><a href="#增加功能" class="headerlink" title="增加功能"></a>增加功能</h4><p>1、在listProperty.jsp页面提交数据的时候，除了提交属性名称，还会提交cid<br>2、在PropertyController通过参数Property 接受注入<br>3、通过propertyService保存到数据库<br>4、客户端跳转到admin_property_list,并带上参数cid</p>
<h4 id="编辑功能"><a href="#编辑功能" class="headerlink" title="编辑功能"></a>编辑功能</h4><p>1、在PropertyController的edit方法中，根据id获取Property对象<br>2、根据properoty对象的cid属性获取Category对象，并把其设置在Property对象的category属性上<br>3、把Property对象放在request的 “p” 属性中<br>3、服务端跳转到admin/editProperty.jsp<br>4、在editProperty.jsp中显示属性名称<br>5、在editProperty.jsp中隐式提供id和cid( cid 通过 p.category.id 获取)</p>
<h4 id="修改功能"><a href="#修改功能" class="headerlink" title="修改功能"></a>修改功能</h4><p>1、在PropertyController的update方法中获取Property对象<br>2、借助propertyService更新这个对象到数据库<br>3、客户端跳转到admin_property_list，并带上参数cid</p>
<h4 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h4><p>1、在PropertyController的delete方法中获取id<br>2、根据id获取Property对象<br>3、借助propertyService删除这个对象对应的数据<br>4、客户端跳转到admin_property_list，并带上参数cid</p>
<h4 id="面包屑导航"><a href="#面包屑导航" class="headerlink" title="面包屑导航"></a>面包屑导航</h4><p>在属性管理页面的页头，有一个面包屑导航<br>第一个连接跳转到<code>admin_category_list</code><br>第二个连接跳转到<code>admin_property_list?cid=</code><br>样式用的是<code>Bootstrap面包屑导航</code></p>
<h4 id="分页-1"><a href="#分页-1" class="headerlink" title="分页"></a>分页</h4><p>这里的分页比<code>分类管理</code>中的分页多了一个参数cid。<br>1、在PropertyController.list() 方法中，把&amp;cid= 参数设置到在page对象的param属性上<code>page.setParam(&quot;&amp;cid=&quot;+c.getId());</code><br>2、在adminPage.jsp页面中通过${page.param}取出这个参数</p>
<h3 id="产品管理"><a href="#产品管理" class="headerlink" title="产品管理"></a>产品管理</h3><h4 id="产品管理流程"><a href="#产品管理流程" class="headerlink" title="产品管理流程"></a>产品管理流程</h4><p>Product.java在自动生成的基础上增加category属性。<br>新增ProductService，提供CRUD一套。<br>新增ProductServiceImpl，提供CRUD一套。get和list方法都会把取出来的Product对象设置上对应的category。<br>准备ProductController.java类。<br>查询页面<code>listProduct.jsp</code><br>编辑页面<code>editProduct.jsp</code></p>
<h4 id="查询功能讲解"><a href="#查询功能讲解" class="headerlink" title="查询功能讲解"></a>查询功能讲解</h4><p>查询地址admin_product_list映射的是ProductController的list()方法<br>1、获取分类 cid,和分页对象page<br>2、通过PageHelper设置分页参数<br>3、基于cid，获取当前分类下的产品集合<br>4、通过PageInfo获取产品总数<br>5、把总数设置给分页page对象<br>6、拼接字符串”&amp;cid=”+c.getId()，设置给page对象的Param值。 因为产品分页都是基于当前分类下的分页，所以分页的时候需要传递这个cid<br>7、把产品集合设置到 request的 “ps” 产品上<br>8、把分类对象设置到 request的 “c” 产品上。 ( 这个c有什么用呢？ 在 其他-面包屑导航 中会用于显示分类名称)<br>9、把分页对象设置到 request的 “page” 对象上<br>10、服务端跳转到admin/listProduct.jsp页面<br>11、在listProduct.jsp页面上使用c:forEach 遍历ps集合，并显示</p>
<h4 id="增加功能讲解"><a href="#增加功能讲解" class="headerlink" title="增加功能讲解"></a>增加功能讲解</h4><p>1、在listProduct.jsp提交数据的时候，除了提交产品名称，小标题，原价格，优惠价格，库存外还会提交cid<br>2、在ProductController中获取Product对象，并插入到数据库<br>3、客户端跳转到admin_product_list,并带上参数cid</p>
<h4 id="编辑功能讲解"><a href="#编辑功能讲解" class="headerlink" title="编辑功能讲解"></a>编辑功能讲解</h4><p>1、在ProductController的edit方法中，根据id获取product对象<br>2、根据product对象的cid产品获取Category对象，并把其设置在product对象的category产品上<br>3、把product对象放在request的 “p” 产品中<br>3、服务端跳转到admin/editProduct.jsp<br>4、在editProduct.jsp中显示产品名称<br>5、在editProduct.jsp中隐式提供id和cid( cid 通过 p.category.id 获取)</p>
<h4 id="修改功能讲解"><a href="#修改功能讲解" class="headerlink" title="修改功能讲解"></a>修改功能讲解</h4><p>1、在ProductController的update方法中获取Product对象<br>2、借助productService更新这个对象到数据库<br>3、客户端跳转到admin_product_list，并带上参数cid</p>
<h4 id="删除功能讲解"><a href="#删除功能讲解" class="headerlink" title="删除功能讲解"></a>删除功能讲解</h4><p>1、在ProductController的delete方法中获取id<br>2、根据id获取Product对象<br>3、借助productService删除这个对象对应的数据<br>4、客户端跳转到admin_product_list，并带上参数cid</p>
<h3 id="产品图片管理"><a href="#产品图片管理" class="headerlink" title="产品图片管理"></a>产品图片管理</h3><h4 id="图片管理流程"><a href="#图片管理流程" class="headerlink" title="图片管理流程"></a>图片管理流程</h4><p>ProductImage.java直接使用自动生成的，没有变化。</p>
<p>创建ProductImageService，提供CRUD。同时提供两个常量，分别表示单个图片和详情图片:<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String type_single = <span class="string">"type_single"</span><span class="comment">;</span></div><div class="line">String type_detail = <span class="string">"type_detail"</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>除此之外，还提供了根据产品id和图片类型查询的list方法。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span> <span class="built_in">list</span>(int pid, <span class="built_in">String</span> <span class="keyword">type</span>);</div></pre></td></tr></table></figure></p>
<p>创建ProductImageServiceImpl，实现CRUD相关方法。关于list方法，使用了ProductImageExample类，这样的写法表示同时匹配pid和type。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">example</span><span class="selector-class">.createCriteria</span>()</div><div class="line">    <span class="selector-class">.andPidEqualTo</span>(<span class="selector-tag">pid</span>)</div><div class="line">    <span class="selector-class">.andTypeEqualTo</span>(<span class="selector-tag">type</span>);</div></pre></td></tr></table></figure></p>
<p>ProductImageController提供了list, add和delete方法。edit和update没有提供相关业务，所以无。</p>
<p>新增listProductImage.jsp</p>
<h4 id="查询功能-1"><a href="#查询功能-1" class="headerlink" title="查询功能"></a>查询功能</h4><p>通过产品页面的图片管理访问ProductImageController的list()方法<br>1、获取参数pid<br>2、根据pid获取Product对象<br>3、根据pid对象获取单个图片的集合pisSingle<br>4、根据pid对象获取详情图片的集合pisDetail<br>5、把product 对象，pisSingle ，pisDetail放在model上<br>6、服务端跳转到admin/listProductImage.jsp页面<br>7、在listProductImage.jsp，使用c:forEach 遍历pisSingle<br>8、在listProductImage.jsp，使用c:forEach 遍历pisDetail</p>
<h4 id="增加功能-1"><a href="#增加功能-1" class="headerlink" title="增加功能"></a>增加功能</h4><p>增加产品图片分单个和详情两种，其区别在于增加所提交的type类型不一样。<br>这里就对单个的进行讲解，详情图片的处理同理。<br>首先， 在listProductImage.jsp准备一个form，提交到admin_productImage_add。<br><code>&lt;form method=&quot;post&quot; class=&quot;addFormSingle&quot; action=&quot;admin_productImage_add&quot; enctype=&quot;multipart/form-data&quot;&gt;</code><br>接着在ProductImageController的add()方法中进行处理<br>1、通过pi对象接受type和pid的注入<br>2、借助productImageService，向数据库中插入数据。<br>3、根据session().getServletContext().getRealPath( “img/productSingle”)，定位到存放单个产品图片的目录<br>除了productSingle，还有productSingle_middle和productSingle_small。 因为每上传一张图片，都会有对应的正常，中等和小的三种大小图片，并且放在3个不同的目录下<br>4、文件命名以保存到数据库的产品图片对象的id+”.jpg”的格式命名<br>5、通过uploadedImageFile保存文件<br>6、借助ImageUtil.change2jpg()方法把格式真正转化为jpg，而不仅仅是后缀名为.jpg<br>7、再借助ImageUtil.resizeImage把正常大小的图片，改变大小之后，分别复制到productSingle_middle和productSingle_small目录下。<br>8、处理完毕之后，客户端条跳转到admin_productImage_list?pid=，并带上pid。</p>
<p>详情图片做的是一样的事情，区别在于复制到目录productDetail下，并且不需要改变大小。<br><code>ImageUtil.resizeImage</code> 使用了swing自带的修改图片大小的API，属于底层工作原理。</p>
<h4 id="删除功能-1"><a href="#删除功能-1" class="headerlink" title="删除功能"></a>删除功能</h4><p>点击删除超链，进入ProductImageController的delete方法<br>1、获取id<br>2、根据id获取ProductImage 对象pi<br>3、借助productImageService，删除数据<br>4、如果是单个图片，那么删除3张正常，中等，小号图片<br>5、如果是详情图片，那么删除一张图片<br>6、客户端跳转到admin_productImage_list地址</p>
<h4 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h4><p>回到<code>产品管理</code>，在产品列表页面，是没有图片的。因为当时还没有产品图片管理功能，现在支持了，所以需要对Product做一些调整。</p>
<p>在Product.java新增属性<code>private ProductImage firstProductImage;</code></p>
<p>在ProductService.java新增方法<code>void setFirstProductImage(Product p);</code></p>
<p>在ProductServiceImpl.java中新增方法setFirstProductImage(Product p): 根据pid和图片类型查询出所有的单个图片，然后把第一个取出来放在firstProductImage上。<br>增加方法setFirstProductImage(List<product> ps): 给多个产品设置图片。<br>在get方法中调用setFirstProductImage(Product p): 为单个产品设置图片。<br>在list方法中调用setFirstProductImage(List<product> ps): 为多个产品设置图片。</product></product></p>
<p>在listProduct.jsp中增加如下来显示图片:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;c:<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"<span class="variable">$&#123;!empty p.firstProductImage&#125;</span>"</span>&gt;</div><div class="line">    &lt;img width=<span class="string">"40px"</span> src=<span class="string">"img/productSingle/<span class="variable">$&#123;p.firstProductImage.id&#125;</span>.jpg"</span>&gt;</div><div class="line">&lt;/c:<span class="keyword">if</span>&gt;</div></pre></td></tr></table></figure></p>
<h3 id="产品展示"><a href="#产品展示" class="headerlink" title="产品展示"></a>产品展示</h3><h4 id="前台无需登录"><a href="#前台无需登录" class="headerlink" title="前台无需登录"></a>前台无需登录</h4><p>从前台模块之间的依赖性，以及开发顺序的合理性来考虑，把前台功能分为了无需登录即可使用的功能，和需要登录才能访问的功能。</p>
<h4 id="前台需要登录"><a href="#前台需要登录" class="headerlink" title="前台需要登录"></a>前台需要登录</h4><p>接着是需要登录的前台功能。这部分功能基本上都是和购物相关的。</p>
<h4 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h4><p>从首页展示需求分析上来看:<br>1、在横向导航栏上提供4个分类连接<br>2、在纵向导航栏上提供全部17个分类连接<br>3、当鼠标移动到某一个纵向分类连接的时候，显示这个分类下的推荐产品列表<br>4、按照每种分类显示5个商品的方式，显示所有17种分类 </p>
<p>在Category.java中新增两个瞬间自动products和productsByRow<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">List</span>&lt;<span class="keyword">Product</span>&gt; products;</div><div class="line"><span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;<span class="keyword">Product</span>&gt;&gt; productsByRow;</div></pre></td></tr></table></figure></p>
<p>products比较好理解，代表一个分类下有多个产品。<br>productByRow这个属性的类型是List<list<product>&gt;productByRow。即一个分类又对应多个List<product>，提供这个属性，是为了在首页竖状导航的分类名称右边显示推荐产品列表。<br>一个分类会对应多行产品，而一行产品里又有多个产品记录。<br>为了实现界面上这个功能，为Category类设计了<code>List&lt;List&lt;Product&gt;&gt;productsByRow</code>这样一个集合属性。</product></list<product></p>
<p>在ProductService中新增三个方法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(List&lt;Category&gt; categorys)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(Category category)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillByRow</span><span class="params">(List&lt;Category&gt; categorys)</span></span>;</div></pre></td></tr></table></figure></p>
<p>在ProductServiceImpl为ProductService中新增加的三个方法提供实现。<br>1、为分类填充产品集合<code>public void fill(Category cateogry)</code><br>2、为多个分类填充产品集合<code>public void fill(List&lt;Category&gt; categorys)</code><br>3、为多个分类填充推荐产品集合，即把分类下的产品集合，按照8个为一行，拆成多行，以利于后续页面上进行显示。<code>public void fillByRow(List&lt;Category&gt; categorys);</code></p>
<p>在home()方法映射首页访问路径<code>/forehome</code><br>1、查询所有分类<br>2、为这些分类填充产品集合<br>3、为这些分类填充推荐产品集合<br>4、服务端跳转到home.jsp</p>
<h4 id="home-jsp"><a href="#home-jsp" class="headerlink" title="home.jsp"></a>home.jsp</h4><p>home.jsp分成<code>header.jsp</code>, <code>top.jsp</code>, <code>search.jsp</code>, <code>homePage.jsp</code>, <code>footer.jsp</code></p>
<h5 id="header-jsp"><a href="#header-jsp" class="headerlink" title="header.jsp"></a>header.jsp</h5><p>1、声明为HTML5格式<code>&lt;!DOCTYPE html&gt;</code><br>2、让浏览器以UTF显示中文，本页面的中文文字采用UTF-8编码，启动EL表达式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@<span class="built_in"> page </span><span class="attribute">language</span>=<span class="string">"java"</span> <span class="attribute">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> <span class="attribute">pageEncoding</span>=<span class="string">"UTF-8"</span> <span class="attribute">isELIgnored</span>=<span class="string">"false"</span>%&gt;</div></pre></td></tr></table></figure></p>
<p>3、引入标准标签库<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib <span class="attribute">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attribute">prefix</span>=<span class="string">"c"</span>%&gt;</div><div class="line">&lt;%@ taglib <span class="attribute">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> <span class="attribute">prefix</span>=<span class="string">'fmt'</span> %&gt;</div><div class="line">&lt;%@ taglib <span class="attribute">prefix</span>=<span class="string">"fn"</span> <span class="attribute">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span> %&gt;</div></pre></td></tr></table></figure></p>
<p>c通常用于条件判断和遍历<br>fmt用于格式化日期和货币<br>fn用于校验长度<br>4、引入bootstrap和jquery<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery/2.0.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap/3.3.6/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap/3.3.6/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>5、自定义前端样式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link <span class="attribute">href</span>=<span class="string">"css/fore/style.css"</span> <span class="attribute">rel</span>=<span class="string">"stylesheet"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>除了轮播和图标，前端几乎没用Bootstrap中的样式，所有的自定义样式都在这个文件里。<br>6、各种自定义函数和事件监听</p>
<h5 id="top-jsp"><a href="#top-jsp" class="headerlink" title="top.jsp"></a>top.jsp</h5><p>置顶导航页面<br>这里会根据用户是否登录，决定是否显示退出按钮，或者登录注册按钮，以及购物车中的商品数量。</p>
<h5 id="serach-jsp"><a href="#serach-jsp" class="headerlink" title="serach.jsp"></a>serach.jsp</h5><p>这里会从request的属性”cs”中获取到分类集合，并取第5个到第8个，一共4个来显示。</p>
<h5 id="homePage-jsp"><a href="#homePage-jsp" class="headerlink" title="homePage.jsp"></a>homePage.jsp</h5><p>这里是首页业务页面，在homePage中要显示如下内容:<br>1、天猫超市连接右侧有4个分类数据<br>2、竖状导航栏显示17个分类数据<br>3、每个分类又再对应不同的推荐产品集合<br>4、中部会显示17个分类<br>5、每个分类又显示前5款产品<br>6、每款产品又会显示第一张图片，标题，价格等信息。</p>
<p>homePage.jsp中包含<code>categoryAndcarousel.jsp</code>分类和轮播，这个jsp包含<code>categoryMenu.jsp</code>竖状分类菜单, <code>productsAsideCategorys.jsp</code>竖状分类菜单右侧的推荐产品列表, <code>carousel.jsp</code>轮播;  <code>homepageCategoryProducts.jsp</code>总体17种分类以及每个分类对应的5个产品。</p>
<h5 id="categoryAndcarousel-jsp"><a href="#categoryAndcarousel-jsp" class="headerlink" title="categoryAndcarousel.jsp"></a>categoryAndcarousel.jsp</h5><p>categoryAndcarousel.jsp 页面利用ForeController传递过来的数据，天猫国际几个字旁边显示4个分类超链<br>另外包含了其他3个页面：<br>categoryMenu.jsp<br>productsAsideCategorys.jsp<br>carousel.jsp</p>
<h5 id="categoryMenu-jsp"><a href="#categoryMenu-jsp" class="headerlink" title="categoryMenu.jsp"></a>categoryMenu.jsp</h5><p>categoryMenu.jsp 显示左侧的竖状分类导航</p>
<h5 id="productsAsideCategorys-jsp"><a href="#productsAsideCategorys-jsp" class="headerlink" title="productsAsideCategorys.jsp"></a>productsAsideCategorys.jsp</h5><p>productsAsideCategorys.jsp 进行了三层遍历<br>1、先取出每个分类<br>2、然后取出每个分类的productsByRow集合<br>3、根据productsByRow集合，取出每个产品，把产品的subTitle信息里的第一个单词取出来显示。</p>
<h5 id="carousel-jsp"><a href="#carousel-jsp" class="headerlink" title="carousel.jsp"></a>carousel.jsp</h5><p>轮播部分，都是静态的页面，没有用到服务端数据</p>
<h5 id="homepageCategoryProducts-jsp"><a href="#homepageCategoryProducts-jsp" class="headerlink" title="homepageCategoryProducts.jsp"></a>homepageCategoryProducts.jsp</h5><p>homepageCategoryProducts.jsp 进行了2次遍历<br>1、遍历所有的分类，取出每个分类对象<br>2、遍历分类对象的products集合，取出每个产品，然后显示该产品的标题，图片，价格等信息</p>
<h4 id="产品页"><a href="#产品页" class="headerlink" title="产品页"></a>产品页</h4><h5 id="Product-java"><a href="#Product-java" class="headerlink" title="Product.java"></a>Product.java</h5><p>在Product.java中增加如下属性:<br>1、单个产品图片集合<code>private List&lt;ProductImage&gt; productSingleImages;</code><br>2、详情产品图片集合<code>private List&lt;ProductImage&gt; productDetailImages;</code><br>3、销量<code>private int saleCount;</code><br>4、累计评价<code>private int reviewCount;</code></p>
<h5 id="Review-java"><a href="#Review-java" class="headerlink" title="Review.java"></a>Review.java</h5><p>修改自动生成的评价类Review，增加User属性: <code>private User user;</code></p>
<h5 id="ReviewService-java"><a href="#ReviewService-java" class="headerlink" title="ReviewService.java"></a>ReviewService.java</h5><p>增加ReviewService，提供CURD以及通过产品获取评价方法:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function">List <span class="title">list</span><span class="params">(<span class="keyword">int</span> pid)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">(<span class="keyword">int</span> pid)</span></span>;</div></pre></td></tr></table></figure></p>
<h5 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h5><p>修改User, 增加一个getAnonymousName方法用于在显示评价者的时候进行匿名显示</p>
<h5 id="ReviewServiceImpl-java"><a href="#ReviewServiceImpl-java" class="headerlink" title="ReviewServiceImpl.java"></a>ReviewServiceImpl.java</h5><p>增加ReviewServiceImpl，实现对应方法</p>
<h5 id="OrderItemService-java"><a href="#OrderItemService-java" class="headerlink" title="OrderItemService.java"></a>OrderItemService.java</h5><p>修改OrderItemService，增加根据产品获取销售量的方法: <code>int getSaleCount(int  pid);</code></p>
<h5 id="OrderItemServiceImpl-java"><a href="#OrderItemServiceImpl-java" class="headerlink" title="OrderItemServiceImpl.java"></a>OrderItemServiceImpl.java</h5><p>修改OrderItemServiceImpl，实现getSaleCount方法</p>
<h5 id="ProductService-java"><a href="#ProductService-java" class="headerlink" title="ProductService.java"></a>ProductService.java</h5><p>修改ProductService，增加为产品设置销量和评价数量的方法:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSaleAndReviewNumber</span><span class="params">(Product p)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSaleAndReviewNumber</span><span class="params">(List&lt;Product&gt; ps)</span></span>;</div></pre></td></tr></table></figure></p>
<h5 id="ProductServiceImpl-java"><a href="#ProductServiceImpl-java" class="headerlink" title="ProductServiceImpl.java"></a>ProductServiceImpl.java</h5><p>修改ProductServiceImpl，实现为产品设置销量和评价数量的方法:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSaleAndReviewNumber</span><span class="params">(Product p)</span></span>;</div><div class="line"><span class="keyword">void</span> setSaleAndReviewNumber</div></pre></td></tr></table></figure></p>
<h5 id="ForeController-product"><a href="#ForeController-product" class="headerlink" title="ForeController.product()"></a>ForeController.product()</h5><p>访问地址/foreproduct?pid=<br>导致ForeController.product() 方法被调用<br>1、获取参数pid<br>2、根据pid获取Product 对象p<br>3、根据对象p，获取这个产品对应的单个图片集合<br>4、根据对象p，获取这个产品对应的详情图片集合<br>5、获取产品的所有属性值<br>6、获取产品对应的所有的评价<br>7、设置产品的销量和评价数量<br>8、把上述取值放在request属性上<br>9、服务端跳转到 “product.jsp” 页面</p>
<h5 id="product-jsp"><a href="#product-jsp" class="headerlink" title="product.jsp"></a>product.jsp</h5><p>与 register.jsp 相仿，product.jsp也包含了header.jsp, top.jsp, simpleSearch.jsp， footer.jsp 等公共页面。<br>中间是产品业务页面 productPage.jsp</p>
<h5 id="productPage-jsp"><a href="#productPage-jsp" class="headerlink" title="productPage.jsp"></a>productPage.jsp</h5><p>productPage.jsp 又由3个页面组成<br>1、imgAndInfo.jpg<br>单个图片和基本信息<br>2、productReview.jsp<br>评价信息<br>3、productDetail.jsp<br>详情图片</p>
<h5 id="imgAndInfo-jsp"><a href="#imgAndInfo-jsp" class="headerlink" title="imgAndInfo.jsp"></a>imgAndInfo.jsp</h5><p>1、左侧显示5张单个图片<br>1.1 默认显示第一张图片<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img <span class="attribute">src</span>=<span class="string">"img/productSingle/<span class="variable">$&#123;p.firstProductImage.id&#125;</span>.jpg"</span> <span class="attribute">class</span>=<span class="string">"bigImg"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>1.2 5张小图片<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;p.productSingleImages&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"pi"</span>&gt;</span></span></div><div class="line"><span class="xml">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/productSingle_small/$</span></span></span><span class="template-variable">&#123;pi.id&#125;</span><span class="xml"><span class="tag"><span class="string">.jpg"</span> <span class="attr">bigImageURL</span>=<span class="string">"img/productSingle/$</span></span></span><span class="template-variable">&#123;pi.id&#125;</span><span class="xml"><span class="tag"><span class="string">.jpg"</span> <span class="attr">class</span>=<span class="string">"smallImage"</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>2、右边显示基本信息<br>2.1 标题和小标题<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"productTitle"</span>&gt;</div><div class="line">	$&#123;<span class="selector-tag">p</span>.name&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"productSubTitle"</span>&gt;</div><div class="line">	$&#123;<span class="selector-tag">p</span>.subTitle&#125; </div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>2.2 原始价格和促销价<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;fmt:formatNumber <span class="attribute">type</span>=<span class="string">"number"</span> <span class="attribute">value</span>=<span class="string">"<span class="variable">$&#123;p.originalPrice&#125;</span>"</span> <span class="attribute">minFractionDigits</span>=<span class="string">"2"</span>/&gt;</div><div class="line">&lt;fmt:formatNumber <span class="attribute">type</span>=<span class="string">"number"</span> <span class="attribute">value</span>=<span class="string">"<span class="variable">$&#123;p.promotePrice&#125;</span>"</span> <span class="attribute">minFractionDigits</span>=<span class="string">"2"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>2.3 销量和累计评价<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>销量 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"redColor boldWord"</span>&gt;</span> $</span><span class="template-variable">&#123;p.saleCount &#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>累计评价 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"redColor boldWord"</span>&gt;</span> $</span><span class="template-variable">&#123;p.reviewCount&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>2.4 库存<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>库存$</span><span class="template-variable">&#123;p.stock&#125;</span><span class="xml">件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h5 id="productReview-jsp"><a href="#productReview-jsp" class="headerlink" title="productReview.jsp"></a>productReview.jsp</h5><p>借助c:forEach遍历request中的reviews</p>
<h5 id="productDetail-jsp"><a href="#productDetail-jsp" class="headerlink" title="productDetail.jsp"></a>productDetail.jsp</h5><p>如图所示，productDetail.jsp做了两件事<br>1、显示属性值<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pvs&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"pv"</span>&gt;</span></span></div><div class="line"><span class="xml">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>$</span><span class="template-variable">&#123;pv.property.name&#125;</span><span class="xml">:  $</span><span class="template-variable">&#123;fn:substring(pv.value, 0, 10)&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>2、显示详情图片<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;p.productDetailImages&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"pi"</span>&gt;</span></span></div><div class="line"><span class="xml">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/productDetail/$</span></span></span><span class="template-variable">&#123;pi.id&#125;</span><span class="xml"><span class="tag"><span class="string">.jpg"</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h3 id="搜索查询"><a href="#搜索查询" class="headerlink" title="搜索查询"></a>搜索查询</h3><p>每个页面都包含了搜索的jsp，首页和搜索结果页包含的是<code>search.jsp</code>，其他页面包含的是<code>simpleSearch.jsp</code>。<br>这两个页面都提供了一个form，提交数据keyword到foresearch这个路径。</p>
<h4 id="ForeController-search"><a href="#ForeController-search" class="headerlink" title="ForeController.search()"></a>ForeController.search()</h4><p>通过search.jsp或者simpleSearch.jsp提交数据到路径 /foresearch， 导致ForeController.search()方法被调用<br>1、获取参数keyword<br>2、根据keyword进行模糊查询，获取满足条件的前20个产品<br>3、为这些产品设置销量和评价数量<br>4、把产品结合设置在model的”ps”属性上<br>5、服务端跳转到 searchResult.jsp 页面</p>
<p>在ProductService.java中增加search方法<br>在ProductServiceImpl中实现search方法，通过关键字进行模糊查询。</p>
<p>与 register.jsp 相仿，searchResult.jsp 也包含了header.jsp, top.jsp, search.jsp， footer.jsp 等公共页面。<br>中间是搜索结果业务页面 searchResultPage.jsp。<br>在search.jsp中，又把参数keyword显示在输入框中。<code>&lt;input name=&quot;keyword&quot; type=&quot;text&quot; value=&quot;${param.keyword}&quot; placeholder=&quot;时尚男鞋  太阳镜 &quot;&gt;</code></p>
<p>searchResultPage.jsp 本身没做什么。。。。 直接包含了 productsBySearch.jsp</p>
<p>productsBySearch.jsp 显示产寻结果：<br>1、遍历ps，把每个产品的图片，价格，标题等信息显示出来<br>2、如果ps为空，则显示 “没有满足条件的产品”</p>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><h4 id="register-jsp"><a href="#register-jsp" class="headerlink" title="register.jsp"></a>register.jsp</h4><p>与首页的home.jsp相仿，register.jsp也包含了header.jsp,top.jsp,footer.jsp等公共页面。<br>不同的是，没有使用首页的search.jsp,而是用的简单一点的 simpleSearch.jsp<br>中间是注册业务页面registerPage.jsp</p>
<h4 id="PageController-java"><a href="#PageController-java" class="headerlink" title="PageController.java"></a>PageController.java</h4><p>register.jsp 是放在WEB-INF目录下的，是无法通过浏览器直接访问的。 为了访问这些放在WEB-INF下的jsp，准备一个专门的PageController类，专门做服务端跳转。 比如访问registerPage，就会服务端跳转到WEB-INF/jsp/fore/register.jsp 去，这样就解决了无法被访问的问题。<br>这个类很简单，就是单纯用来做服务端跳转用的</p>
<h4 id="simpleSearch-jsp"><a href="#simpleSearch-jsp" class="headerlink" title="simpleSearch.jsp"></a>simpleSearch.jsp</h4><p>与首页的search.jsp不太一样的是，这个搜索栏要更简单一些，并且左右分开。</p>
<h4 id="registerPage-jsp"><a href="#registerPage-jsp" class="headerlink" title="registerPage.jsp"></a>registerPage.jsp</h4><p>注册页面的主体功能，用于提交账号密码。 在提交之前会进行为空验证，以及密码是否一致验证。<br>这段代码用于当账号提交到服务端，服务端判断当前账号已经存在的情况下，显示返回的错误提示 “用户名已经被使用,不能使用”<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;c:<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"<span class="variable">$&#123;!empty msg&#125;</span>"</span>&gt;</div><div class="line">$(<span class="string">"span.errorMessage"</span>).html(<span class="string">"<span class="variable">$&#123;msg&#125;</span>"</span>);</div><div class="line">$(<span class="string">"div.registerErrorMessageDiv"</span>).css(<span class="string">"visibility"</span>,<span class="string">"visible"</span>);	</div><div class="line">&lt;/c:<span class="keyword">if</span>&gt;</div></pre></td></tr></table></figure></p>
<h4 id="UserService-java"><a href="#UserService-java" class="headerlink" title="UserService.java"></a>UserService.java</h4><p>UserService新增加isExist(String name)方法</p>
<h4 id="UserServiceImpl-java"><a href="#UserServiceImpl-java" class="headerlink" title="UserServiceImpl.java"></a>UserServiceImpl.java</h4><p>UserServiceImpl 新增isExist(String name)的实现，判断某个名称是否已经被使用过了。</p>
<h4 id="ForeController-register"><a href="#ForeController-register" class="headerlink" title="ForeController.register()"></a>ForeController.register()</h4><p>registerPage.jsp 的form提交数据到路径 foreregister,导致ForeController.register()方法被调用</p>
<p>1、通过参数User获取浏览器提交的账号密码<br>2、通过HtmlUtils.htmlEscape(name);把账号里的特殊符号进行转义<br>3、判断用户名是否存在<br>3.1 如果已经存在，就服务端跳转到reigster.jsp，并且带材错误提示信息<br>3.2 如果不存在，则加入到数据库中，并服务端跳转到registerSuccess.jsp页面</p>
<p>注为什么要用 HtmlUtils.htmlEscape？ 因为有些同学在恶意注册的时候，会使用诸如 <script>alert(‘papapa’)</script> 这样的名称，会导致网页打开就弹出一个对话框。 那么在转义之后，就没有这个问题了。<br>注： model.addAttribute(“user”, null); 这句话的用处是当用户存在，服务端跳转到register.jsp的时候不带上参数user, 否则当注册失败的时候，会在原本是“请登录”的超链位置显示刚才注册的名称。 可以试试把这一条语句注释掉观察这个现象</p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><h4 id="login-jsp"><a href="#login-jsp" class="headerlink" title="login.jsp"></a>login.jsp</h4><p>与register.jsp相仿，login.jsp也包含了header.jsp,footer.jsp等公共页面。<br>中间是登录业务页面loginPage.jsp</p>
<h4 id="UserService-java-1"><a href="#UserService-java-1" class="headerlink" title="UserService.java"></a>UserService.java</h4><p>增加get(String name, String password)方法</p>
<h4 id="UserServiceImpl-java-1"><a href="#UserServiceImpl-java-1" class="headerlink" title="UserServiceImpl.java"></a>UserServiceImpl.java</h4><p>增加User get(String name, String password) 方法</p>
<h4 id="loginPage-jsp"><a href="#loginPage-jsp" class="headerlink" title="loginPage.jsp"></a>loginPage.jsp</h4><p>登陆业务页面，用于向服务器提交账号和密码.<br>1、与registerPage.jsp类似的，用于显示登录密码错误<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;c:<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"<span class="variable">$&#123;!empty msg&#125;</span>"</span>&gt;</div><div class="line">$(<span class="string">"span.errorMessage"</span>).html(<span class="string">"<span class="variable">$&#123;msg&#125;</span>"</span>);</div><div class="line">$(<span class="string">"div.loginErrorMessageDiv"</span>).show();		</div><div class="line">&lt;/c:<span class="keyword">if</span>&gt;</div></pre></td></tr></table></figure></p>
<p>2、其他js函数是用于为空验证</p>
<h4 id="ForeController-login"><a href="#ForeController-login" class="headerlink" title="ForeController.login()"></a>ForeController.login()</h4><p>loginPage.jsp的form提交数据到路径 forelogin,导致ForeController.login()方法被调用</p>
<p>1、获取账号密码<br>2、把账号通过HtmlUtils.htmlEscape进行转义<br>3、根据账号和密码获取User对象<br>3.1 如果对象为空，则服务端跳转回login.jsp，也带上错误信息，并且使用 loginPage.jsp 中的办法显示错误信息<br>3.2 如果对象存在，则把对象保存在session中，并客户端跳转到首页”forehome”<br>注 为什么要用 HtmlUtils.htmlEscape？ 因为注册的时候，ForeController.register()，就进行了转义，所以这里也需要转义。有些同学在恶意注册的时候，会使用诸如 <script>alert(‘papapa’)</script> 这样的名称，会导致网页打开就弹出一个对话框。 那么在转义之后，就没有这个问题了。</p>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><h4 id="ForeController-logout"><a href="#ForeController-logout" class="headerlink" title="ForeController.logout()"></a>ForeController.logout()</h4><p>通过访问退出路径: <code>http://127.0.0.1:8080/tmall_ssm/forelogout</code><br>导致ForeController.logout()方法被调用<br>1、在session中去掉”user” <code>session.removeAttribute(&quot;user&quot;);</code><br>2、客户端跳转到首页: <code>return &quot;redirect:forehome&quot;;</code></p>
<h3 id="登录状态拦截器"><a href="#登录状态拦截器" class="headerlink" title="登录状态拦截器"></a>登录状态拦截器</h3><p>查看购物车页面有个问题，必须简历在已经登录的状态之上。如果没有登录，而访问地址: <code>http://127.0.0.1:8080/tmall_ssm/forecart</code>会导致异常发生。</p>
<p><code>解决思路</code>： 在查看购物车之前，应该进行登录操作，但是又不能确保用户一定会记得登录，那么怎么办呢？<br>准备一个过滤器，当访问那些需要登录才能做的页面的时候，进行是否登录的判断，如果不通过，那么就跳转到login.jsp页面去，提示用户登录。</p>
<p>哪些页面需要登录？哪些页面不需要呢？<br>a. 不需要登录也可以访问的<br>如：注册，登录，产品，首页，分类，查询等等<br>b. 需要登录才能够访问的<br>如：购买行为，加入购物车行为，查看购物车，查看我的订单等等</p>
<h4 id="LoginInterceptor-java"><a href="#LoginInterceptor-java" class="headerlink" title="LoginInterceptor.java"></a>LoginInterceptor.java</h4><p>新建一个过滤器LoginInterceptor ，根据解决思路中<br>哪些页面需要登录？哪些页面不需要呢？<br>a. 不需要登录也可以访问的<br>如：注册，登录，产品，首页，分类，查询等等<br>b. 需要登录才能够访问的<br>如：购买行为，加入购物车行为，查看购物车，查看我的订单等等<br>不需要登录也可以访问的已经确定了，但是需要登录才能够访问，截止目前为止还不能确定，所以这个过滤器就判断如果不是注册，登录，产品这些，就进行登录校验<br>1、准备字符串数组 noNeedAuthPage，存放哪些不需要登录也能访问的路径<br>2、获取uri<br>3、去掉前缀/tmall_ssm<br>4、如果访问的地址是/fore开头<br>4.1 取出fore后面的字符串，比如是forecart,那么就取出cart<br>4.2 判断cart是否是在noNeedAuthPage<br>4.2 如果不在，那么就需要进行是否登录验证<br>4.3 从session中取出”user”对象<br>4.4 如果对象不存在，就客户端跳转到login.jsp<br>4.5 否则就正常执行</p>
<h4 id="springMVC-xml"><a href="#springMVC-xml" class="headerlink" title="springMVC.xml"></a>springMVC.xml</h4><p>在springMVC.xml中新增对登陆状态拦截器的配置</p>
<h3 id="ForeController对createOrder进行事务管理"><a href="#ForeController对createOrder进行事务管理" class="headerlink" title="ForeController对createOrder进行事务管理"></a>ForeController对createOrder进行事务管理</h3><p>实现add(Order o, List<orderitem> ois)方法，该方法通过注解进行事务管理<br><code>@Transactional(propagation= Propagation.REQUIRED,rollbackForClassName=&quot;Exception&quot;)</code></orderitem></p>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>MVC设计模式贯穿于整个后台与前台功能开发始末<br>模型(Model)、视图(View)、控制器(Controller)</p>
<h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>通过发现问题，分析问题，解决问题的三部曲，进行了各种角度的重构。经历这样一个重构过程提高开发效率，降低维护成本<br>分页方式 ，分类逆向工程 ，所有逆向工程</p>
<h3 id="统一的分页查询简化开发"><a href="#统一的分页查询简化开发" class="headerlink" title="统一的分页查询简化开发"></a>统一的分页查询简化开发</h3><p>所有的后台都使用同一个分页机制，仅仅需要一份简化的adminPage.jsp即满足了各种分页功能的需求，简化了开发，提升了开发速度。</p>
<h3 id="模块化JSP设计"><a href="#模块化JSP设计" class="headerlink" title="模块化JSP设计"></a>模块化JSP设计</h3><p>从大的JSP文件中，通过JSP包含关系抽象出多个公共文件，并把业务JSP按照功能，设计为多个小的JSP文件，便于维护和理解</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h2&gt;&lt;h3 id=&quot;项目名称&quot;&gt;&lt;a href=&quot;#项目名称&quot; class=&quot;headerlink&quot; title=&quot;项目名称&quot;&gt;&lt;/a&gt;项目名称&lt;/h3&gt;&lt;p&gt;&lt;code&gt;tmall_ssm&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;java源代码包结构&quot;&gt;&lt;a href=&quot;#java源代码包结构&quot; class=&quot;headerlink&quot; title=&quot;java源代码包结构&quot;&gt;&lt;/a&gt;java源代码包结构&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pojo&lt;/code&gt; 实体类&lt;br&gt;&lt;code&gt;mapper&lt;/code&gt; Mapper类&lt;br&gt;&lt;code&gt;interceptor&lt;/code&gt; 拦截器&lt;br&gt;&lt;code&gt;controller&lt;/code&gt; 控制层&lt;br&gt;&lt;code&gt;service&lt;/code&gt; Service层&lt;br&gt;&lt;code&gt;test&lt;/code&gt; 测试类&lt;br&gt;&lt;code&gt;util&lt;/code&gt; 工具类&lt;br&gt;&lt;code&gt;comparator&lt;/code&gt; 比较类&lt;br&gt;
    
    </summary>
    
    
      <category term="tmall_ssm" scheme="http://www.sanstylemc.cn/tags/tmall-ssm/"/>
    
  </entry>
  
</feed>
