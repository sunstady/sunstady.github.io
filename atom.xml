<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sanstyle</title>
  <subtitle>功有所不全 才有所不任 力有所不足</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sanstylemc.cn/"/>
  <updated>2018-04-01T07:06:59.980Z</updated>
  <id>http://www.sanstylemc.cn/</id>
  
  <author>
    <name>MC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Object类及其常用方法</title>
    <link href="http://www.sanstylemc.cn/2018/04/01/Object%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://www.sanstylemc.cn/2018/04/01/Object类及其常用方法/</id>
    <published>2018-04-01T07:06:28.000Z</published>
    <updated>2018-04-01T07:06:59.980Z</updated>
    
    <content type="html"><![CDATA[<p>Object类是一个特殊的类，是所有类的父类，如果一个类没有用extends明确指出继承于某个类，那么它默认继承Object类。Object类中三个常用的方法: <code>toString()</code>、<code>equals()</code>、<code>hashCode()</code>。</p>
<h2 id="取得对象信息的方法-toString"><a href="#取得对象信息的方法-toString" class="headerlink" title="取得对象信息的方法: toString()"></a>取得对象信息的方法: toString()</h2><p>该方法在打印对象时候被调用，将对象信息变为字符串返回，默认输出对象地址。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Students</span>&#123;</div><div class="line">	String name= <span class="string">"zhangsan"</span>;</div><div class="line">	<span class="keyword">int</span> age= <span class="number">21</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">long1_1</span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">		Students students= <span class="keyword">new</span> Students();</div><div class="line">		System.<span class="keyword">out</span>.println(<span class="string">"姓名: "</span>+ students.name+ <span class="string">", 年龄: "</span>+ students.age);<span class="comment">//输出对象属性</span></div><div class="line">		System.<span class="keyword">out</span>.println(students);<span class="comment">//直接输出对象信息</span></div><div class="line">		System.<span class="keyword">out</span>.println(students.toString());<span class="comment">//调用父类方法输出对象信息</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果:<br><img src="https://raw.githubusercontent.com/sunstady/hexo/d3635a3a49e2fbc2e16ce57088772c6285dc67c1/Object%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/1.png" alt="1"><br>上述结果可看出编译器默认调用<code>toString()</code>方法输出对象，但输出的是对象的地址，我们并不能看懂它的意思。就要通过重写Object类的toString()方法来输出对象属性信息。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Students</span>&#123;</div><div class="line">	String name= <span class="string">"zhangsan"</span>;</div><div class="line">	<span class="keyword">int</span> age= <span class="number">21</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"姓名: "</span>+ name+ <span class="string">", 年龄: "</span>+ age;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">long1_1</span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">		Students students= <span class="keyword">new</span> Students();</div><div class="line">		System.<span class="keyword">out</span>.println(<span class="string">"姓名: "</span>+ students.name+ <span class="string">", 年龄: "</span>+ students.age);<span class="comment">//输出对象属性</span></div><div class="line">		System.<span class="keyword">out</span>.println(students);<span class="comment">//直接输出对象信息</span></div><div class="line">		System.<span class="keyword">out</span>.println(students.toString());<span class="comment">//调用父类方法输出对象信息</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果:<br><img src="https://raw.githubusercontent.com/sunstady/hexo/d3635a3a49e2fbc2e16ce57088772c6285dc67c1/Object%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/2.png" alt="2"></p>
<h2 id="对象相等判断方法-equals"><a href="#对象相等判断方法-equals" class="headerlink" title="对象相等判断方法: equals()"></a>对象相等判断方法: equals()</h2><p>该方法用于比较帝乡是否相等，而且此方法必须被重写。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Students</span>&#123;</div><div class="line">	String name;</div><div class="line">	<span class="keyword">int</span> age;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Students</span>(<span class="params">String name, <span class="keyword">int</span> age</span>) </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name= name;</div><div class="line">		<span class="keyword">this</span>.age= age;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">long1_1</span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">		Students s1= <span class="keyword">new</span> Students(<span class="string">"zhangsang"</span>, <span class="number">21</span>);</div><div class="line">		Students s2= <span class="keyword">new</span> Students(<span class="string">"lisi"</span>, <span class="number">21</span>);</div><div class="line">		System.<span class="keyword">out</span>.println(s1.<span class="keyword">equals</span>(s2));</div><div class="line">		System.<span class="keyword">out</span>.println(s1.<span class="keyword">equals</span>(s2)?<span class="string">"s1和s2是同一个人"</span>: <span class="string">"s1和s2不是同一个人"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果:<br><img src="https://raw.githubusercontent.com/sunstady/hexo/d3635a3a49e2fbc2e16ce57088772c6285dc67c1/Object%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/3.png" alt="3"><br>很明显输出的结果是错误的，因为equals()方法比较的是两个对象的地址 ，所以必须重写方法才能到达目的。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Student</span>&#123;</div><div class="line">    String name;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="comment">//重写父类（Object类）中的equals方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">equals</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        boolean temp;</div><div class="line">        Student s1 = <span class="keyword">new</span> Student();</div><div class="line">        s1.name=<span class="string">"张三"</span>;s1.age=<span class="number">12</span>;</div><div class="line">        Student s2 = <span class="keyword">new</span> Student();</div><div class="line">        s2.name=<span class="string">"张三"</span>;s2.age=<span class="number">12</span>;</div><div class="line">        <span class="keyword">if</span>((s1.name.<span class="keyword">equals</span>(s2.name))&amp;&amp;(s1.age==s2.age))&#123;</div><div class="line">            temp = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            temp = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">long1_1</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</div><div class="line">        Student s3 = <span class="keyword">new</span> Student();</div><div class="line">        System.<span class="keyword">out</span>.println(s3.<span class="keyword">equals</span>()?<span class="string">"是同一人"</span>:<span class="string">"不是同一人"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="对象签名-hashCode"><a href="#对象签名-hashCode" class="headerlink" title="对象签名: hashCode()"></a>对象签名: hashCode()</h2><p>该方法用来返回其所在对象的物理地址(哈希码值)，常会和equals方法同时重写，确保相等的两个对象拥有相等的hashCode。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Student</span></div><div class="line">&#123;</div><div class="line">    String name;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="comment">//重写父类（Object类）中的equals方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">equals</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        boolean temp;</div><div class="line">        Student s1 = <span class="keyword">new</span> Student();</div><div class="line">        s1.name=<span class="string">"张三"</span>;s1.age=<span class="number">12</span>;</div><div class="line">        Student s2 = <span class="keyword">new</span> Student();</div><div class="line">        s2.name=<span class="string">"张三"</span>;s2.age=<span class="number">12</span>;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"s1的哈希码："</span>+s1.hashCode());</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"s2的哈希码："</span>+s2.hashCode());</div><div class="line">        <span class="keyword">if</span>((s1.name.<span class="keyword">equals</span>(s2.name))&amp;&amp;(s1.age==s2.age))&#123;</div><div class="line">            temp = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            temp = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> temp;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写hashCode()方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> age*(name.hashCode());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">long1_1</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</div><div class="line">        Student s3 = <span class="keyword">new</span> Student();</div><div class="line">        System.<span class="keyword">out</span>.println(s3.<span class="keyword">equals</span>()?<span class="string">"s1和s2是同一人"</span>:<span class="string">"s1和s2不是同一人"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果:<br><img src="https://raw.githubusercontent.com/sunstady/hexo/d3635a3a49e2fbc2e16ce57088772c6285dc67c1/Object%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/4.png" alt="4"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Object类是一个特殊的类，是所有类的父类，如果一个类没有用extends明确指出继承于某个类，那么它默认继承Object类。Object类中三个常用的方法: &lt;code&gt;toString()&lt;/code&gt;、&lt;code&gt;equals()&lt;/code&gt;、&lt;code&gt;hash
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL事务及其四个特性</title>
    <link href="http://www.sanstylemc.cn/2018/04/01/MySQL%E4%BA%8B%E5%8A%A1%E5%8F%8A%E5%85%B6%E5%9B%9B%E4%B8%AA%E7%89%B9%E6%80%A7/"/>
    <id>http://www.sanstylemc.cn/2018/04/01/MySQL事务及其四个特性/</id>
    <published>2018-04-01T01:32:55.000Z</published>
    <updated>2018-04-01T01:33:29.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务概念引入"><a href="#事务概念引入" class="headerlink" title="事务概念引入"></a>事务概念引入</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;现实生活中，我们往往经常会进行转账操作，转账操作可以分为两部分来完成，转入和转出。只有这两部分都完成了才可以认为是转账成功。在数据库中，这个过程是使用两条语句来完成的，如果其中任意一条语句出现了异常没有执行，则会导致两个账号的金额不同步，造成错误。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了防止上面可能出现的情况，MySQL引入了事务，所谓事务就是针对数据库的一组操作，它可以由一条或多条SQL语句组成，同一个事务的操作具备同步的特点，如果其中有一条语句不能执行的话，那么所有的语句都不会执行，也就是说，事务中的语句要么都执行，要么都不执行。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;在使用数据库时候需要使用事务，必须先开启事务，开启事务的语句具体如下:<br><code>start transaction;</code><br>即:<br><img src="https://raw.githubusercontent.com/sunstady/hexo/0541984ef0c403e9971cf5b1e11fe393d0c788f4/MySQL%E4%BA%8B%E5%8A%A1/1.png" alt="1"><br>上面语句是用来开启事务，事务开启之后就可以执行SQL语句，SQL语句执行成功之后，需要使用相应语句提交事务，提交事务的语句如下:<br><code>commit;</code><br>需要注意的是，在MySQL中直接书写SQL语句都是自动提交的，而事务中的操作语句需要使用<code>commit</code>语句手动提交，只有事务提交后其中的操作才会生效。<br>如果不想提交事务，我们还可以使用相关语句取消事务(也称回滚)，具体语句如下:<br><code>rollback;</code><br>注: <code>rollback</code>语句只能针对未提交的事务执行的回滚操作，已经提交的事务是不能回滚的。</p>
<h2 id="事务的四个基本要素-ACID"><a href="#事务的四个基本要素-ACID" class="headerlink" title="事务的四个基本要素(ACID)"></a>事务的四个基本要素(ACID)</h2><p>ACID，指数据库事务正确执行的四个基本要素的缩写。包含: <code>原子性</code>、<code>一致性</code>、<code>隔离性</code>、<code>持久性</code>。<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="section">原子性: 原子性意味着事务的整体性和不可分割性，这就类似化学中的原子，是一个不可分割的单元。一个事务可以是一个（任务）操作，也可以是多个（任务）操作，假设一个事务由多个操作（任务）组成，那么这些操作必须都执行成功这个事务才被认为执行成功，只要其中有一个任务执行失败那么整个事务都会被认为执行失败，导致自动回滚到初始状态，通俗来讲就是“同进退”，这保证了事务的整体性。这就是事物的原子性。 专业来讲，原子的执行是一个全部发生或全部失败的整体过程。在一个原子操作中，如果事务中的任何一个语句失败，前面执行的语句都将被返回，以保证数据的整体性不被破坏。这在常用的系统应用中，为保证数据的安全性起到一定作用。 </span></div><div class="line"><span class="section">一致性: 在MySql事务处理过程中，无论事务是完全成功或是在中途因某些环节失败而导致失败，但事务使系统处于一致的状态时，必须保持一致性，用户A向用户B的账户中转入5000元，但用户B在查询转账信息的时候，发现自己的账户只增加了3000元，这样不能使整个事务达到一致性。 在MySql中，一致性主要由MySql的日志机制处理，它记录数据库的所有变化，为事务回复提供跟踪记录。如果系统在事务处理中间发生错误，MySql恢复过程将使用这些日志发现事务是否已经完全成功执行或需要返回。一致性属性保证数据库从不返回一个未处理的事务。</span></div><div class="line"><span class="section">隔离性: 它是指每个事务在自己的空间发生，和其他发生在系统中的事务隔离，而且事务的结果只在它完全被执行的时候才能看到，如果该事务未提交，则其他会话看不到执行的结果。这样的话即使一个系统中同时发生多个事务，孤立性也可以保证特定的事务在完成之前，其结果是不被公布的。当系统支持多个同时存在的用户和连接时，系统必须遵守孤立性原则，否则在执行过程中可能导致大量数据被破坏，孤立性保证每个事务完整地在其各自的空间内被顺序的执行，保证事务之间不会相互冲突。</span></div><div class="line"><span class="section">持久性: 在MySql中，即使是数据库系统崩溃，一个提交的事务仍然在坚持。当一个事务完成，数据库的日志已经被更新时，持久性即可发挥其特有功效。在MySql中，如果系统崩溃或者数据存储介质被破坏，通过使用日志，系统能够恢复在重启前进行的最后一次成功更新，可以反应系统崩溃时处于执行过程的事务的变化。 MySql的持久性是通过一条记录事务过程中系统变化的二进制事务日志文件来实现的。如果遇到硬件损坏或者系统的异常关机，系统在下一次启动时，通过使用最后的备份和日志就可以恢复丢失数据。</span></div></pre></td></tr></table></figure></p>
<p>如何使用事务？<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">databases</span> <span class="keyword">test</span>;</div><div class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> accounts(</div><div class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</div><div class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">40</span>),</div><div class="line">money <span class="built_in">float</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> accounts(<span class="keyword">name</span>, money) <span class="keyword">values</span>(<span class="string">'a'</span>, <span class="number">1000</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> accounts(<span class="keyword">name</span>, money) <span class="keyword">values</span>(<span class="string">'b'</span>, <span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<p>执行效果如下:<br><img src="https://raw.githubusercontent.com/sunstady/hexo/0541984ef0c403e9971cf5b1e11fe393d0c788f4/MySQL%E4%BA%8B%E5%8A%A1/2.png" alt="2"><br>演示使用事务来实现转账功能:<br>首先开启一个事务，然后通过update语句将a账户的100元转给b账户，然后提交事务，具体语句如下:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</div><div class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money= money- <span class="number">100</span> <span class="keyword">where</span> <span class="keyword">name</span>= <span class="string">'a'</span>;</div><div class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money= money+ <span class="number">100</span> <span class="keyword">where</span> <span class="keyword">name</span>= <span class="string">'b'</span>;</div><div class="line"><span class="keyword">commit</span>;</div></pre></td></tr></table></figure></p>
<p>执行效果如下:<br><img src="https://raw.githubusercontent.com/sunstady/hexo/0541984ef0c403e9971cf5b1e11fe393d0c788f4/MySQL%E4%BA%8B%E5%8A%A1/3.png" alt="3"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;事务概念引入&quot;&gt;&lt;a href=&quot;#事务概念引入&quot; class=&quot;headerlink&quot; title=&quot;事务概念引入&quot;&gt;&lt;/a&gt;事务概念引入&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;现实生活中，我们往往经常会进行转账操作，转账操作可以分为两部分来完成，转入和转出。只有这两部分都完成了才可以认为是转账成功。在数据库中，这个过程是使用两条语句来完成的，如果其中任意一条语句出现了异常没有执行，则会导致两个账号的金额不同步，造成错误。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;为了防止上面可能出现的情况，MySQL引入了事务，所谓事务就是针对数据库的一组操作，它可以由一条或多条SQL语句组成，同一个事务的操作具备同步的特点，如果其中有一条语句不能执行的话，那么所有的语句都不会执行，也就是说，事务中的语句要么都执行，要么都不执行。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程</title>
    <link href="http://www.sanstylemc.cn/2018/03/31/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://www.sanstylemc.cn/2018/03/31/Java多线程/</id>
    <published>2018-03-31T08:25:33.000Z</published>
    <updated>2018-03-31T08:26:53.895Z</updated>
    
    <content type="html"><![CDATA[<p>Java多线程实现方式主要有四种:<br>&nbsp;&nbsp;&nbsp;&nbsp;继承Thread类，重写run方法、实现Runnable接口，重写run方法，实现Run nable接口的实现类的实例对象作为Thread构造函数的target、实现Callable接口通过FutureTask包装器来创建Thread线程、使用ExecutorService、Callable、Future实现有返回结果的多线程(线程池)。<br>&nbsp;&nbsp;&nbsp;&nbsp;其中前两种方式线程执行完后都没有返回值，原因很简单，通过重写run方法，run方式的返回值是void，所以没有办法返回结果。后两种是带返回值，通过Callable接口，就要实现call方法，这个方法的返回值是Object，所以返回的结果可以放在Object对象中。<br><a id="more"></a></p>
<h2 id="继承Thread类的线程"><a href="#继承Thread类的线程" class="headerlink" title="继承Thread类的线程"></a>继承Thread类的线程</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">long1_1</span> <span class="title">extends</span> <span class="title">Thread</span> &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">long1_1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//编写子类的构造方法，可缺省</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//编写自己的线程代码</span></div><div class="line">        System.<span class="keyword">out</span>.println(Thread.currentThread().getName());</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123; </div><div class="line">    	long1_1 threadDemo01 = <span class="keyword">new</span> long1_1(); </div><div class="line">        threadDemo01.setName(<span class="string">"我是自定义的线程1"</span>);</div><div class="line">        threadDemo01.start();       </div><div class="line">        System.<span class="keyword">out</span>.println(Thread.currentThread().toString()); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:<br><img src="https://raw.githubusercontent.com/sunstady/hexo/cab9515de1920426c5f254aa8af76a5663c0105d/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/1.png" alt="1"></p>
<h2 id="通过实现Runnable接口、实现run方法，接口的实现类的实例作为Thread的target作为参数传入带参的Thread构造函数，通过调用start-方法启动线程。"><a href="#通过实现Runnable接口、实现run方法，接口的实现类的实例作为Thread的target作为参数传入带参的Thread构造函数，通过调用start-方法启动线程。" class="headerlink" title="通过实现Runnable接口、实现run方法，接口的实现类的实例作为Thread的target作为参数传入带参的Thread构造函数，通过调用start()方法启动线程。"></a>通过实现Runnable接口、实现run方法，接口的实现类的实例作为Thread的target作为参数传入带参的Thread构造函数，通过调用start()方法启动线程。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">long1_1</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </div><div class="line">        System.out.println(Thread.currentThread().getName());</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread());</div><div class="line">        t1.start(); </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;我是通过实现接口的线程实现方式！"</span>);</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:<br><img src="https://raw.githubusercontent.com/sunstady/hexo/cab9515de1920426c5f254aa8af76a5663c0105d/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/2.png" alt="2"></p>
<h2 id="通过Callable和FutureTask创建线程"><a href="#通过Callable和FutureTask创建线程" class="headerlink" title="通过Callable和FutureTask创建线程"></a>通过Callable和FutureTask创建线程</h2><p>a: 创建Callable接口的实现类，并实现Call方法<br>b: 创建Callable实现类的实现，使用FutureTask类包装Callable对象，该FutureTask对象封装了Callable对象的Call方法的返回值<br>c: 使用FutureTask对象作为Thread对象的target创建并启动线程<br>d: 调用FutureTaske对象的get()来获取子线程执行结束的返回值<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> long1_1 &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * @param args</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        Callable&lt;<span class="built_in">Object</span>&gt; oneCallable = <span class="keyword">new</span> Tickets&lt;<span class="built_in">Object</span>&gt;();</div><div class="line">        FutureTask&lt;<span class="built_in">Object</span>&gt; oneTask = <span class="keyword">new</span> FutureTask&lt;<span class="built_in">Object</span>&gt;(oneCallable);</div><div class="line">        Thread t = <span class="keyword">new</span> Thread(oneTask);</div><div class="line">        System.out.println(Thread.currentThread().getName());</div><div class="line">        t.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Tickets&lt;<span class="built_in">Object</span>&gt; <span class="keyword">implements</span> Callable&lt;<span class="built_in">Object</span>&gt;&#123;</div><div class="line">    <span class="comment">//重写call方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">Object</span> call() throws Exception &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;我是通过实现Callable接口通过FutureTask包装器来实现的线程"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果:<br><img src="https://raw.githubusercontent.com/sunstady/hexo/cab9515de1920426c5f254aa8af76a5663c0105d/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/3.png" alt="3"></p>
<h2 id="通过线程池创建线程"><a href="#通过线程池创建线程" class="headerlink" title="通过线程池创建线程"></a>通过线程池创建线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">long1_1</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> POOL_NUM = <span class="number">10</span>;     <span class="comment">//线程池数量</span></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException </span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">5</span>);  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;POOL_NUM; i++)  </div><div class="line">        &#123;  </div><div class="line">            RunnableThread thread = <span class="keyword">new</span> RunnableThread();</div><div class="line">            <span class="comment">//Thread.sleep(1000);</span></div><div class="line">            executorService.execute(thread);  </div><div class="line">        &#125;</div><div class="line">        <span class="comment">//关闭线程池</span></div><div class="line">        executorService.shutdown(); </div><div class="line">    &#125;   </div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span>  </span></div><div class="line"><span class="class"></span>&#123;    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span>  </span></div><div class="line"><span class="function">    </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"通过线程池方式创建的线程："</span> + Thread.currentThread().getName() + <span class="string">" "</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:<br><img src="https://raw.githubusercontent.com/sunstady/hexo/cab9515de1920426c5f254aa8af76a5663c0105d/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/4.png" alt="4"><br>ExecutorService、Callable都是属于Executor框架。返回结果的线程是在JDK1.5中引入的新特征，还有Future接口也是属于这个框架。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java多线程实现方式主要有四种:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;继承Thread类，重写run方法、实现Runnable接口，重写run方法，实现Run nable接口的实现类的实例对象作为Thread构造函数的target、实现Callable接口通过FutureTask包装器来创建Thread线程、使用ExecutorService、Callable、Future实现有返回结果的多线程(线程池)。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;其中前两种方式线程执行完后都没有返回值，原因很简单，通过重写run方法，run方式的返回值是void，所以没有办法返回结果。后两种是带返回值，通过Callable接口，就要实现call方法，这个方法的返回值是Object，所以返回的结果可以放在Object对象中。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList和LinkedList的区别</title>
    <link href="http://www.sanstylemc.cn/2018/03/31/ArrayList%E5%92%8CLinkedList%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.sanstylemc.cn/2018/03/31/ArrayList和LinkedList的区别/</id>
    <published>2018-03-31T07:24:19.000Z</published>
    <updated>2018-03-31T07:27:50.591Z</updated>
    
    <content type="html"><![CDATA[<p><code>ArrayList</code>和<code>LinkedList</code>是常用的两种存储结构。<br><a id="more"></a><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ArrayList是实现了基于动态数组的数据结构，LinkedList是基于链表的数据结构。这俩都是对List接口的实现。前者是数组队列，相当于动态数组；后者为双向链表结构，也可当作堆栈、队列、双端队列。</div><div class="line">对于随机访问<span class="keyword">get</span>和<span class="keyword">set</span>，ArrayList觉得优于LinkedList，因为LinkedList是线性的数据存储方式，需要移动指针从前往后依次查找。</div><div class="line">对于新增和删除操作<span class="keyword">add</span>和<span class="keyword">remove</span>，LinkedList比较占优势，因为ArrayList是数组，所以在其中进行增删操作时，会对操作点之后所有数据的下标索引造成影响，需要移动数据。</div><div class="line">从利用效率来看，ArrayList自由性较低，因为它需要手动的设置固定大小的容量，但是它的使用比较方便，只需要创建，然后添加数据，通过调用下标进行使用；而LinkedList自由性较高，能够动态的随数据量的变化而变化，但是它不便于使用。</div><div class="line">ArrayList主要控件开销在于需要在List列表预留一定空间；而LinkedList主要控件开销在于需要存储结点信息以及结点指针信息。</div><div class="line">LinkedList需要更多的内存空间，因为它除了要存储数据之外，还需要存储该结点的前后结点信息，而ArrayList索引处就是存的数据。</div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">long1_1</span> &#123;</span></div><div class="line">	<span class="keyword">static</span> final <span class="keyword">int</span> N=<span class="number">50000</span>;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">timeList</span><span class="params">(List <span class="built_in">list</span>)</span></span>&#123;</div><div class="line">        <span class="keyword">long</span> start=System.currentTimeMillis();</div><div class="line">        Object o = <span class="keyword">new</span> Object();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) &#123;</div><div class="line">            <span class="built_in">list</span>.add(<span class="number">0</span>, o);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> System.currentTimeMillis()-start;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">readList</span><span class="params">(List <span class="built_in">list</span>)</span></span>&#123;</div><div class="line">        <span class="keyword">long</span> start=System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="built_in">list</span>.size();i&lt;j;i++)&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> System.currentTimeMillis()-start;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> List <span class="title">addList</span><span class="params">(List <span class="built_in">list</span>)</span></span>&#123;</div><div class="line">        Object o = <span class="keyword">new</span> Object();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) &#123;</div><div class="line">            <span class="built_in">list</span>.add(<span class="number">0</span>, o);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"ArrayList添加"</span>+N+<span class="string">"条耗时："</span>+timeList(<span class="keyword">new</span> ArrayList()));</div><div class="line">        System.out.println(<span class="string">"LinkedList添加"</span>+N+<span class="string">"条耗时："</span>+timeList(<span class="keyword">new</span> LinkedList()));</div><div class="line"></div><div class="line">        List list1=addList(<span class="keyword">new</span> ArrayList&lt;&gt;());</div><div class="line">        List list2=addList(<span class="keyword">new</span> LinkedList&lt;&gt;());</div><div class="line">        System.out.println(<span class="string">"ArrayList查找"</span>+N+<span class="string">"条耗时："</span>+readList(list1));</div><div class="line">        System.out.println(<span class="string">"LinkedList查找"</span>+N+<span class="string">"条耗时："</span>+timeList(list2));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们在集合中装5万条数据，测试运行结果如下:<br><img src="https://raw.githubusercontent.com/sunstady/hexo/5fa64a9a35fb77be9a695ca8c4772512d1ebf57f/ArrayList%E5%92%8CLinkedList%E7%9A%84%E5%8C%BA%E5%88%AB/2.png" alt="2"><br>可以看到ArrayList更适合读取数据，LinkedList更多的时候添加或删除数据。</p>
<blockquote>
<p>当插入的数据量很小时，两者区别不太大，当插入的数据量大时，大约在容量的1/10之前，LinkedList会优于ArrayList，在其后就劣于ArrayList，且越靠近后面越差。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt;和&lt;code&gt;LinkedList&lt;/code&gt;是常用的两种存储结构。&lt;br&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://www.sanstylemc.cn/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java虚拟机的架构</title>
    <link href="http://www.sanstylemc.cn/2018/03/30/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E6%9E%B6%E6%9E%84/"/>
    <id>http://www.sanstylemc.cn/2018/03/30/Java虚拟机的架构/</id>
    <published>2018-03-30T14:26:29.000Z</published>
    <updated>2018-03-30T14:27:00.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunstady/hexo/4fc2d1028c844a7fb3bef9dd217d045e6e158327/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9E%B6%E6%9E%84/1.png" alt="1"><br><a id="more"></a><br><code>类加载子系统</code>: 负责从文件系统或者网络中加载Class信息，加载的类信息存放于一块称为方法区的内存空间。除了类信息外，方法区中可能还会存放运行时常量池信息，包括字符串字面量和数字量(这部分常量信息是Class文件中常量池部分的内存映射)。当JVM使用类加载器装载某个类时，它首先要定位对应的Class文件，然后读入这个Class文件，最后，JVM提取该文件的内容信息，并将这些信息存储到方法区，最后返回一个Class实例。<br><code>方法区</code>： 方法区主要存储的是方法，静态成员，常量。方法区中给每个类都规定了空间并且持有this和super的引用。当运行到哪个对象的时候，通过this动态指向该对象，引用该对象的成员变量，然后和方法以及局部变量一起在栈中进行运算。方法区的大小不必是固定的，默认最小值为16MB，最大为64MB，JVM可根据应用需要动态调整。同时，方法区也不一定是连续的，方法区可以在一个堆(甚至是JVM自己的堆)中自由分配。<br><code>Java堆</code>: Java堆是在JVM启动的时候就建立的，是java程序最主要的内存工作区域。堆空间是所有线程共享的。这块内存区域存放了对象实例及数组(所有new的对象)也就是<code>Object object= new Object();</code>这里object只是一个引用是放在栈里面的，new Object()被放在了堆内存里面。由于现在收集器都是采用分代收集算法，堆被划为新生代和老年代。新生代主要存储所创建的对象和尚未进入老年代的对象，老年代存储经过多次新生代GC(Minor GC)仍然存活的对象。<br><code>直接内存</code>: Java的NIO库允许Java程序使用直接内存。直接内存是在Java堆外的、直接向系统申请的内存空间。通常，访问直接内存的速度会优于Java堆。因此出于性能考虑，读写频繁的场合应考虑使用直接内存。因为直接内存不在java堆内，因此直接内存的大小不会直接受限于jvm参数-Xmx，而它和java堆的总和，受制于操作系统的内存大小。<br><code>垃圾回收系统</code>: 这是JVM的重要组成部分，垃圾回收器可以直接对方法区、Java堆和直接内存进行回收。在其中Java堆则是垃圾回收器的重点工作区域，对于不在使用的垃圾对象，垃圾回收系统会在后台查找标识，并且释放这些不用的垃圾对象。<br><code>Java栈</code>: 每一个线程中都有私有的Java栈，一个线程的Java栈在线程被创建的时候就会被创建。Java栈由许多栈帧组成，一个栈帧包含一个Java方法调用的状态。当线程调用要给Java方法时，虚拟机压入一个新的栈帧到该线程的Java栈中，当该方法返回时，这个栈帧就从Java栈中弹出。Java栈中存储线程中Java方法调用的状态包括：局部变量、方法参数、返回值以及运算的中间结果等，并且对象的引用也存在栈中。Java虚拟机没有寄存器，其指令集使用Java栈来存储中间数据。这样设计的原因是为了保持Java虚拟机的指令集尽量紧凑，同时也便于Java虚拟机在只有很少通用寄存器的平台上实现。另外，基于栈的体系结构，也有助于运行时某些虚拟机实现的动态编译器和即时编译器的代码优化。<br><code>本地方法栈</code>: 任何本地方法接口都会使用某种本地方法栈。当线程调用Java方法时，虚拟机会创建一个新的栈帧并压入Java栈。当它调用的是本地方法时，虚拟机会保持Java栈不变，不再在线程的Java栈中压入新的栈，虚拟机只是简单地动态连接并直接调用指定的本地方法。其中方法区和堆由该虚拟机实例中所有线程共享。当虚拟机装载一个class文件时，它会从这个class文件包含的二进制数据中解析类型信息，然后把这些类型信息放到方法区。当程序运行时，虚拟机会把所有该程序在运行时创建的对象放到堆中。像其它运行时内存区一样，本地方法栈占用的内存区可以根据需要动态扩展或收缩。<br><code>PC寄存器</code>: PC寄存器也是每个线程私有的空间，Java虚拟机会为每个Java线程创建PC寄存器。在任意时刻，一个Java线程总是在执行一个方法，这个正在被执行的方法称为当前方法。如果当前方法不是本地方法，PC寄存器就会指向当前正在被执行的指令，若是本地方法，则PC的值就是undefined。<br><code>执行引擎</code>: 最核心的组件之一，负责执行虚拟机的字节码。现代虚拟机为了提高执行效率，会使用即时编译技术将方法编译成机器码后再执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunstady/hexo/4fc2d1028c844a7fb3bef9dd217d045e6e158327/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9E%B6%E6%9E%84/1.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://www.sanstylemc.cn/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>重置MySQL密码</title>
    <link href="http://www.sanstylemc.cn/2018/03/29/%E9%87%8D%E7%BD%AEMySQL%E5%AF%86%E7%A0%81/"/>
    <id>http://www.sanstylemc.cn/2018/03/29/重置MySQL密码/</id>
    <published>2018-03-29T06:10:53.000Z</published>
    <updated>2018-03-29T06:11:23.662Z</updated>
    
    <content type="html"><![CDATA[<p><code>ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</code><br>一般这个错误是由密码错误引起的，解决的方法自然是重置密码。<br><a id="more"></a><br>假设我们使用的是root账户。<br>1、重置密码的第一步是跳过MySql的密码认证过程。</p>
<blockquote>
<p>vim /etc/my.cnf(注: windows下修改的是my.ini)</p>
</blockquote>
<p>在文档内搜索<code>mysqld</code>定位到<code>[mysqld]</code>字段:<br><code>/mysqld</code>(在vim编辑状态下直接输入该命令可搜索文本内容)<br>在<code>[mysqld]</code>后面任意一行添加<code>skip-grant-tables</code>用来跳过密码验证的过程。<br>保存文档并退出。<br>2、接下来重启MySql:<br><code>/etc/init.d/mysql restart</code>(有些用户可能需要使用/etc/init.d/mysqld restart)<br>3、重启之后输入<code>mysql</code>就可进入mysql。<br>4、接下来就是用sql来修改root的密码。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">use mysql;</div><div class="line">update<span class="built_in"> user </span><span class="builtin-name">set</span> <span class="attribute">password</span>=password("你的新密码") where <span class="attribute">user</span>=<span class="string">"root"</span>;</div><div class="line">flush privileges;</div><div class="line">quit</div></pre></td></tr></table></figure></p>
<p>到这里root账户就已经重置成新的密码了。<br>5、便器my.cnf去掉刚才添加的内容，然后重启MySql。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;ERROR 1045 (28000): Access denied for user &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; (using password: YES)&lt;/code&gt;&lt;br&gt;一般这个错误是由密码错误引起的，解决的方法自然是重置密码。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>cookie和session的区别</title>
    <link href="http://www.sanstylemc.cn/2018/03/28/cookie%E5%92%8Csession%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.sanstylemc.cn/2018/03/28/cookie和session的区别/</id>
    <published>2018-03-28T09:45:41.000Z</published>
    <updated>2018-03-29T06:38:46.791Z</updated>
    
    <content type="html"><![CDATA[<p>对于许多人来说，都知道的是，cookie是存储在客户端的，可以用来放需要长期使用的内容，例如用户密码、用户账户等等，服务器是可以获取到cookie的内容的；而session则是存储在服务器端，通过唯一的session_id来区别用户，用于保存用户的登录状态和请求等，客户是不能获取到其内容的。这对于许多人来说都是比较基础的内容，也是表现形式上的区别，在这里我们深入的了解一下两者。<br><a id="more"></a></p>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">cookie是存在于客户端的由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。</span></div><div class="line"><span class="attribute">cookie的内容主要包括</span>: 名字、值、过期时间、路径和域。其中路径与域一起构成cookie的作用范围，若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。</div><div class="line"><span class="attribute">cookie是服务器端给客户端分发的一种凭证，客户端要请求服务，就需要在发送数据的同时发送cookie，服务器端通过识别cookie的内容，得知用户身份。</span></div></pre></td></tr></table></figure>
<p>要查看cookie可以在控制台输入<code>javascript: alert(document.cookie);</code>就可以看到网站分发的cookie了。</p>
<blockquote>
<p>实际上的cookie有两种，分别是停留在浏览器所占内容的<br>临时性的cookie，在页面窗口关闭之后就被删除，被称为session cookie；而另外一种是通过存放在硬盘空间中长期 存在的cookie，这种cookie被称为persistent cookie，也就是我们通常意义上所讲的cookie。</p>
</blockquote>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">session的出现</span>: 对于cookie是存储在客户端的，这种存储在客户端的信息往往是不安全的，所以后来又有了session，客户端浏览器向服务器发送请求的时候，服务器将客户端的信息以某种形式存储在服务器上，这种存储在服务器端的信息在客户端第二次访问服务器的时候被使用，用来确定用户的状态等信息。</div><div class="line"><span class="attribute">session的使用</span>: 服务器会在客户端第一次请求服务的时候创建session对象，与cookie类似，session对象也是以键值对的形式存储的。每个session 对象都有独立的session_id，对于特定的客户，就赋予特定的session，可以区分不同的用户。需要注意的是，通常是在用户请求具体服务的时候才会创建session，单纯的访问静态的内容（如HTML）并不会创建session。而在创建之后的每一次客户访问服务器都会更新session的内容，比如session的最后访问时间等等。还有一点是session的内容应该尽量的精简，因为session是存储在服务器端的，需要占用到宝贵的服务器资源（一般放在服务器内存里），所以这里在有大量客户访问的时候，会导致服务器的资源不够用。此外还会给session设置有效期，对于长时间没有活跃的session会从内存中删除，这也是我们用一些Web应用时会有说“登录超时”的情况出现。</div><div class="line"><span class="attribute">session的依赖实现</span>: 对于上面所说的session，它对于用户来说是透明的，在客户请求服务的时候，客户端需要有一个标示自己身份的凭证，但是仅仅是标示自己的身份，所以这个标示会比较小。通过这个身份，服务器才能从内存中的多个session中知道用户是对应于哪一个session。一般来说session是要依赖于cookie来实现，这一点在上面讲到cookie的分类时说到，这时候生成的cookie就是上文提到的session cookie，而cookie的内容就是session的特定的id，这个cookie在浏览器关闭的时候就会失效。因此同一个机器上的两个浏览器窗口访问服务器的时候会生成两个不同的session。但是如果两个窗口是由同一个父窗口打开的话，子窗口会共享父窗口的cookie，所以这时候是共享一个session。</div></pre></td></tr></table></figure>
<p><code>如果禁用了cookie，那要怎么实现session</code></p>
<blockquote>
<p>在浏览器禁用cookie或者不支持cookie的时候，通常会采取一种叫做”URL重写”的方式来实现session，也就是以类似于GET方式，将session_id写在URL的后面，这样服务器也能获取到客户的session_id，通过这个独立的id就能识别特定的用户了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于许多人来说，都知道的是，cookie是存储在客户端的，可以用来放需要长期使用的内容，例如用户密码、用户账户等等，服务器是可以获取到cookie的内容的；而session则是存储在服务器端，通过唯一的session_id来区别用户，用于保存用户的登录状态和请求等，客户是不能获取到其内容的。这对于许多人来说都是比较基础的内容，也是表现形式上的区别，在这里我们深入的了解一下两者。&lt;br&gt;
    
    </summary>
    
    
      <category term="Skill" scheme="http://www.sanstylemc.cn/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>Spring解析</title>
    <link href="http://www.sanstylemc.cn/2018/03/28/Spring%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.sanstylemc.cn/2018/03/28/Spring解析/</id>
    <published>2018-03-28T05:01:31.000Z</published>
    <updated>2018-03-28T05:27:40.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h2><p>1、Spring是一个开源框架，Spring为简化企业级应用开发而生，使用Spring可以使简单的JavaBean实现以前只有EJB才能实现的功能。Spring是一个IOC和AOP容器框架。<br>在Java开发领域，SPring相对于EJB来说是一种 轻量级的、非侵入性的Java开发框架。<br><a id="more"></a><br>Spring主要核心是:<br>1) 控制反转(IOC):</p>
<blockquote>
<p>概念: 控制权由对象本身转向容器；由容器根据配置文件去创建实例并创建各个实例之间的依赖关系<br>核心: bean工厂；在Spring中，bean工厂创建的各个实例称作bean  </p>
</blockquote>
<p>以前传统的Java开发模式中，当需要一个对象时，我们会自己使用new或getInstance等直接或间接调用构造方法创造一个对象，而在Spring开发模式中，Spring容器使用了工厂模式为我们创建了所需要的对象，我们使用时不需要自己去创建，直接调用Spring为我们提供的对象即可，这就是控制反转思想。实例化一个Java对象由三种方式: 使用类构造器，使用静态工厂方法，使用实例工厂方法。当使用Spring时我们就不需要关心通过何种方式实例化一个对象，Spring通过控制反转机制自动为我们实例化一个对象。<br>2) 依赖注入(DI): Spring使用JavaBean对象的Set方法或者带参数的构造方法为我们在创建所需对象时将其属性自动设置所需要的值的过程就是依赖注入的基本思想。<br>3) 面向切面编程(AOP): 在面向对象编程 (OOP)思想中，我们将事物纵向抽象成一个个的对象。而在面向切面编程中，我们将一个个对象某些类似的方面横向抽象成一个切面，对这个切面进行一些如权限验证，事物管理，记录日志等公用操作初级的过程就是面向切面编程的思想。<br>2、在Spring中，所有管理的对象都是JavaBean对象，而BeanFactory和ApplicationContext就是Spring框架的两个IOC容器，现在一般使用ApplicationContext，其不但包含了BeanFactory的作用，同时还进行更多的扩展。</p>
<h2 id="Spring原理"><a href="#Spring原理" class="headerlink" title="Spring原理"></a>Spring原理</h2><p>1) 内部最核心的就是IOC了，动态注入，让一个对象的创建不用new了，可以自动的生产，这其实就是利用java里的反射，反射其实就是在运行时动态的去创建、调用对象，Spring就是在运行时，跟xml Spring的配置文件来动态的创建对象，和调用对象里的方法的 。<br>2) Spring还有一个核心就是AOP这个就是面向切面编程，可以为某一类对象 进行监督和控制（也就是 在调用这类对象的具体方法的前后去调用你指定的 模块）从而达到对一个模块扩充的功能。这些都是通过  配置类达到的。<br>3) Spring目的：就是让对象与对象（模块与模块）之间的关系没有通过代码来关联，都是通过配置类说明管理的（Spring根据这些配置 内部通过反射去动态的组装对象）  要记住：Spring是一个容器，凡是在容器里的对象才会有Spring所提供的这些服务和功能。</p>
<h2 id="代理的两种方式"><a href="#代理的两种方式" class="headerlink" title="代理的两种方式"></a>代理的两种方式</h2><p><code>静态代理</code></p>
<ul>
<li>针对每个具体类分别编写代理类</li>
<li>针对一个接口编写一个代理类</li>
</ul>
<p><code>动态代理</code></p>
<ul>
<li>针对一个方面编写一个InvocationHandler，然后借用JDK反射包中的Proxy类为各种接口动态生成相应的代理类。<br>不用写代理类，虚拟机根据真实对象实现的接口产生一个类，通过类实例化一个动态代理，在实例化动态代理时将真实对象及装备注入到动态代理中，向客户端公开的是动态代理，当客户端调用动态代理方法时，动态代理根据类的反射得到真实对象的Method,调用装备的invoke方法，将动态代理、 Method、方法参数传与装备的invoke方法，invoke方法在唤起method方法前或后做一些处理。     <blockquote>
<p>产生动态代理的类: java.lang.refect.Proxy<br>装备必须实现InvocationHandler接口实现invoke方法。</p>
</blockquote>
</li>
</ul>
<h2 id="Spring的三种注入方式是什么"><a href="#Spring的三种注入方式是什么" class="headerlink" title="Spring的三种注入方式是什么"></a>Spring的三种注入方式是什么</h2><blockquote>
<p>setter<br>interface<br>constructor</p>
</blockquote>
<h2 id="Spring的核心接口及核类配置文件是什么"><a href="#Spring的核心接口及核类配置文件是什么" class="headerlink" title="Spring的核心接口及核类配置文件是什么"></a>Spring的核心接口及核类配置文件是什么</h2><blockquote>
<p>FactoryBean: 工厂 Bean主要实现ioc/di<br>ApplicationContext ac= new FileXmlApplicationContext(“applicationContext.xml”);<br>Object obj= ac.getBean(“id值”);</p>
</blockquote>
<h2 id="Spring框架的7个模块"><a href="#Spring框架的7个模块" class="headerlink" title="Spring框架的7个模块"></a>Spring框架的7个模块</h2><p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式，组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</p>
<blockquote>
<p><code>核心容器</code>：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转 （IOC）模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。<br><code>Spring 上下文</code>：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。<br><code>Spring AOP</code>：通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。<br><code>Spring DAO</code>：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。<br><code>Spring ORM</code>：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。<br><code>Spring Web 模块</code>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。<br><code>Spring MVC 框架</code>：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。<br>Spring 框架的功能可以用在任何 J2EE 服务器中，大多数功能也适用于不受管理的环境。Spring 的核心要点是：支持不绑定到特定 J2EE 服务的可重用业务和数据访问对象。毫无疑问，这样的对象可以在不同 J2EE 环境 （Web 或 EJB）、独立应用程序、测试环境之间重用。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Spring&quot;&gt;&lt;a href=&quot;#什么是Spring&quot; class=&quot;headerlink&quot; title=&quot;什么是Spring&quot;&gt;&lt;/a&gt;什么是Spring&lt;/h2&gt;&lt;p&gt;1、Spring是一个开源框架，Spring为简化企业级应用开发而生，使用Spring可以使简单的JavaBean实现以前只有EJB才能实现的功能。Spring是一个IOC和AOP容器框架。&lt;br&gt;在Java开发领域，SPring相对于EJB来说是一种 轻量级的、非侵入性的Java开发框架。&lt;br&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://www.sanstylemc.cn/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>String中加号和字符串拼接</title>
    <link href="http://www.sanstylemc.cn/2018/03/28/String%E4%B8%AD%E5%8A%A0%E5%8F%B7%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5/"/>
    <id>http://www.sanstylemc.cn/2018/03/28/String中加号和字符串拼接/</id>
    <published>2018-03-28T03:51:08.000Z</published>
    <updated>2018-03-28T03:51:53.798Z</updated>
    
    <content type="html"><![CDATA[<p>字符串常量是编译时确定的，编译完成，生成class文件，那就不会再变了。在编译的时候，编译器会将字符串常量直接放在一起，然后查找常量池里面，有没有对应的字符串。<br><a id="more"></a><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">String </span><span class="keyword">str1= </span>new <span class="keyword">String("abc");</span></div><div class="line"><span class="keyword">String </span><span class="keyword">str2= </span><span class="string">"abc"</span><span class="comment">;</span></div><div class="line"><span class="keyword">String </span><span class="keyword">str3= </span><span class="string">"a"</span>+ <span class="string">"b"</span>+ <span class="string">"c"</span><span class="comment">;</span></div><div class="line"><span class="symbol">System.out.println</span>(<span class="keyword">str1== </span><span class="keyword">str2); </span>  //输出false</div><div class="line"><span class="symbol">System.out.println</span>(<span class="keyword">str1.intern()== </span><span class="keyword">str2); </span> //输出true</div><div class="line">//intern()方法返回字符串对象的规范化表示形式。</div><div class="line"><span class="symbol">System.out.println</span>(<span class="keyword">str2== </span><span class="keyword">str3); </span>  //输出true</div><div class="line"><span class="keyword">String </span><span class="keyword">str4= </span><span class="string">"ab"</span><span class="comment">;</span></div><div class="line"><span class="keyword">String </span><span class="keyword">str5= </span><span class="keyword">str4+ </span><span class="string">"c"</span><span class="comment">;</span></div><div class="line"><span class="symbol">System.out.println</span>(<span class="keyword">str2== </span><span class="keyword">str5); </span>  //输出false</div></pre></td></tr></table></figure></p>
<ul>
<li>第一个<code>str1== str2</code>对比的是引用的地址是否相同，由于str1采用的是<code>new String</code>方式定义的，所以地址引用一定不相等。</li>
<li>第二个<code>str1.intern()== str2</code>，当str1调用intern的时候，会检查字符串池中是否含有 该字符串。由于定义的str2已经进入字符串池中，所以会得到相同的引用。</li>
<li>定义str3，在编译的时候，编译器会将字符串常量直接放在一起，然后查找常量池里面，有没有对应的字符串，所以str2和str3是相等的，也就是指向相同的内存区域。</li>
<li>看一下下面的代码<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">String</span> a = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"ab"</span>);</div><div class="line"><span class="keyword">String</span> b = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"ab"</span>);</div><div class="line"><span class="keyword">String</span> c = <span class="string">"ab"</span>;</div><div class="line"><span class="keyword">String</span> d = <span class="string">"a"</span> + <span class="string">"b"</span>;</div><div class="line"><span class="keyword">String</span> e = <span class="string">"b"</span>;</div><div class="line"><span class="keyword">String</span> f = <span class="string">"a"</span> + e;</div><div class="line"></div><div class="line">System.out.<span class="built_in">println</span>(b.intern() == a);   <span class="comment">//输出false</span></div><div class="line">System.out.<span class="built_in">println</span>(b.intern() == c);   <span class="comment">//输出true</span></div><div class="line">System.out.<span class="built_in">println</span>(b.intern() == d);   <span class="comment">//输出true</span></div><div class="line">System.out.<span class="built_in">println</span>(b.intern() == f);   <span class="comment">//输出false</span></div><div class="line">System.out.<span class="built_in">println</span>(b.intern() == a.intern());   <span class="comment">//输出true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>由运行结果可以看出来，b.intern() == a和b.intern() == c可知，采用new 创建的字符串对象不进入字符串池，并且通过b.intern() == d和b.intern() == f可知，字符串相加的时候，都是静态字符串的结果会添加到字符串池，如果其中含有变量（如f中的e）则不会进入字符串池中。但是字符串一旦进入字符串池中，就会先查找池中有无此对象。如果有此对象，则让对象引用指向此对象。如果无此对象，则先创建此对象，再让对象引用指向此对象。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字符串常量是编译时确定的，编译完成，生成class文件，那就不会再变了。在编译的时候，编译器会将字符串常量直接放在一起，然后查找常量池里面，有没有对应的字符串。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>py常识</title>
    <link href="http://www.sanstylemc.cn/2018/03/28/py%E5%B8%B8%E8%AF%86/"/>
    <id>http://www.sanstylemc.cn/2018/03/28/py常识/</id>
    <published>2018-03-28T02:22:05.000Z</published>
    <updated>2018-03-28T02:47:08.066Z</updated>
    
    <content type="html"><![CDATA[<p>一些基础的python知识。<br><a id="more"></a></p>
<h2 id="python特性"><a href="#python特性" class="headerlink" title="python特性"></a>python特性</h2><blockquote>
<p>1) python是一种解释型语言，这意味着，与C、C++不同，python不需要在运行之前进行编译，它是边运行边解释。<br>2) python是动态类型化的，这意味着当你声明它们或类似的东西时，你不需要声明变量的类型。你可以x= 1，然后x= “abc”没有错误。<br>3) python非常适合面向对象编程，因为它允许定义类以及组合和继承。python没有访问修饰符(例C++大的public，private)。<br>4) 在python中函数是一等对象，这意味着它们可以在运行时动态创建，能赋值给变量或者作为参数传给函数，还能作为函数的返回值。<br>5) python代码容易上手，开发速度很快，但运行速度通常比编译语言慢。幸运的是，python允许包含基于C的扩展，所以瓶颈可以被优化掉。比如，numpy包就是一个很好的例子，它非常快，因为它所做的很多运算在底部都是用C编写的。</p>
</blockquote>
<h2 id="python中的赋值、浅拷贝和深拷贝的区别"><a href="#python中的赋值、浅拷贝和深拷贝的区别" class="headerlink" title="python中的赋值、浅拷贝和深拷贝的区别"></a>python中的赋值、浅拷贝和深拷贝的区别</h2><blockquote>
<p>1) <code>对象的赋值</code><br>python中对象的赋值实际上是简单的对象引用，也就是说，当你创建一个对象，然后把它复制给另一个变量的时候，python并没有拷贝这个对象，而是拷贝了这个对象的引用。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/1754108a3c1c7b65cc088a2fe1317e53c0a5cf2d/py%E5%B8%B8%E8%AF%86/1.png" alt="1"></p>
</blockquote>
<p>2) <code>浅拷贝</code></p>
<blockquote>
<p><code>对于可变对象深浅拷贝</code> </p>
</blockquote>
<table>
<thead>
<tr>
<th>Name</th>
<th style="text-align:center">值</th>
<th style="text-align:right">地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>=浅拷贝</td>
<td style="text-align:center">值相等</td>
<td style="text-align:right">地址相等</td>
</tr>
<tr>
<td>copy浅拷贝</td>
<td style="text-align:center">值相等</td>
<td style="text-align:right">地址不相等</td>
</tr>
<tr>
<td>deepcopy深拷贝</td>
<td style="text-align:center">值相等</td>
<td style="text-align:right">地址不相等</td>
</tr>
</tbody>
</table>
<blockquote>
<p>一般引用copy.copy()，可以进行对象的浅拷贝。它复制了对象但对于对象中的元素，依然使用原始的引用。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/9582c97b0cc4db60b3b844bdab6a26185f4683f0/py%E5%B8%B8%E8%AF%86/2.png" alt="2"><br>使用copy对a进行浅拷贝，b复制了a的对象，但是b里面的[2, 3, 4]和a里面的[2, 3, 4]其实都是指向同一块内存地址，所以改变了a[1]之后，b里面的b[1]也发生了改变。</p>
<p><code>对于不可变对象的深浅拷贝</code><br>不可变对象类型，没有被拷贝的说法，即便是用深拷贝，查看id的话也是一样的，如果对其重新赋值，也只是新创建一个对象，替换掉旧的而已。一句话就是，不可变类型，不管是深拷贝还是浅拷贝，地址值和拷贝后的值都是一样的。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/a99c74107615d9f8b75c552b526d81e9867f3cff/py%E5%B8%B8%E8%AF%86/2_1.png" alt="2.1"><br>3) <code>深拷贝</code><br>深拷贝需要用copy.deepcopy()进行拷贝。它是复制一个容器对象，以及它里面的所有元素(包含元素的子元素)<br><img src="https://raw.githubusercontent.com/sunstady/hexo/1754108a3c1c7b65cc088a2fe1317e53c0a5cf2d/py%E5%B8%B8%E8%AF%86/3.png" alt="3"><br>当对a列表进行深度拷贝之后，b复制了a的对象，但是b里面的[2, 3, 4]和a里面的[2, 3, 4]其实都是指向不同的内存地址。</p>
</blockquote>
<h2 id="python中的-和is的区别"><a href="#python中的-和is的区别" class="headerlink" title="python中的==和is的区别"></a>python中的<code>==</code>和<code>is</code>的区别</h2><blockquote>
<p><code>is</code>也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是id是否相同。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/1754108a3c1c7b65cc088a2fe1317e53c0a5cf2d/py%E5%B8%B8%E8%AF%86/4.png" alt="4"><br>而<code>==</code>是python标准操作符中的比较操作符，用来比较判断两个对象的value(值)是否相等。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/1754108a3c1c7b65cc088a2fe1317e53c0a5cf2d/py%E5%B8%B8%E8%AF%86/5.png" alt="5"></p>
</blockquote>
<h2 id="线程如何在python中实现"><a href="#线程如何在python中实现" class="headerlink" title="线程如何在python中实现"></a>线程如何在python中实现</h2><blockquote>
<p>python有一个多线程包threading，可以使用多线程来加快你的代码。但是python有一个叫做Global Interpreter Lock(GIL)的构造。GIL确保只有一个”线程”可以在任何时候执行。<br>线程获取GIL，做一些工作，然后将GIL传递到下一个线程。这种情况发生得非常快，所以对于人眼而言，它可能看起来像你的线程并行执行，但它们实际上只是轮流使用相同的CPU内核。因此GIL的存在是得python中的多线程无法真正的利用多核的优势来提高性能。<br>对于IO密集型操作，在等待操作系统返回的时候会释放GIL；再比如爬虫因为有等待的服务器的响应时间，可以利用多线程来加速。但是对于CPU密集型操作，只能通过多进程Multiprocess来加速。</p>
</blockquote>
<h2 id="python中的猴子补丁式是什么"><a href="#python中的猴子补丁式是什么" class="headerlink" title="python中的猴子补丁式是什么"></a>python中的猴子补丁式是什么</h2><blockquote>
<p>考虑下面的例子:<br><img src="https://raw.githubusercontent.com/sunstady/hexo/1754108a3c1c7b65cc088a2fe1317e53c0a5cf2d/py%E5%B8%B8%E8%AF%86/6.png" alt="6"><br>猴子补丁:<br>是一种非常pythonic的用法，即函数再python中可以像使用变量一样对它进行赋值等操作，我们可以再运行时动态替换模块，俗称手法，称为猴子补丁。我们通过对MyClass.f重新赋值，动态的改变了输出的结果。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/1754108a3c1c7b65cc088a2fe1317e53c0a5cf2d/py%E5%B8%B8%E8%AF%86/7.png" alt="7"></p>
</blockquote>
<h2 id="python中的负数index"><a href="#python中的负数index" class="headerlink" title="python中的负数index"></a>python中的负数index</h2><blockquote>
<p>python中的负数index是用来做什么的？<br>python中的序列是索引的，它由正数和负数组成。正的数字使用’0’作为第一个索引，’1’作为第二个索引。<br>负数的索引从’-1’开始，表示序列中的最后一个索引，’-2’作为倒数第二个索引，序列像整数一样向前。<br>负数索引也可以用来非常方便的切片，比如:<br><img src="https://raw.githubusercontent.com/sunstady/hexo/1754108a3c1c7b65cc088a2fe1317e53c0a5cf2d/py%E5%B8%B8%E8%AF%86/8.png" alt="8"></p>
</blockquote>
<h2 id="类里面的new和init的区别"><a href="#类里面的new和init的区别" class="headerlink" title="类里面的new和init的区别"></a>类里面的new和init的区别</h2><blockquote>
<p>1) <code>__init__</code>为初始化方法，而<code>__new__</code>方法才是真正的构造函数。只有继承了object的新式类才有<code>__new__</code>。<br>2) <code>——new__</code>至少要有一个参数cls，代表要实例化的类，此参数在实例化时由python解释器自动提供，<code>__new__</code>必须要有返回值，返回实例化出来的实例。<br>3) <code>__init__</code>有一个参数self，就是这个<code>__new__</code>返回的实例，先运行<code>__new__</code>然后才运行<code>__init__</code>。<br>4) <code>__init__</code>在<code>__new__</code>的基础上可以完成一些其它初始的动作，<code>__init__</code>不需要返回值。</p>
</blockquote>
<h2 id="python中的参数-args和-kwargs"><a href="#python中的参数-args和-kwargs" class="headerlink" title="python中的参数*args和**kwargs"></a>python中的参数<code>*args</code>和<code>**kwargs</code></h2><blockquote>
<p><code>*args</code>是可变参数，一般用来表示我们不能确定多少参数将被传递给函数，或者如果我们想用列表或元组的方式传递给函数。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/1754108a3c1c7b65cc088a2fe1317e53c0a5cf2d/py%E5%B8%B8%E8%AF%86/9.png" alt="9"><br><code>**kwargs</code>是可变关键字参数，当我们不知道有多少关键字参数会传递给一个函数时，或者想把一个字典作为关键字参数时使用。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/1754108a3c1c7b65cc088a2fe1317e53c0a5cf2d/py%E5%B8%B8%E8%AF%86/10.png" alt="10"><br>注: <code>*args</code>和<code>**kwargs</code>可以同时在函数的定义中，但是<code>*args</code>必须在<code>**kwargs</code>前面。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些基础的python知识。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>禁止U盘拷贝</title>
    <link href="http://www.sanstylemc.cn/2018/03/27/%E7%A6%81%E6%AD%A2U%E7%9B%98%E6%8B%B7%E8%B4%9D/"/>
    <id>http://www.sanstylemc.cn/2018/03/27/禁止U盘拷贝/</id>
    <published>2018-03-27T06:52:12.000Z</published>
    <updated>2018-03-27T06:52:40.341Z</updated>
    
    <content type="html"><![CDATA[<p>经常会有人在我们电脑上拷贝一些东西，那我们不想让别人拷贝怎么办呢？<br><a id="more"></a><br>1、键入<code>win + r</code>键，打开运行，输入<code>gpedit.msc</code>，打开本地组策略编辑器。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7677a713dc129c7bdfbd31a9cc145c61cd4f165b/%E7%A6%81%E6%AD%A2U%E7%9B%98%E6%8B%B7%E8%B4%9D/1.png" alt="1"><br>2、点击<code>计算机配置</code>–&gt;<code>管理模板</code>–&gt;<code>系统</code>，找到右侧<code>可移动存储访问</code>。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7677a713dc129c7bdfbd31a9cc145c61cd4f165b/%E7%A6%81%E6%AD%A2U%E7%9B%98%E6%8B%B7%E8%B4%9D/2.png" alt="2"><br>3、双击后可看到右侧有五个可移动磁盘项目，我们不想让别人从我们电脑拷贝的话，双击<code>拒绝写入权限</code>。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7677a713dc129c7bdfbd31a9cc145c61cd4f165b/%E7%A6%81%E6%AD%A2U%E7%9B%98%E6%8B%B7%E8%B4%9D/3.png" alt="3"><br>4、选中<code>已启用</code>，点击<code>确定</code>。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7677a713dc129c7bdfbd31a9cc145c61cd4f165b/%E7%A6%81%E6%AD%A2U%E7%9B%98%E6%8B%B7%E8%B4%9D/4.png" alt="4"><br>5、打开U盘，将文件放入U盘，可以看到提示需要管理员权限。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7677a713dc129c7bdfbd31a9cc145c61cd4f165b/%E7%A6%81%E6%AD%A2U%E7%9B%98%E6%8B%B7%E8%B4%9D/5.png" alt="5"><br>6、我们点击继续，发现没有办法将文件放入U盘。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/7677a713dc129c7bdfbd31a9cc145c61cd4f165b/%E7%A6%81%E6%AD%A2U%E7%9B%98%E6%8B%B7%E8%B4%9D/6.png" alt="6"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常会有人在我们电脑上拷贝一些东西，那我们不想让别人拷贝怎么办呢？&lt;br&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://www.sanstylemc.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>py使用itchat发送微信消息</title>
    <link href="http://www.sanstylemc.cn/2018/03/25/py%E4%BD%BF%E7%94%A8itchat%E5%8F%91%E9%80%81%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF/"/>
    <id>http://www.sanstylemc.cn/2018/03/25/py使用itchat发送微信消息/</id>
    <published>2018-03-25T08:05:25.000Z</published>
    <updated>2018-03-25T08:26:02.251Z</updated>
    
    <content type="html"><![CDATA[<p>环境：Windows、python3.6、itchat库<br>代码参考于<a href="http://www.cnblogs.com/chenbei-blog/p/7799352.html" target="_blank" rel="external">奇幻果园</a>。<br>itchat使用需要事先下载安装，命令如下: <code>pip install itchat</code><br>这个代码的作用就是在指定时间给微信好友发送信息，并且可以间隔特定时间再次发送，类似于短信轰炸？学习！嗯，用来学习。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> itchat</div><div class="line"><span class="keyword">import</span> datetime, os, platform,time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timerfun</span><span class="params">(sched_time)</span> :</span></div><div class="line">    flag = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        now = datetime.datetime.now()</div><div class="line">        <span class="keyword">if</span> now &gt; sched_time <span class="keyword">and</span> now &lt; sched_time + datetime.timedelta(seconds=<span class="number">1</span>) :   <span class="comment">#因为时间秒之后的小数数据部分不一定相等，要标记一个范围判断</span></div><div class="line">            send_move()</div><div class="line">            time.sleep(<span class="number">2</span>)   <span class="comment">#每次判断间隔2s, 避免多次触发事件</span></div><div class="line">            flag = <span class="number">1</span></div><div class="line">        <span class="keyword">else</span> :</div><div class="line">            <span class="keyword">if</span> flag == <span class="number">1</span> :</div><div class="line">                sched_time = sched_time + datetime.timedelta(hours=<span class="number">24</span>)   <span class="comment">#把目标时间增加一个小时，24小时后触发再次执行</span></div><div class="line">                flag = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_move</span><span class="params">()</span>:</span></div><div class="line">    users= itchat.search_friends(name= <span class="string">'Love'</span>)   <span class="comment">#使用备注名来查找实际用户名</span></div><div class="line">    print(users)   <span class="comment">#获取好友全部信息，返回一个列表，列表内是一个字典</span></div><div class="line">    userName= users[<span class="number">0</span>][<span class="string">'UserName'</span>]   <span class="comment">#获取UserName，用来发送消息</span></div><div class="line">    itchat.send(<span class="string">"It's time to take a rest. 宝贝, 该睡觉啦!"</span>, toUserName= userName)</div><div class="line">    print(<span class="string">'succeed'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    itchat.auto_login(hotReload=<span class="keyword">True</span>)   <span class="comment">#首次扫描登录后后续自动登录</span></div><div class="line">    sched_time = datetime.datetime(<span class="number">2018</span>,<span class="number">3</span>,<span class="number">25</span>,<span class="number">23</span>,<span class="number">40</span>,<span class="number">00</span>)   <span class="comment">#设定初次触发时间的事件点</span></div><div class="line">    print(<span class="string">'run the timer task at &#123;0&#125;'</span>.format(sched_time))</div><div class="line">    timerfun(sched_time)</div></pre></td></tr></table></figure></p>
<p>有些地方需要注意下:<br>1、第11行判断时间是否到达指定时间处，因为<code>now = datetime.datetime.now()</code>返回的时间精确到了ms, 所以直接拿精确到s的特定时间去比较会出现False。所以改用判断时间是否在范围内。并且判断完后会用<code>time.sleep(2)</code>延时2s再次比较，避免多次命中或多次判断。<br>2、第17行内，每次时间判断满足指定时间范围时，将指定时间往后延一定时间。这里<code>+ datetime.timedelta(hours=24)</code>表示延后24小时，达到每过24小时触发一次<code>send_move</code>函数的目的。<br>3、第28行内，<code>itchat.auto_login(hotReload=True)</code>如注释说明的一样，避免每次都要扫描二维码登录，在登录一次之后”保持在线状态”<br>4、第27行，<code>if __name__==&#39;__main__&#39;:</code>表示当前模块仅在自己运行时才运行后续的语句，否则当该模块被其他模块引用时，不会运行后续语句。每个模块都有<code>__name__</code>属性，当它等于<code>__main__</code>时，表示该模块被用户单独运行，可以执行特殊的操作。<br>5、第30行，注意一下这里的<code>print</code>函数对<code>sched_time</code>字符串的使用方式。为了按照一般时间格式打印输出，对<code>sched_time</code>进行了<code>format</code>格式化处理，我理解就是保持<code>sched_time</code>原本的时间形式不变，而按照字符串的方法进行处理。这里用{0}来表示格式化后的<code>sched_time</code>，让其能够以原来时间格式与前面待打印的字符串进行字符串拼接。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境：Windows、python3.6、itchat库&lt;br&gt;代码参考于&lt;a href=&quot;http://www.cnblogs.com/chenbei-blog/p/7799352.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;奇幻果园&lt;/a&gt;。&lt;br&gt;itchat使用需要事先下载安装，命令如下: &lt;code&gt;pip install itchat&lt;/code&gt;&lt;br&gt;这个代码的作用就是在指定时间给微信好友发送信息，并且可以间隔特定时间再次发送，类似于短信轰炸？学习！嗯，用来学习。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Windows下py脚本后台运行</title>
    <link href="http://www.sanstylemc.cn/2018/03/25/Windows%E4%B8%8Bpy%E8%84%9A%E6%9C%AC%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/"/>
    <id>http://www.sanstylemc.cn/2018/03/25/Windows下py脚本后台运行/</id>
    <published>2018-03-25T05:53:02.000Z</published>
    <updated>2018-03-25T05:53:36.018Z</updated>
    
    <content type="html"><![CDATA[<p>环境: Windows、python3.6<br>py脚本在Linux的后台运行网上教程很多，而在Windows中的介绍不多。<br>下面说一种可行方法： </p>
<blockquote>
<p>将<code>wx.py</code>文件改为<code>wx.pyw</code>。<br>cmd进入到pythonw目录下, 输入<code>pythonw wx.pyw 1&gt;stdout.txt 2&gt;stderr.txt</code></p>
</blockquote>
<p>由于代码原因，要进行故障排除，即在调用时使用输出重定向。<br>这将print()在文件中捕获stdout输出，例如来自file stdout.txt, stderr输出(例如来自未处理的异常)stderr.txt。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境: Windows、python3.6&lt;br&gt;py脚本在Linux的后台运行网上教程很多，而在Windows中的介绍不多。&lt;br&gt;下面说一种可行方法： &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将&lt;code&gt;wx.py&lt;/code&gt;文件改为&lt;code&gt;wx.pyw&lt;/c
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>py脚本打包成exe</title>
    <link href="http://www.sanstylemc.cn/2018/03/25/py%E8%84%9A%E6%9C%AC%E6%89%93%E5%8C%85%E6%88%90exe/"/>
    <id>http://www.sanstylemc.cn/2018/03/25/py脚本打包成exe/</id>
    <published>2018-03-25T01:05:05.000Z</published>
    <updated>2018-03-25T08:28:31.618Z</updated>
    
    <content type="html"><![CDATA[<p>输入<code>pyinstaller -F wx_dingshi.py</code><br>有可能会出现错误<code>PyInstaller cannot check for assembly dependencies.</code><br><img src="https://raw.githubusercontent.com/sunstady/hexo/b508a4221e2891c9e9c572c58377d82217f7bf7d/py%E6%89%93%E5%8C%85exe/1.png" alt="1"><br>并且提示<code>Please install PyWin32 or pywin32-ctypes.</code><br>问题很明显了，缺少这俩库<br>输入<code>pip install PyWin32</code>和 <code>pip install pywin32-ctypes</code><br>静等安装。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/b508a4221e2891c9e9c572c58377d82217f7bf7d/py%E6%89%93%E5%8C%85exe/2.png" alt="2"><br>安装完后再次输入<code>pyinstaller -F wx_dingshi.py</code><br><img src="https://raw.githubusercontent.com/sunstady/hexo/b508a4221e2891c9e9c572c58377d82217f7bf7d/py%E6%89%93%E5%8C%85exe/3.png" alt="3"><br>打包完成。<br>同目录下的<code>dist</code>文件夹中的<code>wx_dingshi.exe</code>就是目标exe。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;输入&lt;code&gt;pyinstaller -F wx_dingshi.py&lt;/code&gt;&lt;br&gt;有可能会出现错误&lt;code&gt;PyInstaller cannot check for assembly dependencies.&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http
    
    </summary>
    
    
      <category term="python" scheme="http://www.sanstylemc.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>进程同步</title>
    <link href="http://www.sanstylemc.cn/2018/03/20/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>http://www.sanstylemc.cn/2018/03/20/进程同步/</id>
    <published>2018-03-20T11:00:11.000Z</published>
    <updated>2018-03-20T11:00:58.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是进程同步？列举两个生活中的进程同步的实例，详细说明同步的过程。"><a href="#什么是进程同步？列举两个生活中的进程同步的实例，详细说明同步的过程。" class="headerlink" title="什么是进程同步？列举两个生活中的进程同步的实例，详细说明同步的过程。"></a>什么是进程同步？列举两个生活中的进程同步的实例，详细说明同步的过程。</h2><blockquote>
<p>在多道程序环境下，进程是并发进行的，不同进程之间存在着不同的相互制约关系，这就叫进程同步。<br>例一：理发师-顾客问题<br>在一个理发店里有一个理发师，一个理发椅和N个沙发，理发椅是一个临界资源，沙发相当于等待队列。当一个顾客进入理发店占用理发椅时，其他顾客必须在沙发上等待。理发师和顾客必须保持同步，既不允许理发师在没有顾客时理发，也不允许顾客在理发椅被占用时理发。<br>例二：厨师-食堂问题<br>在一个饭店里有一个厨师，一个桌子和N个椅子，桌子是一个临界资源。当一个食客进入饭店占用桌子时，假设桌子已满，其他食客必须等待。厨师和食客必须保持同步，既不允许厨师在没有食客时做饭，也不允许食客在桌子被占满时吃饭。<br><a id="more"></a></p>
<h2 id="什么是记录型信号量机制？举实例说明wait操作（P操作）中当信号量值小于0和不小于0时会发生什么？signal操作（V操作）中当信号量值小于等于0和不小于等于0时会发生什么？"><a href="#什么是记录型信号量机制？举实例说明wait操作（P操作）中当信号量值小于0和不小于0时会发生什么？signal操作（V操作）中当信号量值小于等于0和不小于等于0时会发生什么？" class="headerlink" title="什么是记录型信号量机制？举实例说明wait操作（P操作）中当信号量值小于0和不小于0时会发生什么？signal操作（V操作）中当信号量值小于等于0和不小于等于0时会发生什么？"></a>什么是记录型信号量机制？举实例说明wait操作（P操作）中当信号量值小于0和不小于0时会发生什么？signal操作（V操作）中当信号量值小于等于0和不小于等于0时会发生什么？</h2><p>记录型信号量机制是在整形信号量机制的基础上增加了一个用于代表资源数目的整型变量和一个等待队列（用链表）。<br>实例：理发师-顾客问题<br>在实例中理发椅的数目就相当于资源信号量，当执行P操作时，信号量小于0时，表示资源已经分配完毕，因此进程BLOCK并插入等待队列中；信号量不小于0时（即大于等于0），表示资源还未分配完毕，因此进程继续执行。当执行V操作时，信号量小于0时，表示在等待队列中还有进程在被阻塞，因此应执行唤醒语句；信号量不小于0时（即大于等于0），等于0时，由于0是由-1变来的，所以表示等待队列中还有最后一个进程在被阻塞，因此应执行唤醒语句，大于0时说明等待队列中还没有进程在被阻塞，因此直接释放处理机即可。</p>
<h2 id="解释什么是FIFO？什么是优先级高者优先调度？什么是抢占式调度和非抢占式调度？"><a href="#解释什么是FIFO？什么是优先级高者优先调度？什么是抢占式调度和非抢占式调度？" class="headerlink" title="解释什么是FIFO？什么是优先级高者优先调度？什么是抢占式调度和非抢占式调度？"></a>解释什么是FIFO？什么是优先级高者优先调度？什么是抢占式调度和非抢占式调度？</h2><p>FIFO即FIRSTINPUTFIRSTOUTPUT，就是先进先出的意思，先执行先进入的进程，该进程完成后再执行下一个进程。<br>优先级高者优先调度：说的是在执行若干个进程或作业的时候选取其中优先级最高的那一个先执行。<br>抢占式调度：这种调度方式允许调度程序根据某种原则，去暂停某个正在执行的进程，将以分配给该进程的处理机重新分配给另一个进程。此调度方法遵循一定的原则：1&gt;优先权原则，2&gt;短进程优先原则，3&gt;时间片原则。<br>非抢占式调度：采用这种方式时，一旦处理机分配给某进程后，就让他一直运行下去，决不会因为时钟中断或任何其他原因去抢占当前正在运行程序的处理机，直至该进程完成或发生某事件而被阻塞时，才把处理机分配给别人。</p>
<h2 id="设有两个优先级相同的进程P、Q，进入就绪队列的先后顺序为Q，P，各自运行的程序段如下："><a href="#设有两个优先级相同的进程P、Q，进入就绪队列的先后顺序为Q，P，各自运行的程序段如下：" class="headerlink" title="设有两个优先级相同的进程P、Q，进入就绪队列的先后顺序为Q，P，各自运行的程序段如下："></a>设有两个优先级相同的进程P、Q，进入就绪队列的先后顺序为Q，P，各自运行的程序段如下：</h2><table>
<thead>
<tr>
<th>P</th>
<th style="text-align:center">进程P：</th>
<th style="text-align:right">进程Q：</th>
</tr>
</thead>
<tbody>
<tr>
<td>P1</td>
<td style="text-align:center">Y=1;</td>
<td style="text-align:right">Q1   X=2;</td>
</tr>
<tr>
<td>P2</td>
<td style="text-align:center">Y=Y+A;</td>
<td style="text-align:right">Q2   A=X+1;</td>
</tr>
<tr>
<td>P3</td>
<td style="text-align:center">V(S1);</td>
<td style="text-align:right">Q3   P(S1);</td>
</tr>
<tr>
<td>P4</td>
<td style="text-align:center">A=Y+X;</td>
<td style="text-align:right">Q4   X=A+Y;</td>
</tr>
<tr>
<td>P5</td>
<td style="text-align:center">P(S2);</td>
<td style="text-align:right">Q5  V(S2);</td>
</tr>
<tr>
<td>P6</td>
<td style="text-align:center">A=Y+A;</td>
<td style="text-align:right">Q6  A=X+A;</td>
</tr>
</tbody>
</table>
</blockquote>
<p>说明：其中S1、S2为信号量，初值为0；已知X、Y、A为共享变量，A、X、Y的初值为0，若调度程序执行的策略为FIFO（先进先出）<br>问题：请写出进程P、Q的实际执行序列（用代码Pi，Qi表示，i=1，…,6）及变量X、Y、A的中间值和运行结果？<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A、X、Y共享变量，初值均为<span class="number">0</span>，信号量S1、S2初值均为<span class="number">0</span>，有两个优先级相同的进程P、Q，进入就绪队列的先后顺序为Q、P。根据先进先出的原则先进行Q操作。</div><div class="line">答案：A=<span class="number">20</span>、 X= <span class="number">10</span>、Y= <span class="number">4</span>、S1= <span class="number">0</span>、S2= <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/sunstady/hexo/04c143b7881ba1e8f42b60f452bedee5b56c5a03/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/1.png" alt="1"></p>
<h2 id="将上述问题中的“进入就绪队列的先后顺序为Q、P”改为“进入就绪队列的先后顺序为P、Q”，其它不变。"><a href="#将上述问题中的“进入就绪队列的先后顺序为Q、P”改为“进入就绪队列的先后顺序为P、Q”，其它不变。" class="headerlink" title="将上述问题中的“进入就绪队列的先后顺序为Q、P”改为“进入就绪队列的先后顺序为P、Q”，其它不变。"></a>将上述问题中的“进入就绪队列的先后顺序为Q、P”改为“进入就绪队列的先后顺序为P、Q”，其它不变。</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">：A、X、Y共享变量，初值均为<span class="number">0</span>，信号量S1、S2初值均为<span class="number">0</span>，有两个优先级相同的进程P、Q，进入就绪队列的先后顺序为P、Q，根据先进先出原则先执行P操作。</div><div class="line">答案： A= <span class="number">8</span>、X= <span class="number">4</span>、Y= <span class="number">1</span>、S1= <span class="number">0</span>、S2= <span class="number">0</span></div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sunstady/hexo/04c143b7881ba1e8f42b60f452bedee5b56c5a03/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/2.png" alt="2"></p>
<h2 id="将上述问题改为“P、Q两个进程同时进入就绪队列，进程Q的优先级高于进程P”，按优先级高者优先调度，采用非抢占式调度"><a href="#将上述问题改为“P、Q两个进程同时进入就绪队列，进程Q的优先级高于进程P”，按优先级高者优先调度，采用非抢占式调度" class="headerlink" title="将上述问题改为“P、Q两个进程同时进入就绪队列，进程Q的优先级高于进程P”，按优先级高者优先调度，采用非抢占式调度"></a>将上述问题改为“P、Q两个进程同时进入就绪队列，进程Q的优先级高于进程P”，按优先级高者优先调度，采用非抢占式调度</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A、X、Y共享变量，初值均为<span class="number">0</span>，信号量S1、S2初值均为<span class="number">0</span>，P、Q两个进程同时进入就绪队列，进程Q的优先级高于进程P。根据优先级高者优先调度的原则先进行Q操作。</div><div class="line">答案：A= <span class="number">20</span>、X= <span class="number">10</span>、Y= <span class="number">4</span>、S1= <span class="number">0</span>、S2= <span class="number">0</span></div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sunstady/hexo/04c143b7881ba1e8f42b60f452bedee5b56c5a03/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/3.png" alt="3"></p>
<h2 id="将上述问题改为“P、Q两个进程同时进入就绪队列，进程Q的优先级高于进程P”，按优先级高者优先调度，采用抢占式调度"><a href="#将上述问题改为“P、Q两个进程同时进入就绪队列，进程Q的优先级高于进程P”，按优先级高者优先调度，采用抢占式调度" class="headerlink" title="将上述问题改为“P、Q两个进程同时进入就绪队列，进程Q的优先级高于进程P”，按优先级高者优先调度，采用抢占式调度"></a>将上述问题改为“P、Q两个进程同时进入就绪队列，进程Q的优先级高于进程P”，按优先级高者优先调度，采用抢占式调度</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A、X、Y共享变量，初值均为<span class="number">0</span>，信号量S1、S2初值均为<span class="number">0</span>，有两个同时进入就绪队列的进程P、Q，进程Q的优先级高于进程P。根据优先级高者优先调度的原则先进行Q操作。</div><div class="line">答案：A= <span class="number">15</span>、X= <span class="number">7</span>、Y=<span class="number">4</span>、S1= <span class="number">0</span>、S2= <span class="number">0</span></div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sunstady/hexo/04c143b7881ba1e8f42b60f452bedee5b56c5a03/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/4.png" alt="4"></p>
<h2 id="将上述问题改为“P、Q两个进程同时进入就绪队列，进程Q的优先级高于进程P”，按优先级高者优先调度，采用抢占式调度。"><a href="#将上述问题改为“P、Q两个进程同时进入就绪队列，进程Q的优先级高于进程P”，按优先级高者优先调度，采用抢占式调度。" class="headerlink" title="将上述问题改为“P、Q两个进程同时进入就绪队列，进程Q的优先级高于进程P”，按优先级高者优先调度，采用抢占式调度。"></a>将上述问题改为“P、Q两个进程同时进入就绪队列，进程Q的优先级高于进程P”，按优先级高者优先调度，采用抢占式调度。</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A、X、Y共享变量，初值均为<span class="number">0</span>，信号量S1、S2初值均为<span class="number">0</span>，有两个同时进入就绪队列的进程P、Q，进程Q的优先级高于进程P。根据优先级高者优先调度的原则先进行Q操作。</div><div class="line">答案：A= <span class="number">15</span>、X= <span class="number">7</span>、Y=<span class="number">4</span>、S1= <span class="number">0</span>、S2= <span class="number">0</span></div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sunstady/hexo/04c143b7881ba1e8f42b60f452bedee5b56c5a03/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/5.png" alt="5"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是进程同步？列举两个生活中的进程同步的实例，详细说明同步的过程。&quot;&gt;&lt;a href=&quot;#什么是进程同步？列举两个生活中的进程同步的实例，详细说明同步的过程。&quot; class=&quot;headerlink&quot; title=&quot;什么是进程同步？列举两个生活中的进程同步的实例，详细说明同步的过程。&quot;&gt;&lt;/a&gt;什么是进程同步？列举两个生活中的进程同步的实例，详细说明同步的过程。&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在多道程序环境下，进程是并发进行的，不同进程之间存在着不同的相互制约关系，这就叫进程同步。&lt;br&gt;例一：理发师-顾客问题&lt;br&gt;在一个理发店里有一个理发师，一个理发椅和N个沙发，理发椅是一个临界资源，沙发相当于等待队列。当一个顾客进入理发店占用理发椅时，其他顾客必须在沙发上等待。理发师和顾客必须保持同步，既不允许理发师在没有顾客时理发，也不允许顾客在理发椅被占用时理发。&lt;br&gt;例二：厨师-食堂问题&lt;br&gt;在一个饭店里有一个厨师，一个桌子和N个椅子，桌子是一个临界资源。当一个食客进入饭店占用桌子时，假设桌子已满，其他食客必须等待。厨师和食客必须保持同步，既不允许厨师在没有食客时做饭，也不允许食客在桌子被占满时吃饭。&lt;br&gt;
    
    </summary>
    
    
      <category term="OS" scheme="http://www.sanstylemc.cn/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>存储管理</title>
    <link href="http://www.sanstylemc.cn/2018/03/20/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/"/>
    <id>http://www.sanstylemc.cn/2018/03/20/存储管理/</id>
    <published>2018-03-20T10:37:59.000Z</published>
    <updated>2018-03-20T11:08:10.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是虚拟存储器？"><a href="#什么是虚拟存储器？" class="headerlink" title="什么是虚拟存储器？"></a>什么是虚拟存储器？</h2><blockquote>
<p>虚拟存储器是由硬件和操作系统自动实现存储信息调度和管理的，是在具有层次结构存储器的计算机系统中，自动实现部分装入和部分替换功能，能从逻辑上为用户提供一个比物理贮存容量大的多，可寻址的“主存储器”。<br><a id="more"></a></p>
<h2 id="为什么要引入虚拟存储器？"><a href="#为什么要引入虚拟存储器？" class="headerlink" title="为什么要引入虚拟存储器？"></a>为什么要引入虚拟存储器？</h2><p>1) 能提高操作系统的内存利用率和系统吞吐量<br>2) 在计算机系统中，主存的容量有一定的限制，不可能大大满足各种用户的需要，而在技术上辅助存储器却可以做的相当大。为了给大作业提供方便，使它们不再承担对主存和辅存的具体分配和管理工作，而由操作系统把主存和辅存统一管理起来。</p>
<h2 id="虚拟存储器的特征？"><a href="#虚拟存储器的特征？" class="headerlink" title="虚拟存储器的特征？"></a>虚拟存储器的特征？</h2><p>虚拟存储器具有虚拟性、离散性、多次性及强对换性等特征，其中最重要的特征是虚拟性。<br>1&gt;    虚拟性。虚拟性是指能够从逻辑上扩充内存容量，使用户所看到的内存容量远大于实际的内存容量，这是虚拟存储器所表现出的最重要的特征，也是虚拟存储器最重要的目标。<br>2&gt;    离散性。离散性是指内存分配时采用离散分配的方式，没有离散性就不可能实现虚拟存储器。采用连续分配方式，需要将作业装入到连续的内存区域，这样需要连续地一次性申请一部分内存空间，以便将整个作业先后多次装入内存。如果仍然采用连续装入的方式，则无法实现虚拟存储功能，只有采用离散分配方式，才能为它申请内存空间，以避免浪费内存空间。<br>3&gt;    多次性。多次性是指一个作业被分成多次调入内存运行。作业在运行时，只将当前运行的那部分程序和数据装入内存，以后再陆续从外存将需要的部分调入内存。<br>4&gt;    对换性。对换性是指允许在作业运行过程中换进换出。允许将暂时不用的程序和数据从内存调至外存的对换区，以后需要时再从外存调入到内存。</p>
<h2 id="设置你自己计算机上的虚存，并截图说明设置的过程"><a href="#设置你自己计算机上的虚存，并截图说明设置的过程" class="headerlink" title="设置你自己计算机上的虚存，并截图说明设置的过程"></a>设置你自己计算机上的虚存，并截图说明设置的过程</h2><p>1、右键<code>我的电脑</code>, 选择<code>属性</code><br><img src="https://raw.githubusercontent.com/sunstady/hexo/637d8af3d3c517a497d5d5ddcec0c5bd2efdcd63/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/1.png" alt="1"><br>2、选择<code>高级系统设置</code><br><img src="https://raw.githubusercontent.com/sunstady/hexo/637d8af3d3c517a497d5d5ddcec0c5bd2efdcd63/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/2.png" alt="2"><br>3、选择<code>高级</code>, 点性能中的<code>设置</code><br><img src="https://raw.githubusercontent.com/sunstady/hexo/637d8af3d3c517a497d5d5ddcec0c5bd2efdcd63/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/3.png" alt="3"><br>4、选择<code>高级</code>, 选虚拟内存中的<code>更改</code><br><img src="https://raw.githubusercontent.com/sunstady/hexo/637d8af3d3c517a497d5d5ddcec0c5bd2efdcd63/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/4.png" alt="4"><br>5、选择<code>自定义大小</code>, 输入初始大小和最大值, 推荐设置自己内存大小的1.5~ 3倍, 在这输入2048, 点击<code>设置</code>, 根据提示选择确定。<br><img src="https://raw.githubusercontent.com/sunstady/hexo/637d8af3d3c517a497d5d5ddcec0c5bd2efdcd63/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/5.png" alt="5"></p>
<h2 id="虚存可以建立在分区分配管理的基础上吗？为什么？"><a href="#虚存可以建立在分区分配管理的基础上吗？为什么？" class="headerlink" title="虚存可以建立在分区分配管理的基础上吗？为什么？"></a>虚存可以建立在分区分配管理的基础上吗？为什么？</h2><p>不可以。在虚拟存储器中，允许将一个作业分多次调入内存。如果采用连续分配方式时，应将作业装入一个连续的内存区域中。为此，需事先为它一次性地申请足够的内存空间，以便将整个作业先后分多次装入内存，这不仅会使相当一部分内存空间都处于暂时或“永久”的空闲状态，造成内存资源的严重浪费，而且也无法从逻辑上扩大内存容量。因此，虚拟存储器的实现都是建立在离散分配存储管理方式的基础上。</p>
<h2 id="页面置换算法的应用"><a href="#页面置换算法的应用" class="headerlink" title="页面置换算法的应用"></a>页面置换算法的应用</h2><p>题干：在请求分页存储管理系统中，若为进程分配的物理块为4，开始执行时内存中没有装入任何页面，若进程依次访问的页面号为：3,1,2,6,0,7,4,6,7,2,0,4,3,2,0,7,0,2,6,5,1,5,4,3，请按照下面的页面置换算法完成作业（低物理地址优先）<br>1、OPT页面置换算法<br><img src="https://raw.githubusercontent.com/sunstady/hexo/637d8af3d3c517a497d5d5ddcec0c5bd2efdcd63/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/6.png" alt="6"><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">*为发生缺页中断</div><div class="line">~为发生页面置换</div><div class="line">页面被置换顺序 <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span></div><div class="line">缺页率<span class="number">13</span>/<span class="number">24</span></div><div class="line"><span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span>、<span class="number">4</span>内存为空，页面不在内存中发生缺页</div><div class="line"><span class="number">5</span>  选择的被淘汰页面将是以后永不使用的，或者是在最长时间内不再被访问的页面，页面<span class="number">1</span>最长时间不被访问，因此被替换</div><div class="line"><span class="number">6</span>  同理，页面<span class="number">3</span>最长时间不被访问被替换</div><div class="line"><span class="number">7</span>  同理，页面<span class="number">0</span>最长时间不被访问被替换</div><div class="line"><span class="number">8</span>  同理，页面<span class="number">6</span>最长时间不被访问被替换</div><div class="line"><span class="number">9</span>  同理，页面<span class="number">4</span>最长时间不被访问被替换</div><div class="line"><span class="number">10</span>  页面<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>在后续的访问中没有出现以此按照内存块的顺序（从上往下）依次替换</div></pre></td></tr></table></figure></p>
</blockquote>
<p>2、FIFO页面置换算法<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">FIFO：(按顺序置换)</div><div class="line">（<span class="number">1</span>）详细执行过程</div><div class="line"><span class="number">1.</span>刚开始内存并没有这个作业，所以发生缺页中断一次。页<span class="number">3</span>进入内存。(<span class="number">1</span>次缺页中断)    </div><div class="line"><span class="number">2.</span>页<span class="number">1</span>进入内存，页<span class="number">1</span>又不在内存，又发生缺页中断一次。(<span class="number">2</span>次缺页中断)  </div><div class="line"><span class="number">3.</span>页<span class="number">2</span>进入内存，页<span class="number">2</span>又不在内存，缺页中断。(<span class="number">3</span>次缺页中断)             </div><div class="line"><span class="number">4.</span>页<span class="number">6</span>进入内存，页<span class="number">6</span>又不在内存，发生缺页中断（内存中为<span class="number">3</span>、<span class="number">1</span>、<span class="number">2</span>、<span class="number">6</span>）。  (<span class="number">4</span>次缺页中断)  </div><div class="line"><span class="number">5.</span>页<span class="number">0</span>进入内存，页<span class="number">0</span>又不在内存，发生缺页中断（内存中为<span class="number">1</span>、<span class="number">2</span>、<span class="number">6</span>、<span class="number">0</span>）。 (<span class="number">5</span>次缺页中断)  </div><div class="line"><span class="number">6.</span>页<span class="number">7</span>进入内存，页<span class="number">7</span>又不在内存，发生缺页中断（内存中<span class="number">2</span>、<span class="number">6</span>、<span class="number">0</span>、<span class="number">7</span>）(<span class="number">6</span>次缺页中断)</div><div class="line"><span class="number">7.</span>页<span class="number">4</span>进入内存，页<span class="number">4</span>又不在内存，发生缺页中断（内存中为<span class="number">6</span>、<span class="number">0</span>、<span class="number">7</span>、<span class="number">4</span>）。 (<span class="number">7</span>次缺页中断)  </div><div class="line"><span class="number">8.</span>页<span class="number">6</span>在内存内不发生中断。</div><div class="line"><span class="number">9.</span>页<span class="number">7</span>在内存内不发生中断。</div><div class="line"><span class="number">10.</span>页<span class="number">2</span>进入内存，页<span class="number">2</span>又不在内存，发生缺页中断（内存中为<span class="number">0</span>、<span class="number">7</span>、<span class="number">4</span>、<span class="number">2</span>）。 (<span class="number">8</span>次缺页中断)  </div><div class="line"><span class="number">11.</span>页<span class="number">0</span>在内存内不发生中断</div><div class="line"><span class="number">12.</span>页<span class="number">4</span>在内存内不发生中断  </div><div class="line"><span class="number">13.</span>页<span class="number">3</span>进入内存，页<span class="number">3</span>又不在内存，发生缺页中断（内存中为<span class="number">7</span>、<span class="number">4</span>、<span class="number">2</span>、<span class="number">3</span>）。 (<span class="number">9</span>次缺页中断)  </div><div class="line"><span class="number">14.</span>页<span class="number">2</span>在内存内不发生中断 </div><div class="line"><span class="number">15.</span>页<span class="number">0</span>进入内存，页<span class="number">0</span>又不在内存，发生缺页中断（内存中为<span class="number">4</span>、<span class="number">2</span>、<span class="number">3</span>、<span class="number">0</span>）。 (<span class="number">10</span>次缺页中断) </div><div class="line"><span class="number">16.</span>页<span class="number">7</span>进入内存，页<span class="number">7</span>又不在内存，发生缺页中断（内存中为<span class="number">2</span>、<span class="number">3</span>、<span class="number">0</span>、<span class="number">7</span>）。 (<span class="number">11</span>次缺页中断)</div><div class="line"><span class="number">17.</span>页<span class="number">0</span>在内存内不发生中断。</div><div class="line"><span class="number">18.</span>页<span class="number">2</span>在内存内不发生中断。</div><div class="line"><span class="number">19.</span>页<span class="number">6</span>进入内存，页<span class="number">6</span>又不在内存，发生缺页中断（内存中为<span class="number">3</span>、<span class="number">0</span>、<span class="number">7</span>、<span class="number">6</span>）。 (<span class="number">12</span>次缺页中断)</div><div class="line"><span class="number">20.</span>页<span class="number">5</span>进入内存，页<span class="number">5</span>又不在内存，发生缺页中断（内存中为<span class="number">0</span>、<span class="number">7</span>、<span class="number">6</span>、<span class="number">5</span>）。 (<span class="number">13</span>次缺页中断)</div><div class="line"><span class="number">21.</span>页<span class="number">1</span>进入内存，页<span class="number">1</span>又不在内存，发生缺页中断（内存中为<span class="number">7</span>、<span class="number">6</span>、<span class="number">5</span>、<span class="number">1</span>）。 (<span class="number">14</span>次缺页中断)</div><div class="line"><span class="number">22.</span>页<span class="number">5</span>在内存内不发生中断。</div><div class="line"><span class="number">23.</span> 页<span class="number">4</span>进入内存，页<span class="number">4</span>又不在内存，发生缺页中断（内存中<span class="number">6</span>、<span class="number">5</span>、<span class="number">1</span>、<span class="number">4</span>）。 (<span class="number">15</span>次缺页中断)</div><div class="line"><span class="number">24.</span>页<span class="number">3</span>进入内存，页<span class="number">3</span>又不在内存，发生缺页中断（内存中为<span class="number">5</span>、<span class="number">1</span>、<span class="number">4</span>、<span class="number">3</span>）。 (<span class="number">16</span>次缺页中断)</div><div class="line">（<span class="number">2</span>）缺页次数：<span class="number">16</span></div><div class="line">（<span class="number">3</span>）缺页频率：<span class="number">66.7</span>％</div><div class="line">（<span class="number">4</span>）置换次数：<span class="number">12</span></div><div class="line">（<span class="number">5</span>）被置换出的页面依次为：<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>3、LRU页面置换算法<br><img src="https://raw.githubusercontent.com/sunstady/hexo/637d8af3d3c517a497d5d5ddcec0c5bd2efdcd63/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/7.png" alt="7"><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">*为发缺页中断</div><div class="line">（<span class="number">1</span>）<span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span>、<span class="number">4</span>内存为空，页面不在内存中发生缺页</div><div class="line"><span class="number">5</span>选择的被淘汰页面将是最近最久未使用的页面，页面<span class="number">3</span>最长时间不被访问，因此被替换</div><div class="line"><span class="number">6</span>同理，页面<span class="number">1</span>最长时间不被访问被替换</div><div class="line"><span class="number">7</span>	同理，页面<span class="number">2</span>最长时间不被访问被替换</div><div class="line"><span class="number">8</span>	同理，页面<span class="number">0</span>最长时间不被访问被替换</div><div class="line"><span class="number">9</span>	同理，页面<span class="number">4</span>最长时间不被访问被替换</div><div class="line"><span class="number">10</span>	同理，页面<span class="number">6</span>最长时间不被访问被替换</div><div class="line"><span class="number">11</span>	同理，页面<span class="number">7</span>最长时间不被访问被替换</div><div class="line"><span class="number">12</span>	同理，页面<span class="number">4</span>最长时间不被访问被替换</div><div class="line"><span class="number">13</span>	同理，页面<span class="number">3</span>最长时间不被访问被替换</div><div class="line"><span class="number">14</span>	同理，页面<span class="number">7</span>最长时间不被访问被替换</div><div class="line"><span class="number">15</span>	同理，页面<span class="number">0</span>最长时间不被访问被替换</div><div class="line"><span class="number">16</span>  同理，页面<span class="number">2</span>最长时间不被访问被替换</div><div class="line"><span class="number">16</span>	同理，页面<span class="number">6</span>最长时间不被访问被替换</div><div class="line">（<span class="number">2</span>）缺页次数：<span class="number">17</span></div><div class="line">（<span class="number">3</span>）缺页频率：<span class="number">70.8</span>%</div><div class="line">（<span class="number">4</span>）置换次数：<span class="number">13</span></div><div class="line">（<span class="number">5</span>）被置换出的页面依次为：<span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">4</span> <span class="number">6</span> <span class="number">7</span> <span class="number">4</span> <span class="number">3</span> <span class="number">7</span> <span class="number">0</span> <span class="number">2</span> <span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>4、CLOCK页面置换算法<br><img src="https://raw.githubusercontent.com/sunstady/hexo/637d8af3d3c517a497d5d5ddcec0c5bd2efdcd63/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/8.png" alt="8"><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">红色代表访问位为<span class="number">1</span>，星号表示替换指针的位置</div><div class="line">缺页次数：<span class="number">15</span>次</div><div class="line">缺页率：<span class="number">15</span>/<span class="number">24</span>=<span class="number">62.5</span>％</div><div class="line">置换次数：<span class="number">11</span>次</div><div class="line">依次被置换出的页号：<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">6</span></div><div class="line">语言描述：<span class="number">1</span>：进程分配的物理块为<span class="number">4</span>，开始执行时内存中没有装入任何页面，当访问<span class="number">3</span>号页面是，内存中没有，则将页面直接调入内存，根据低物理地址优先，将页面存入第一个物理块，并把访问位置为<span class="number">1</span>。</div><div class="line"><span class="number">2</span>：访问<span class="number">1</span>号页面时，内存中没有，且内存中还有空位，直接将<span class="number">1</span>号页面放入内存即可，并把访问位置为<span class="number">1</span>。</div><div class="line"><span class="number">3</span>：当访问<span class="number">0</span>号页面时，发现内存中没有，且内存中无空位，则需要替换掉一个页面。根据CLOCK置换算法找到需要替换的页面，为了避免“抖动”，因此访问指针从替换指针的下一位开始检查，首先检查<span class="number">3</span>号页面，访问位为<span class="number">1</span>，将其重新置为<span class="number">0</span>，暂不换出，给予该页第二次驻留内存的机会，继续检查<span class="number">1</span>号页面，访问位为<span class="number">1</span>，将其重新置为<span class="number">0</span>，暂不换出，给予该页第二次驻留内存的机会，继续检查<span class="number">2</span>号页面，访问位为<span class="number">1</span>，将其重新置为<span class="number">0</span>，暂不换出，给予该页第二次驻留内存的机会，继续检查<span class="number">6</span>号页面，访问位为<span class="number">1</span>，将其重新置为<span class="number">0</span>，暂不换出，给予该页第二次驻留内存的机会，这时检查到最后一位，发现访问位仍为<span class="number">1</span>，则返回队首去检查第一个页面<span class="number">3</span>，发现访问位为<span class="number">0</span>，则选择此页面替换，且替换指针此时指向被替换的页面。</div><div class="line"><span class="number">4</span>：当访问<span class="number">7</span>号页面时，发现内存中没有，且内存中无空位，则需要替换掉一个页面。根据CLOCK置换算法找到需要替换的页面，为了避免“抖动”，因此访问指针从替换指针的下一位开始检查，首先检查<span class="number">1</span>号页面，访问位为<span class="number">0</span>，则选择此页面替换，且替换指针此时指向被替换的页面。</div><div class="line"><span class="number">5</span>：当访问<span class="number">6</span>号页面时，发现内存中存在，则将其访问位置为<span class="number">1</span>，替换指针不动。</div><div class="line"><span class="number">6</span>：当访问<span class="number">2</span>号页面时，发现内存中没有，且内存中无空位，则需要替换掉一个页面。根据CLOCK置换算法找到需要替换的页面，为了避免“抖动”，因此访问指针从替换指针的下一位开始检查，首先检查<span class="number">6</span>号页面，访问位为<span class="number">1</span>，将其重新置为<span class="number">0</span>，暂不换出，给予该页第二次驻留内存的机会，继续检查<span class="number">0</span>号页面，访问位为<span class="number">1</span>，将其重新置为<span class="number">0</span>，暂不换出，给予该页第二次驻留内存的机会，继续检查<span class="number">7</span>号页面，访问位为<span class="number">1</span>，将其重新置为<span class="number">0</span>，暂不换出，给予该页第二次驻留内存的机会，继续检查<span class="number">4</span>号页面，访问位为<span class="number">1</span>，将其重新置为<span class="number">0</span>，暂不换出，给予该页第二次驻留内存的机会，继续检查<span class="number">6</span>号页面，发现访问位为<span class="number">0</span>，则选择此页面替换，且替换指针此时指向被替换的页面。</div><div class="line"><span class="number">7</span>：当访问<span class="number">3</span>号页面时，发现内存中没有，且内存中无空位，则需要替换掉一个页面。根据CLOCK置换算法找到需要替换的页面，为了避免“抖动”，因此访问指针从替换指针的下一位开始检查，首先检查<span class="number">0</span>号页面，访问位为<span class="number">1</span>，将其重新置为<span class="number">0</span>，暂不换出，给予该页第二次驻留内存的机会，继续检查<span class="number">7</span>号页面，发现访问位为<span class="number">0</span>，则选择此页面替换，且替换指针此时指向被替换的页面。</div><div class="line"><span class="number">8</span>：当访问<span class="number">7</span>号页面时，发现内存中没有，且内存中无空位，则需要替换掉一个页面。根据CLOCK置换算法找到需要替换的页面，为了避免“抖动”，因此访问指针从替换指针的下一位开始检查，首先检查<span class="number">4</span>号页面，访问位为<span class="number">1</span>，将其重新置为<span class="number">0</span>，暂不换出，给予该页第二次驻留内存的机会，继续检查<span class="number">2</span>号页面，访问位为<span class="number">1</span>，将其重新置为<span class="number">0</span>，暂不换出，给予该页第二次驻留内存的机会，继续检查<span class="number">0</span>号页面，访问位为<span class="number">1</span>，将其重新置为<span class="number">0</span>，暂不换出，给予该页第二次驻留内存的机会，继续检查<span class="number">3</span>号页面，访问位为<span class="number">1</span>，将其重新置为<span class="number">0</span>，暂不换出，给予该页第二次驻留内存的机会，继续检查<span class="number">4</span>号页面，发现访问位为<span class="number">0</span>，则选择此页面替换，且替换指针此时指向被替换的页面。</div></pre></td></tr></table></figure></p>
<p>5、CLOCK页面置换算法 第5题中进程依次访问的页面号为：其它条件、要求与前面的题干一样7,1,6,4,6,2,3,0,3,1,0,7,6,0,1,3,6,3,0,7,2,0,5<br><img src="https://raw.githubusercontent.com/sunstady/hexo/637d8af3d3c517a497d5d5ddcec0c5bd2efdcd63/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/9.png" alt="9"><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">红色代表访问位为1，星号表示替换指针的位置</div><div class="line">缺页次数: 14次</div><div class="line">缺页率: 14/23=60.9%</div><div class="line">置换次数: 10次</div><div class="line">依次被置换的页号:<span class="number"> 7 </span>1<span class="number"> 6 </span>4<span class="number"> 2 </span>3<span class="number"> 0 </span>1<span class="number"> 7 </span>6</div><div class="line">7号页面：进程分配的物理块为4，开始执行的时候没有装入任何页面，当开始访问7号页面的时候，内存中没有该页面号，将页面直接调入内存，低物理地址优先，将页面放入第一个物理块，把访问位置为1.</div><div class="line">1、6、4号页面：访问1号页面的时候，内存中没有该页面号，且内存中还有空位，将1、6、4号页面放入内存，把访问位置为1，替换指针指向最高地址的物理块。</div><div class="line">6号页面：访问6号页面的时候，内存中有，将其访问位置为1，替换指针不动。</div><div class="line">2号页面：访问2号页面的时候，内存中没有，且内存中没有空位，需要替换掉一个页面。将内存中所有的页面链成一个循环队列，从替换指针的下一位开始检查。先检查7号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会；检查1号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会；检查6号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会；检查4号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会。检查到队列的最后一个页面时，访问位仍为1，返回队首检查第一个页面，发现访问位为0，则选择此页面替换，访问位置为1，替换指针指向被替换的页面。</div><div class="line">3号页面：访问3号页面的时候，内存中没有，且内存中没有空位，需要替换掉一个页面。将内存中所有的页面链成一个循环队列，从替换指针的下一位开始检查。先检查1号页面，访问位为0，选择此页面替换，访问位置为1，替换指针指向被替换的页面。</div><div class="line">0号页面：访问0号页面的时候，内存中没有，且内存中没有空位，需要替换掉一个页面。将内存中所有的页面链成一个循环队列，从替换指针的下一位开始检查。先检查6号页面，访问位为0，选择此页面替换，访问位置为1，替换指针指向被替换的页面。</div><div class="line">3号页面：访问3号页面的时候，内存中有，将其访问位置为1，替换指针不动。</div><div class="line">1号页面：访问1号页面的时候，内存中没有，且内存中没有空位，需要替换掉一个页面。将内存中所有的页面链成一个循环队列，从替换指针的下一位开始检查。先检查4号页面，访问位为0，选择此页面替换，访问位置为1，替换指针指向被替换的页面。</div><div class="line">0号页面：访问0号页面的时候，内存中有，将其访问位置为1，替换指针不动。</div><div class="line">7号页面：访问7号页面的时候，内存中没有，且内存中没有空位，需要替换掉一个页面。将内存中所有的页面链成一个循环队列，从替换指针的下一位开始检查。先检查2号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会；检查3号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会；检查9号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会；检查1号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会。检查到队列的最后一个页面时，访问位仍为1，返回队首检查第一个页面，发现访问位为0，则选择此页面替换，访问位置为1，替换指针指向被替换的页面。</div><div class="line">6号页面：访问6号页面的时候，内存中没有，且内存中没有空位，需要替换掉一个页面。将内存中所有的页面链成一个循环队列，从替换指针的下一位开始检查。先检查3号页面，访问位为0，选择此页面替换，访问位置为1，替换指针指向被替换的页面。</div><div class="line">0号页面：访问0号页面的时候，内存中有，将其访问位置为1，替换指针不动。</div><div class="line">1号页面：访问1号页面的时候，内存中有，将其访问位置为1，替换指针不动。</div><div class="line">3号页面：访问3号页面的时候，内存中没有，且内存中没有空位，需要替换掉一个页面。将内存中所有的页面链成一个循环队列，从替换指针的下一位开始检查。先检查0号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会；检查1号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会；检查7号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会；检查6号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会。检查到队列的最后一个页面时，访问位仍为1，返回队首检查第一个页面，发现访问位为0，则选择此页面替换，访问位置为1，替换指针指向被替换的页面。</div><div class="line">6号页面：访问6号页面的时候，内存中有，将其访问位置为1，替换指针不动。</div><div class="line">3号页面：访问3号页面的时候，内存中有，将其访问位置为1，替换指针不动。</div><div class="line">0号页面：访问0号页面的时候，内存中没有，且内存中没有空位，需要替换掉一个页面。将内存中所有的页面链成一个循环队列，从替换指针的下一位开始检查。先检查1号页面，访问位为0，选择此页面替换，访问位置为1，替换指针指向被替换的页面。</div><div class="line">7号页面：访问7号页面的时候，内存中有，将其访问位置为1，替换指针不动。</div><div class="line">2号页面：访问2号页面的时候，内存中没有，且内存中没有空位，需要替换掉一个页面。将内存中所有的页面链成一个循环队列，从替换指针的下一位开始检查。先检查7号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会；检查6号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会；检查3号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会；检查0号页面，访问位为1，将其置为0，暂不换出，给予该页第二次驻留内存的机会。检查到队列的最后一个页面时，访问位仍为1，返回队首检查第一个页面，发现访问位为0，则选择此页面替换，访问位置为1，替换指针指向被替换的页面。</div><div class="line">0号页面：访问0号页面的时候，内存中有，将其访问位置为1，替换指针不动。</div><div class="line">5号页面：访问5号页面的时候，内存中没有，且内存中没有空位，需要替换掉一个页面。将内存中所有的页面链成一个循环队列，从替换指针的下一位开始检查。先检查6号页面，访问位为0，选择此页面替换，访问位置为1，替换指针指向被替换的页面。</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是虚拟存储器？&quot;&gt;&lt;a href=&quot;#什么是虚拟存储器？&quot; class=&quot;headerlink&quot; title=&quot;什么是虚拟存储器？&quot;&gt;&lt;/a&gt;什么是虚拟存储器？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;虚拟存储器是由硬件和操作系统自动实现存储信息调度和管理的，是在具有层次结构存储器的计算机系统中，自动实现部分装入和部分替换功能，能从逻辑上为用户提供一个比物理贮存容量大的多，可寻址的“主存储器”。&lt;br&gt;
    
    </summary>
    
    
      <category term="OS" scheme="http://www.sanstylemc.cn/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Java经典逻辑编程四</title>
    <link href="http://www.sanstylemc.cn/2018/03/16/Java%E7%BB%8F%E5%85%B8%E9%80%BB%E8%BE%91%E7%BC%96%E7%A8%8B%E5%9B%9B/"/>
    <id>http://www.sanstylemc.cn/2018/03/16/Java经典逻辑编程四/</id>
    <published>2018-03-16T13:15:29.000Z</published>
    <updated>2018-03-21T05:36:39.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。"><a href="#有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。" class="headerlink" title="有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。"></a>有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。</h2><a id="more"></a>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">import java.util.Arrays;</div><div class="line">import java.util.Scanner;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入总人数。"</span>);</div><div class="line">        <span class="keyword">int</span> num = <span class="keyword">in</span>.nextInt();</div><div class="line">         </div><div class="line">        boolean[] man = <span class="keyword">new</span> boolean[num];</div><div class="line">         </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; man.length; i++)</div><div class="line">        &#123;</div><div class="line">            man[i] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="keyword">int</span> t = <span class="number">0</span>, len = man.length;</div><div class="line">        <span class="keyword">while</span>(len &gt; <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; man.length; i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(man[i])</div><div class="line">                &#123;</div><div class="line">                    t++;</div><div class="line">                    <span class="keyword">if</span>(t == <span class="number">3</span>)</div><div class="line">                    &#123;</div><div class="line">                        t = <span class="number">0</span>;          <span class="comment">//重置</span></div><div class="line">                        man[i] = <span class="literal">false</span>; <span class="comment">//去掉此人</span></div><div class="line">                        len--;          <span class="comment">//人数减 1</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"最后的情况："</span> + Arrays.toString(man));<span class="comment">//返回指定数组的字符串表示形式</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; man.length; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(man[i])      <span class="comment">//最后留下来的人没有被flase</span></div><div class="line">            &#123;</div><div class="line">                System.<span class="keyword">out</span>.println(<span class="string">"原来剩下的数："</span> + (i + <span class="number">1</span>));    <span class="comment">//i + 1 是因为数组从 0 开始</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。"><a href="#写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。" class="headerlink" title="写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。"></a>写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class class_name &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">         </div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"请输入一个字符串"</span>);</div><div class="line">        <span class="keyword">String</span> <span class="built_in">str</span> = in.next();</div><div class="line">         </div><div class="line">        <span class="built_in">int</span> len = lenOfstr(<span class="built_in">str</span>);</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span> + <span class="string">" 的长度为 "</span> + len);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> lenOfstr(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">str</span>.length();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="编写一个函数，输入n为偶数时，调用函数求1-2-1-4-…-1-n-当输入n为奇数时，调用函数1-1-1-3-…-1-n-利用指针函数-。"><a href="#编写一个函数，输入n为偶数时，调用函数求1-2-1-4-…-1-n-当输入n为奇数时，调用函数1-1-1-3-…-1-n-利用指针函数-。" class="headerlink" title="编写一个函数，输入n为偶数时，调用函数求1/2+1/4+…+1/n,当输入n为奇数时，调用函数1/1+1/3+…+1/n(利用指针函数)。"></a>编写一个函数，输入n为偶数时，调用函数求1/2+1/4+…+1/n,当输入n为奇数时，调用函数1/1+1/3+…+1/n(利用指针函数)。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入一个整数"</span>);</div><div class="line">        <span class="keyword">int</span> n = <span class="keyword">in</span>.nextInt();</div><div class="line">         </div><div class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"1/2 + 1/4 + ... + 1/"</span>+ n+ <span class="string">"= "</span> + evenSum(n));</div><div class="line">        <span class="keyword">else</span></div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"1 + 1/3 + ... + 1/"</span>+ n+ <span class="string">"= "</span> + oddSum(n));</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">oddSum</span>(<span class="params"><span class="keyword">int</span> n</span>) </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">float</span> sum = <span class="number">0.0</span>f;               <span class="comment">//记得用 float 或 double 型</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">float</span> i = <span class="number">1.0</span>f; i &lt;= n;) &#123;       <span class="comment">// i 用 int 就会把结果也强转为 int</span></div><div class="line">            sum += <span class="number">1</span> / i;</div><div class="line">            i += <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">evenSum</span>(<span class="params"><span class="keyword">int</span> n</span>) </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">float</span> sum = <span class="number">0.0</span>f;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">float</span> i = <span class="number">2.0</span>f; i &lt;= n;) &#123;</div><div class="line">            sum += <span class="number">1</span> / i;</div><div class="line">            i += <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="字符串排序。"><a href="#字符串排序。" class="headerlink" title="字符串排序。"></a>字符串排序。</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class class_name &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        <span class="keyword">String</span>[] strs = &#123;<span class="string">"abfds1"</span>, <span class="string">"advesd2"</span>, <span class="string">"dasfdsa3"</span>, <span class="string">"cdsaew1"</span>, <span class="string">"abbdsa2"</span>, <span class="string">"abbdsa"</span>&#125;;  </div><div class="line">        <span class="comment">//直接用了 java 里有的 sort 方法</span></div><div class="line">        Arrays.<span class="built_in">sort</span>(strs);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">String</span> <span class="built_in">str</span> : strs) &#123;  </div><div class="line">            System.out.<span class="built_in">println</span>(<span class="built_in">str</span>);  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子平均分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的-问海滩上原来最少有多少个桃子？"><a href="#海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子平均分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的-问海滩上原来最少有多少个桃子？" class="headerlink" title="海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子平均分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的,问海滩上原来最少有多少个桃子？"></a>海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子平均分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的,问海滩上原来最少有多少个桃子？</h2><p>法一<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> num = <span class="number">6</span>;        <span class="comment">//分五份多一个，至少6个</span></div><div class="line">        <span class="keyword">while</span>( <span class="literal">true</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(func(num))</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">break</span>;      <span class="comment">//找到答案，跳出循环</span></div><div class="line">            &#125;</div><div class="line">            num++;</div><div class="line">        &#125;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"符合要求的最小数是："</span> + num);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">//判断这个数是否能被分5次</span></div><div class="line">    <span class="function"><span class="keyword">static</span> boolean <span class="title">func</span>(<span class="params"><span class="keyword">long</span> n</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;          <span class="comment">//被分次数0-4共5次</span></div><div class="line">        <span class="keyword">while</span>(i &lt; <span class="number">5</span> &amp;&amp; n &gt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>((n - <span class="number">1</span>) % <span class="number">5</span> == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">long</span> temp = (n - <span class="number">1</span>) / <span class="number">5</span> + <span class="number">1</span>;</div><div class="line">                n -= temp;              <span class="comment">//减去被一只猴子拿走和丢掉的</span></div><div class="line">                i ++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>法二<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> i= <span class="number">0</span>, m= <span class="number">1</span>, x= <span class="number">1</span>;      </div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">        &#123;</div><div class="line">            m= x;</div><div class="line">            <span class="keyword">for</span>(i= <span class="number">0</span>; i&lt; <span class="number">5</span>; i++) &#123;</div><div class="line">            	<span class="keyword">if</span>((m- <span class="number">1</span>)% <span class="number">5</span>== <span class="number">0</span>) &#123;</div><div class="line">            		m= (m- <span class="number">1</span>)/ <span class="number">5</span>* <span class="number">4</span>;</div><div class="line">            		<span class="comment">//System.out.println(m);</span></div><div class="line">            	&#125;<span class="keyword">else</span> &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (i== <span class="number">5</span> &amp;&amp; m&gt; <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">            x++;</div><div class="line">            System.<span class="keyword">out</span>.println(x);</div><div class="line">        &#125;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"符合要求的最小数是："</span> + x);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="809-800-9-1"><a href="#809-800-9-1" class="headerlink" title="809*??=800*??+9*??+1"></a><code>809*??=800*??+9*??+1</code></h2><p>其中??代表的两位数,<code>8*??</code>的结果为两位数，<code>9*??</code>的结果为3位数。求??代表的两位数，及<code>809*??</code>后的结果。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;  </div><div class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;  </div><div class="line">        boolean flag = <span class="literal">false</span>;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">10</span>; i&lt;<span class="number">100</span>; i++) &#123;  </div><div class="line">            <span class="keyword">if</span>(<span class="number">809</span>*i == (<span class="number">800</span>*i+<span class="number">9</span>*i)) &#123;  </div><div class="line">                <span class="keyword">if</span>(((<span class="number">8</span>* i)&gt; <span class="number">10</span>)&amp;&amp; ((<span class="number">8</span>* i) &lt; <span class="number">100</span>)&amp;&amp; ((<span class="number">9</span>* i) &gt; <span class="number">99</span>)&amp;&amp; ((<span class="number">9</span>* i)&lt; <span class="number">1000</span>)) &#123;  </div><div class="line">                    flag = <span class="literal">true</span>;  </div><div class="line">                    number = i;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">if</span> (flag) &#123;  </div><div class="line">        	System.<span class="keyword">out</span>.println(<span class="string">"??是: "</span>+ number);</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"809*"</span>+number+<span class="string">"="</span>+(<span class="number">809</span>*number));  </div><div class="line">        &#125;<span class="keyword">else</span> &#123;  </div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"无符合要求的数!"</span>);  </div><div class="line">        &#125;   </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="求0—7所能组成的奇数个数。"><a href="#求0—7所能组成的奇数个数。" class="headerlink" title="求0—7所能组成的奇数个数。"></a>求0—7所能组成的奇数个数。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">long</span> total = <span class="number">0</span>L;</div><div class="line">         </div><div class="line">        <span class="comment">//可以把 76543210 变成 10 或 100 来检查该代码输出结果的正确性</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">76543210</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//把其中含有 8 和 9 的数去掉</span></div><div class="line">            <span class="keyword">if</span>((i + <span class="string">""</span>).indexOf(<span class="string">"8"</span>) != <span class="number">-1</span> || (i + <span class="string">""</span>).indexOf(<span class="string">"9"</span>) != <span class="number">-1</span>)&#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            total++;</div><div class="line"><span class="comment">//          System.out.println(i + " ");        //输入每一个奇数</span></div><div class="line">        &#125;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"共有 "</span> + total + <span class="string">"个奇数"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="一个偶数总能表示为两个素数之和。"><a href="#一个偶数总能表示为两个素数之和。" class="headerlink" title="一个偶数总能表示为两个素数之和。"></a>一个偶数总能表示为两个素数之和。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入一个大于等于4偶数。"</span>);</div><div class="line">        <span class="keyword">int</span> num = <span class="keyword">in</span>.nextInt();</div><div class="line">         </div><div class="line">        <span class="keyword">if</span>(num &lt; <span class="number">4</span>)</div><div class="line">                System.<span class="keyword">out</span>.println(<span class="string">"输入错误！"</span>);</div><div class="line">        <span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> i , j;</div><div class="line">            <span class="keyword">for</span>(i = <span class="number">2</span>; i &lt;= num /<span class="number">2</span>; i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(isPrime(i))</div><div class="line">                &#123;</div><div class="line">                    j = num - i;</div><div class="line">                    <span class="keyword">if</span>(isPrime(j))</div><div class="line">                        System.<span class="keyword">out</span>.println(num + <span class="string">" = "</span> + i + <span class="string">" + "</span> + j);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> boolean <span class="title">isPrime</span>(<span class="params"><span class="keyword">int</span> k</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; Math.sqrt(k); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(k % i == <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="读取7个数（1—50）的整数值，每读取一个值，程序打印出该值个数的＊。"><a href="#读取7个数（1—50）的整数值，每读取一个值，程序打印出该值个数的＊。" class="headerlink" title="读取7个数（1—50）的整数值，每读取一个值，程序打印出该值个数的＊。"></a>读取7个数（1—50）的整数值，每读取一个值，程序打印出该值个数的＊。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import java.util.Random;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        Random rm = <span class="keyword">new</span> Random();</div><div class="line">         </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">7</span>; n++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> i = rm.nextInt(<span class="number">50</span>);     <span class="comment">//50以内的随机数</span></div><div class="line">            System.<span class="keyword">out</span>.print(i + <span class="string">" : "</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; i; m++)</div><div class="line">            &#123;</div><div class="line">                System.<span class="keyword">out</span>.print(<span class="string">"*"</span>);</div><div class="line">            &#125;</div><div class="line">            System.<span class="keyword">out</span>.println();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5-然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。"><a href="#某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5-然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。" class="headerlink" title="某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。"></a>某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">class_name</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        System.out.println(<span class="string">"请输入一个四位整数"</span>);</div><div class="line">        <span class="built_in">int</span> <span class="built_in">num</span> = <span class="keyword">in</span>.nextInt();</div><div class="line">         </div><div class="line">        System.out.println(<span class="string">"加密后数据为："</span> + encrypt(<span class="built_in">num</span>));</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    private <span class="keyword">static</span> <span class="built_in">int</span> encrypt(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="built_in">int</span> a, b, c, d;         <span class="comment">//从左到右分别为第一到第四位</span></div><div class="line">        <span class="comment">//分解</span></div><div class="line">        a = <span class="built_in">num</span> / <span class="number">1000</span>;</div><div class="line">        b = (<span class="built_in">num</span> / <span class="number">100</span>) % <span class="number">10</span>;</div><div class="line">        c = (<span class="built_in">num</span> / <span class="number">10</span>) % <span class="number">10</span>;</div><div class="line">        d = <span class="built_in">num</span> % <span class="number">10</span>;</div><div class="line">        <span class="comment">//取余</span></div><div class="line">        a = (a + <span class="number">5</span>) % <span class="number">10</span>;</div><div class="line">        b = (b + <span class="number">5</span>) % <span class="number">10</span>;</div><div class="line">        c = (c + <span class="number">5</span>) % <span class="number">10</span>;</div><div class="line">        d = (d + <span class="number">5</span>) % <span class="number">10</span>;</div><div class="line">        <span class="comment">//交换,其实这里只要换一下重组会整数的顺序就行了</span></div><div class="line">        <span class="built_in">num</span> = d *<span class="number">1000</span> + c * <span class="number">100</span> + b * <span class="number">10</span> + a;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">num</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="计算字符串中子串出现的次数。"><a href="#计算字符串中子串出现的次数。" class="headerlink" title="计算字符串中子串出现的次数。"></a>计算字符串中子串出现的次数。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">import</span> java.util.regex.Matcher;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">class_name</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="type">String</span>[] args) &#123;</div><div class="line">        <span class="type">Scanner</span> <span class="keyword">in</span> = new <span class="type">Scanner</span>(<span class="type">System</span>.<span class="keyword">in</span>);</div><div class="line"> </div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"请输入一个字符串"</span>);</div><div class="line">        <span class="type">String</span> sen = <span class="keyword">in</span>.next();</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"请输入要查找的子字符串"</span>);</div><div class="line">        <span class="type">String</span> str = <span class="keyword">in</span>.next();</div><div class="line">         </div><div class="line"><span class="comment">/*          //一般方法</span></div><div class="line"><span class="comment">        int count = 0;</span></div><div class="line"><span class="comment">        int start = 0;</span></div><div class="line"><span class="comment">        while (sen.indexOf(str, start) &gt;= 0 &amp;&amp; start &lt; sen.length()) &#123;</span></div><div class="line"><span class="comment">            count++;</span></div><div class="line"><span class="comment">            start = sen.indexOf(str, start) + str.length();</span></div><div class="line"><span class="comment">        &#125;*/</span></div><div class="line">                <span class="comment">//正则表达式             第二个参数为忽略大小写</span></div><div class="line">        <span class="type">Pattern</span> p = <span class="type">Pattern</span>.compile(str, <span class="type">Pattern</span>.<span class="type">CASE_INSENSITIVE</span>);  </div><div class="line">        <span class="type">Matcher</span> m = p.matcher(sen);  </div><div class="line">        int <span class="built_in">count</span> = <span class="number">0</span>;  </div><div class="line">        <span class="keyword">while</span>(m.<span class="built_in">find</span>())&#123;  </div><div class="line">              <span class="built_in">count</span> ++;  </div><div class="line">        &#125;  </div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(str + <span class="string">"在"</span> + sen + <span class="string">"出现的次数为"</span> + <span class="built_in">count</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="有五个学生，每个学生有3门课的成绩，从键盘输入以上数据（包括学生号，姓名，三门课成绩），计算出平均成绩，将原有的数据和计算出的平均分数存放在磁盘文件”stud”中。"><a href="#有五个学生，每个学生有3门课的成绩，从键盘输入以上数据（包括学生号，姓名，三门课成绩），计算出平均成绩，将原有的数据和计算出的平均分数存放在磁盘文件”stud”中。" class="headerlink" title="有五个学生，每个学生有3门课的成绩，从键盘输入以上数据（包括学生号，姓名，三门课成绩），计算出平均成绩，将原有的数据和计算出的平均分数存放在磁盘文件”stud”中。"></a>有五个学生，每个学生有3门课的成绩，从键盘输入以上数据（包括学生号，姓名，三门课成绩），计算出平均成绩，将原有的数据和计算出的平均分数存放在磁盘文件”stud”中。</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedWriter;</div><div class="line"><span class="keyword">import</span> java.io.<span class="built_in">File</span>;</div><div class="line"><span class="keyword">import</span> java.io.FileWriter;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> class class_name &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">         </div><div class="line">        <span class="keyword">String</span>[][] stu = <span class="keyword">new</span> <span class="keyword">String</span>[<span class="number">2</span>][<span class="number">6</span>];      <span class="comment">//为了快速测试，5个同学变成了2个同学</span></div><div class="line">         </div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</div><div class="line">            System.out.printf(<span class="string">"请输入第%d个学生的姓名"</span>, i + <span class="number">1</span>);</div><div class="line">            stu[i][<span class="number">0</span>] = in.next();</div><div class="line">             </div><div class="line">            System.out.printf(<span class="string">"请输入第%d个学生第学号"</span>, i + <span class="number">1</span>);</div><div class="line">            stu[i][<span class="number">1</span>] = in.next();</div><div class="line">             </div><div class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; <span class="number">5</span>; j++)&#123;</div><div class="line">                System.out.printf(<span class="string">"请输入该同学的第%d门课程成绩"</span>, j - <span class="number">1</span>);</div><div class="line">                stu[i][j] = in.next();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</div><div class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; <span class="number">5</span>; j++)&#123;</div><div class="line">                sum += Integer.<span class="built_in">parseInt</span>(stu[i][j]);</div><div class="line">            &#125;</div><div class="line">                stu[i][<span class="number">5</span>] = Float.toString((<span class="keyword">float</span>)sum / <span class="number">3</span>);</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="keyword">String</span> s;</div><div class="line">        <span class="built_in">try</span>&#123;</div><div class="line">            <span class="built_in">File</span> file = <span class="keyword">new</span> <span class="built_in">File</span>(<span class="string">"E:/home/stu"</span>);        <span class="comment">//要存放的路径</span></div><div class="line">            <span class="built_in">if</span>(file.<span class="built_in">exists</span>())&#123;</div><div class="line">                System.out.<span class="built_in">println</span>(<span class="string">"文件存在"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">else</span>&#123;</div><div class="line">                System.out.<span class="built_in">println</span>(<span class="string">"文件不存在，正在创建...."</span>);</div><div class="line">                file.createNewFile();</div><div class="line">            &#125;</div><div class="line">            BufferedWriter output = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(file));</div><div class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</div><div class="line">                <span class="built_in">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</div><div class="line">                    s = stu[i][j] + <span class="string">"\r\t"</span>;</div><div class="line">                    output.<span class="built_in">write</span>(s);</div><div class="line"><span class="comment">//                  System.out.print(stu[i][j]);        //被注释的这三行用来格式化输出到控制台（屏幕）</span></div><div class="line"><span class="comment">//                  System.out.printf("\t", "");</span></div><div class="line">                &#125;</div><div class="line"><span class="comment">//              System.out.println();</span></div><div class="line">            &#125;</div><div class="line">            output.<span class="built_in">close</span>();</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="string">"数据已写入"</span>);</div><div class="line">        &#125;<span class="built_in">catch</span>(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。&quot;&gt;&lt;a href=&quot;#有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。&quot; class=&quot;headerlink&quot; title=&quot;有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。&quot;&gt;&lt;/a&gt;有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java经典逻辑编程三</title>
    <link href="http://www.sanstylemc.cn/2018/03/16/Java%E7%BB%8F%E5%85%B8%E9%80%BB%E8%BE%91%E7%BC%96%E7%A8%8B%E4%B8%89/"/>
    <id>http://www.sanstylemc.cn/2018/03/16/Java经典逻辑编程三/</id>
    <published>2018-03-16T12:50:51.000Z</published>
    <updated>2018-03-16T13:01:13.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="求1-2-3-…-20-的和"><a href="#求1-2-3-…-20-的和" class="headerlink" title="求1+2!+3!+…+20!的和"></a>求1+2!+3!+…+20!的和</h2><a id="more"></a>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"你想计算到哪个数的阶乘的和"</span>);</div><div class="line">        <span class="keyword">int</span> num = <span class="keyword">in</span>.nextInt();</div><div class="line">         </div><div class="line">        <span class="keyword">long</span> temp = <span class="number">0</span>L;</div><div class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>L;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</div><div class="line">            temp = recursion(i);</div><div class="line">            sum += temp;</div><div class="line">        &#125;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"计算到"</span> + num + <span class="string">"的阶乘和是 "</span> + sum);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">            <span class="comment">//计算某个数 num 的阶乘</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">recursion</span>(<span class="params"><span class="keyword">int</span> num</span>) </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">if</span>(num &gt; <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">return</span> num * recursion(num - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="给一个不多于5位的正整数，要求-一、求它是几位数；二、逆序打印出各位数字"><a href="#给一个不多于5位的正整数，要求-一、求它是几位数；二、逆序打印出各位数字" class="headerlink" title="给一个不多于5位的正整数，要求: 一、求它是几位数；二、逆序打印出各位数字"></a>给一个不多于5位的正整数，要求: 一、求它是几位数；二、逆序打印出各位数字</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">class_name</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        System.out.println(<span class="string">"请输入一个不多于5位的整数"</span>);</div><div class="line">        <span class="built_in">int</span> <span class="built_in">num</span> = <span class="keyword">in</span>.nextInt();</div><div class="line">         </div><div class="line">        <span class="built_in">int</span> n = <span class="number">1</span>;</div><div class="line">        System.out.<span class="built_in">print</span>(<span class="string">"这个数的逆序为："</span>);</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">num</span> / <span class="number">10</span> &gt; <span class="number">0</span>)&#123;</div><div class="line">            n++;</div><div class="line">            <span class="built_in">int</span> tmp = <span class="built_in">num</span> % <span class="number">10</span>;</div><div class="line">            System.out.<span class="built_in">print</span>(tmp);</div><div class="line">            <span class="built_in">num</span> /= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="built_in">num</span>);</div><div class="line">        System.out.println(<span class="string">"这个数共有"</span> + n + <span class="string">"位数"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="请输入星期几的第一个字母来判断以下是星期几，如果第一个字母一样，则继续判断第二个字符。"><a href="#请输入星期几的第一个字母来判断以下是星期几，如果第一个字母一样，则继续判断第二个字符。" class="headerlink" title="请输入星期几的第一个字母来判断以下是星期几，如果第一个字母一样，则继续判断第二个字符。"></a>请输入星期几的第一个字母来判断以下是星期几，如果第一个字母一样，则继续判断第二个字符。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        <span class="keyword">char</span> firstletter, secondletter;     <span class="comment">//存放第一第二个字母</span></div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入第一字母"</span>);</div><div class="line">        String letter = <span class="keyword">in</span>.next();</div><div class="line">         </div><div class="line">        firstletter = letter.charAt(<span class="number">0</span>);</div><div class="line">        <span class="keyword">switch</span>(firstletter)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'m'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'M'</span>: </div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"是星期一"</span>);<span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'w'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'W'</span>:</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"是星期三"</span>);<span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'f'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'F'</span>:</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"是星期五"</span>);<span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'t'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'T'</span>:</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"仅由该字母无法判断出星期几，请输入第二个字母"</span>);</div><div class="line">            letter = <span class="keyword">in</span>.next();</div><div class="line">            secondletter = letter.charAt(<span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span>(secondletter == <span class="string">'u'</span> || secondletter == <span class="string">'U'</span>)&#123;</div><div class="line">                System.<span class="keyword">out</span>.println(<span class="string">"是星期二"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(secondletter == <span class="string">'h'</span> || secondletter == <span class="string">'H'</span>)&#123;</div><div class="line">                System.<span class="keyword">out</span>.println(<span class="string">"是星期四"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                System.<span class="keyword">out</span>.println(<span class="string">"输入错误"</span>);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">case</span> <span class="string">'s'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'S'</span>:</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"仅由该字母无法判断出星期几，请输入第二个字母"</span>);</div><div class="line">            letter = <span class="keyword">in</span>.next();</div><div class="line">            secondletter = letter.charAt(<span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span>(secondletter == <span class="string">'a'</span> || secondletter == <span class="string">'A'</span>)&#123;</div><div class="line">                System.<span class="keyword">out</span>.println(<span class="string">"是星期六"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(secondletter == <span class="string">'u'</span> || secondletter == <span class="string">'U'</span>)&#123;</div><div class="line">                System.<span class="keyword">out</span>.println(<span class="string">"是星期天"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                System.<span class="keyword">out</span>.println(<span class="string">"输入错误"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="求一个3-3矩阵对角线元素之和"><a href="#求一个3-3矩阵对角线元素之和" class="headerlink" title="求一个3*3矩阵对角线元素之和"></a>求一个3*3矩阵对角线元素之和</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        <span class="comment">//输入数据</span></div><div class="line">        <span class="keyword">int</span>[][] mat = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++)&#123;</div><div class="line">                System.<span class="keyword">out</span>.println(<span class="string">"请输入第"</span> + i + <span class="string">"行第"</span> + j + <span class="string">"列的整数"</span>);</div><div class="line">                mat[i <span class="number">-1</span>][j - <span class="number">1</span>] = <span class="keyword">in</span>.nextInt();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="comment">//显示数据</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</div><div class="line">                System.<span class="keyword">out</span>.printf(<span class="string">"%d\t"</span>,mat[i][j]);    <span class="comment">// \t是制表符</span></div><div class="line">        System.<span class="keyword">out</span>.println();</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="comment">//计算对角线元素和</span></div><div class="line">        <span class="comment">//从左上至右下的数归为主对角线，从左下至右上的数归为副对角线。</span></div><div class="line">        <span class="keyword">int</span> sum1 = mat[<span class="number">0</span>][<span class="number">0</span>] + mat[<span class="number">1</span>][<span class="number">1</span>] + mat[<span class="number">2</span>][<span class="number">2</span>];</div><div class="line">        <span class="keyword">int</span> sum2 = mat[<span class="number">2</span>][<span class="number">0</span>] + mat[<span class="number">1</span>][<span class="number">1</span>] + mat[<span class="number">0</span>][<span class="number">2</span>];</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"主对角线上元素和为 "</span> + sum1);</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"副对角线上元素和为 "</span> + sum2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。"><a href="#有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。" class="headerlink" title="有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。"></a>有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">class_name</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        <span class="built_in">int</span>[] ary = &#123;<span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>&#125;;</div><div class="line">        <span class="built_in">int</span>[] changedAry = <span class="keyword">new</span> <span class="built_in">int</span>[ary.length + <span class="number">1</span>];</div><div class="line">         </div><div class="line">        System.out.<span class="built_in">print</span>(<span class="string">"初始数组："</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ary.length; i++)&#123;</div><div class="line">            changedAry[i] = ary[i];</div><div class="line">            System.out.<span class="built_in">print</span>(ary[i] + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">         </div><div class="line">        System.out.println(<span class="string">"请输入一个整数"</span>);</div><div class="line">        <span class="built_in">int</span> <span class="built_in">num</span> = <span class="keyword">in</span>.nextInt();</div><div class="line">         </div><div class="line">        System.out.<span class="built_in">print</span>(<span class="string">"插入数字后的数组："</span>);</div><div class="line">        insort(changedAry, <span class="built_in">num</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    private <span class="keyword">static</span> <span class="keyword">void</span> insort(<span class="built_in">int</span>[] changedAry, <span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; changedAry.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">num</span> &lt; changedAry[i])&#123;         <span class="comment">//找到插入位置</span></div><div class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> j = changedAry.length - <span class="number">1</span>; j &gt; i;j--)&#123;</div><div class="line">                    changedAry[j] = changedAry[j - <span class="number">1</span>];  <span class="comment">//待插入位置及以后的数后退一个位置</span></div><div class="line">                &#125;</div><div class="line">                changedAry[i] = <span class="built_in">num</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">num</span> &gt; changedAry[changedAry.length - <span class="number">1</span>])      <span class="comment">//待插入数大于所有数</span></div><div class="line">            changedAry[changedAry.length - <span class="number">1</span>] = <span class="built_in">num</span>;</div><div class="line">         </div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; changedAry.length; k++)</div><div class="line">            System.out.<span class="built_in">print</span>(changedAry[k] + <span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="将一个数组逆序输出"><a href="#将一个数组逆序输出" class="headerlink" title="将一个数组逆序输出"></a>将一个数组逆序输出</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="comment">//这里直接初始化一个数组</span></div><div class="line">        <span class="keyword">int</span>[] ary = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</div><div class="line"><span class="comment">//      String[] ary = &#123;"i", "love", "you"&#125;;        //字符（串）数组也可以</span></div><div class="line">         </div><div class="line">        System.<span class="keyword">out</span>.print(<span class="string">"数组初始顺序为："</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ary.length; i++)</div><div class="line">            System.<span class="keyword">out</span>.print(ary[i] + <span class="string">" "</span>);</div><div class="line">        System.<span class="keyword">out</span>.println();       <span class="comment">//换行</span></div><div class="line">         </div><div class="line">        System.<span class="keyword">out</span>.print(<span class="string">"数组的逆序为："</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = ary.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">            System.<span class="keyword">out</span>.print(ary[i] + <span class="string">" "</span>);</div><div class="line">        System.<span class="keyword">out</span>.println();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="取一个整数a从右端开始的4-7位。"><a href="#取一个整数a从右端开始的4-7位。" class="headerlink" title="取一个整数a从右端开始的4~7位。"></a>取一个整数a从右端开始的4~7位。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入一个大于等于 7 位的整数"</span>);</div><div class="line">        <span class="keyword">long</span> sum = <span class="keyword">in</span>.nextLong();</div><div class="line">        Long sum1 = <span class="keyword">new</span> Long(sum);      <span class="comment">//Long是 long 的包装类</span></div><div class="line">        String sum2 = sum1.toString();</div><div class="line">        System.<span class="keyword">out</span>.println(sum2.substring(sum2.length() - <span class="number">7</span>, sum2.length() - <span class="number">3</span>));</div><div class="line">    &#125;       <span class="comment">// substring 截取两参数间的字符串</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="打印出杨辉三角形"><a href="#打印出杨辉三角形" class="headerlink" title="打印出杨辉三角形"></a>打印出杨辉三角形</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">class_name</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        <span class="built_in">int</span> i, j;</div><div class="line">        <span class="built_in">int</span>[][] <span class="built_in">num</span> = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>][<span class="number">10</span>];</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">// 把所有的 1 放入数组</span></div><div class="line">            <span class="built_in">num</span>[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">            <span class="built_in">num</span>[i][i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">// 计算数组的其他数</span></div><div class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; i; j++) &#123;</div><div class="line">                <span class="built_in">num</span>[i][j] = <span class="built_in">num</span>[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="built_in">num</span>[i - <span class="number">1</span>][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; </div><div class="line">                        <span class="comment">// k &lt; 4 倍的空格是因为输出每个数字时用了 4 个占位符</span></div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span> * (<span class="number">10</span> - i) / <span class="number">2</span>; k++)       <span class="comment">// 输出空格</span></div><div class="line">                System.out.printf(<span class="string">" "</span>);</div><div class="line"> </div><div class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++) &#123;</div><div class="line">                System.out.printf(<span class="string">"%4d"</span>, <span class="built_in">num</span>[i][j]); <span class="comment">// 每个数字 4 个占位符</span></div><div class="line">            &#125;</div><div class="line">            System.out.println();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。"><a href="#输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。" class="headerlink" title="输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。"></a>输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">class_name</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        System.out.println(<span class="string">"请输入数组长度"</span>);</div><div class="line">        <span class="built_in">int</span> arylen = <span class="keyword">in</span>.nextInt();</div><div class="line">        <span class="built_in">int</span>[] <span class="built_in">num</span> = <span class="keyword">new</span> <span class="built_in">int</span>[arylen];</div><div class="line">         </div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>.length; i++) &#123;</div><div class="line">            System.out.printf(<span class="string">"请输入第 %d 个数："</span>, i + <span class="number">1</span>);</div><div class="line">            <span class="built_in">num</span>[i] = <span class="keyword">in</span>.nextInt();</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        System.out.println(<span class="string">"变化前的数组："</span>);</div><div class="line">        outArray(<span class="built_in">num</span>);</div><div class="line">            <span class="comment">//循环找出最大值、最小值</span></div><div class="line">        <span class="built_in">int</span> max = <span class="built_in">num</span>[<span class="number">0</span>];</div><div class="line">        <span class="built_in">int</span> min = <span class="built_in">num</span>[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">num</span>.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">num</span>[i] &gt; max)</div><div class="line">                max = <span class="built_in">num</span>[i];</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">num</span>[i] &lt; min)</div><div class="line">                min = <span class="built_in">num</span>[i];</div><div class="line">        &#125;</div><div class="line">                <span class="comment">//替换</span></div><div class="line">        <span class="built_in">num</span>[<span class="number">0</span>] = max;</div><div class="line">        <span class="built_in">num</span>[<span class="built_in">num</span>.length - <span class="number">1</span>] = min;</div><div class="line">         </div><div class="line">        System.out.println(<span class="string">"变化后的数组："</span>);</div><div class="line">        outArray(<span class="built_in">num</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    private <span class="keyword">static</span> <span class="keyword">void</span> outArray(<span class="built_in">int</span>[] <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>.length; i++)</div><div class="line">            System.out.<span class="built_in">print</span>(<span class="built_in">num</span>[i] + <span class="string">" "</span>);</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。"><a href="#有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。" class="headerlink" title="有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。"></a>有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">class_name</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">        <span class="built_in">int</span>[] <span class="built_in">num</span> = &#123;<span class="number">14</span>, <span class="number">32</span>, <span class="number">5</span>, <span class="number">42</span>, <span class="number">36</span>, <span class="number">80</span>&#125;;</div><div class="line">        <span class="built_in">int</span>[] temp = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="built_in">num</span>.length];</div><div class="line">         </div><div class="line">        System.out.println(<span class="string">"移动前的数组："</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>.length; i++)&#123;</div><div class="line">            temp[i] = <span class="built_in">num</span>[i];</div><div class="line">            System.out.<span class="built_in">print</span>(<span class="built_in">num</span>[i] + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">         </div><div class="line">        System.out.println(<span class="string">"需要向后移动几个位置"</span>);</div><div class="line">        <span class="built_in">int</span> m = <span class="keyword">in</span>.nextInt();</div><div class="line">         </div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>.length; i++)&#123;</div><div class="line">            <span class="built_in">int</span> t = (i + m) % <span class="built_in">num</span>.length;</div><div class="line">            <span class="built_in">num</span>[t] = temp[i];       <span class="comment">//这行的 t 和 i 互换一下就变成了（1）</span></div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        System.out.println(<span class="string">"移动后的数组："</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i: <span class="built_in">num</span>)</div><div class="line">            System.out.<span class="built_in">print</span>(i + <span class="string">" "</span>);</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;求1-2-3-…-20-的和&quot;&gt;&lt;a href=&quot;#求1-2-3-…-20-的和&quot; class=&quot;headerlink&quot; title=&quot;求1+2!+3!+…+20!的和&quot;&gt;&lt;/a&gt;求1+2!+3!+…+20!的和&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java经典逻辑编程二</title>
    <link href="http://www.sanstylemc.cn/2018/03/16/Java%E7%BB%8F%E5%85%B8%E9%80%BB%E8%BE%91%E7%BC%96%E7%A8%8B%E4%BA%8C/"/>
    <id>http://www.sanstylemc.cn/2018/03/16/Java经典逻辑编程二/</id>
    <published>2018-03-16T07:55:40.000Z</published>
    <updated>2018-03-16T08:22:35.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="【程序11】有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？"><a href="#【程序11】有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？" class="headerlink" title="【程序11】有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？"></a>【程序11】有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</h2><a id="more"></a>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> class_name &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">        <span class="keyword">int</span> i, j, k;     <span class="comment">//分别代表个、十、百位</span></div><div class="line">        <span class="keyword">int</span> num;    <span class="comment">//用来输出符合要求的三位数</span></div><div class="line">        <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;    <span class="comment">//用来统计符合要求的三位数有多少个</span></div><div class="line">         </div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"符合要求的三位数有："</span>);</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(i != j)      <span class="comment">//提前把有重复的部分情况过滤掉，减少运行次数，优化性能</span></div><div class="line">                    <span class="keyword">for</span>(k = <span class="number">1</span>; k &lt;= <span class="number">4</span>; k++)&#123;</div><div class="line">                        <span class="keyword">if</span>(i != k &amp;&amp; j != k)&#123;</div><div class="line">                            num = i + j * <span class="number">10</span> + k * <span class="number">100</span>;</div><div class="line">                            System.out.<span class="keyword">println</span>(num);</div><div class="line">                            <span class="keyword">count</span>++;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"符合要求的三位数共有"</span> + <span class="keyword">count</span> + <span class="string">"个"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="【程序12】一个整数，它加上100后是一个完全平方数，再加上168又是一个完平方数，请问该数是多少？"><a href="#【程序12】一个整数，它加上100后是一个完全平方数，再加上168又是一个完平方数，请问该数是多少？" class="headerlink" title="【程序12】一个整数，它加上100后是一个完全平方数，再加上168又是一个完平方数，请问该数是多少？"></a>【程序12】一个整数，它加上100后是一个完全平方数，再加上168又是一个完平方数，请问该数是多少？</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">long</span> i, j, k;</div><div class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">100000</span>; i ++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(j * j == i + <span class="number">100</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">for</span>(k = j; k &lt; <span class="number">1000</span>; k++)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">if</span>(k * k == i + <span class="number">268</span>)</div><div class="line">                            System.<span class="keyword">out</span>.println(i);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="【程序13】输入年月日，判断这一天是这一年的第几天？"><a href="#【程序13】输入年月日，判断这一天是这一年的第几天？" class="headerlink" title="【程序13】输入年月日，判断这一天是这一年的第几天？"></a>【程序13】输入年月日，判断这一天是这一年的第几天？</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">class_name</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args)</div><div class="line">    &#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">         </div><div class="line">        System.out.println(<span class="string">"请输入年份。"</span>);</div><div class="line">        <span class="keyword">int</span> year = in.nextInt();</div><div class="line">        System.out.println(<span class="string">"请输入月份。"</span>);</div><div class="line">        <span class="keyword">int</span> month = in.nextInt();</div><div class="line">        System.out.println(<span class="string">"请输入日期。"</span>);</div><div class="line">        <span class="keyword">int</span> day = in.nextInt();</div><div class="line">         </div><div class="line">        <span class="keyword">int</span> <span class="keyword">sum</span> = <span class="number">0</span>;;</div><div class="line">        <span class="keyword">switch</span>(month - <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">sum</span> = <span class="number">0</span>; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">sum</span> = <span class="number">31</span>; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">sum</span> = <span class="number">59</span>; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">sum</span> = <span class="number">90</span>; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">sum</span> = <span class="number">120</span>; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">sum</span> = <span class="number">151</span>; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">sum</span> = <span class="number">181</span>; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">7</span>: <span class="keyword">sum</span> = <span class="number">212</span>; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">8</span>: <span class="keyword">sum</span> = <span class="number">243</span>; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">sum</span> = <span class="number">273</span>; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">10</span>: <span class="keyword">sum</span> = <span class="number">304</span>; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">11</span>: <span class="keyword">sum</span> = <span class="number">334</span>; <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>((month &gt; <span class="number">2</span>)&amp;&amp;isLeap(year))</div><div class="line">            System.out.printf(<span class="string">"这天是这年第%d天。"</span>, <span class="keyword">sum</span> + day + <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            System.out.printf(<span class="string">"这天是这年第%d天。"</span>, <span class="keyword">sum</span> + day);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isLeap(<span class="keyword">int</span> year)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(((year % <span class="number">100</span> != <span class="number">0</span>)&amp;&amp;(year % <span class="number">4</span> == <span class="number">0</span>)) || (year % <span class="number">400</span> == <span class="number">0</span>))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="【程序14】输入三个整数x-y-z，请把这三个数由小到大输出。"><a href="#【程序14】输入三个整数x-y-z，请把这三个数由小到大输出。" class="headerlink" title="【程序14】输入三个整数x,y,z，请把这三个数由小到大输出。"></a>【程序14】输入三个整数x,y,z，请把这三个数由小到大输出。</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">class_name</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="type">String</span>[] args) &#123;</div><div class="line">        <span class="type">Scanner</span> <span class="keyword">in</span> = new <span class="type">Scanner</span>(<span class="type">System</span>.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"请输入三个整数"</span>);</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"请输入第1个整数"</span>);</div><div class="line">        int a = <span class="keyword">in</span>.nextInt();</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"请输入第2个整数"</span>);</div><div class="line">        int b = <span class="keyword">in</span>.nextInt();</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"请输入第3个整数"</span>);</div><div class="line">        int <span class="built_in">c</span> = <span class="keyword">in</span>.nextInt();</div><div class="line">        <span class="type">System</span>.out.<span class="built_in">print</span>(<span class="string">"从小到大的顺序为："</span>);</div><div class="line">        <span class="keyword">if</span>(a &lt; b)&#123;</div><div class="line">            <span class="keyword">if</span>(b &lt; <span class="built_in">c</span>)&#123;</div><div class="line">                <span class="type">System</span>.out.printf(<span class="string">"%d&lt;%d&lt;%d"</span>, a, b, <span class="built_in">c</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(a &lt; <span class="built_in">c</span>)</div><div class="line">                    <span class="type">System</span>.out.printf(<span class="string">"%d&lt;%d&lt;%d"</span>, a, <span class="built_in">c</span>, b);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    <span class="type">System</span>.out.printf(<span class="string">"%d&lt;%d&lt;%d"</span>, <span class="built_in">c</span>, a, b);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">c</span> &lt; b)&#123;</div><div class="line">                <span class="type">System</span>.out.printf(<span class="string">"%d&lt;%d&lt;%d"</span>, <span class="built_in">c</span>, b, a);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">c</span> &lt; a)</div><div class="line">                    <span class="type">System</span>.out.printf(<span class="string">"%d&lt;%d&lt;%d"</span>, b, <span class="built_in">c</span>, a);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    <span class="type">System</span>.out.printf(<span class="string">"%d&lt;%d&lt;%d"</span>, b, a, <span class="built_in">c</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="【程序15】排序算法"><a href="#【程序15】排序算法" class="headerlink" title="【程序15】排序算法"></a>【程序15】排序算法</h2><p>以下代码只写了一个输出，所以当你要测试哪个排序算法时记得把调用另外三个排序算法的那几行代码注释掉。如果你想同时测试这四个排序算法，可以在每行调用排序方法的后面加入输出语句就行了。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">class_name</span> </span>&#123;    </div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;    </div><div class="line">        <span class="built_in">int</span>[] <span class="built_in">num</span> = &#123;<span class="number">23</span>, <span class="number">64</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">93</span>, <span class="number">30</span>, <span class="number">51</span>, <span class="number">28</span>, <span class="number">49</span>, <span class="number">66</span>&#125;;    </div><div class="line">   </div><div class="line">        System.out.println(<span class="string">"排序前： "</span>);    </div><div class="line">        showArray(<span class="built_in">num</span>);  </div><div class="line">        System.out.println();  <span class="comment">//换行，控制格式  </span></div><div class="line">        <span class="built_in">num</span> = BubbleSort(<span class="built_in">num</span>);    </div><div class="line"><span class="comment">//      num = ChoiceSort(num);    </span></div><div class="line"><span class="comment">//      num = InsertSort(num);  </span></div><div class="line"><span class="comment">//        num = QuickSort(num, 0, num.length - 1);  </span></div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"排序后："</span>);    </div><div class="line">        showArray(<span class="built_in">num</span>);  </div><div class="line">        System.out.println();  <span class="comment">//换行，控制格式  </span></div><div class="line">    &#125;    </div><div class="line">         </div><div class="line">    private <span class="keyword">static</span> <span class="keyword">void</span> showArray(<span class="built_in">int</span>[] <span class="built_in">num</span>) &#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>.length; i++) &#123;  </div><div class="line">            System.out.<span class="built_in">print</span>(<span class="built_in">num</span>[i] + <span class="string">" "</span>);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    private <span class="keyword">static</span> <span class="built_in">int</span>[] BubbleSort(<span class="built_in">int</span>[] <span class="built_in">num</span>) &#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>.length; i++) &#123;      </div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">num</span>.length - <span class="number">1</span>; j++) &#123;      </div><div class="line">                <span class="keyword">if</span>(<span class="built_in">num</span>[j] &gt; <span class="built_in">num</span>[j + <span class="number">1</span>]) &#123;      </div><div class="line">                       <span class="built_in">int</span> temp = <span class="built_in">num</span>[j];      </div><div class="line">                       <span class="built_in">num</span>[j] = <span class="built_in">num</span>[j + <span class="number">1</span>];      </div><div class="line">                       <span class="built_in">num</span>[j +<span class="number">1</span>] = temp;          </div><div class="line">                &#125;      </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">            <span class="keyword">return</span> <span class="built_in">num</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//插入排序    </span></div><div class="line">    private <span class="keyword">static</span> <span class="built_in">int</span>[] InsertSort(<span class="built_in">int</span>[] <span class="built_in">num</span>) &#123;   </div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">num</span>.length; i++) &#123;    </div><div class="line">            <span class="built_in">int</span> temp = <span class="built_in">num</span>[i];    </div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;    </div><div class="line">                <span class="keyword">if</span>(<span class="built_in">num</span>[j - <span class="number">1</span>] &gt; temp) &#123;    </div><div class="line">                    <span class="built_in">num</span>[j] = <span class="built_in">num</span>[j - <span class="number">1</span>];    </div><div class="line">                    <span class="built_in">num</span>[j - <span class="number">1</span>] = temp;    </div><div class="line">                &#125;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="built_in">num</span>;    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="comment">//优化后的选择排序   </span></div><div class="line">    private <span class="keyword">static</span> <span class="built_in">int</span>[] ChoiceSort(<span class="built_in">int</span>[] <span class="built_in">num</span>) &#123;    </div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;    </div><div class="line">            <span class="built_in">int</span> min = i;    </div><div class="line">            <span class="built_in">int</span> j;    </div><div class="line">            <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; <span class="built_in">num</span>.length; j++) &#123;    </div><div class="line">                <span class="keyword">if</span> (<span class="built_in">num</span>[min] &gt; <span class="built_in">num</span>[j]) &#123;    </div><div class="line">                    min = j;    </div><div class="line">                &#125;    </div><div class="line">            &#125;    </div><div class="line">            <span class="keyword">if</span> (min != i) &#123;    </div><div class="line">                <span class="built_in">int</span> temp = <span class="built_in">num</span>[i];    </div><div class="line">                <span class="built_in">num</span>[i] = <span class="built_in">num</span>[min];    </div><div class="line">                <span class="built_in">num</span>[min] = temp;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="built_in">num</span>;    </div><div class="line">    &#125;  </div><div class="line"><span class="comment">/*   </span></div><div class="line"><span class="comment">  //选择排序 </span></div><div class="line"><span class="comment">    private static int[] ChoiceSort(int[] num) &#123;        </span></div><div class="line"><span class="comment">        for(int i = 0; i &lt; num.length - 1; i++) &#123;     </span></div><div class="line"><span class="comment">            for(int j = i + 1; j &lt; num.length; j++) &#123;     </span></div><div class="line"><span class="comment">                if(num[i] &gt; num[j]) &#123;     </span></div><div class="line"><span class="comment">                    int temp = num[i];     </span></div><div class="line"><span class="comment">                    num[i] = num[j];     </span></div><div class="line"><span class="comment">                    num[j] = temp;     </span></div><div class="line"><span class="comment">                &#125;     </span></div><div class="line"><span class="comment">            &#125;     </span></div><div class="line"><span class="comment">        &#125;     </span></div><div class="line"><span class="comment">        return num;     </span></div><div class="line"><span class="comment">    &#125; </span></div><div class="line"><span class="comment">*/</span>    </div><div class="line">    <span class="comment">// 快速排序    </span></div><div class="line">    private <span class="keyword">static</span> <span class="built_in">int</span>[] QuickSort(<span class="built_in">int</span>[] <span class="built_in">num</span>, <span class="built_in">int</span> i, <span class="built_in">int</span> j) &#123;    </div><div class="line">        <span class="comment">// TODO Auto-generated method stub    </span></div><div class="line">        <span class="keyword">if</span>(i &lt; j) &#123;    </div><div class="line">            <span class="built_in">int</span> middle = portition(<span class="built_in">num</span>, i, j);    </div><div class="line">            QuickSort(<span class="built_in">num</span>, i, middle - <span class="number">1</span>);    </div><div class="line">            QuickSort(<span class="built_in">num</span>, middle + <span class="number">1</span>, j);    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="built_in">num</span>;    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    private <span class="keyword">static</span> <span class="built_in">int</span> portition(<span class="built_in">int</span>[] <span class="built_in">num</span>, <span class="built_in">int</span> low, <span class="built_in">int</span> high) &#123;    </div><div class="line">        <span class="built_in">int</span> i = low, j = high;    </div><div class="line">        <span class="built_in">int</span> temp = <span class="built_in">num</span>[i];    </div><div class="line">        <span class="keyword">if</span> (low &lt; high) &#123;    </div><div class="line">            <span class="keyword">while</span> (i &lt; j) &#123;    </div><div class="line">                <span class="keyword">while</span> ((<span class="built_in">num</span>[j] &gt;= temp) &amp;&amp; (i &lt; j)) &#123;    </div><div class="line">                    j--;    </div><div class="line">                &#125;    </div><div class="line">                <span class="built_in">num</span>[i] = <span class="built_in">num</span>[j];    </div><div class="line">                <span class="keyword">while</span> ((<span class="built_in">num</span>[i] &lt;= temp) &amp;&amp; (i &lt; j)) &#123;    </div><div class="line">                    i++;    </div><div class="line">                &#125;    </div><div class="line">                <span class="built_in">num</span>[j] = <span class="built_in">num</span>[i];    </div><div class="line">            &#125;    </div><div class="line">            <span class="built_in">num</span>[i] = temp;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> i;    </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="【程序16】输出9-9口诀"><a href="#【程序16】输出9-9口诀" class="headerlink" title="【程序16】输出9*9口诀"></a>【程序16】输出9*9口诀</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> total = <span class="number">0</span>;</div><div class="line">                total = i * j;</div><div class="line">                 </div><div class="line">                System.<span class="keyword">out</span>.printf(<span class="string">"%d * %d = %-5d"</span>, j, i, total);</div><div class="line">            &#125;</div><div class="line">            System.<span class="keyword">out</span>.println();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="【程序17】猴子吃桃问题"><a href="#【程序17】猴子吃桃问题" class="headerlink" title="【程序17】猴子吃桃问题"></a>【程序17】猴子吃桃问题</h2><p>猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个 第二天早上又将剩下的桃子吃掉一半，又多吃了<br>一个。以后每天早上都吃了前一天剩下 的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class class_name &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        <span class="built_in">int</span> total = <span class="number">1</span>;</div><div class="line">         </div><div class="line">        <span class="comment">//day = 1的时候，算出来的total其实是第9天有的桃子</span></div><div class="line">        <span class="comment">//day = 9的时候，算出来的total就是第1天的桃子</span></div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> <span class="built_in">day</span> = <span class="number">1</span>; <span class="built_in">day</span> &lt; <span class="number">10</span>; <span class="built_in">day</span>++)&#123;</div><div class="line">            total = <span class="number">2</span> * (total + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"一开始共有 "</span> + total + <span class="string">" 桃子"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="【程序18】乒乓球比赛名单"><a href="#【程序18】乒乓球比赛名单" class="headerlink" title="【程序18】乒乓球比赛名单"></a>【程序18】乒乓球比赛名单</h2><p>两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。<br>a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">class_name</span> &#123;</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span> i, j, k;       <span class="comment">//i,j,k分别是a,b,c的对手</span></div><div class="line">        <span class="keyword">for</span>(i = <span class="string">'X'</span>; i &lt;= <span class="string">'Z'</span>; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(j = <span class="string">'X'</span>; j &lt;= <span class="string">'Z'</span>; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(i != j)&#123;</div><div class="line">                    <span class="keyword">for</span>(k = <span class="string">'X'</span>; k &lt; <span class="string">'Z'</span>; k++)&#123;</div><div class="line">                        <span class="keyword">if</span>(i != k &amp;&amp; j != k)&#123;</div><div class="line">                            <span class="keyword">if</span>(i != <span class="string">'X'</span> &amp;&amp; k != <span class="string">'X'</span> &amp;&amp; k != <span class="string">'Z'</span>)</div><div class="line">                                System.out.<span class="built_in">printf</span>(<span class="string">"a -- %c\nb -- %c\nc -- %c"</span>, i, j, k);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="【程序19】打印图案"><a href="#【程序19】打印图案" class="headerlink" title="【程序19】打印图案"></a>【程序19】打印图案</h2><p>打印出如下图案（菱形）<br><img src="https://raw.githubusercontent.com/sunstady/hexo/8e50dab3e86640e0495cbb228c6116c5201ebd1d/%E9%80%BB%E8%BE%91%E7%BC%96%E7%A8%8B/1.jpg" alt="程序19"><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;          <span class="comment">//1到4行</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= (<span class="number">6</span> - <span class="number">2</span> * i) / <span class="number">2</span>; j++)&#123;       <span class="comment">//每行前面的空格数</span></div><div class="line">                System.<span class="keyword">out</span>.print(<span class="string">" "</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">2</span> * i + <span class="number">1</span>; k++)&#123;</div><div class="line">                System.<span class="keyword">out</span>.print(<span class="string">"*"</span>);          <span class="comment">//每行的*号</span></div><div class="line">            &#125;</div><div class="line">            System.<span class="keyword">out</span>.println();               <span class="comment">//换行</span></div><div class="line">        &#125;</div><div class="line">            <span class="comment">//下半部分</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i + <span class="number">1</span>; j++)&#123;</div><div class="line">                System.<span class="keyword">out</span>.print(<span class="string">" "</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span> - <span class="number">2</span> * i; k++)&#123;</div><div class="line">                System.<span class="keyword">out</span>.print(<span class="string">"*"</span>);</div><div class="line">            &#125;</div><div class="line">            System.<span class="keyword">out</span>.println();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="【程序20】有一分数序列-2-1，3-2，5-3，8-5，13-8…求这个数列的前20项之和。"><a href="#【程序20】有一分数序列-2-1，3-2，5-3，8-5，13-8…求这个数列的前20项之和。" class="headerlink" title="【程序20】有一分数序列: 2/1，3/2，5/3，8/5，13/8…求这个数列的前20项之和。"></a>【程序20】有一分数序列: 2/1，3/2，5/3，8/5，13/8…求这个数列的前20项之和。</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">float</span> i = <span class="number">2.0</span>f, j = <span class="number">1.0</span>f;       <span class="comment">//i为分子，j为分母</span></div><div class="line">        <span class="keyword">float</span> num = <span class="number">2.0</span>f;       <span class="comment">//num是分数，sum是分数的和</span></div><div class="line">        <span class="keyword">float</span> sum = <span class="number">2.0</span>f;</div><div class="line">         </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">1</span>; m &lt; <span class="number">20</span>; m++)&#123;     <span class="comment">//m = 1时，num已经是第2个加数了，所以m &lt; 20</span></div><div class="line">            i = i + j;</div><div class="line">            j = i - j;      <span class="comment">//变化前的 i 赋值给 j</span></div><div class="line">            num = i / j;</div><div class="line">            sum += num;</div><div class="line">        &#125;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"前20个分数的和为 "</span> + sum);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;【程序11】有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？&quot;&gt;&lt;a href=&quot;#【程序11】有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？&quot; class=&quot;headerlink&quot; title=&quot;【程序11】有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？&quot;&gt;&lt;/a&gt;【程序11】有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java经典逻辑编程一</title>
    <link href="http://www.sanstylemc.cn/2018/03/16/Java%E7%BB%8F%E5%85%B8%E9%80%BB%E8%BE%91%E7%BC%96%E7%A8%8B%E4%B8%80/"/>
    <id>http://www.sanstylemc.cn/2018/03/16/Java经典逻辑编程一/</id>
    <published>2018-03-16T07:46:57.000Z</published>
    <updated>2018-03-18T01:04:30.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="【程序1】兔子总数问题"><a href="#【程序1】兔子总数问题" class="headerlink" title="【程序1】兔子总数问题"></a>【程序1】兔子总数问题</h2><p>有一对兔子，从出生后第3个月起 每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？<br><a id="more"></a><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">tuzi</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">       </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"你想知道第几个月的兔子的数量"</span>);</div><div class="line">        <span class="keyword">int</span> month = <span class="keyword">in</span>.nextInt(); <span class="comment">//使用输入流对象，调用nextInt()方法输入一个整数到month中</span></div><div class="line">         </div><div class="line">        <span class="keyword">int</span>[] mon = <span class="keyword">new</span> <span class="keyword">int</span>[month];</div><div class="line">        <span class="keyword">if</span>(month &lt; <span class="number">3</span>)&#123;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"第"</span> + month + <span class="string">"个月有 1 对兔子，共 2 只"</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">        	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; month; i++)&#123;</div><div class="line">                mon[<span class="number">0</span>] = mon[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">                mon[i] = mon[i - <span class="number">1</span>] + mon[i - <span class="number">2</span>];</div><div class="line">                System.<span class="keyword">out</span>.printf(<span class="string">"第 %d 个月有 %d 对兔子，共 %d 只兔子\n"</span>, i + <span class="number">1</span>, mon[i], <span class="number">2</span> * mon[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;     </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="【程序2】判断两数之间素数个数"><a href="#【程序2】判断两数之间素数个数" class="headerlink" title="【程序2】判断两数之间素数个数"></a>【程序2】判断两数之间素数个数</h2><p>判断101-200之间有多少个素数，并输出所有素数。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.print(<span class="string">"101--200中的素数有："</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">101</span>; i &lt;= <span class="number">200</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(isPrime(i))</div><div class="line">                System.<span class="keyword">out</span>.print(<span class="string">" "</span> + i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">//isPrime方法用来判断一个数是否是素数</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> boolean <span class="title">isPrime</span>(<span class="params"><span class="keyword">int</span> i</span>) </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= Math.sqrt(i); j++)&#123;</div><div class="line">            <span class="keyword">if</span>(i % j == <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="【程序3】打印”水仙花数”"><a href="#【程序3】打印”水仙花数”" class="headerlink" title="【程序3】打印”水仙花数”"></a>【程序3】打印”水仙花数”</h2><p>所谓”水仙花数”是指一个三位数，其各位数字立方和等于该数本身。<br>例如: 153是一个”水仙花数”，因为153=1的三次方+5的三次方+3的三次方。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">class_name</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">         </div><div class="line">        System.out.<span class="built_in">print</span>(<span class="string">"水仙花数有："</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">100</span>; <span class="built_in">num</span> &lt; <span class="number">1000</span>; <span class="built_in">num</span>++)&#123;</div><div class="line">            <span class="keyword">if</span>(isNarcissisticNum(<span class="built_in">num</span>))</div><div class="line">                System.out.println(<span class="string">" "</span> + <span class="built_in">num</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">//一个判断正整数是否为水仙花数的方法</span></div><div class="line">    private <span class="keyword">static</span> boolean isNarcissisticNum(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="built_in">int</span> a = <span class="built_in">num</span> / <span class="number">100</span>;          <span class="comment">//分离出百位 a</span></div><div class="line">        <span class="built_in">int</span> b = (<span class="built_in">num</span> / <span class="number">10</span>) % <span class="number">10</span>;    <span class="comment">//分离出十位 b</span></div><div class="line">        <span class="built_in">int</span> c = <span class="built_in">num</span> % <span class="number">10</span>;           <span class="comment">//分离出个位 c</span></div><div class="line">        <span class="built_in">int</span> sum = a * a * a + b * b * b + c * c * c;</div><div class="line">        <span class="keyword">if</span>(sum == <span class="built_in">num</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="【程序4】正整数分解质因数"><a href="#【程序4】正整数分解质因数" class="headerlink" title="【程序4】正整数分解质因数"></a>【程序4】正整数分解质因数</h2><p>将一个正整数分解质因数。例如: 输入90，打印出90=<code>2*3*3*5</code>。<br>(1)如果这个质数恰等于n，则说明分解质因数的过程已经结束，打印出即可。<br>(2)如果n&gt;k，但n能被k整除，则打印出k的值，并用n除以k的商，作为新的正整数n，重复执行第一步。<br>(3)如果n不能被k整除，则用k+1作为k的值，重复执行第一步。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">class_name</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        System.out.println(<span class="string">"请输入一个大于 3 的正整数"</span>);</div><div class="line">        <span class="built_in">int</span> <span class="built_in">num</span> = input.nextInt();</div><div class="line">        System.out.<span class="built_in">print</span>(<span class="built_in">num</span> + <span class="string">"的素因数:"</span>);</div><div class="line">        factor(<span class="built_in">num</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    private <span class="keyword">static</span> <span class="keyword">void</span> factor(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">2</span>; i &lt;= Math.sqrt(<span class="built_in">num</span>); i++)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">num</span> % i == <span class="number">0</span>)&#123;</div><div class="line">                System.out.<span class="built_in">print</span>(i + <span class="string">" * "</span>);</div><div class="line">                <span class="keyword">if</span>(isPrime(<span class="built_in">num</span> / i))&#123;</div><div class="line">                    System.out.println(<span class="built_in">num</span> / i);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    factor(<span class="built_in">num</span> / i);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    private <span class="keyword">static</span> boolean isPrime(<span class="built_in">int</span> i) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">2</span>; j &lt;= Math.sqrt(i); j++)&#123;</div><div class="line">            <span class="keyword">if</span>(i % j == <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="【程序5】条件运算符的嵌套"><a href="#【程序5】条件运算符的嵌套" class="headerlink" title="【程序5】条件运算符的嵌套"></a>【程序5】条件运算符的嵌套</h2><p>利用条件运算符的嵌套来完成此题: 学习成绩&gt;=90分的同学用A表示，60-89分之间用B表示，60分以下的用C表示。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入你的分数"</span>);</div><div class="line">        <span class="keyword">int</span> score = <span class="keyword">in</span>.nextInt();</div><div class="line">         </div><div class="line">        <span class="keyword">if</span>(score &gt;= <span class="number">90</span>)&#123;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"A  恭喜"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">60</span>)&#123;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"B  不错"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"C  加油"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="【程序6】最大公约数和最小公倍数"><a href="#【程序6】最大公约数和最小公倍数" class="headerlink" title="【程序6】最大公约数和最小公倍数"></a>【程序6】最大公约数和最小公倍数</h2><p>输入两个正整数m和n，求其最大公约数和最小公倍数。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入第一个数"</span>);</div><div class="line">        <span class="keyword">int</span> a = <span class="keyword">in</span>.nextInt();</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入第二个数"</span>);</div><div class="line">        <span class="keyword">int</span> b = <span class="keyword">in</span>.nextInt();</div><div class="line">         </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"这两个数的最大公约数是 "</span> + MaxCommonDivisor(a, b));</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"这两个数的最小公倍数是 "</span> + MinCommonMultiple(a, b));</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">MaxCommonDivisor</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>) </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">if</span>(a &lt; b)&#123;</div><div class="line">            <span class="keyword">int</span> temp = a;</div><div class="line">            a = b;</div><div class="line">            b = temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(a % b != <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">int</span> temp = a % b;</div><div class="line">            a = b;</div><div class="line">            b = temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> b;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">MinCommonMultiple</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>) </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> a * b / MaxCommonDivisor(a, b);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="【程序7】统计英文字母、空格、数字和其它字符个数"><a href="#【程序7】统计英文字母、空格、数字和其它字符个数" class="headerlink" title="【程序7】统计英文字母、空格、数字和其它字符个数"></a>【程序7】统计英文字母、空格、数字和其它字符个数</h2><p>输入一行字符，分别统计出其中英文字母、空格、数字和其它字符个数。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Input one sentance."</span>);</div><div class="line">        String s = <span class="keyword">in</span>.nextLine();</div><div class="line">         </div><div class="line">        <span class="keyword">int</span> letter = <span class="number">0</span>, symbol = <span class="number">0</span>, space = <span class="number">0</span>, number = <span class="number">0</span>;</div><div class="line">        <span class="keyword">char</span>[] strArray = s.toCharArray();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strArray.length; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">char</span> c =  strArray[i];</div><div class="line">            <span class="keyword">if</span>((<span class="string">'a'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'z'</span>) || (<span class="string">'A'</span> &lt;= c &amp;&amp; c  &lt;= <span class="string">'Z'</span>))</div><div class="line">                letter++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">48</span> &lt;= c  &amp;&amp; c &lt;= <span class="number">57</span>)      <span class="comment">//注意！数字0-9的ASCII码是48-57</span></div><div class="line">                number++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">' '</span>)</div><div class="line">                space++;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                symbol++;</div><div class="line">        &#125;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"This sentance have "</span> + letter + <span class="string">" letters, "</span>);</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"have "</span>+ number + <span class="string">" numbers, "</span>);</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"have "</span> + space + <span class="string">" spaces, "</span> + <span class="string">"and "</span> + symbol + <span class="string">" symbols."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="【程序8】求s-a-aa-aaa-aaaa-…的值"><a href="#【程序8】求s-a-aa-aaa-aaaa-…的值" class="headerlink" title="【程序8】求s=a+aa+aaa+aaaa+…的值"></a>【程序8】求s=a+aa+aaa+aaaa+…的值</h2><p>求s=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222(此时共有4个数相加)，几个数相加有键盘控制。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入相加的基数"</span>);</div><div class="line">        <span class="keyword">int</span> n = input.nextInt();</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入要相加的个数"</span>);</div><div class="line">        <span class="keyword">int</span> i = input.nextInt();</div><div class="line">         </div><div class="line">        <span class="keyword">long</span> total = <span class="number">0</span>L;</div><div class="line">        <span class="keyword">long</span> temp = n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</div><div class="line">            total += temp;</div><div class="line">            temp = temp * <span class="number">10</span> + n;</div><div class="line">        &#125;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"和为"</span> + total);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="【程序9】完数"><a href="#【程序9】完数" class="headerlink" title="【程序9】完数"></a>【程序9】完数</h2><p>一个数如果恰好等于它的因子之和，这个数就称为”完数”。例如: 6=1+2+3。编程: 找出1000以内的所有完数。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">class_name</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">        System.out.println(<span class="string">"1000以内的完数有："</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1000</span>; i++)&#123;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">sum</span>= <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j= <span class="number">1</span>; j&lt; i; j++) &#123;</div><div class="line">        	<span class="keyword">if</span> (i% j== <span class="number">0</span>) &#123;</div><div class="line">	            <span class="keyword">sum</span>+= j;</div><div class="line">		&#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">sum</span>== i) &#123;</div><div class="line">		System.out.println(i);</div><div class="line">	    &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="【程序10】球落地"><a href="#【程序10】球落地" class="headerlink" title="【程序10】球落地"></a>【程序10】球落地</h2><p>一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在 第10次落地时，共经过多少米？第10次反弹多高？<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">class_name</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        Scanner <span class="keyword">in</span> = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</div><div class="line">         </div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入原始高度。"</span>);</div><div class="line">        <span class="keyword">double</span> s = <span class="keyword">in</span>.nextDouble();</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"要求第几次落地后的距离。"</span>);</div><div class="line">        <span class="keyword">int</span> n = <span class="keyword">in</span>.nextInt();</div><div class="line">         </div><div class="line">        <span class="keyword">double</span> total = s;</div><div class="line">        System.<span class="keyword">out</span>.printf(<span class="string">"第%d次落地后共走的距离是："</span> , n);</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            System.<span class="keyword">out</span>.println(total);</div><div class="line">            System.<span class="keyword">out</span>.printf(<span class="string">"第%d次反弹的距离是%f。"</span>, n, s / <span class="number">2</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</div><div class="line">            &#123;</div><div class="line">                s = s / <span class="number">2</span>;</div><div class="line">                total += <span class="number">2</span> * s;   <span class="comment">//一上一下共两倍的弹跳距离</span></div><div class="line">            &#125;</div><div class="line">            System.<span class="keyword">out</span>.print(total);</div><div class="line">            System.<span class="keyword">out</span>.println();</div><div class="line">            System.<span class="keyword">out</span>.printf(<span class="string">"第%d次反弹的距离是%f。"</span>, n, s / <span class="number">2</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;【程序1】兔子总数问题&quot;&gt;&lt;a href=&quot;#【程序1】兔子总数问题&quot; class=&quot;headerlink&quot; title=&quot;【程序1】兔子总数问题&quot;&gt;&lt;/a&gt;【程序1】兔子总数问题&lt;/h2&gt;&lt;p&gt;有一对兔子，从出生后第3个月起 每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
</feed>
