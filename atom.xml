<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sanstyle</title>
  <subtitle>功有所不全 才有所不任 力有所不足</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sanstylemc.cn/"/>
  <updated>2018-07-26T07:42:22.323Z</updated>
  <id>http://www.sanstylemc.cn/</id>
  
  <author>
    <name>MC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu 18.04搭建sqli-labs</title>
    <link href="http://www.sanstylemc.cn/2018/07/26/Ubuntu-18-04%E6%90%AD%E5%BB%BAsqli-labs/"/>
    <id>http://www.sanstylemc.cn/2018/07/26/Ubuntu-18-04搭建sqli-labs/</id>
    <published>2018-07-26T07:41:38.000Z</published>
    <updated>2018-07-26T07:42:22.323Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;近来无事，重温了以前所学。<br>&nbsp;&nbsp;&nbsp;&nbsp;Sqli-labs是一个印度程序员写的，用来学习sql注入的一个游戏教程，网上将sqli-labs大多安装在windows上，故梳理下在Ubuntu上安装的教程。Ubuntu版本RT。<br><a id="more"></a></p>
<p>安装sqli-labs之前，需先安装相应的php环境。</p>
<h2 id="安装PHP环境"><a href="#安装PHP环境" class="headerlink" title="安装PHP环境"></a>安装PHP环境</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo apt-get <span class="keyword">install</span> apache2</div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> php(版本为<span class="number">7</span>)</div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> mysql-<span class="keyword">server</span></div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> libapache2-<span class="keyword">mod</span>-php(一些基本模块)</div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> php-gd</div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> php-curl</div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> libapache2-<span class="keyword">mod</span>-auth-mysql</div><div class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> php-mysql</div></pre></td></tr></table></figure>
<p>测试:<br>浏览器打开: <code>http://localhost</code> , 出现Apache的界面，说明环境搭建成功。<br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/1.png?raw=true" alt="1"><br>默认目录：<br>Apache安装完成后的默认网站根目录是<code>/var/www/html</code> 。这个可以修改，也可以不修改。<br>若想修改可以按照以下步骤进行修改：<br><code>sudo vim /etc/apache2/apache2.conf</code><br>将<code>/var/www/</code>修改为<code>/home/www</code>。<br><code>sudo vim /etc/apache2/sites-available/000-default.conf</code><br>将<code>DocumentRoot /var/www/html</code>的位置改为<code>/home/www</code>即可。<br>重启Apache服务器：<br><code>sudo service apache2 restart</code></p>
<h2 id="安装sqli-labs"><a href="#安装sqli-labs" class="headerlink" title="安装sqli-labs"></a>安装sqli-labs</h2><p>下载地址<code>https://github.com/Audi-1/sqli-labs</code><br>我用的是git下载，需要先安装git。<br><code>sudo apt-get install git</code><br>安装之后，使用git克隆即可。<br><code>git clone https://github.com/Audi-1/sqli-labs.git</code><br>下载后，修改<code>sql-connections</code>文件夹中的<code>db-creds.inc</code>文件，填入mysql数据库的用户名和密码，并将文件夹放在网站根目录下，我放的位置是<code>/var/www/html</code><br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/2.png?raw=true" alt="2"><br>可以看到我的用户名并不是<code>root</code>，原因是创建了一个用户，创建用户的方法，请看<a href="http://sanstylemc.cn/2017/10/28/%E6%9C%AC%E5%9C%B0%E8%BF%9E%E6%8E%A5%E8%85%BE%E8%AE%AF%E4%BA%91MySQL/" target="_blank" rel="external">这里</a></p>
<p>浏览器打开：<code>http://localhost/sqli-labs</code>出现如下界面：<br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/3.png?raw=true" alt="3"><br>点开第一个链接，新建数据库，若出现如下界面，则说明成功！<br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/4.png?raw=true" alt="4"><br>如果只出现一行这个：<br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/5.png?raw=true" alt="5"><br>表明没有创建成功。<br>此时要进入到<code>/var/www/html/sqli-labs/sql-connections</code><br>使用<code>ls</code>命令可以看到此目录有<code>setup-db.php</code><br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/6.png?raw=true" alt="6"><br>这个php文件和我们所点的第一个链接执行的php文件是一个。<br>此时在这个目录下, 单独运行这个php文件<br><code>php setup-db.php</code><br>会发现运行报错<br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/7.png?raw=true" alt="7"><br>是在第29行，<code>mysql_connect()</code>附近。<br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/8.png?raw=true" alt="8"><br>原因是从PHP5.0开始就不推荐使用mysql_connect()函数，到了PHP7.0则直接废弃了该函数，他的替代品是<code>mysqli_connect()</code><br>用法是<code>$con=mysqli_connect(&quot;localhost&quot;, &quot;my_user&quot;, &quot;my_password&quot;, &quot;my_db&quot;);</code><br>所以我们要将<code>setup-db.php</code>文件中的<code>mysql_conect()</code>改为<code>mysqli_connect()</code><br><img src="https://github.com/sunstady/hexo/blob/master/sqli-labs/9.png?raw=true" alt="9"><br>除此之外，还要修改<code>mysql_query()</code>参数为<code>($con,$sql)</code><br>所以修改完后的就是<code>mysqli_query($con,$sql)</code><br>修改完后重启下Apache<br><code>sudo service apache2 restart</code><br>再次打开<code>http://localhost/sqli-labs</code><br>点击第一个链接，就会出现成功的画面。</p>
<blockquote>
<p>注：由于github上的sqli-labs是用php5写的，有很多地方与php7不兼容，所以建议安装php5来使用此环境。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;近来无事，重温了以前所学。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Sqli-labs是一个印度程序员写的，用来学习sql注入的一个游戏教程，网上将sqli-labs大多安装在windows上，故梳理下在Ubuntu上安装的教程。Ubuntu版本RT。&lt;br&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://www.sanstylemc.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>卸载php</title>
    <link href="http://www.sanstylemc.cn/2018/07/26/%E5%8D%B8%E8%BD%BDphp/"/>
    <id>http://www.sanstylemc.cn/2018/07/26/卸载php/</id>
    <published>2018-07-26T07:21:54.000Z</published>
    <updated>2018-07-26T07:22:44.493Z</updated>
    
    <content type="html"><![CDATA[<p>RT<br><a id="more"></a><br>一、删除php的相关包及配置。<br><code>sudo apt-get autoremove php7*</code><br><img src="https://github.com/sunstady/hexo/blob/master/%E5%8D%B8%E8%BD%BDphp/1.png?raw=true" alt="1"><br>二、删除关联<br><code>sudo find /etc -name &quot;*php*&quot; |xargs rm -rf</code><br><img src="https://github.com/sunstady/hexo/blob/master/%E5%8D%B8%E8%BD%BDphp/2.png?raw=true" alt="2"><br>如果提示权限不够，需要先进入root<br>输入<code>su</code><br>根据提示输入密码<br>此时再运行一次，即可删除<br><img src="https://github.com/sunstady/hexo/blob/master/%E5%8D%B8%E8%BD%BDphp/3.png?raw=true" alt="3"><br>三、清楚dept列表<br><img src="https://github.com/sunstady/hexo/blob/master/%E5%8D%B8%E8%BD%BDphp/4.png?raw=true" alt="4"><br>四、检查是否卸载干净(无返回就是卸载干净)<br><code>dpkg -l | grep php7</code><br><img src="https://github.com/sunstady/hexo/blob/master/%E5%8D%B8%E8%BD%BDphp/5.png?raw=true" alt="5"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RT&lt;br&gt;
    
    </summary>
    
    
      <category term="软件" scheme="http://www.sanstylemc.cn/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>锁问题</title>
    <link href="http://www.sanstylemc.cn/2018/07/25/%E9%94%81%E9%97%AE%E9%A2%98/"/>
    <id>http://www.sanstylemc.cn/2018/07/25/锁问题/</id>
    <published>2018-07-25T06:22:19.000Z</published>
    <updated>2018-07-25T06:22:56.124Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源(如CPU、RAM、I/O等)的争用以外，数据也是一种供许多用户共享的资源。锁冲突是影响数据库并发访问性能的一个重要因素。<br><a id="more"></a></p>
<h2 id="MySQL锁概述"><a href="#MySQL锁概述" class="headerlink" title="MySQL锁概述"></a>MySQL锁概述</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。比如，M有ISAM和MEMORY存储引擎采用的是表级锁(table-level locking); BDB存储引擎采用的是页面锁(page-level locking), 但也支持表级锁; InnoDB存储引擎既支持行级锁，也支持表级锁，但默认情况下是采用行级锁。</p>
<p>MySQL这3种锁的特性可大致归纳如下。</p>
<ul>
<li>表级锁：开销小，加锁快，不会出现死锁，锁定力度大，发生锁冲突的概率最高，并发度最低。</li>
<li>行级锁：开销大，加锁慢，会出现死锁，锁定力度最小，发生锁冲突的概率最低，并发度也最高。</li>
<li>页面锁：开销和加锁时间界于表锁和行锁之间，会出现死锁，锁定力度界于表锁和行锁之间，并发度一般。</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;仅从锁的角度来看：表级锁更适合于以查询为主，只有少量按索引条件更新数据的引用，如Web应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理(OLTP)系统。</p>
<h2 id="什么时候使用表锁"><a href="#什么时候使用表锁" class="headerlink" title="什么时候使用表锁"></a>什么时候使用表锁</h2><p>对于InnoDB表，在绝大部分情况下都应该使用行级锁，因为事务和行锁往往是我们之所以选择InnoDB表的理由。但在个别特殊事务中，也可以考虑使用表级锁。</p>
<ul>
<li>第一种情况是：事务需要更新大部分或全部数据，表又比较大，如果使用默认的行锁，不仅这个事务执行效率低，而且可能造成其他事务长时间锁等待和锁冲突，这种情况下可以考虑使用表锁来提高该事务的执行速度。</li>
<li>第二种情况是：事务涉及多个表，比较复杂，很可能引起死锁，造成大量事务回滚。这种情况也可以考虑一次性锁定事务涉及的表，从而避免死锁、减少数据库因事务回滚带来的开销。<br>当然，应用中这两种事务不能太多，否则，就应该考虑使用MyISAM表了。</li>
</ul>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;MyISAM表锁是deadlock free的，这是因为MyISAM总是一次获得所需的全部锁，要么全部满足，要么等待，因此不会出现死锁。但在InnpDB中，除单个SQL组成的事务外，锁是逐步获得的，这就决定在InnoDB中发生死锁是可能的。<br>&nbsp;&nbsp;&nbsp;&nbsp;发生死锁后，InnoDB一般都能自动检测到，并使一个事务释放锁并回退，另一个事务获得锁，继续完成事务。但在涉及外部锁，或涉及表锁的情况下，InnoDB并不能完全自动检测到死锁，这需要通过设置锁等待超时参数innodb_lock_wait_timeout来解决。需要说明的是，这个参数并不是只用来解决死锁问题，在并发访问比较高的情况下，如果大量事务因无法立即获得所需的锁而挂起，会占用大量计算机资源，造成严重的性能问题，甚至拖垮数据库。可以通过设置合适的锁等待超时阈(yu四声)值,避免这种情况发生。<br>1、在应用中，如果不同的程序会并发存取多个表，应尽量约定以相同的顺序来访问表，这样可以大大降低产生死锁的机会。<br>2、在程序中以批量方式处理数据的时候，如果事先对数据排序，保证每个线程按固定的顺序来处理记录，也可以大大降低出现死锁的可能。<br>3、在事务中，如果要更新记录，应该直接申请足够级别的锁，即排他锁，而不应先申请共享锁，更新时再申请排他锁，因为当用户申请排他锁时，其他事务可能又已经获得了相同记录的共享锁，从而造成锁冲突，甚至死锁。<br>4、在REPEATABLE-READ隔离级别下，如果两个线程同时对相同条件记录用SELECT…FOR UPDATE加排他锁，在没有符合该条件记录情况下，两个线程都会加锁成功。程序发现记录尚不存在，就试图插入一条新记录，如果两个线程都这么做，就会出现死锁。这种情况下，将隔离级别改成READ COMMITTED，就可避免问题。<br>5、当隔离级别为READ COMMITTED时，如果两个线程都先执行SELECT…FOR UPDATE，判断是否存在符合条件的记录，如果没有，就插入记录。此时，只有一个线程能插入成功，另一个线程会出现锁等待， 当第一个线程提交后，第二个线程会因主键重出错，但虽然这个线程出错了，却会获得一个排他锁！这时如果有第三个线程又来申请排他锁，也会出现死锁。<br>&nbsp;&nbsp;&nbsp;&nbsp;对于这种情况，可以直接做插入操作，然后再捕获主键重异常，或者在遇到主键重错误时，总是执行ROLLBACK释放获得的排他锁。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源(如CPU、RAM、I/O等)的争用以外，数据也是一种供许多用户共享的资源。锁冲突是影响数据库并发访问性能的一个重要因素。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>procedure与function</title>
    <link href="http://www.sanstylemc.cn/2018/07/25/procedure%E4%B8%8Efunction/"/>
    <id>http://www.sanstylemc.cn/2018/07/25/procedure与function/</id>
    <published>2018-07-25T03:10:07.000Z</published>
    <updated>2018-07-25T03:10:48.973Z</updated>
    
    <content type="html"><![CDATA[<p><code>procedure(存储过程)</code>：存储在数据库中执行某种功能的程序，就是把完成某种功能的程序存储起来，当我们想完成这个功能时直接调用存储方法，提高执行效率，因为他只编译一次。<br><code>function(函数)</code>: RT<br><a id="more"></a></p>
<h2 id="procedure与function的创建语法图"><a href="#procedure与function的创建语法图" class="headerlink" title="procedure与function的创建语法图"></a>procedure与function的创建语法图</h2><p><img src="https://github.com/sunstady/hexo/blob/master/procedure/1.png?raw=true" alt="1"></p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;函数必须有且仅有一个返回值，且必须指定返回值数据类型(返回值类型目前仅仅支持字符串、数值类型)。存储过程可以没有返回值，也可以有返回值，甚至可以有多个返回值，所有的返回值需要使用out或者inout参数定义。<br>&nbsp;&nbsp;&nbsp;&nbsp;函数体内可以使用select…into语句为某个变量赋值。<br>&nbsp;&nbsp;&nbsp;&nbsp;函数是可以嵌入在sql中使用的，可以在select中调用，而存储过程要让sql的query可以执行，需要把mysql_real_connect的最后一个参数设置为CLIENT_MULTI_STATEMENTS。<br>&nbsp;&nbsp;&nbsp;&nbsp;函数限制比较多，比如不能用临时表，只能用表变量，还有一些函数都不可用等等，而存储过程的限制相对就比较少。<br>1、一般来说，存储过程实现的功能要复杂一点，而函数的实现的功能针对性比较强。存储过程，功能强大，可以执行包括修改表等一系列数据库操作；用户定义函数不能用于执行一组修改全局数据库状态的操作。<br>2、对于存储过程来说可以返回参数，如记录集，而函数只能返回值或者表对象。函数只能返回一个变量；而存储过程可以返回多个。存储过程的参数可以有IN,OUT,INOUT三种类型，而函数只能有IN类~~存储过程声明时不需要返回类型，而函数声明时需要描述返回类型，且函数体中必须包含一个有效的RETURN语句。<br>3、存储过程，可以使用非确定函数，不允许在用户定义函数主体中内置非确定函数。<br>4、存储过程一般是作为一个独立的部分来执行（ EXECUTE 语句执行），而函数可以作为查询语句的一个部分来调用（SELECT调用），由于函数可以返回一个表对象，因此它可以在查询语句中位于FROM关键字的后面。 SQL语句中不可用存储过程，而可以使用函数。<br>&nbsp;&nbsp;&nbsp;&nbsp;当存储过程和函数被执行的时候，SQL Manager会到procedure cache中去取相应的查询语句，如果在procedure cache里没有相应的查询语句，SQL Manager就会对存储过程和函数进行编译。<br>&nbsp;&nbsp;&nbsp;&nbsp;Procedure cache中保存的是执行计划 (execution plan) ，当编译好之后就执行procedure cache中的execution plan，之后SQL SERVER会根据每个execution plan的实际情况来考虑是否要在cache中保存这个plan，评判的标准一个是这个execution plan可能被使用的频率；其次是生成这个plan的代价，也就是编译的耗时。保存在cache中的plan在下次执行时就不用再编译了。</p>
<h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">sp_name</span><span class="params">()</span></span></div><div class="line"><span class="function"><span class="title">begin</span></span></div><div class="line"><span class="function">...</span></div><div class="line"><span class="function"><span class="title">end</span></span></div></pre></td></tr></table></figure>
<h2 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">call</span> sp_name()</div></pre></td></tr></table></figure>
<p>注：存储过程名称后面必须加括号，哪怕该存储过程没有参数传递。</p>
<h2 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h2><figure class="highlight cal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop <span class="function"><span class="keyword">procedure</span> <span class="title">sp_name</span></span></div></pre></td></tr></table></figure>
<p>注：不能在一个存储过程中删除另一个存储过程，只能调用另一个存储过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;procedure(存储过程)&lt;/code&gt;：存储在数据库中执行某种功能的程序，就是把完成某种功能的程序存储起来，当我们想完成这个功能时直接调用存储方法，提高执行效率，因为他只编译一次。&lt;br&gt;&lt;code&gt;function(函数)&lt;/code&gt;: RT&lt;br&gt;
    
    </summary>
    
    
      <category term="失误锦集" scheme="http://www.sanstylemc.cn/tags/%E5%A4%B1%E8%AF%AF%E9%94%A6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入及防护</title>
    <link href="http://www.sanstylemc.cn/2018/07/25/SQL%E6%B3%A8%E5%85%A5%E5%8F%8A%E9%98%B2%E6%8A%A4/"/>
    <id>http://www.sanstylemc.cn/2018/07/25/SQL注入及防护/</id>
    <published>2018-07-25T02:35:33.000Z</published>
    <updated>2018-07-25T02:47:08.108Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;SQL注入(SQL Injection)是利用某些数据库的外部接口将数据插入到实际的数据库操作语言(SQL)当中，从而达到入侵数据库乃至操作系统的目的。它的产生主要是由于程序对用户输入的数据没有进行严格的过滤，导致非法数据库查询语句的执行。<br><a id="more"></a></p>
<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;下面的用户登陆验证程序就是SQL注入的一个例子(以PHP程序举例)<br>创建用户表user:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</div><div class="line">userid <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</div><div class="line">username <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line"><span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">primary <span class="keyword">key</span>(userid)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>给用户表user添加一条用户记录:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">'root'</span>, <span class="string">'root'</span>);</div></pre></td></tr></table></figure></p>
<p>验证用户root登录的localhost服务器：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="php">    $servername= <span class="string">"localhost"</span>;</span></div><div class="line"><span class="php">    $dbusername= <span class="string">"root"</span>;</span></div><div class="line"><span class="php">    $dbpassword= <span class="string">""</span>;</span></div><div class="line"><span class="php">    $dbname= <span class="string">"injection"</span>;</span></div><div class="line"><span class="php">    mysql_connect($servername, $dbusername, $dbpassword) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">"数据库连接失败"</span>);</span></div><div class="line"><span class="php">    $sql= <span class="string">"select * from user where username= '$username' and password= '$password'"</span>;</span></div><div class="line"><span class="php">    $result= mysql_db_query($dbname, $sql);</span></div><div class="line"><span class="php">    $userinfo= mysql_fetch_array($result);</span></div><div class="line"><span class="php">    <span class="keyword">if</span>(<span class="keyword">empty</span>($userinfo))&#123;</span></div><div class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"登录失败"</span>;</span></div><div class="line"><span class="php">    &#125;<span class="keyword">else</span> &#123;</span></div><div class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"登录成功"</span>;</span></div><div class="line"><span class="php">    &#125;</span></div><div class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;SQL Query:$sql&lt;/p&gt;"</span>;</span></div><div class="line"><span class="php"><span class="meta">?&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>然后提交如下URL：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/injection/u</span>ser.php?username=root<span class="string">' or '</span><span class="number">1</span>=<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>结果发现，这个URL可以成功登陆。同样也可以利用SQL的注释语句实现SQL注入，例如：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span><span class="comment">//127.0.0.1/injection/user.php?username=root'/*</span></div><div class="line"><span class="symbol">http:</span><span class="comment">//127.0.0.1/injection/user.php?username=root'#</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;因为在SQL语句中，” /* “或者” # “都可以将后面的语句注释掉。这样上述语句就可以通过这两个注释符中任意一个将后面的语句给注释掉，结果导致只根据用户名而没有密码的URL都成功进行了登录。利用” or “和注释符的不同之处在于，前者是利用逻辑运算，而后者是根据MySQL的特性，这个比逻辑运算简单的多。</p>
<h2 id="应对措施"><a href="#应对措施" class="headerlink" title="应对措施"></a>应对措施</h2><h3 id="PrepareStatement-Bind-variable"><a href="#PrepareStatement-Bind-variable" class="headerlink" title="PrepareStatement+Bind-variable"></a>PrepareStatement+Bind-variable</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;对Java、JSP开发的应用，可以使用PrepareStatement+Bind-variable来防止SQL注入，尽量不要使用拼接的SQL。<br>Bind-variable(绑定变量)：查询通常只是因为改变where子句中的内容而产生不同的结果。为了在这种情况下避免硬解析，需要使用绑定变量。它是用户放入查询中的占位符，它会告诉MySQL或者Oracle”我会提供一个值放到这里”，一般在procedure or function中使用，可以优化共享池的使用。</p>
<h3 id="使用应用程序提高的转换函数"><a href="#使用应用程序提高的转换函数" class="headerlink" title="使用应用程序提高的转换函数"></a>使用应用程序提高的转换函数</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;很多应用程序接口都提供了对特殊字符进行转换的函数，恰当的使用这些函数，可以防止应用程序用户输入使应用程序生成不当期望的语句。</p>
<ul>
<li>MySQL C API：使用mysql_real_escape_string()API调用。</li>
<li>MySQL++：使用escape和quote修饰符。</li>
<li>PHP：使用mysql_real_escape_string()函数(适用于PHP 4.3.0版本)</li>
<li>Perl DBI：使用placeholders或者quote()方法。</li>
<li>Ruby DBI：使用placeholders或者quote()方法。</li>
</ul>
<h2 id="自定义函数进行校验"><a href="#自定义函数进行校验" class="headerlink" title="自定义函数进行校验"></a>自定义函数进行校验</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;如果现有的转换函数仍然不能满足要求，则需要自己编写函数进行输入校验。输入验证的途径可以分为以下几种：</p>
<ul>
<li>整理数据使之变得有效。</li>
<li>拒绝已知的非法输入。</li>
<li>只接受已知的合法输入。</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;所以如果想要获得最好的安全状态，目前最好的解决方法就是对用户提交或者可能改变的数据进行简单分类，分别应用正则表达式来对用户提供的输入数据进行严格的检测和验证。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SQL注入(SQL Injection)是利用某些数据库的外部接口将数据插入到实际的数据库操作语言(SQL)当中，从而达到入侵数据库乃至操作系统的目的。它的产生主要是由于程序对用户输入的数据没有进行严格的过滤，导致非法数据库查询语句的执行。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>触发器</title>
    <link href="http://www.sanstylemc.cn/2018/07/25/%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <id>http://www.sanstylemc.cn/2018/07/25/触发器/</id>
    <published>2018-07-25T02:01:33.000Z</published>
    <updated>2018-07-25T02:02:10.010Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;触发器是与表有关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性。<br><a id="more"></a></p>
<h2 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h2><p>创建触发器的语法如下:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name trigger_time trigger_event <span class="keyword">ON</span> tb_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> trigger_stmt</div><div class="line">trigger_name：触发器的名称</div><div class="line">tirgger_time：触发时机，为<span class="keyword">BEFORE</span>或者<span class="keyword">AFTER</span></div><div class="line">trigger_event：触发事件，为<span class="keyword">INSERT</span>、<span class="keyword">DELETE</span>或者<span class="keyword">UPDATE</span></div><div class="line">tb_name：表示建立触发器的表明，就是在哪张表上建立触发器</div><div class="line">trigger_stmt：触发器的程序体，可以是一条<span class="keyword">SQL</span>语句或者是用<span class="keyword">BEGIN</span>和<span class="keyword">END</span>包含的多条语句</div><div class="line">所以可以说MySQL创建以下六种触发器：</div><div class="line"><span class="keyword">BEFORE</span> <span class="keyword">INSERT</span>,<span class="keyword">BEFORE</span> <span class="keyword">DELETE</span>,<span class="keyword">BEFORE</span> <span class="keyword">UPDATE</span></div><div class="line"><span class="keyword">AFTER</span> <span class="keyword">INSERT</span>,<span class="keyword">AFTER</span> <span class="keyword">DELETE</span>,<span class="keyword">AFTER</span> <span class="keyword">UPDATE</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;其中，触发器名参数指要创建的触发器的名字。<br>&nbsp;&nbsp;&nbsp;&nbsp;对同一个表相同触发时间的相同触发事件，只能定义一个触发器。<br>&nbsp;&nbsp;&nbsp;&nbsp;触发器只能创建在永久表上，不能对临时表创建触发器。</p>
<p>创建有多个执行语句的触发器<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> 触发器名 <span class="keyword">BEFORE</span>|<span class="keyword">AFTER</span> 触发事件</div><div class="line"><span class="keyword">ON</span> 表名 <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    执行语句列表</div><div class="line"><span class="keyword">END</span></div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;其中，BEGIN与END之间的执行语句列表参数表示需要执行的多个语句，不同语句用分号隔开。</p>
<blockquote>
<p>tips: 一般情况下，MySQL默认是以 ; 作为结束执行语句，与触发器中需要的分行起冲突。为解决此问题可用DELIMITER，如：DELIMITER ||, 可以将结束符号变成 || 。当触发器创建完成后，可以用DELIMITER; 来将结束符变成 ; 。</p>
</blockquote>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mysql&gt; DELIMITER ||</div><div class="line">mysql&gt; CREATE TRIGGER demo BEFORE DELETE</div><div class="line">    -<span class="ruby">&gt; ON users FOR EACH ROW</span></div><div class="line"><span class="ruby">    -&gt; <span class="keyword">BEGIN</span></span></div><div class="line"><span class="ruby">    -&gt; INSERT INTO logs VALUES(NOW());</span></div><div class="line"><span class="ruby">    -&gt; INSERT INTO logs VALUES(NOW());</span></div><div class="line"><span class="ruby">    -&gt; <span class="keyword">END</span></span></div><div class="line"><span class="ruby">    -&gt; <span class="params">||</span></span></div><div class="line"><span class="ruby">Query OK, <span class="number">0</span> rows affected (<span class="number">0</span>.<span class="number">06</span> sec)</span></div><div class="line"><span class="ruby"></span></div><div class="line"><span class="ruby">mysql&gt; DELIMITER ;</span></div></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;上面的语句中，开头将结束符号定义为||，中间定义一个触发器，一旦有满足条件的删除操作，就会执行BEGIN和END中的语句，接着用||结束。最后使用DELIMITER ; 将结束符号还原。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>现有表如下：<br>用户users表<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">create table users(</div><div class="line">id int(11) unsigned <span class="keyword">not</span> <span class="literal">null</span> auto_increment;</div><div class="line">name varchar(255)<span class="built_in"> default </span><span class="literal">null</span>,</div><div class="line">add_time int(11)<span class="built_in"> default </span><span class="literal">null</span>,</div><div class="line">primary key(id),</div><div class="line">key name(name(250)) using btree</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>日志logs表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">logs</span>(</div><div class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment;</div><div class="line">log varchar(255) default null <span class="keyword">comment</span> <span class="string">'日志说明'</span>,</div><div class="line">primary <span class="keyword">key</span>(<span class="keyword">id</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;需求是：当在users中插入一条数据，就会在logs中生成一条日志信息。<br>创建触发器：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DELIMITER $</div><div class="line">CREATE TRIGGER user_log AFTER INSERT ON<span class="built_in"> users </span><span class="keyword">FOR</span> EACH ROW</div><div class="line">BEGIN</div><div class="line">DECLARE s1 VARCHAR(40) character <span class="builtin-name">set</span> utf8;</div><div class="line">DECLARE s2 VARCHAR(20) character <span class="builtin-name">set</span> utf8;#后面发现中文字符编码出现乱码，这里设置字符集</div><div class="line"><span class="builtin-name">SET</span> s2 = <span class="string">" is created"</span>;</div><div class="line"><span class="builtin-name">SET</span> s1 = CONCAT(NEW.name,s2);     #函数CONCAT可以将字符串连接</div><div class="line">INSERT INTO logs(log) values(s1);</div><div class="line">END $</div><div class="line">DELIMITER ;</div></pre></td></tr></table></figure></p>
<h2 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h2><p>show triggers语句查看触发器信息。</p>
<blockquote>
<p>show triggers无法查询指定的触发器。</p>
</blockquote>
<p>在triggers表中查看触发器信息<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.triggers;</div></pre></td></tr></table></figure></p>
<p>同时该方法可以查询制定触发器的详细信息<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.triggers <span class="keyword">where</span> trigger_name= <span class="string">'user_log'</span>;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>tips: 所有的触发器信息都存储在information_schema数据库下的triggers表中，可以使用select语句查询，如果触发器信息过多，最好通过t字段指定查询。</p>
</blockquote>
<h2 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;一次可以删除一个触发程序，如果没有指定schema_name, 默认为当前数据库，具体语法如下:<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [schema_name.] trigger_name;</div></pre></td></tr></table></figure></p>
<p>例如，要删除users表上的触发器user_log，可以使用如下命令:<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> user_log;</div></pre></td></tr></table></figure></p>
<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;触发器会有以下两种限制：<br>1、触发程序不能调用将数据返回客户端的存储程序，也不能使用采用CALL语句的动态SQL语句，但是允许存储程序通过参数将数据返回触发程序，也就是存储过程或者函数通过OUT或者INOUT类型的参数将数据返回触发器是可以的，但是不能调用直接返回数据的过程。<br>2、不能在触发器中使用以显示或隐藏方式开始或结束事务的语句，如STAERT TRANS-ACTION,COMMIT或ROLLBACK。<br>&nbsp;&nbsp;&nbsp;&nbsp;注意事项：MySQL的触发器是按照BEFORE触发器、行操作、AFTER触发器是顺序执行的，其中任何一步发生错误都不会继续执行剩下的操作，如果对事务表进行的操作，如果出现错误，那么将会被回滚，如果是对非事务表进行操作，那么就无法回滚了，数据可能会出错。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;触发器是基于行触发的，所以删除、新增或者修改操作可能都会激活触发器，所以不要编写过于复杂的触发器，也不要增加过得的触发器，这样会对数据的插入、修改或者删除带来比较严重的影响，同时也会带来可移植性差的后果，所以在设计触发器的时候一定要有所考虑。<br>&nbsp;&nbsp;&nbsp;&nbsp;触发器是一种特殊的存储过程，它在插入，删除或修改特定表中的数据时触发执行，它比数据库本身标准的功能有更精细和更复杂的数据控制能力。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;数据库触发器有以下的作用：<br>1、安全性。可以基于数据库的值使用户具有操作数据库的某种权利。</p>
<ul>
<li>可以基于时间限制用户的操作，例如不允许下班后和节假日修改数据库数据。</li>
<li>可以基于数据库中的数据限制用户的操作，例如不允许股票的价格的升幅一次超过10%。</li>
</ul>
<p>2、审计。可以跟踪用户对数据库的操作。</p>
<ul>
<li>审计用户操作数据库的语句</li>
<li>把用户对数据库的更新写入审计表</li>
</ul>
<p>3、实现复杂的数据完整性规则。</p>
<ul>
<li>实现非标准的数据完整性检查和约束。触发器可产生比规则更为复杂的限制。与规则不同，触发器可以引用列或数据库对象，例如，触发器可回退任何企图吃进超过自己保证金的期货。</li>
</ul>
<p>4、实现复杂的非标准的数据库相关完整性规则。触发器可以对数据库中相关的表进行连环更新。例如，在auths表author_code列上的删除触发器可导致相应删除在其它表中的与之匹配的行。</p>
<p>5、同步实时地复制表中的数据。</p>
<p>6、自动计算数据值，如果数据的值达到了一定的要求，则进行特定的处理。例如，如果公司的账号上的资金低于5万元则立即给财务人员发送警告数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;触发器是与表有关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>获取无线局域网适配器IP</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/%E8%8E%B7%E5%8F%96%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%E9%80%82%E9%85%8D%E5%99%A8IP/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/获取无线局域网适配器IP/</id>
    <published>2018-07-24T11:30:20.000Z</published>
    <updated>2018-07-24T11:30:51.891Z</updated>
    
    <content type="html"><![CDATA[<p>如题，嗯!<br><a id="more"></a></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.net.InetAddress;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.net.NetworkInterface;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.ArrayList;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Enumeration;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.List;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mc_07241</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">		getLocalIP();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; getLocalIP() &#123;</div><div class="line">		List&lt;String&gt; ipList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		InetAddress ip = <span class="literal">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Enumeration&lt;NetworkInterface&gt; netInterfaces = (Enumeration&lt;NetworkInterface&gt;) NetworkInterface</div><div class="line">					.getNetworkInterfaces();</div><div class="line">			<span class="keyword">while</span> (netInterfaces.hasMoreElements()) &#123;</div><div class="line">				NetworkInterface ni = (NetworkInterface) netInterfaces.nextElement();</div><div class="line">				<span class="keyword">if</span> (ni.getName().indexOf(<span class="string">"wlan"</span>) == <span class="number">-1</span>)</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				<span class="comment">// 遍历所有ip</span></div><div class="line">				Enumeration&lt;InetAddress&gt; ips = ni.getInetAddresses();</div><div class="line">				<span class="keyword">while</span> (ips.hasMoreElements()) &#123;</div><div class="line">					ip = (InetAddress) ips.nextElement();</div><div class="line">					<span class="keyword">if</span> (<span class="literal">null</span> == ip || <span class="string">""</span>.equals(ip)) &#123;</div><div class="line">						<span class="keyword">continue</span>;</div><div class="line">					&#125;</div><div class="line">					String sIP = ip.getHostAddress();</div><div class="line">					<span class="keyword">if</span> (sIP == <span class="literal">null</span> || sIP.indexOf(<span class="string">":"</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">						<span class="keyword">continue</span>;</div><div class="line">					&#125;</div><div class="line">					ipList.add(sIP);</div><div class="line">					System.out.println(sIP);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> ipList;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题，嗯!&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java执行输入的js代码</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/Java%E6%89%A7%E8%A1%8C%E8%BE%93%E5%85%A5%E7%9A%84js%E4%BB%A3%E7%A0%81/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/Java执行输入的js代码/</id>
    <published>2018-07-24T08:25:32.000Z</published>
    <updated>2018-07-24T08:28:55.123Z</updated>
    
    <content type="html"><![CDATA[<p>JDK1.6版添加了新的ScriptEngine类，允许用户直接执行js代码。<br><a id="more"></a><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Scanner;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.script.ScriptEngine;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.script.ScriptEngineManager;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> javax.script.ScriptException;</span>  <span class="comment">/*直接调用js代码*/</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mc_07241</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args)&#123;</div><div class="line">		ScriptEngineManager manager = <span class="keyword">new</span> ScriptEngineManager();</div><div class="line">		ScriptEngine engine = manager.getEngineByName(<span class="string">"javascript"</span>);</div><div class="line">		<span class="comment">/*通过脚本名称获取脚本引擎*/</span></div><div class="line">		Scanner sc= <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			System.out.println(engine.eval(sc.nextLine()));</div><div class="line">			<span class="comment">/*不能调用浏览器中定义的js函数。 错误，会抛出alert等引用不存在的异常*/</span></div><div class="line">		&#125; <span class="keyword">catch</span> (ScriptException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JDK1.6版添加了新的ScriptEngine类，允许用户直接执行js代码。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>索引</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/%E7%B4%A2%E5%BC%95/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/索引/</id>
    <published>2018-07-24T06:29:27.000Z</published>
    <updated>2018-07-24T06:41:03.555Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</p>
<p><code>创建索引时，需要确保索引是应用在SQL查询语句的条件(一般作为WHERE子句的条件)</code></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p>
<p><code>缺点</code>: 虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行<code>INSERT</code>、<code>UPDATE</code>和<code>DELETE</code>。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。</p>
<h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><p>1、创建索引<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">index</span> indexName <span class="keyword">on</span> mytable(username(<span class="built_in">length</span>));</div></pre></td></tr></table></figure></p>
<p>如果是char、varchar类型，length可以小于字段实际长度；如果是blob和text类型，必须指定length。<br>2、修改表结构(添加索引)<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tableName <span class="keyword">add</span> <span class="keyword">index</span> indexName(columnName);</div></pre></td></tr></table></figure></p>
<p>3、创建表的时候直接指定<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytable(</div><div class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">username <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line"><span class="keyword">index</span> [indexName] (username(<span class="keyword">length</span>))</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>4、删除索引的语法<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">index</span> [indexName] <span class="keyword">on</span> mytable;</div></pre></td></tr></table></figure></p>
<h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。<br>1、创建索引<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> indexName <span class="keyword">on</span> mytable(username(<span class="built_in">length</span>));</div></pre></td></tr></table></figure></p>
<p>2、修改表结构<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> mytable <span class="keyword">add</span> <span class="keyword">unique</span> [indexName] (username(<span class="keyword">length</span>));</div></pre></td></tr></table></figure></p>
<p>3、创建表的时候直接指定<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytable(</div><div class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="literal">null</span>,</div><div class="line">username <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line"><span class="keyword">unique</span> [indexName] (username(<span class="keyword">length</span>))</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h2 id="使用alter命令添加和删除索引"><a href="#使用alter命令添加和删除索引" class="headerlink" title="使用alter命令添加和删除索引"></a>使用alter命令添加和删除索引</h2><p>有四种方式来添加数据表的索引：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> primary <span class="keyword">key</span>(column_list);</div></pre></td></tr></table></figure></p>
<p>该语句添加一个主键，这意味着索引值必须是唯一的，且不能为null。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> <span class="keyword">unique</span> index_name(column_list);</div></pre></td></tr></table></figure></p>
<p>这条语句创建索引的值必须是唯一的(除了null，外，null可能会出现多次)。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> <span class="keyword">index</span> index_name(column_list);</div></pre></td></tr></table></figure></p>
<p>添加普通索引，索引值可出现多次。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> fulltext index_name(column_list);</div></pre></td></tr></table></figure></p>
<p>该语句指定了索引为fulltext，用于全文索引。</p>
<h2 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h2><p>可以使用show index命令来列出表中的相关的索引信息。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> table_name;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://www.sanstylemc.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>TIMESTAMP和DATETIME</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/TIMESTAMP%E5%92%8CDATETIME/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/TIMESTAMP和DATETIME/</id>
    <published>2018-07-24T03:03:43.000Z</published>
    <updated>2018-07-24T03:04:21.827Z</updated>
    
    <content type="html"><![CDATA[<p>TIMESTAMP和DATETIME的表示方法非常类似，区别主要有以下几点。<br><a id="more"></a></p>
<p>1、TIMESTAMP支持的时间范围比较小，其取值范围从19700101080001到2038年的某个时间，而DATETIME是从1000-01-01 00:00:00 到 9999-12-31 23:59:59，范围更大。<br>2、表中的第一个TIMESTAMP列自动设置为系统时间。如果在一个TIMESTAMP列中插入NULL，则该列值将自动设置为当前的日期和时间。在插入或更新一行但不明确给TIMESTAMP列赋值时也会自动设置该列的值为当前的日期和时间，当插入的值超出取值范围时，MySQL认为该值溢出，使用”0000-00-00 00:00:00”进行填补。<br>3、TIMESTAMP的插入和查询都受当地时区的影响，更能反应出实际的日期。而DATETIME则只能反应出插入时当地的时区，其他时区的人查看数据必然会有误差的。<br>4、TIMESTAMP的属性受MySQL版本和服务器SQLMode的影响很大。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TIMESTAMP和DATETIME的表示方法非常类似，区别主要有以下几点。&lt;br&gt;
    
    </summary>
    
    
      <category term="失误锦集" scheme="http://www.sanstylemc.cn/tags/%E5%A4%B1%E8%AF%AF%E9%94%A6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>rpm命令</title>
    <link href="http://www.sanstylemc.cn/2018/07/24/rpm%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.sanstylemc.cn/2018/07/24/rpm命令/</id>
    <published>2018-07-24T01:17:49.000Z</published>
    <updated>2018-07-24T01:19:32.582Z</updated>
    
    <content type="html"><![CDATA[<p>对于一个rpm包来说，都是有”-“和”.”构成的，基本上有以下几部分组成：<code>包名</code>、<code>版本信息</code>、<code>发布版本号</code>、<code>运行平台</code>，当出现noarch, 代表的是软件可以平台兼容。<br><a id="more"></a></p>
<h2 id="查询系统已经安装的软件信息"><a href="#查询系统已经安装的软件信息" class="headerlink" title="查询系统已经安装的软件信息"></a>查询系统已经安装的软件信息</h2><p>1、查询系统中已经安装的软件<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm -qa</span></div></pre></td></tr></table></figure></p>
<p>2、查询一个已经安装的文件属于哪个软件包<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qf 文件名的绝对路径</div></pre></td></tr></table></figure></p>
<p>3、查询已安装软件包都安装到何处<br><figure class="highlight ldif"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm -ql 软件名</span></div><div class="line"><span class="attribute">软件名定义</span>: rpm包去除平台信息和后缀后的信息</div></pre></td></tr></table></figure></p>
<p>4、查询一个已安装软件包的信息<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qi 软件名</div></pre></td></tr></table></figure></p>
<p>5、查看一下已安装软件的配置文件<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rom</span> -qc 软件名</div></pre></td></tr></table></figure></p>
<p>6、查看一个已安装软件的文档安装位置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qd 软件名</div></pre></td></tr></table></figure></p>
<p>7、查看一下已安装软件所依赖的软件包及文件<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -<span class="built_in">qR</span> 软件名</div></pre></td></tr></table></figure></p>
<h2 id="对于未安装的软件包信息查询"><a href="#对于未安装的软件包信息查询" class="headerlink" title="对于未安装的软件包信息查询"></a>对于未安装的软件包信息查询</h2><p>1、查看一个软件包的用途、版本等信息<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpi rpm文件</div></pre></td></tr></table></figure></p>
<p>2、查看软件包的文档所在的位置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpl rpm文件</div></pre></td></tr></table></figure></p>
<p>3、查看软件包的文档所在的位置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpd rpm文件</div></pre></td></tr></table></figure></p>
<p>4、查看一个软件包的配置文件<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpc rpm文件</div></pre></td></tr></table></figure></p>
<p>5、查看一个软件包的依赖关系<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -qpR rpm文件</div></pre></td></tr></table></figure></p>
<h2 id="软件包的安装、升级、删除等"><a href="#软件包的安装、升级、删除等" class="headerlink" title="软件包的安装、升级、删除等"></a>软件包的安装、升级、删除等</h2><p>1、安装或者升级一个rpm包<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -ivh rpm文件 <span class="string">[安装]</span></div><div class="line">rpm -Uvh rpm文件 <span class="string">[更新]</span></div></pre></td></tr></table></figure></p>
<p>2、删除一个rpm包<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rpm</span> -e 软件名</div></pre></td></tr></table></figure></p>
<p>如果需要不管依赖问题，强制删除软件，在如上命令后加上<code>--nodeps</code>。</p>
<h2 id="签名导入"><a href="#签名导入" class="headerlink" title="签名导入"></a>签名导入</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm --<span class="keyword">import</span> 签名文件</div><div class="line">rpm --<span class="keyword">import</span> RPM-GPG-KEY</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于一个rpm包来说，都是有”-“和”.”构成的，基本上有以下几部分组成：&lt;code&gt;包名&lt;/code&gt;、&lt;code&gt;版本信息&lt;/code&gt;、&lt;code&gt;发布版本号&lt;/code&gt;、&lt;code&gt;运行平台&lt;/code&gt;，当出现noarch, 代表的是软件可以平台兼容。&lt;br&gt;
    
    </summary>
    
    
      <category term="Skill" scheme="http://www.sanstylemc.cn/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>Linux笔记一</title>
    <link href="http://www.sanstylemc.cn/2018/07/19/Linux%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://www.sanstylemc.cn/2018/07/19/Linux笔记一/</id>
    <published>2018-07-19T02:41:30.000Z</published>
    <updated>2018-07-19T02:43:03.619Z</updated>
    
    <content type="html"><![CDATA[<p>鸟哥私房菜学习一。<br><a id="more"></a></p>
<h2 id="计量单位"><a href="#计量单位" class="headerlink" title="计量单位"></a>计量单位</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;电脑对数据的判断主要依据有没有通电来记录信息，所以理论上对于每一个记录单位而言，它只认识0与1而已。0/1这个二进制的单位我们成为bit。但bit太小，所以在储存数据时每份简单的数据都会使用到8个bit的大小来记录，因此定义出Byte这个单位，关系为<code>1 Byte = 8 bits</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:center">进位制</th>
<th style="text-align:center">Kilo</th>
<th style="text-align:center">Mega</th>
<th style="text-align:center">Giga</th>
<th style="text-align:center">Tera</th>
<th style="text-align:center">Peta</th>
<th style="text-align:center">Exa</th>
<th style="text-align:center">Zetta</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">二进制</td>
<td style="text-align:center">1024</td>
<td style="text-align:center">1024K</td>
<td style="text-align:center">1024M</td>
<td style="text-align:center">1024G</td>
<td style="text-align:center">1024T</td>
<td style="text-align:center">1024P</td>
<td style="text-align:center">1024E</td>
</tr>
<tr>
<td style="text-align:center">十进制</td>
<td style="text-align:center">1000</td>
<td style="text-align:center">1000K</td>
<td style="text-align:center">1000M</td>
<td style="text-align:center">1000G</td>
<td style="text-align:center">1000T</td>
<td style="text-align:center">1000P</td>
<td style="text-align:center">1000E</td>
</tr>
</tbody>
</table>
<p><code>例题</code>: 假设有500GB硬盘一个，但是格式化完毕后却只剩下460GB左右的容量，这是什么原因？</p>
<blockquote>
<p>答: 因为一般硬盘制造商会使用十进制的单位，所以500GByte代表为<code>500*1000*1000*1000Byte</code>之意。转成文件的容量单位时使用二进制(1024为底)，所以就成为460GB左右的容量了。</p>
</blockquote>
<h2 id="电脑架构与设备元件"><a href="#电脑架构与设备元件" class="headerlink" title="电脑架构与设备元件"></a>电脑架构与设备元件</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;早期的芯片组通常分为两个桥接器来控制各元件的沟通，分别是：<br>(1) 北桥：负责连接速度较快的CPU、内存与显卡接口等元件；<br>(2) 南桥：负责连接速度较慢的设备接口，包括硬盘、USB、网卡等。<br>目前的主流架构中，大多将北桥内存控制器整合到CPU封装当中了。</p>
<h2 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h2><h3 id="设备I-O位址与IRQ中断信道"><a href="#设备I-O位址与IRQ中断信道" class="headerlink" title="设备I/O位址与IRQ中断信道"></a>设备I/O位址与IRQ中断信道</h3><p>不能有两个设备使用同一个I/O位址，否则系统就会不晓得该如何运行这两个设备了。<br>IRQ中断信道。</p>
<h3 id="CMOS和BIOS"><a href="#CMOS和BIOS" class="headerlink" title="CMOS和BIOS"></a>CMOS和BIOS</h3><p><code>CMOS</code>：主要的功能为记录主板上面的重要参数，包括系统时间、CPU电压与频率、各项设备的I/O位址与IRQ等，由于这些数据的记录要花费电力，因此主板上面才有电池。<br><code>BIOS</code>：为写入到主板上某一块flash或EEPROM的程序，他可以在开机的时候执行，以载入CMOS当中的参数，并尝试调用储存设备中的开机程序，进一步进入操作系统当中。BIOS也可以修改CMOS中的数据。</p>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">计算机的定义为: 接受使用者输入指令与数据，经由中央处理器的数学与逻辑单元运算处理后，以产生储存成有用的信息。</div><div class="line"><span class="string">`电脑的五大单元包括`</span>：输入单元、输出单元、控制单元、算术逻辑单元、存储单元五大部分。其中<span class="meta">CPU</span>占有控制、算术逻辑单元，存储单元又包含内存与辅助内存。</div><div class="line">数据会流进/流出内存是<span class="meta">CPU</span>所发布的控制命令，而<span class="meta">CPU</span>实际要处理的数据则完全来自于内存。</div><div class="line"><span class="string">`CPU设计理念主要分为`</span>：精简指令集(RISC)与复杂指令集(CISC)系统。</div><div class="line"><span class="string">`关于CPU的频率部分`</span>：外频指的是<span class="meta">CPU</span>与外部元件进行数据传输时的速度，倍频则是<span class="meta">CPU</span>内部用来加速工作性能的一个倍数，两者相乘才是<span class="meta">CPU</span>的频率速度。</div><div class="line">新的<span class="meta">CPU</span>设计中，已经将北桥的内存控制芯片整合到<span class="meta">CPU</span>中，而<span class="meta">CPU</span>与内存、显卡沟通的总线通常称为系统总线。南桥就是所谓的输入输出(I/O)总线，主要在联系硬盘、USB、网卡等周边设备。</div><div class="line"><span class="meta">CPU</span>每次能够处理的数据量称为字组大小，字组大小依据<span class="meta">CPU</span>的设计而有<span class="number">32</span>位与<span class="number">64</span>位。我们现在所称的电脑是<span class="number">32</span>或<span class="number">64</span>位主要是依据这个<span class="meta">CPU</span>解析的字组大小而来的。</div><div class="line">个人电脑的内存主要元件为动态随机存取内存，至于<span class="meta">CPU</span>内部的第二层高速缓存则使用静态随机存取内存。</div><div class="line">BIOS是一套程序，这套程序是写死到主板上面的一个内存芯片中，这个内存芯片在没有通电时也能够将数据记录下来，那就是只读存储器(ROM)。</div><div class="line">操作系统(OS)其实也是一组程序，这组程序的重点在于管理电脑的所有活动以及驱动系统中的所有硬件。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鸟哥私房菜学习一。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.sanstylemc.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>判断本网段有多少可用的IP地址</title>
    <link href="http://www.sanstylemc.cn/2018/07/18/%E5%88%A4%E6%96%AD%E6%9C%AC%E7%BD%91%E6%AE%B5%E6%9C%89%E5%A4%9A%E5%B0%91%E5%8F%AF%E7%94%A8%E7%9A%84IP%E5%9C%B0%E5%9D%80/"/>
    <id>http://www.sanstylemc.cn/2018/07/18/判断本网段有多少可用的IP地址/</id>
    <published>2018-07-18T07:44:23.000Z</published>
    <updated>2018-07-18T07:45:49.649Z</updated>
    
    <content type="html"><![CDATA[<p>首先获取本机IP地址和网段。再使用Java执行ping命令，判断这些IP地址是否能用，把能用的打印出来。<br><a id="more"></a><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="keyword">BufferedReader</span>;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</div><div class="line">    </div><div class="line"><span class="keyword">public</span> class TestSocket &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">        InetAddress host = InetAddress.getLocalHost();</div><div class="line">        <span class="keyword">String</span> ip = host.getHostAddress();</div><div class="line">        <span class="keyword">String</span> ipRange = ip.substring(<span class="number">0</span>, ip.lastIndexOf(<span class="string">'.'</span>));</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"本机ip地址："</span> + ip);</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"网段是: "</span> + ipRange);</div><div class="line">    </div><div class="line">        List&lt;<span class="keyword">String</span>&gt; ips = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</div><div class="line">        ThreadPoolExecutor threadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">10</span>, <span class="number">15</span>, <span class="number">60</span>, TimeUnit.SECONDS,</div><div class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">        AtomicInteger number = <span class="keyword">new</span> AtomicInteger();</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++) &#123;</div><div class="line">            <span class="keyword">String</span> testIP = ipRange + <span class="string">"."</span> + (i + <span class="number">1</span>);</div><div class="line">            threadPool.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                @Override</div><div class="line">                <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</div><div class="line">                    <span class="built_in">boolean</span> reachable = isReachable(testIP);</div><div class="line">                    <span class="keyword">if</span> (reachable)</div><div class="line">                        <span class="comment">// System.out.println("找到可连接的ip地址：" + testIP);</span></div><div class="line">                        ips.<span class="built_in">add</span>(testIP);</div><div class="line">    </div><div class="line">                    <span class="keyword">synchronized</span> (number) &#123;</div><div class="line">                        System.out.<span class="built_in">println</span>(<span class="string">"已经完成:"</span> + number.incrementAndGet() + <span class="string">" 个 ip 测试"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">    </div><div class="line">            &#125;);</div><div class="line">    </div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        <span class="comment">// 等待所有线程结束的时候，就关闭线程池</span></div><div class="line">        threadPool.shutdown();</div><div class="line">        <span class="comment">//等待线程池关闭，但是最多等待1个小时</span></div><div class="line">        <span class="keyword">if</span> (threadPool.awaitTermination(<span class="number">1</span>, TimeUnit.HOURS)) &#123;</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="string">"如下ip地址可以连接"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">String</span> theip : ips) &#123;</div><div class="line">                System.out.<span class="built_in">println</span>(theip);</div><div class="line">            &#125;</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="string">"总共有:"</span> + ips.<span class="built_in">size</span>() + <span class="string">" 个地址"</span>);</div><div class="line">    </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">boolean</span> isReachable(<span class="keyword">String</span> ip) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="built_in">boolean</span> reachable = <span class="keyword">false</span>;</div><div class="line">    </div><div class="line">            Process p = Runtime.getRuntime().exec(<span class="string">"ping -n 1 "</span> + ip);</div><div class="line">            <span class="keyword">BufferedReader</span> br = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(<span class="keyword">new</span> InputStreamReader(p.getInputStream()));</div><div class="line">            <span class="keyword">String</span> <span class="built_in">line</span> = <span class="keyword">null</span>;</div><div class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">            <span class="keyword">while</span> ((<span class="built_in">line</span> = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">line</span>.length() != <span class="number">0</span>)</div><div class="line">                    sb.<span class="built_in">append</span>(<span class="built_in">line</span> + <span class="string">"\r\n"</span>);</div><div class="line">            &#125;</div><div class="line">    </div><div class="line">            <span class="comment">//当有TTL出现的时候，就表示连通了</span></div><div class="line">            reachable = sb.toString().contains(<span class="string">"TTL"</span>);</div><div class="line">            br.close();</div><div class="line">            <span class="keyword">return</span> reachable;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先获取本机IP地址和网段。再使用Java执行ping命令，判断这些IP地址是否能用，把能用的打印出来。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>文件夹复制进度条</title>
    <link href="http://www.sanstylemc.cn/2018/07/18/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%8D%E5%88%B6%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <id>http://www.sanstylemc.cn/2018/07/18/文件夹复制进度条/</id>
    <published>2018-07-18T07:00:40.000Z</published>
    <updated>2018-07-18T07:02:37.948Z</updated>
    
    <content type="html"><![CDATA[<p>使用Java写出的简陋GUI，显示文件夹复制的进度条。<br><a id="more"></a><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.Dimension;</div><div class="line"><span class="keyword">import</span> java.awt.FlowLayout;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.io.<span class="built_in">File</span>;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JLabel;</div><div class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</div><div class="line"><span class="keyword">import</span> javax.swing.JProgressBar;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> class TestGUI &#123;</div><div class="line"> </div><div class="line">    <span class="keyword">static</span> <span class="keyword">long</span> allFileSize = <span class="number">0</span>; <span class="comment">// 所有需要复制的文件大小</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">long</span> currentFileSizeCopied = <span class="number">0</span>;<span class="comment">// 已复制的文件总大小</span></div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 遍历文件夹获取文件夹内容总大小</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * @param file</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> calclateAllFilesize(<span class="built_in">File</span> file) &#123;</div><div class="line"> </div><div class="line">        <span class="built_in">if</span> (file.isFile()) &#123;</div><div class="line">            allFileSize += file.length();</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">if</span> (file.<span class="built_in">isDirectory</span>()) &#123;</div><div class="line">            <span class="built_in">File</span>[] fs = file.listFiles();</div><div class="line">            <span class="built_in">for</span> (<span class="built_in">File</span> f : fs) &#123;</div><div class="line">                calclateAllFilesize(f);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line"> </div><div class="line">        JFrame f = <span class="keyword">new</span> JFrame(<span class="string">"带进度条的文件夹复制"</span>);</div><div class="line">        f.setSize(<span class="number">450</span>, <span class="number">140</span>);</div><div class="line">        f.setLocation(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">        f.setLayout(<span class="keyword">new</span> FlowLayout());</div><div class="line"> </div><div class="line">        <span class="comment">// 文件地址</span></div><div class="line">        JLabel lStr = <span class="keyword">new</span> JLabel(<span class="string">"源文件地址："</span>);</div><div class="line">        JTextField strTf = <span class="keyword">new</span> JTextField(<span class="string">""</span>);</div><div class="line">        strTf.setText(<span class="string">"e:/JDK"</span>);</div><div class="line">        strTf.setPreferredSize(<span class="keyword">new</span> Dimension(<span class="number">100</span>, <span class="number">30</span>));</div><div class="line">        JLabel lDest = <span class="keyword">new</span> JLabel(<span class="string">"复制到："</span>);</div><div class="line">        JTextField destTf = <span class="keyword">new</span> JTextField(<span class="string">""</span>);</div><div class="line">        destTf.setText(<span class="string">"e:/JDK2"</span>);</div><div class="line">        destTf.setPreferredSize(<span class="keyword">new</span> Dimension(<span class="number">100</span>, <span class="number">30</span>));</div><div class="line"> </div><div class="line">        f.add(lStr);</div><div class="line">        f.add(strTf);</div><div class="line">        f.add(lDest);</div><div class="line">        f.add(destTf);</div><div class="line"> </div><div class="line">        JButton bStartCopy = <span class="keyword">new</span> JButton(<span class="string">"开始复制"</span>);</div><div class="line">        bStartCopy.setPreferredSize(<span class="keyword">new</span> Dimension(<span class="number">100</span>, <span class="number">30</span>));</div><div class="line"> </div><div class="line">        JLabel l = <span class="keyword">new</span> JLabel(<span class="string">"文件复制进度："</span>);</div><div class="line">        JProgressBar pb = <span class="keyword">new</span> JProgressBar();</div><div class="line">        pb.setMaximum(<span class="number">100</span>);</div><div class="line">        pb.setStringPainted(true);</div><div class="line"> </div><div class="line">        f.add(bStartCopy);</div><div class="line">        f.add(l);</div><div class="line">        f.add(pb);</div><div class="line">        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line"> </div><div class="line">        f.setVisible(true);</div><div class="line"> </div><div class="line">        <span class="comment">// 计算需要复制的文件的总大小</span></div><div class="line">        <span class="keyword">String</span> srcPath = strTf.getText();</div><div class="line">        <span class="built_in">File</span> folder = <span class="keyword">new</span> <span class="built_in">File</span>(srcPath);</div><div class="line">        calclateAllFilesize(folder);</div><div class="line"> </div><div class="line">        <span class="comment">// 点击开始复制</span></div><div class="line">        bStartCopy.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> actionPerformed(ActionEvent e) &#123;</div><div class="line">                currentFileSizeCopied = <span class="number">0</span>;</div><div class="line">                <span class="keyword">String</span> srcPath = strTf.getText();</div><div class="line">                <span class="keyword">String</span> destPath = destTf.getText();</div><div class="line">                <span class="keyword">new</span> Thread(() -&gt; copyFolder(srcPath, destPath)).start();</div><div class="line">                bStartCopy.setEnabled(false);</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> copyFile(<span class="keyword">String</span> srcPath, <span class="keyword">String</span> destPath) &#123;</div><div class="line"> </div><div class="line">                <span class="built_in">File</span> srcFile = <span class="keyword">new</span> <span class="built_in">File</span>(srcPath);</div><div class="line">                <span class="built_in">File</span> destFile = <span class="keyword">new</span> <span class="built_in">File</span>(destPath);</div><div class="line"> </div><div class="line">                <span class="comment">// 缓存区，一次性读取1024字节</span></div><div class="line">                <span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line"> </div><div class="line">                <span class="built_in">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(srcFile);</div><div class="line">                        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);) &#123;</div><div class="line">                    <span class="built_in">while</span> (true) &#123;</div><div class="line">                        <span class="comment">// 实际读取的长度是 actuallyReaded,有可能小于1024</span></div><div class="line">                        <span class="keyword">int</span> actuallyReaded = fis.<span class="built_in">read</span>(<span class="built_in">buffer</span>);</div><div class="line">                        <span class="comment">// -1表示没有可读的内容了</span></div><div class="line">                        <span class="built_in">if</span> (<span class="number">-1</span> == actuallyReaded)</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                        fos.<span class="built_in">write</span>(<span class="built_in">buffer</span>, <span class="number">0</span>, actuallyReaded);</div><div class="line">                        fos.<span class="built_in">flush</span>();</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="built_in">catch</span> (FileNotFoundException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="built_in">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> copyFolder(<span class="keyword">String</span> srcPath, <span class="keyword">String</span> destPath) &#123;</div><div class="line">                <span class="built_in">File</span> srcFolder = <span class="keyword">new</span> <span class="built_in">File</span>(srcPath);</div><div class="line">                <span class="built_in">File</span> destFolder = <span class="keyword">new</span> <span class="built_in">File</span>(destPath);</div><div class="line"> </div><div class="line">                <span class="built_in">if</span> (!srcFolder.<span class="built_in">exists</span>())</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line"> </div><div class="line">                <span class="built_in">if</span> (!srcFolder.<span class="built_in">isDirectory</span>())</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line"> </div><div class="line">                <span class="built_in">if</span> (destFolder.isFile())</div><div class="line">                    <span class="built_in">return</span>;</div><div class="line"> </div><div class="line">                <span class="built_in">if</span> (!destFolder.<span class="built_in">exists</span>())</div><div class="line">                    destFolder.mkdirs();</div><div class="line"> </div><div class="line">                <span class="built_in">File</span>[] files = srcFolder.listFiles();</div><div class="line">                <span class="built_in">for</span> (<span class="built_in">File</span> srcFile : files) &#123;</div><div class="line"> </div><div class="line">                    <span class="built_in">if</span> (!(srcFile.<span class="built_in">isDirectory</span>())) &#123;</div><div class="line">                        <span class="built_in">File</span> newDestFile = <span class="keyword">new</span> <span class="built_in">File</span>(destFolder, srcFile.getName());</div><div class="line">                        copyFile(srcFile.getAbsolutePath(), newDestFile.getAbsolutePath());</div><div class="line">                        currentFileSizeCopied += srcFile.length();</div><div class="line"> </div><div class="line">                        <span class="keyword">double</span> current = (<span class="keyword">double</span>) currentFileSizeCopied / (<span class="keyword">double</span>) allFileSize;</div><div class="line">                        <span class="keyword">int</span> progress = (<span class="keyword">int</span>) (current * <span class="number">100</span>);</div><div class="line">                        pb.setValue(progress);</div><div class="line">                        <span class="built_in">if</span> (progress == <span class="number">100</span>) &#123;</div><div class="line">                            JOptionPane.showMessageDialog(f, <span class="string">"复制完毕"</span>);</div><div class="line">                            bStartCopy.setEnabled(true);</div><div class="line">                        &#125;</div><div class="line"> </div><div class="line">                    &#125;</div><div class="line"> </div><div class="line">                    <span class="built_in">if</span> (srcFile.<span class="built_in">isDirectory</span>()) &#123;</div><div class="line">                        <span class="built_in">File</span> newDestFolder = <span class="keyword">new</span> <span class="built_in">File</span>(destFolder, srcFile.getName());</div><div class="line">                        copyFolder(srcFile.getAbsolutePath(), newDestFolder.getAbsolutePath());</div><div class="line">                    &#125;</div><div class="line"> </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Java写出的简陋GUI，显示文件夹复制的进度条。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="http://www.sanstylemc.cn/2018/07/13/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://www.sanstylemc.cn/2018/07/13/线程池/</id>
    <published>2018-07-13T09:15:15.000Z</published>
    <updated>2018-07-13T09:18:52.715Z</updated>
    
    <content type="html"><![CDATA[<p>每一个线程的启动和结束都是比较消耗时间和占用资源的。<br>如果在系统中用到了很多的线程，大量的启动和结束动作会导致系统的性能变卡，响应变慢。<br>为了解决这个问题，引入线程池这种设计思想。<br>线程池的模式很像生产者消费者模式，消费的对象是一个一个的能够运行的任务。<br><a id="more"></a></p>
<h2 id="线程池设计思路"><a href="#线程池设计思路" class="headerlink" title="线程池设计思路"></a>线程池设计思路</h2><p>线程池的思路和生产者消费者模型是很接近的。<br>1、准备一个任务容器<br>2、一次性启动10个消费者线程<br>3、刚开始任务容器时是空的，所以线程都wait在上面。<br>4、直到一个外部线程往这个任务容器中扔了一个”任务”，就会有一个消费者线程被唤醒<code>notify</code>。<br>5、这个消费者线程取出”任务”，并且执行这个任务，执行完毕后，继续等待下一次任务的到来。<br>6、如果短时间内，有较多的任务加入，那么就会有多个线程别唤醒，去执行这些任务。<br><img src="https://github.com/sunstady/hexo/blob/master/%E7%BA%BF%E7%A8%8B%E6%B1%A0/1.png?raw=true" alt="11"></p>
<h2 id="开发一个自定义的线程池"><a href="#开发一个自定义的线程池" class="headerlink" title="开发一个自定义的线程池"></a>开发一个自定义的线程池</h2><p>这是一个自定义的线程池，虽然不够完善和健壮，但是已经足以说明线程池的工作原理。<br>缓慢的给这个线程池添加任务，会看到有多条线程来执行这些任务。<br>线程7执行完毕任务后，又回到池子里，下一次任务来的时候，线程7又来执行新的任务。<br><code>ThreadPool.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</div><div class="line">  </div><div class="line">    <span class="comment">// 线程池大小</span></div><div class="line">    <span class="keyword">int</span> threadPoolSize;</div><div class="line">  </div><div class="line">    <span class="comment">// 任务容器</span></div><div class="line">    LinkedList&lt;Runnable&gt; tasks = <span class="keyword">new</span> LinkedList&lt;Runnable&gt;();</div><div class="line">  </div><div class="line">    <span class="comment">// 试图消费任务的线程</span></div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">        threadPoolSize = <span class="number">10</span>;</div><div class="line">  </div><div class="line">        <span class="comment">// 启动10个任务消费者线程</span></div><div class="line">        <span class="keyword">synchronized</span> (tasks) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadPoolSize; i++) &#123;</div><div class="line">                <span class="keyword">new</span> TaskConsumeThread(<span class="string">"任务消费者线程 "</span> + i).start();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (tasks) &#123;</div><div class="line">            tasks.add(r);</div><div class="line">            <span class="comment">// 唤醒等待的任务消费者线程</span></div><div class="line">            tasks.notifyAll();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TaskConsumeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TaskConsumeThread</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(name);</div><div class="line">        &#125;</div><div class="line">  </div><div class="line">        Runnable task;</div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"启动： "</span> + <span class="keyword">this</span>.getName());</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                <span class="keyword">synchronized</span> (tasks) &#123;</div><div class="line">                    <span class="keyword">while</span> (tasks.isEmpty()) &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            tasks.wait();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    task = tasks.removeLast();</div><div class="line">                    <span class="comment">// 允许添加任务的线程可以继续添加任务</span></div><div class="line">                    tasks.notifyAll();</div><div class="line">  </div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" 获取到任务，并执行"</span>);</div><div class="line">                task.run();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>TestThread.java</code><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestThread</span> &#123;</div><div class="line">       </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        ThreadPool pool = <span class="keyword">new</span> ThreadPool();</div><div class="line">  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">            Runnable task = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">                @Override</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="comment">//System.out.println("执行任务");</span></div><div class="line">                    <span class="comment">//任务可能是打印一句话</span></div><div class="line">                    <span class="comment">//可能是访问文件</span></div><div class="line">                    <span class="comment">//可能是做排序</span></div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">             </div><div class="line">            pool.<span class="keyword">add</span>(task);</div><div class="line">             </div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="测试线程池"><a href="#测试线程池" class="headerlink" title="测试线程池"></a>测试线程池</h2><p>创造一个情景，每个任务执行的时间都是1秒。<br>刚开始是间隔1秒钟向线程池中添加任务，<br>然后间隔时间越来越短，执行任务的线程还没有来得及结束，新的任务又来了。<br>就会观察到线程池里的其他线程被唤醒来执行这些任务。<br><code>TestThread.java</code><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestThread</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        ThreadPool pool= <span class="keyword">new</span> ThreadPool();</div><div class="line">        <span class="keyword">int</span> sleep=<span class="number">1000</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">            pool.<span class="keyword">add</span>(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">                @Override</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="comment">//System.out.println("执行任务");</span></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">1000</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(sleep);</div><div class="line">                sleep = sleep&gt;<span class="number">100</span>?sleep<span class="number">-100</span>:sleep;</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">              </div><div class="line">        &#125;</div><div class="line">          </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用Java自带的线程池"><a href="#使用Java自带的线程池" class="headerlink" title="使用Java自带的线程池"></a>使用Java自带的线程池</h2><p>Java提供自带的线程池，而不需要自己去开发一个自定义线程池。<br>线程池类<code>ThreadPoolExecutor</code>在包<code>java.util.concurrent</code>下<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ThreadPoolExecutor threadPool= <span class="keyword">new</span> <span class="type">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">15</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="type">LinkedBlockingQueue</span>&lt;Runnable&gt;());</div></pre></td></tr></table></figure></p>
<p>第一个参数<code>10</code>表示这个线程池<code>初始化了10</code>个线程在里面工作。<br>第二个参数<code>15</code>表示如果10个线程不够用了，就会自动增加到<code>最多15个线程</code>。<br>第三个参数<code>60</code>结合第四个参数<code>TimeUnit.SECONDS</code>，表示经过<code>60秒</code>,多出来的线程还没有接到活儿，就会回收，最后保持池子里就10个。<br>第四个参数<code>TimeUnit.SECONDS</code>如上。<br>第五个参数<code>new LinkedBlockingQueue()</code>用来放任务的集合。<br><code>execute</code>方法用于添加新的任务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line">   </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">           </div><div class="line">        ThreadPoolExecutor threadPool= <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">10</span>, <span class="number">15</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">           </div><div class="line">        threadPool.execute(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">   </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">                System.out.println(<span class="string">"任务1"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="借助线程池同步查找文件内容"><a href="#借助线程池同步查找文件内容" class="headerlink" title="借助线程池同步查找文件内容"></a>借助线程池同步查找文件内容</h2><p>初始化一个大小是10的线程池<br>遍历所有文件，当遍历到文件是<code>.java</code>的时候，创建一个查找文件的任务，把这个任务扔进线程池去执行，继续遍历下一个文件。<br><code>SearchFileTask.java</code><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</div><div class="line"><span class="keyword">import</span> java.io.FileReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> SearchFileTask <span class="keyword">implements</span> Runnable&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">File</span> <span class="keyword">file</span>;</div><div class="line">    <span class="keyword">private</span> String search;</div><div class="line">    <span class="keyword">public</span> SearchFileTask(<span class="keyword">File</span> <span class="keyword">file</span>,String search) &#123;</div><div class="line">        <span class="keyword">this</span>.<span class="keyword">file</span> = <span class="keyword">file</span>;</div><div class="line">        <span class="keyword">this</span>.search= search;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> run()&#123;</div><div class="line">         </div><div class="line">        String fileContent = readFileConent(<span class="keyword">file</span>);</div><div class="line">        <span class="keyword">if</span>(fileContent.contains(search))&#123;</div><div class="line">            System.out.printf( <span class="string">"线程: %s 找到子目标字符串%s,在文件:%s%n"</span>,Thread.currentThread().getName(), search,<span class="keyword">file</span>);</div><div class="line">             </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">public</span> String readFileConent(<span class="keyword">File</span> <span class="keyword">file</span>)&#123;</div><div class="line">        <span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> FileReader(<span class="keyword">file</span>)) &#123;</div><div class="line">            <span class="keyword">char</span>[] all = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) <span class="keyword">file</span>.length()];</div><div class="line">            fr.<span class="keyword">read</span>(all);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(all);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>ThreadPool.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</div><div class="line">    <span class="comment">// 线程池大小</span></div><div class="line">    <span class="keyword">int</span> threadPoolSize;</div><div class="line">  </div><div class="line">    <span class="comment">// 任务容器</span></div><div class="line">    LinkedList&lt;Runnable&gt; tasks = <span class="keyword">new</span> LinkedList&lt;Runnable&gt;();</div><div class="line">  </div><div class="line">    <span class="comment">// 试图消费任务的线程</span></div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">        threadPoolSize = <span class="number">10</span>;</div><div class="line">  </div><div class="line">        <span class="comment">// 启动10个任务消费者线程</span></div><div class="line">        <span class="keyword">synchronized</span> (tasks) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadPoolSize; i++) &#123;</div><div class="line">                <span class="keyword">new</span> TaskConsumeThread(<span class="string">"任务消费者线程 "</span> + i).start();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (tasks) &#123;</div><div class="line">            tasks.add(r);</div><div class="line">            <span class="comment">// 唤醒等待的任务消费者线程</span></div><div class="line">            tasks.notifyAll();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TaskConsumeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TaskConsumeThread</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(name);</div><div class="line">        &#125;</div><div class="line">  </div><div class="line">        Runnable task;</div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                <span class="keyword">synchronized</span> (tasks) &#123;</div><div class="line">                    <span class="keyword">while</span> (tasks.isEmpty()) &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            tasks.wait();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    task = tasks.removeLast();</div><div class="line">                    <span class="comment">// 允许添加任务的线程可以继续添加任务</span></div><div class="line">                    tasks.notifyAll();</div><div class="line">  </div><div class="line">                &#125;</div><div class="line">                task.run();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>TestThread.java</code><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</div><div class="line">   </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestThread &#123;</div><div class="line">   </div><div class="line">    <span class="keyword">static</span> ThreadPool pool= <span class="keyword">new</span> ThreadPool();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> search(<span class="keyword">File</span> <span class="keyword">file</span>, String search) &#123;</div><div class="line">         </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">file</span>.isFile()) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">file</span>.getName().toLowerCase().endsWith(<span class="string">".java"</span>))&#123;</div><div class="line">                SearchFileTask <span class="keyword">task</span> = <span class="keyword">new</span> SearchFileTask(<span class="keyword">file</span>, search);</div><div class="line">                pool.add(<span class="keyword">task</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">file</span>.isDirectory()) &#123;</div><div class="line">            <span class="keyword">File</span>[] fs = <span class="keyword">file</span>.listFiles();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">File</span> f : fs) &#123;</div><div class="line">                search(f, search);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">       </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">        <span class="keyword">File</span> folder =<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"e:\\project"</span>);</div><div class="line">        search(folder,<span class="string">"Magic"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每一个线程的启动和结束都是比较消耗时间和占用资源的。&lt;br&gt;如果在系统中用到了很多的线程，大量的启动和结束动作会导致系统的性能变卡，响应变慢。&lt;br&gt;为了解决这个问题，引入线程池这种设计思想。&lt;br&gt;线程池的模式很像生产者消费者模式，消费的对象是一个一个的能够运行的任务。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>线程安全的类</title>
    <link href="http://www.sanstylemc.cn/2018/07/13/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E7%B1%BB/"/>
    <id>http://www.sanstylemc.cn/2018/07/13/线程安全的类/</id>
    <published>2018-07-13T08:11:00.000Z</published>
    <updated>2018-07-13T08:11:38.271Z</updated>
    
    <content type="html"><![CDATA[<p>常见的线程安全相关的面试题。<br><a id="more"></a></p>
<h2 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h2><p>HashMap和Hashtable都实现了Map接口，都是键值对保存数据的方式。<br>区别1：</p>
<ul>
<li>HashMap可以存放null</li>
<li>Hashtable不能存放null<br>区别2：</li>
<li>HashMap不是线程安全的类</li>
<li>Hashtable是线程安全的类</li>
</ul>
<h2 id="StringBuffer和StringBuilder的区别"><a href="#StringBuffer和StringBuilder的区别" class="headerlink" title="StringBuffer和StringBuilder的区别"></a>StringBuffer和StringBuilder的区别</h2><p>StringBuffer是线程安全的<br>StringBuilder是非线程安全的<br>所以当进行大量字符串拼接操作的时候，如果是单线程就用StringBuffer会更快些，如果是多线程，就需要用StringBuffer保证数据的安全性。</p>
<blockquote>
<p>非线程安全的为什么会比线程安全的快？因为不需要同步，省略了时间。</p>
</blockquote>
<h2 id="ArrayList和Vector的区别"><a href="#ArrayList和Vector的区别" class="headerlink" title="ArrayList和Vector的区别"></a>ArrayList和Vector的区别</h2><p>通过在eclipse中查看源代码可以得知：<br>ArrayList类的声明：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ArrayList&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractList&lt;E&gt;</span></span></div><div class="line"><span class="class">    <span class="title">implements</span> <span class="title">List&lt;E&gt;</span>, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></div></pre></td></tr></table></figure></p>
<p>Vector类的声明：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Vector&lt;E&gt;</span>    <span class="keyword">extends</span> <span class="title">AbstractList&lt;E&gt;</span></span></div><div class="line"><span class="class">    <span class="title">implements</span> <span class="title">List&lt;E&gt;</span>, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></div></pre></td></tr></table></figure></p>
<p>一模一样的~<br>他们的区别也在于，Vector是线程安全的类，而ArrayList是非线程安全的。</p>
<h2 id="把非线程安全的集合转换为线程安全"><a href="#把非线程安全的集合转换为线程安全" class="headerlink" title="把非线程安全的集合转换为线程安全"></a>把非线程安全的集合转换为线程安全</h2><p>ArrayList是非线程安全的，换句话说，多个线程可以同时进入一个ArrayList对象的add方法<br>借助<code>Collections.synchronizedList</code>，可以把ArrayList转换为线程安全的List。<br>与此类似的，还有HashSet, LinkedList, HashMap等等非线程安全的类，都通过工具类Collections转换为线程安全的。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package multiplethread;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.<span class="built_in">List</span>;</div><div class="line"> </div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</div><div class="line">    </div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        <span class="built_in">List</span>&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="built_in">List</span>&lt;Integer&gt; list2 = Collections.synchronizedList(list1);</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="线程安全的MyStack"><a href="#线程安全的MyStack" class="headerlink" title="线程安全的MyStack"></a>线程安全的MyStack</h2><p>把LinkedList通过<code>Collections.synchronizedList</code>转换成了一个线程安全的List。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List<span class="tag">&lt;<span class="name">Hero</span>&gt;</span> heros = (List<span class="tag">&lt;<span class="name">Hero</span>&gt;</span>) Collections.synchronizedList(new LinkedList<span class="tag">&lt;<span class="name">Hero</span>&gt;</span>());</div></pre></td></tr></table></figure></p>
<p>不需要在push上加synchronized修饰符<br>虽然多个线程可以同时进入push方法，但是调用heros.add方法的时候，同一时间，只有一个线程可以进入。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span>(<span class="params">Hero h</span>) </span>&#123;</div><div class="line">  heros.<span class="keyword">add</span>(h);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> collection;</div><div class="line">     </div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line">  </div><div class="line"><span class="keyword">import</span> charactor.Hero;</div><div class="line">     </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> <span class="keyword">implements</span> <span class="title">Stack</span></span>&#123;</div><div class="line">     </div><div class="line">    <span class="comment">//把LinkedList通过 Collections.synchronizedList转换成了一个线程安全的List</span></div><div class="line">    List&lt;Hero&gt; heros = (List&lt;Hero&gt;) Collections.synchronizedList(<span class="keyword">new</span> LinkedList&lt;Hero&gt;());</div><div class="line">  </div><div class="line">    <span class="comment">//不需要在push上加synchronized修饰符</span></div><div class="line">    <span class="comment">//虽然多个线程可以同时进入push方法，但是调用heros.add方法的时候</span></div><div class="line">    <span class="comment">//同一时间，只有一个线程可以进入</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Hero h)</span> </span>&#123;</div><div class="line">        heros.add(h);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> Hero <span class="title">pull</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> heros.remove(heros.size()-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> Hero <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> heros.get(heros.size()-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的线程安全相关的面试题。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>黑白棋子</title>
    <link href="http://www.sanstylemc.cn/2018/07/12/%E9%BB%91%E7%99%BD%E6%A3%8B%E5%AD%90/"/>
    <id>http://www.sanstylemc.cn/2018/07/12/黑白棋子/</id>
    <published>2018-07-12T01:03:11.000Z</published>
    <updated>2018-07-12T01:04:12.240Z</updated>
    
    <content type="html"><![CDATA[<p>黑白棋子Java版<br><a id="more"></a><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.Color;</div><div class="line"><span class="keyword">import</span> java.awt.Dimension;</div><div class="line"><span class="keyword">import</span> java.awt.Graphics;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</div><div class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</div><div class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JMenu;</div><div class="line"><span class="keyword">import</span> javax.swing.JMenuBar;</div><div class="line"><span class="keyword">import</span> javax.swing.JMenuItem;</div><div class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</div><div class="line"><span class="keyword">import</span> javax.swing.JPanel;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class mc_07116 &#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 控件属性</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> JFrame frame; <span class="comment">// 五子棋游戏的窗口框架</span></div><div class="line">	<span class="keyword">private</span> GameMap <span class="built_in">map</span>; <span class="comment">// 五子棋游戏的窗口容器</span></div><div class="line">	<span class="keyword">private</span> JMenuBar bar; <span class="comment">// 菜单</span></div><div class="line">	<span class="keyword">private</span> JMenu game; <span class="comment">// 菜单项</span></div><div class="line">	<span class="keyword">private</span> JMenuItem[] items; <span class="comment">// 菜单下拉项</span></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 静态数据属性</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> BOARD_SIZE = <span class="number">15</span>; <span class="comment">// 棋盘大小(15 * 15)</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> ROW_WIDTH = <span class="number">36</span>; <span class="comment">// 间距</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> SPACE = ROW_WIDTH / <span class="number">2</span>; <span class="comment">// 上下边间距</span></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 数据属性</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> <span class="built_in">boolean</span> player; <span class="comment">// true黑,false白</span></div><div class="line">	<span class="keyword">private</span> <span class="built_in">char</span>[][] board; <span class="comment">// 后台虚拟棋盘</span></div><div class="line"></div><div class="line">	<span class="keyword">public</span> mc_07116() &#123;</div><div class="line">		player = <span class="keyword">true</span>; <span class="comment">// 游戏先黑子下</span></div><div class="line">		board = <span class="keyword">new</span> <span class="built_in">char</span>[BOARD_SIZE][BOARD_SIZE]; <span class="comment">// 建立后台虚拟棋盘</span></div><div class="line">		clearMap();</div><div class="line">		createGUI();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 对GUI控件的创建</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">void</span> createGUI() &#123;</div><div class="line">		frame = <span class="keyword">new</span> JFrame(<span class="string">"五子棋"</span>); <span class="comment">// 实现五子棋游戏窗口框架</span></div><div class="line">		bar = <span class="keyword">new</span> JMenuBar(); <span class="comment">// 建立菜单栏</span></div><div class="line">		game = <span class="keyword">new</span> JMenu(<span class="string">"游戏"</span>); <span class="comment">// 建立名为“游戏”的菜单</span></div><div class="line">		items = <span class="keyword">new</span> JMenuItem[<span class="number">2</span>]; <span class="comment">// game菜单下创建2个子菜单项</span></div><div class="line">		game.<span class="built_in">add</span>(items[<span class="number">0</span>] = <span class="keyword">new</span> JMenuItem(<span class="string">"重新开始"</span>));<span class="comment">// 第一个子菜单为“重新开始”</span></div><div class="line">		game.<span class="built_in">add</span>(items[<span class="number">1</span>] = <span class="keyword">new</span> JMenuItem(<span class="string">"退出"</span>)); <span class="comment">// 第二个子菜单为“退出”</span></div><div class="line">		bar.<span class="built_in">add</span>(game);<span class="comment">// 菜单项加入菜单栏</span></div><div class="line">		<span class="built_in">map</span> = <span class="keyword">new</span> GameMap(); <span class="comment">// 实现五子棋游戏窗口容器</span></div><div class="line">		<span class="built_in">map</span>.setPreferredSize(</div><div class="line">				<span class="keyword">new</span> Dimension(ROW_WIDTH * (BOARD_SIZE - <span class="number">1</span>) + SPACE * <span class="number">2</span>, ROW_WIDTH * (BOARD_SIZE - <span class="number">1</span>) + SPACE * <span class="number">2</span>));<span class="comment">// 设置容器大小</span></div><div class="line">		frame.setJMenuBar(bar);</div><div class="line">		frame.<span class="built_in">add</span>(<span class="built_in">map</span>);</div><div class="line">		frame.pack();</div><div class="line">		frame.setLocation(<span class="number">450</span>, <span class="number">100</span>);</div><div class="line">		frame.setResizable(<span class="keyword">false</span>);</div><div class="line">		frame.setVisible(<span class="keyword">true</span>);</div><div class="line">		frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 清空棋子</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> clearMap() &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; BOARD_SIZE; i++) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; BOARD_SIZE; j++) &#123;</div><div class="line">				board[i][j] = <span class="string">'+'</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 运行游戏</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> start() &#123;</div><div class="line">		<span class="built_in">map</span>.addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;</div><div class="line">			<span class="comment">// 鼠标点击事件</span></div><div class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">mouseClicked</span>(MouseEvent e) &#123;</div><div class="line">				<span class="comment">// 将用户鼠标事件的座标转换成棋子数组的座标。</span></div><div class="line">				<span class="built_in">int</span> xPos = (<span class="built_in">int</span>) (e.getX() / ROW_WIDTH);</div><div class="line">				<span class="built_in">int</span> yPos = (<span class="built_in">int</span>) (e.getY() / ROW_WIDTH);</div><div class="line">				<span class="keyword">if</span> (board[xPos][yPos] == <span class="string">'+'</span>) &#123;<span class="comment">// 判断是否下过棋</span></div><div class="line">					board[xPos][yPos] = player ? <span class="string">'b'</span> : <span class="string">'w'</span>; <span class="comment">// 给虚拟键盘赋值</span></div><div class="line">					<span class="built_in">map</span>.repaint(); <span class="comment">// 通过读取board数组进行贴图</span></div><div class="line">					<span class="keyword">if</span> (isWin(xPos, yPos)) &#123;<span class="comment">// 如果有满足胜利条件的玩家了</span></div><div class="line">						<span class="built_in">map</span>.repaint(); <span class="comment">// 刷新图像</span></div><div class="line">						<span class="keyword">String</span> <span class="built_in">str</span> = player ? <span class="string">"黑方胜利"</span> : <span class="string">"白方胜利"</span>;</div><div class="line">						JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="built_in">str</span>, <span class="string">"游戏结束"</span>, JOptionPane.PLAIN_MESSAGE); <span class="comment">// 弹出消息框</span></div><div class="line">						clearMap(); <span class="comment">// 清空棋盘</span></div><div class="line">						<span class="built_in">map</span>.repaint(); <span class="comment">// 刷新棋盘</span></div><div class="line">						player = <span class="keyword">true</span>; <span class="comment">// 新一局继续黑子先下</span></div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						player = player ? <span class="keyword">false</span> : <span class="keyword">true</span>; <span class="comment">// 切换玩家</span></div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		<span class="comment">// 点击重新开始事件</span></div><div class="line">		items[<span class="number">0</span>].addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">			<span class="keyword">public</span> <span class="keyword">void</span> actionPerformed(ActionEvent e) &#123;</div><div class="line">				<span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"是否要重新开始游戏?"</span>;</div><div class="line">				<span class="comment">// 添加消息对话框</span></div><div class="line">				<span class="keyword">if</span> (JOptionPane.showConfirmDialog(<span class="keyword">null</span>, <span class="built_in">str</span>, <span class="string">"重新开始"</span>,</div><div class="line">						JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) &#123;</div><div class="line">					clearMap(); <span class="comment">// 清空棋盘</span></div><div class="line">					<span class="built_in">map</span>.repaint(); <span class="comment">// 刷新棋盘</span></div><div class="line">					player = <span class="keyword">true</span>; <span class="comment">// 玩家为黑棋</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		<span class="comment">// 点击退出事件</span></div><div class="line">		items[<span class="number">1</span>].addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">			<span class="keyword">public</span> <span class="keyword">void</span> actionPerformed(ActionEvent e) &#123;</div><div class="line">				<span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"是否要退出游戏?"</span>;</div><div class="line">				<span class="comment">// 添加消息对话框</span></div><div class="line">				<span class="keyword">if</span> (JOptionPane.showConfirmDialog(<span class="keyword">null</span>, <span class="built_in">str</span>, <span class="string">"重新开始"</span>,</div><div class="line">						JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) &#123;</div><div class="line">					System.<span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// 退出</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		<span class="comment">// 点关闭按钮事件</span></div><div class="line">		frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</div><div class="line">			<span class="keyword">public</span> <span class="keyword">void</span> windowClosing(WindowEvent e) &#123;</div><div class="line">				<span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"是否要退出游戏?"</span>;</div><div class="line">				<span class="comment">// 添加消息对话框</span></div><div class="line">				<span class="keyword">if</span> (JOptionPane.showConfirmDialog(<span class="keyword">null</span>, <span class="built_in">str</span>, <span class="string">"退出游戏"</span>,</div><div class="line">						JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) &#123;</div><div class="line">					System.<span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// 退出</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 纵向找</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">protected</span> <span class="built_in">boolean</span> find(<span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</div><div class="line">		<span class="built_in">int</span> i, num = <span class="number">1</span>;</div><div class="line">		<span class="built_in">char</span> temp = player ? <span class="string">'b'</span> : <span class="string">'w'</span>;</div><div class="line">		<span class="keyword">for</span> (i = x + <span class="number">1</span>; i &lt; <span class="number">15</span>; i++) &#123;<span class="comment">// 向下找</span></div><div class="line">			<span class="keyword">if</span> (board[i][y] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (i = x - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;<span class="comment">// 向上找</span></div><div class="line">			<span class="keyword">if</span> (board[i][y] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 横向找</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">protected</span> <span class="built_in">boolean</span> find2(<span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</div><div class="line">		<span class="built_in">int</span> i, num = <span class="number">1</span>;</div><div class="line">		<span class="built_in">char</span> temp = player ? <span class="string">'b'</span> : <span class="string">'w'</span>;</div><div class="line">		<span class="keyword">for</span> (i = y + <span class="number">1</span>; i &lt; <span class="number">15</span>; i++) &#123; <span class="comment">// 向右找</span></div><div class="line">			<span class="keyword">if</span> (board[x][i] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (i = y - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;<span class="comment">// 向左找</span></div><div class="line">			<span class="keyword">if</span> (board[x][i] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 方向</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">protected</span> <span class="built_in">boolean</span> find3(<span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</div><div class="line">		<span class="built_in">int</span> i, j, num = <span class="number">1</span>;</div><div class="line">		<span class="built_in">char</span> temp = player ? <span class="string">'b'</span> : <span class="string">'w'</span>;</div><div class="line">		<span class="keyword">for</span> (i = x + <span class="number">1</span>, j = y + <span class="number">1</span>; i &lt; <span class="number">15</span> &amp;&amp; j &lt; <span class="number">15</span>; i++, j++) &#123;<span class="comment">// 向下方</span></div><div class="line">			<span class="keyword">if</span> (board[i][j] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (i = x - <span class="number">1</span>, j = y - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i--, j--) &#123;<span class="comment">// 向上方</span></div><div class="line">			<span class="keyword">if</span> (board[i][j] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * /方向</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">protected</span> <span class="built_in">boolean</span> find4(<span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</div><div class="line">		<span class="built_in">int</span> i, j, num = <span class="number">1</span>;</div><div class="line">		<span class="built_in">char</span> temp = player ? <span class="string">'b'</span> : <span class="string">'w'</span>;</div><div class="line">		<span class="keyword">for</span> (i = x + <span class="number">1</span>, j = y - <span class="number">1</span>; i &lt; <span class="number">15</span> &amp;&amp; j &gt;= <span class="number">0</span>; i++, j--) &#123;<span class="comment">// 向下</span></div><div class="line">			<span class="keyword">if</span> (board[i][j] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (i = x - <span class="number">1</span>, j = y + <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; <span class="number">15</span>; i--, j++) &#123; <span class="comment">// 向上</span></div><div class="line">			<span class="keyword">if</span> (board[i][j] == temp) &#123;</div><div class="line">				num++;</div><div class="line">				<span class="keyword">if</span> (num == <span class="number">5</span>) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 判断胜负</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">protected</span> <span class="built_in">boolean</span> isWin(<span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</div><div class="line">		<span class="keyword">return</span> (find(x, y) || find2(x, y) || find3(x, y) || find4(x, y));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 内部容器类，用于实现图像处理</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> class GameMap extends JPanel &#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">16578987565248</span>L;</div><div class="line"></div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> paintComponent(Graphics g) &#123;</div><div class="line">			<span class="keyword">super</span>.paintComponent(g);</div><div class="line">			<span class="comment">// 棋盘</span></div><div class="line">			g.setColor(<span class="keyword">new</span> Color(<span class="number">200</span>, <span class="number">100</span>, <span class="number">50</span>)); <span class="comment">// 设为桔黄色</span></div><div class="line">			g.fillRect(<span class="number">0</span>, <span class="number">0</span>, ROW_WIDTH * (BOARD_SIZE + <span class="number">1</span>), ROW_WIDTH * (BOARD_SIZE + <span class="number">1</span>)); <span class="comment">// 填充棋盘</span></div><div class="line">			g.setColor(Color.black); <span class="comment">// 设为黑色</span></div><div class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; BOARD_SIZE; i++) &#123;<span class="comment">// 画竖线</span></div><div class="line">				g.drawLine(SPACE + ROW_WIDTH * i, SPACE, SPACE + ROW_WIDTH * i, SPACE + ROW_WIDTH * (BOARD_SIZE - <span class="number">1</span>));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; BOARD_SIZE; i++) &#123;<span class="comment">// 画横线</span></div><div class="line">				g.drawLine(SPACE, SPACE + ROW_WIDTH * i, SPACE + ROW_WIDTH * (BOARD_SIZE - <span class="number">1</span>), SPACE + ROW_WIDTH * i);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 画点</span></div><div class="line">			g.fillOval(SPACE + <span class="number">3</span> * ROW_WIDTH - <span class="number">3</span>, SPACE + <span class="number">3</span> * ROW_WIDTH - <span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>);</div><div class="line">			g.fillOval(SPACE + <span class="number">11</span> * ROW_WIDTH - <span class="number">3</span>, SPACE + <span class="number">3</span> * ROW_WIDTH - <span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>);</div><div class="line">			g.fillOval(SPACE + <span class="number">3</span> * ROW_WIDTH - <span class="number">3</span>, SPACE + <span class="number">11</span> * ROW_WIDTH - <span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>);</div><div class="line">			g.fillOval(SPACE + <span class="number">7</span> * ROW_WIDTH - <span class="number">3</span>, SPACE + <span class="number">7</span> * ROW_WIDTH - <span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>);</div><div class="line">			g.fillOval(SPACE + <span class="number">11</span> * ROW_WIDTH - <span class="number">3</span>, SPACE + <span class="number">11</span> * ROW_WIDTH - <span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>);</div><div class="line">			<span class="comment">// 棋子</span></div><div class="line">			<span class="comment">// 遍历数组，绘制棋子。</span></div><div class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; BOARD_SIZE; i++) &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; BOARD_SIZE; j++) &#123;</div><div class="line">					<span class="keyword">if</span> (board[i][j] == <span class="string">'b'</span>) &#123;<span class="comment">// 绘制黑棋</span></div><div class="line">						g.setColor(Color.black);</div><div class="line">						g.fillOval(SPACE + i * ROW_WIDTH - ROW_WIDTH / <span class="number">2</span>, SPACE + j * ROW_WIDTH - ROW_WIDTH / <span class="number">2</span>,</div><div class="line">								ROW_WIDTH, ROW_WIDTH);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> (board[i][j] == <span class="string">'w'</span>) &#123;<span class="comment">// 绘制白棋</span></div><div class="line">						g.setColor(Color.white);</div><div class="line">						g.fillOval(SPACE + i * ROW_WIDTH - ROW_WIDTH / <span class="number">2</span>, SPACE + j * ROW_WIDTH - ROW_WIDTH / <span class="number">2</span>,</div><div class="line">								ROW_WIDTH, ROW_WIDTH);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		mc_07116 game = <span class="keyword">new</span> mc_07116();</div><div class="line">		game.start();</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"测试成功"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;黑白棋子Java版&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo文章设置密码</title>
    <link href="http://www.sanstylemc.cn/2018/07/09/Hexo%E6%96%87%E7%AB%A0%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81/"/>
    <id>http://www.sanstylemc.cn/2018/07/09/Hexo文章设置密码/</id>
    <published>2018-07-09T03:24:14.000Z</published>
    <updated>2018-07-09T03:33:56.882Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo文件是静态的，文章的所有信息都在页面中。加密需要用到js的阻塞机制，当页面中有调用<code>alert();</code>函数的时候，整个页面会停止运行，直到你点击确定之后，页面中的代码才会继续执行下去。<br><a id="more"></a><br>找到此路径下的文件：<br><code>themes--&gt;next--&gt;layout--&gt;_partials--&gt;head.swig</code> 。<br>将下方代码添加在<code>&lt;meta&gt;</code>标签之后。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">	<span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span></div><div class="line"><span class="actionscript">	    <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>,<span class="string">''</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span></div><div class="line"><span class="actionscript">		alert(<span class="string">'密码错误！'</span>);</span></div><div class="line"><span class="undefined">		history.back();</span></div><div class="line"><span class="undefined">	    &#125;</span></div><div class="line"><span class="undefined">	&#125;</span></div><div class="line"><span class="undefined">    &#125;)();</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>page</code>这个变量就是你在<code>hexo new</code>的时候生成文件中最顶部的东西。<br>修改文章头部标签文件：<br><code>hexo--&gt;scaffolds/post.md</code><br>可以参照如下模式。<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line"><span class="keyword">tags:</span> </div><div class="line">password: password</div></pre></td></tr></table></figure></p>
<p>这样我们就好像使用静态页面完成了部分只有动态页面能完成的东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo文件是静态的，文章的所有信息都在页面中。加密需要用到js的阻塞机制，当页面中有调用&lt;code&gt;alert();&lt;/code&gt;函数的时候，整个页面会停止运行，直到你点击确定之后，页面中的代码才会继续执行下去。&lt;br&gt;
    
    </summary>
    
    
      <category term="Skill" scheme="http://www.sanstylemc.cn/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>比较冒泡法、选择法以及二叉树排序的性能区别</title>
    <link href="http://www.sanstylemc.cn/2018/07/09/%E6%AF%94%E8%BE%83%E5%86%92%E6%B3%A1%E6%B3%95%E3%80%81%E9%80%89%E6%8B%A9%E6%B3%95%E4%BB%A5%E5%8F%8A%E4%BA%8C%E5%8F%89%E6%A0%91%E6%8E%92%E5%BA%8F%E7%9A%84%E6%80%A7%E8%83%BD%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.sanstylemc.cn/2018/07/09/比较冒泡法、选择法以及二叉树排序的性能区别/</id>
    <published>2018-07-09T02:15:02.000Z</published>
    <updated>2018-07-09T02:15:45.252Z</updated>
    
    <content type="html"><![CDATA[<p>创建4万个随机数，然后分别用冒泡法、选择法、二叉树3种排序算法进行排序，比较哪种更快。<br><a id="more"></a><br><code>mc_07093.java</code><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">    <span class="comment">//初始化随机数</span></div><div class="line">    <span class="keyword">int</span> total = <span class="number">40000</span>;</div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"初始化一个长度是"</span>+total+<span class="string">"的随机数字的数组"</span>);</div><div class="line">    <span class="keyword">int</span>[] originalNumbers = <span class="keyword">new</span> <span class="keyword">int</span>[total];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; originalNumbers.length; i++) &#123;</div><div class="line">        originalNumbers[i] = (<span class="keyword">int</span>)(Math.random()*total);</div><div class="line">    &#125;</div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"初始化完毕"</span>);</div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"接下来分别用3种算法进行排序"</span>);</div><div class="line">     </div><div class="line">    <span class="comment">//从初始化了的随机数组复制过来，以保证，每一种排序算法的目标数组，都是一样的</span></div><div class="line">    <span class="keyword">int</span>[] use4sort;</div><div class="line">     </div><div class="line">    use4sort= Arrays.copyOf(originalNumbers, originalNumbers.length);</div><div class="line">    <span class="keyword">int</span>[] sortedNumbersBySelection= performance(<span class="keyword">new</span> SelectionSort(use4sort),<span class="string">"选择法"</span>);</div><div class="line">     </div><div class="line">    use4sort= Arrays.copyOf(originalNumbers, originalNumbers.length);</div><div class="line">    <span class="keyword">int</span>[] sortedNumbersByBubbling=performance(<span class="keyword">new</span> BubblingSort(use4sort),<span class="string">"冒泡法"</span>);</div><div class="line">     </div><div class="line">    use4sort= Arrays.copyOf(originalNumbers, originalNumbers.length);</div><div class="line">    <span class="keyword">int</span>[] sortedNumbersByTree=performance(<span class="keyword">new</span> TreeSort(use4sort),<span class="string">"二叉树"</span>);</div><div class="line">     </div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"查看排序结果，是否是不同的数组对象"</span>);</div><div class="line">    System.<span class="keyword">out</span>.println(sortedNumbersBySelection);</div><div class="line">    System.<span class="keyword">out</span>.println(sortedNumbersByBubbling);</div><div class="line">    System.<span class="keyword">out</span>.println(sortedNumbersByTree);</div><div class="line">     </div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"查看排序结果，内容是否相同"</span>);</div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"比较 选择法 和 冒泡法  排序结果："</span>);</div><div class="line">    System.<span class="keyword">out</span>.println(Arrays.<span class="keyword">equals</span>(sortedNumbersBySelection, sortedNumbersByBubbling));</div><div class="line">    System.<span class="keyword">out</span>.println(<span class="string">"比较 选择法 和 二叉树  排序结果："</span>);</div><div class="line">    System.<span class="keyword">out</span>.println(Arrays.<span class="keyword">equals</span>(sortedNumbersBySelection, sortedNumbersByTree));</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">interface</span> <span class="title">Sort</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span>(<span class="params"></span>)</span>;</div><div class="line">    <span class="function"><span class="keyword">int</span>[] <span class="title">values</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SelectionSort</span> <span class="title">implements</span> <span class="title">Sort</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> numbers[];</div><div class="line">    SelectionSort(<span class="keyword">int</span> [] numbers)&#123;</div><div class="line">        <span class="keyword">this</span>.numbers = numbers;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    @Override</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numbers.length<span class="number">-1</span>; j++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j+<span class="number">1</span>; i &lt; numbers.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(numbers[i]&lt;numbers[j])&#123;  </div><div class="line">                    <span class="keyword">int</span> temp = numbers[j];</div><div class="line">                    numbers[j] = numbers[i];</div><div class="line">                    numbers[i] = temp;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">values</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> numbers;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">BubblingSort</span> <span class="title">implements</span> <span class="title">Sort</span>&#123;</div><div class="line">    <span class="keyword">int</span> numbers[];</div><div class="line">    BubblingSort(<span class="keyword">int</span> [] numbers)&#123;</div><div class="line">        <span class="keyword">this</span>.numbers = numbers;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numbers.length; j++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length-j<span class="number">-1</span>; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(numbers[i]&gt;numbers[i+<span class="number">1</span>])&#123;  </div><div class="line">                    <span class="keyword">int</span> temp = numbers[i];</div><div class="line">                    numbers[i] = numbers[i+<span class="number">1</span>];</div><div class="line">                    numbers[i+<span class="number">1</span>] = temp;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">values</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> numbers;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">TreeSort</span> <span class="title">implements</span> <span class="title">Sort</span>&#123;</div><div class="line">    <span class="keyword">int</span> numbers[];</div><div class="line">    mc_07092 n;</div><div class="line">     </div><div class="line">    TreeSort(<span class="keyword">int</span> [] numbers)&#123;</div><div class="line">        n =<span class="keyword">new</span> mc_07092();</div><div class="line">        <span class="keyword">this</span>.numbers = numbers;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : numbers) &#123;</div><div class="line">            n.<span class="keyword">add</span>(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">values</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        List&lt;Object&gt; list = n.values();</div><div class="line">        <span class="keyword">int</span> sortedNumbers[] = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sortedNumbers.length; i++) &#123;</div><div class="line">            sortedNumbers[i] = Integer.parseInt(list.<span class="keyword">get</span>(i).toString());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sortedNumbers;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] <span class="title">performance</span>(<span class="params">Sort algorithm, String type</span>) </span>&#123;</div><div class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">    algorithm.sort();</div><div class="line">    <span class="keyword">int</span> sortedNumbers[] = algorithm.values();</div><div class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">    System.<span class="keyword">out</span>.printf(<span class="string">"%s排序，一共耗时 %d 毫秒%n"</span>,type,end-start);</div><div class="line">    <span class="keyword">return</span> sortedNumbers;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>mc_07092.java</code><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 左子节点</span></div><div class="line"><span class="keyword">public</span> mc_07092 leftNode;</div><div class="line"><span class="comment">// 右子节点</span></div><div class="line"><span class="keyword">public</span> mc_07092 rightNode;</div><div class="line"></div><div class="line"><span class="comment">// 值</span></div><div class="line"><span class="keyword">public</span> Object <span class="keyword">value</span>;</div><div class="line"></div><div class="line"><span class="comment">// 插入 数据</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>(<span class="params">Object v</span>) </span>&#123;</div><div class="line">    <span class="comment">// 如果当前节点没有值，就把数据放在当前节点上</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == <span class="keyword">value</span>)</div><div class="line">        <span class="keyword">value</span> = v;</div><div class="line"></div><div class="line">    <span class="comment">// 如果当前节点有值，就进行判断，新增的值与当前值的大小关系</span></div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 新增的值，比当前值小或者相同</span></div><div class="line">        <span class="keyword">if</span> ((Integer) v -((Integer)<span class="keyword">value</span>) &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == leftNode)</div><div class="line">                leftNode = <span class="keyword">new</span> mc_07092();</div><div class="line">            leftNode.<span class="keyword">add</span>(v);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 新增的值，比当前值大</span></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == rightNode)</div><div class="line">                rightNode = <span class="keyword">new</span> mc_07092();</div><div class="line">            rightNode.<span class="keyword">add</span>(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 中序遍历所有的节点</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">values</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    List&lt;Object&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">// 左节点的遍历结果</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != leftNode)</div><div class="line">        values.addAll(leftNode.values());</div><div class="line"></div><div class="line">    <span class="comment">// 当前节点</span></div><div class="line">    values.<span class="keyword">add</span>(<span class="keyword">value</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 右节点的遍历结果</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != rightNode)</div><div class="line"></div><div class="line">        values.addAll(rightNode.values());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> values;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> randoms[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">67</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">73</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">78</span>, <span class="number">81</span>, <span class="number">10</span>, <span class="number">74</span> &#125;;</div><div class="line"></div><div class="line">    mc_07092 roots = <span class="keyword">new</span> mc_07092();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> number : randoms) &#123;</div><div class="line">        roots.<span class="keyword">add</span>(number);</div><div class="line">    &#125;</div><div class="line">    System.<span class="keyword">out</span>.println(roots.values());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建4万个随机数，然后分别用冒泡法、选择法、二叉树3种排序算法进行排序，比较哪种更快。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>IO流</title>
    <link href="http://www.sanstylemc.cn/2018/07/08/IO%E6%B5%81/"/>
    <id>http://www.sanstylemc.cn/2018/07/08/IO流/</id>
    <published>2018-07-08T13:56:41.000Z</published>
    <updated>2018-07-09T02:46:02.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><p>需要留意的是，read会返回实际的读取数量，有可能实际的读取数量小于缓冲的大小，那么把缓冲中的数据写出到目标文件的时候，就只应该写出部分数据。<br><a id="more"></a><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* @param srcPath 源文件</span></div><div class="line"><span class="comment">* @param destPath 目标文件</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> copyFile(<span class="keyword">String</span> srcPath, <span class="keyword">String</span> destPath)&#123;</div><div class="line">     </div><div class="line">   <span class="built_in">File</span> srcFile = <span class="keyword">new</span> <span class="built_in">File</span>(srcPath);</div><div class="line">   <span class="built_in">File</span> destFile = <span class="keyword">new</span> <span class="built_in">File</span>(destPath);</div><div class="line">     </div><div class="line">   <span class="comment">//缓存区，一次性读取1024字节</span></div><div class="line">   <span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">   <span class="built_in">try</span> (</div><div class="line">           FileInputStream fis = <span class="keyword">new</span> FileInputStream(srcFile);</div><div class="line">           FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);             </div><div class="line">   )&#123;</div><div class="line">       <span class="built_in">while</span>(true)&#123;</div><div class="line">           <span class="comment">//实际读取的长度是 actuallyReaded,有可能小于1024</span></div><div class="line">           <span class="keyword">int</span> actuallyReaded = fis.<span class="built_in">read</span>(<span class="built_in">buffer</span>);</div><div class="line">           <span class="comment">//-1表示没有可读的内容了</span></div><div class="line">           <span class="built_in">if</span>(<span class="number">-1</span>==actuallyReaded)</div><div class="line">               <span class="built_in">break</span>;</div><div class="line">           fos.<span class="built_in">write</span>(<span class="built_in">buffer</span>, <span class="number">0</span>, actuallyReaded);</div><div class="line">           fos.<span class="built_in">flush</span>();</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="built_in">catch</span> (IOException e) &#123;</div><div class="line">       e.printStackTrace();</div><div class="line">   &#125;  </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* @param srcPath 源文件夹</span></div><div class="line"><span class="comment">* @param destPath 目标文件夹</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> copyFolder(<span class="keyword">String</span> srcPath, <span class="keyword">String</span> destPath)&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;  </div><div class="line">   copyFile(<span class="string">"C:\\Users\\12905\\Desktop\\xxx\\2.txt"</span>, <span class="string">"C:\\Users\\12905\\Desktop\\xxx\\3.txt"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="复制文件夹"><a href="#复制文件夹" class="headerlink" title="复制文件夹"></a>复制文件夹</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* @param srcPath 源文件</span></div><div class="line"><span class="comment">* @param destPath 目标文件</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> copyFile(<span class="keyword">String</span> srcPath, <span class="keyword">String</span> destPath)&#123;</div><div class="line">     </div><div class="line">   <span class="built_in">File</span> srcFile = <span class="keyword">new</span> <span class="built_in">File</span>(srcPath);</div><div class="line">   <span class="built_in">File</span> destFile = <span class="keyword">new</span> <span class="built_in">File</span>(destPath);</div><div class="line">     </div><div class="line">   <span class="comment">//缓存区，一次性读取1024字节</span></div><div class="line">   <span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">   <span class="built_in">try</span> (</div><div class="line">       FileInputStream fis = <span class="keyword">new</span> FileInputStream(srcFile);</div><div class="line">       FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</div><div class="line">   )&#123;</div><div class="line">       <span class="built_in">while</span>(true)&#123;</div><div class="line">           <span class="comment">//实际读取的长度是 actuallyReaded,有可能小于1024</span></div><div class="line">           <span class="keyword">int</span> actuallyReaded = fis.<span class="built_in">read</span>(<span class="built_in">buffer</span>);</div><div class="line">           <span class="comment">//-1表示没有可读的内容了</span></div><div class="line">           <span class="built_in">if</span>(<span class="number">-1</span>==actuallyReaded)</div><div class="line">               <span class="built_in">break</span>;</div><div class="line">           fos.<span class="built_in">write</span>(<span class="built_in">buffer</span>, <span class="number">0</span>, actuallyReaded);</div><div class="line">           fos.<span class="built_in">flush</span>();</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="built_in">catch</span> (FileNotFoundException e) &#123;</div><div class="line">       <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">       e.printStackTrace();</div><div class="line">   &#125; <span class="built_in">catch</span> (IOException e) &#123;</div><div class="line">       <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">       e.printStackTrace();</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* @param srcPath 源文件夹</span></div><div class="line"><span class="comment">* @param destPath 目标文件夹</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> copyFolder(<span class="keyword">String</span> srcPath, <span class="keyword">String</span> destPath)&#123;</div><div class="line">     </div><div class="line">   <span class="built_in">File</span> srcFolder = <span class="keyword">new</span> <span class="built_in">File</span>(srcPath);</div><div class="line">   <span class="built_in">File</span> destFolder = <span class="keyword">new</span> <span class="built_in">File</span>(destPath);</div><div class="line">   <span class="comment">//源文件夹不存在</span></div><div class="line">   <span class="built_in">if</span>(!srcFolder.<span class="built_in">exists</span>())</div><div class="line">       <span class="built_in">return</span>;</div><div class="line">   <span class="comment">//源文件夹不是一个文件夹</span></div><div class="line">   <span class="built_in">if</span>(!srcFolder.<span class="built_in">isDirectory</span>())</div><div class="line">       <span class="built_in">return</span>;</div><div class="line">   <span class="comment">//目标文件夹是一个文件</span></div><div class="line">   <span class="built_in">if</span>(destFolder.isFile())</div><div class="line">       <span class="built_in">return</span>;</div><div class="line">   <span class="comment">//目标文件夹不存在</span></div><div class="line">   <span class="built_in">if</span>(!destFolder.<span class="built_in">exists</span>())</div><div class="line">       destFolder.mkdirs();</div><div class="line"></div><div class="line">   <span class="comment">//遍历源文件夹</span></div><div class="line">   <span class="built_in">File</span>[] files=  srcFolder.listFiles();</div><div class="line">   <span class="built_in">for</span> (<span class="built_in">File</span> srcFile : files) &#123;</div><div class="line">       <span class="comment">//如果是文件，就复制</span></div><div class="line">       <span class="built_in">if</span>(srcFile.isFile())&#123;</div><div class="line">           <span class="built_in">File</span> newDestFile = <span class="keyword">new</span> <span class="built_in">File</span>(destFolder,srcFile.getName());</div><div class="line">           copyFile(srcFile.getAbsolutePath(), newDestFile.getAbsolutePath());</div><div class="line">       &#125;</div><div class="line">       <span class="comment">//如果是文件夹，就递归</span></div><div class="line">       <span class="built_in">if</span>(srcFile.<span class="built_in">isDirectory</span>())&#123;</div><div class="line">           <span class="built_in">File</span> newDestFolder = <span class="keyword">new</span> <span class="built_in">File</span>(destFolder,srcFile.getName());</div><div class="line">           copyFolder(srcFile.getAbsolutePath(),newDestFolder.getAbsolutePath());</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">   copyFolder(<span class="string">"C:\\Users\\12905\\Desktop\\xxx"</span>, <span class="string">"C:\\Users\\12905\\Desktop\\yyy"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="查找文件内容"><a href="#查找文件内容" class="headerlink" title="查找文件内容"></a>查找文件内容</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * @param file 查找的目录</span></div><div class="line"><span class="comment"> * @param search 查找的字符串</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> search(<span class="keyword">File</span> <span class="keyword">file</span>, String search) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">file</span>.isFile()) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">file</span>.getName().toLowerCase().endsWith(<span class="string">".java"</span>))&#123;</div><div class="line">            String fileContent = readFileConent(<span class="keyword">file</span>);</div><div class="line">            <span class="keyword">if</span>(fileContent.contains(search))&#123;</div><div class="line">                System.out.printf(<span class="string">"找到子目标字符串%s,在文件:%s%n"</span>,search,<span class="keyword">file</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">file</span>.isDirectory()) &#123;</div><div class="line">        <span class="keyword">File</span>[] fs = <span class="keyword">file</span>.listFiles();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">File</span> f : fs) &#123;</div><div class="line">            search(f, search);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String readFileConent(<span class="keyword">File</span> <span class="keyword">file</span>)&#123;</div><div class="line">    <span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> FileReader(<span class="keyword">file</span>)) &#123;</div><div class="line">        <span class="keyword">char</span>[] all = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) <span class="keyword">file</span>.length()];</div><div class="line">        fr.<span class="keyword">read</span>(all);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(all);</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">    <span class="keyword">File</span> folder =<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"e:\\project"</span>);</div><div class="line">    search(folder,<span class="string">"Magic"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="流关系图"><a href="#流关系图" class="headerlink" title="流关系图"></a>流关系图</h2><p><img src="https://github.com/sunstady/hexo/blob/master/IO%E6%B5%81/1.png?raw=true" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;复制文件&quot;&gt;&lt;a href=&quot;#复制文件&quot; class=&quot;headerlink&quot; title=&quot;复制文件&quot;&gt;&lt;/a&gt;复制文件&lt;/h2&gt;&lt;p&gt;需要留意的是，read会返回实际的读取数量，有可能实际的读取数量小于缓冲的大小，那么把缓冲中的数据写出到目标文件的时候，就只应该写出部分数据。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.sanstylemc.cn/tags/Java/"/>
    
  </entry>
  
</feed>
